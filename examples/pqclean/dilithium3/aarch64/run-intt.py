#! /usr/bin/env python3

Q = 8380417
Q2 = Q//2 + 1
K=1753

itable = [
    0, 0, 915382907, 3572223, -963888510, -3761513, -964937599, -3765607, 820367122, 3201430, 806080660, 3145678, 738955404, 2883726, 820383522, 3201494, 312926867, 1221177, -142848732, -557458, 257592709, 1005239, -964747974, -3764867, -545785280, -2129892, -687336873, -2682288, -907762539, -3542485, 154181397, 601683, 8380417, 0, -585207070, -2283733, -476219497, -1858416, -857403734, -3345963, -447030292, 573161516, 492577742, 978523985, -1744507, 2236726, 1922253, 3818627, 187430119, 200355636, 967019376, -904878186, 731434, 781875, 3773731, -3531229, -270210213, -486888731, 1018462631, 77645096, -1054478, -1900052, 3974485, 303005, 8380417, 0, -721508096, -2815639, -475038184, -1853806, -747568486, -2917338, 603268097, -259126110, 84011120, -89383150, 2354215, -1011223, 327848, -348812, 100631253, 439933955, 561979013, -800464680, 392707, 1716814, 2193087, -3123762, -749801963, 772445769, -604333585, 559928242, -2926054, 3014420, -2358373, 2185084, 8380417, 0, 918682129, 3585098, -991769559, -3870317, -142694469, -556856, 117660617, 167401858, -592665232, 888589898, 459163, 653275, -2312838, 3467665, 388001774, -879049958, 141890356, 282732136, 1514152, -3430436, 553718, 1103344, -35937555, -220412084, -130212265, -795799901, -140244, -860144, -508145, -3105558, 8380417, 0, 164673562, 642628, -818041395, -3192354, 742437332, 2897314, 712065019, -687588511, 711287812, -347590090, 2778788, -2683270, 2775755, -1356448, 197425671, -55063046, -773976352, 3043996, 770441, -214880, -3020393, 11879, -139752717, -861908357, 351195274, -1023635298, -545376, -3363542, 1370517, -3994671, 8380417, 0, -374309300, -1460718, 1012201926, 3950053, 439978542, 1716988, -864652284, -749740976, 314332144, -999753034, -3374250, -2925816, 1226661, -3901472, 863376927, -519685171, -441577800, -658309618, 3369273, -2028038, -1723229, -2569011, -298172236, -426738094, 413979908, -1020029345, -1163598, -1665318, 1615530, -3980599, 8380417, 0, -628833668, -2453983, 496048908, 1935799, -962678241, -3756790, -159173408, -777970524, -630730945, 337655269, -621164, -3035980, -2461387, 1317678, 1030830548, -1063046068, -771248568, 86720197, 4022750, -4148469, -3009748, 338420, -192079267, 669544140, -678549029, 777397036, -749577, 2612853, -2647994, 3033742, 8380417, 0, -439288460, -1714295, 915957677, 3574466, 209493775, 817536, 605279149, 333129378, 1071872863, -892316032, 2362063, 1300016, 4182915, -3482206, 470097680, 304395785, 356997292, -510974714, 1834526, 1187885, 1393159, -1994046, 185731180, -130156402, -638402564, 378477722, 724804, -507927, -2491325, 1476985, 8380417, 0, 827143915, 3227876, -450833045, -1759347, -875112161, -3415069, 577774276, 612717067, -458160776, 660934133, 2254727, 2391089, -1787943, 2579253, 702999655, 302276083, 521163479, -539479988, 2743411, 1179613, 2033807, -2105286, -135295244, -150224382, 608441020, 415984810, -527981, -586241, 2374402, 1623354, 8380417, 0, 342333886, 1335936, -552488273, -2156050, -830756018, -3241972, -834980303, 832852657, -60323094, -444930577, -3258457, 3250154, -235407, -1736313, 558360247, 481719139, 889718424, 492511373, 2178965, 1879878, 3472069, 1921994, 209807681, -522531086, -1035301089, 117552223, 818761, -2039144, -4040196, 458740, 8380417, 0, -173376332, -676590, 1029866791, 4018989, -530906624, -2071829, 819295484, -509377762, 893898890, 1067647297, 3197248, -1987814, 3488383, 4166425, 568482643, -157142369, -643961400, -36345249, 2218467, -613238, -2513018, -141835, 335754661, 347191365, 22883400, -768294260, 1310261, 1354892, 89301, -2998219, 8380417, 0, 111244624, 434125, 898510625, 3506380, -280713909, -1095468, 854436357, -631001801, -43482586, 144935890, 3334383, -2462444, -169688, 565603, 3181859, -677264190, 983611064, -588375860, 12417, -2642980, 3838479, -2296099, -321386456, -818892658, -317727459, -960233614, -1254190, -3195676, -1239911, -3747250, 8380417, 0, 903139016, 3524442, -237992130, -928749, -101000509, -394148, 759080783, -294395108, -123678909, -391567239, 2962264, -1148858, -482649, -1528066, 814992530, 925511710, 442566669, 454226054, 3180456, 3611750, 1727088, 1772588, 68791907, -611800717, -561940831, 1062481036, 268456, -2387513, -2192938, 4146264, 8380417, 0, 429120452, 1674615, -297218217, -1159875, -949361686, -3704823, -1065510939, 284313712, 764594519, -720393920, -4158088, 1109516, 2983781, -2811291, 629190881, -162963861, 965793731, 873958779, 2455377, -635956, 3768948, 3410568, 64176841, 909946047, -686309310, 431820817, 250446, 3551006, -2678278, 1685153, 8380417, 0, -682491182, -2663378, -538486762, -2101410, 797147778, 3110818, 977780347, -496502727, -519705671, -642926661, 3815725, -1937570, -2028118, -2508980, 963363710, -409185979, 628875181, -210776307, 3759465, -1596822, 2454145, -822541, 1013967746, 507246529, -258649997, 7126831, 3956944, 1979497, -1009365, 27812, 8380417, 0, 1041158200, 4063053, 919027554, 3586446, -702264730, -2740543, 70227934, 799869667, 825844983, -1071989969, 274060, 3121440, 3222807, -4183372, 952468207, 588452222, 1016110510, -22347069, 3716946, 2296397, 3965306, -87208, 841760171, 1013916752, -163212680, -302950022, 3284915, 3956745, -636927, -1182243, 8380417, 0, 863652652, 3370349, -815613168, -3182878, -923069133, -3602218, -987079667, 675340520, -327391679, -787459213, -3852015, 2635473, -1277625, -3073009, -710479343, 456183549, 373072124, 495951789, -2772600, 1780227, 1455890, 1935420, 15156688, -681730119, 681503850, -449207, 59148, -2660408, 2659525, -1753
]

# return bits in MSB-first order
def to_msb_bits (n, sz):
    assert (n >= 0)
    rev_ret = []
    nb = 0
    while n > 0 or nb < sz:
        rev_ret.append (n % 2)
        n //= 2
        nb += 1
    rev_ret.reverse ()
    ret = [ 0 for i in range (sz - nb) ] + rev_ret
    return (ret)

# convert bits in MSB-first order
def from_msb_bits (bs):
    ret = 0
    for i in range (len (bs)):
        ret *= 2
        ret += bs[i]
    return ret

def bit_reverse (nums, sz):
    ret = []
    for i in range (len (nums)):
        bs = to_msb_bits (nums[i], sz)
        bs.reverse ()
        ret.append (from_msb_bits (bs))
    return ret

def print_parameters (base, c):
    for i in range (256):
        print ('int32 L0x{0:x}'.format (base + 4*i),
               end = ',\n' if i % 3 == 2 or i == 255  else ',')
    for i in range (256):
        print ('int32 {0}{1:02x}'.format (c, i),
               end = ',\n' if i == 255 or i % 7 == 6 else ',')
    print ('int32 Q, int32 Q2, int32 NQ, int32 NQ2, int32 X,')
    print ('int32 F')

def print_precondition (base, exps):
    print ('Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    for i in range (256):
        print ('eqmod (F**2) L0x{0:x} [Q, X - {1}**{2:3}] /\\'.
               format (base + 4*i, K, exps[i]))
    for i in range (0,256,4):
        print ('[NQ,NQ,NQ,NQ]<[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\'.
               format (base + 4*i, base + 4*(i+1),
                       base + 4*(i+2), base + 4*(i+3)))
        print ('[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<[Q,Q,Q,Q]'.
               format (base + 4*i, base + 4*(i+1),
                       base + 4*(i+2), base + 4*(i+3)),
               end = ' /\\\n' if i < 252 else '\n&&\n')
    print ('Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    for i in range (0,256,4):
        print ('[NQ,NQ,NQ,NQ]<s[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\'.
               format (base + 4*i, base + 4*(i+1),
                       base + 4*(i+2), base + 4*(i+3)))
        print ('[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<s[Q,Q,Q,Q]'.
               format (base + 4*i, base + 4*(i+1),
                       base + 4*(i+2), base + 4*(i+3)),
               end = ' /\\\n' if i < 252 else '\n')


def print_initialization (base, c):
    for i in range (256):
        print ('mov L0x{0:x} {1}{2:02x};'.format (base + 4*i, c, i),
               end = '\n' if i % 3 == 2 or i == 255 else ' ')

def print_constants (base, tbl):
    for i in range (len (tbl)):
        print ('mov L0x{0:x} ({1:11})@int32;'.format (base + 4*i, tbl[i]),
               end = '\n' if i % 2 == 1 or i == 255 else ' ')

def print_ghost2 (n, i0, i1):
    print ('ghost {1:>4}o{0:02x}@int32[4],{2:>4}o{0:02x}@int32[4]:'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} '.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1)),
           end = '')
    print ('&& {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4};'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1)))

def print_ghost4 (n, i0, i1, i2, i3):
    print ('ghost {1:>4}o{0:02x}@int32[4],{2:>4}o{0:02x}@int32[4],{3:>4}o{0:02x}@int32[4],{4:>4}o{0:02x}@int32[4]:'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4}'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('   && {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4};'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    
def print_ghost6 (n, i0, i1, i2, i3, i4, i5):
    print ('ghost {1:>4}o{0:02x}@int32[4],{2:>4}o{0:02x}@int32[4],{3:>4}o{0:02x}@int32[4],{4:>4}o{0:02x}@int32[4],'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x}@int32[4],{2:>4}o{0:02x}@int32[4]:'.
           format (n, '%v{0}'.format (i4), '%v{0}'.format (i5)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4} /\\'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4}'.
           format (n, '%v{0}'.format (i4), '%v{0}'.format (i5)))
    print ('   && {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4} /\\'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4};'.
           format (n, '%v{0}'.format (i4), '%v{0}'.format (i5)))

def print_ghost8 (n, i0, i1, i2, i3, i4, i5, i6, i7):
    print ('ghost {1:>4}o{0:02x}@int32[4],{2:>4}o{0:02x}@int32[4],{3:>4}o{0:02x}@int32[4],{4:>4}o{0:02x}@int32[4],'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x}@int32[4],{2:>4}o{0:02x}@int32[4],{3:>4}o{0:02x}@int32[4],{4:>4}o{0:02x}@int32[4]:'.
           format (n, '%v{0}'.format (i4), '%v{0}'.format (i5),
                      '%v{0}'.format (i6), '%v{0}'.format (i7)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4} /\\'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4}'.
           format (n, '%v{0}'.format (i4), '%v{0}'.format (i5),
                      '%v{0}'.format (i6), '%v{0}'.format (i7)))
    print ('   && {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4} /\\'.
           format (n, '%v{0}'.format (i0), '%v{0}'.format (i1),
                      '%v{0}'.format (i2), '%v{0}'.format (i3)))
    print ('      {1:>4}o{0:02x} = {1:>4} /\\ {2:>4}o{0:02x} = {2:>4} /\\'\
           '{3:>4}o{0:02x} = {3:>4} /\\ {4:>4}o{0:02x} = {4:>4};'.
           format (n, '%v{0}'.format (i4), '%v{0}'.format (i5),
                      '%v{0}'.format (i6), '%v{0}'.format (i7)))
    
def print_cut4(nc, n,
               # x0 = x0o<n> + x2, x1 = x0o<n> - x2 < x3*Q
               x0, x1, x2, f0, f1, f2, f3,
               # y0 = y0o<n> + y2, y1 = y0o<n> - y2 < y3*Q
               y0, y1, y2, g0, g1, g2, g3,
               j0, k0, l0, l00, l01, l02, l03,   # eqmod j0 (k0*l0) [Q,Q,Q,Q]
               j1, k1, l1, l10, l11, l12, l13,   # eqmod j1 (k1*l1) [Q,Q,Q,Q]
               c):
    print ('assert eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print ('       prove with [algebra solver isl, {0}] && true;'.
           format (c))
    print ('assume eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print ('    && [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q];\n'.
           format ('%v{0}'.format (j1)))

    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (x0), '%v{0}'.format (x1),
                   '%v{0}'.format (x2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (y0), '%v{0}'.format (y1),
                   '%v{0}'.format (y2), n))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print ('    prove with [{0}];'.format (c))

def print_cut4sum(nc, n,
                  # x0 = x0o<n> + x2, x1 = x0o<n> - x2 < f*Q
                  x0, x1, x2, f0, f1, f2, f3,
                  # y0 = y0o<n> + y2, y1 = y0o<n> - y2 < g*Q
                  y0, y1, y2, g0, g1, g2, g3,
                  c):
    print ('assert [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       prove with [algebra solver isl, {0}] && true;'.
           format (c))
    print ('assume [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    && [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q];'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))

    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (x0), '%v{0}'.format (x1),
                   '%v{0}'.format (x2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (y0), '%v{0}'.format (y1),
                   '%v{0}'.format (y2), n))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    prove with [{0}];'.format (c))

def print_cut8(nc, n,
               # u0 = u0o<n> + u2, u1 = u0o<n> - u2 < d3*Q
               u0, u1, u2, d0, d1, d2, d3,
               # v0 = y0o<n> + v2, v1 = v0o<n> - v2 < e3*Q
               v0, v1, v2, e0, e1, e2, e3,
               # x0 = x0o<n> + x2, x1 = x0o<n> - x2 < x3*Q
               x0, x1, x2, f0, f1, f2, f3,
               # y0 = y0o<n> + y2, y1 = y0o<n> - y2 < y3*Q
               y0, y1, y2, g0, g1, g2, g3,
               j0, k0, l0, l00, l01, l02, l03,   # eqmod j0 (k0*l0) [Q,Q,Q,Q]
               j1, k1, l1, l10, l11, l12, l13,   # eqmod j1 (k1*l1) [Q,Q,Q,Q]
               j2, k2, l2, l20, l21, l22, l23,   # eqmod j2 (k2*l2) [Q,Q,Q,Q]
               j3, k3, l3, l30, l31, l32, l33,   # eqmod j3 (k3*l3) [Q,Q,Q,Q]
               c):
    print ('assert eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2), '%v{0}o{1:02x}'.format (k2, n),
                   '%v{0}'.format (l2), l20, l21, l22, l23))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j3), '%v{0}o{1:02x}'.format (k3, n),
                   '%v{0}'.format (l3), l30, l31, l32, l33))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print ('       prove with [algebra solver isl, {0}] && true;'.
           format (c))
    print ('assume eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2), '%v{0}o{1:02x}'.format (k2, n),
                   '%v{0}'.format (l2), l20, l21, l22, l23))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j3), '%v{0}o{1:02x}'.format (k3, n),
                   '%v{0}'.format (l3), l30, l31, l32, l33))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print ('    && [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q];\n'.
           format ('%v{0}'.format (j3)))

    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (u0), '%v{0}'.format (u1),
                   '%v{0}'.format (u2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (v0), '%v{0}'.format (v1),
                   '%v{0}'.format (v2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (x0), '%v{0}'.format (x1),
                   '%v{0}'.format (x2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (y0), '%v{0}'.format (y1),
                   '%v{0}'.format (y2), n))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2), '%v{0}o{1:02x}'.format (k2, n),
                   '%v{0}'.format (l2), l20, l21, l22, l23))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j3), '%v{0}o{1:02x}'.format (k3, n),
                   '%v{0}'.format (l3), l30, l31, l32, l33))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print ('    prove with [{0}];'.format (c))
    
def print_cut8sum(nc, n,
                  # u0 = u0o<n> + u2, u1 = u0o<n> - u2 < d*Q
                  u0, u1, u2, d0, d1, d2, d3,
                  # v0 = v0o<n> + v2, v1 = v0o<n> - v2 < e*Q
                  v0, v1, v2, e0, e1, e2, e3,
                  # x0 = x0o<n> + x2, x1 = x0o<n> - x2 < f*Q
                  x0, x1, x2, f0, f1, f2, f3,
                  # y0 = y0o<n> + y2, y1 = y0o<n> - y2 < g*Q
                  y0, y1, y2, g0, g1, g2, g3,
                  c):
    print ('assert [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       prove with [algebra solver isl, {0}] && true;'.
           format (c))
    print ('assume [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    && [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q];'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))

    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (u0), '%v{0}'.format (u1),
                   '%v{0}'.format (u2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (v0), '%v{0}'.format (v1),
                   '%v{0}'.format (v2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (x0), '%v{0}'.format (x1),
                   '%v{0}'.format (x2), n))
    print ('    {0:>4} = {0:>4}o{3:02x} + {2:>4} /\\ {1:>4} = {0:>4}o{3:02x} - {2:>4} /\\'.
           format ('%v{0}'.format (y0), '%v{0}'.format (y1),
                   '%v{0}'.format (y2), n))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q]'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    prove with [{0}];'.format (c))

def print_cut16sum(nc, n,
                   # u0 = u2o<n> + u3o<n>, u1 = u2o<n> - u3o<n> < d*Q
                   u0, u1, u2, u3, d0, d1, d2, d3,
                   # v0 = v2o<n> + v3o<n>, v1 = v2o<n> - v3o<n> < e*Q
                   v0, v1, v2, v3, e0, e1, e2, e3,
                   # x0 = x2o<n> + x3o<n>, x1 = x2o<n> - x3o<n> < f*Q
                   x0, x1, x2, x3, f0, f1, f2, f3,
                   # y0 = y2o<n> + y3o<n>, y1 = y2o<n> - y3o<n> < g*Q
                   y0, y1, y2, y3, g0, g1, g2, g3,
                   # uu0 = uu2o<n> + uu3o<n>, uu1 = uu2o<n> - uu3o<n> < dd*Q
                   uu0, uu1, uu2, uu3, dd0, dd1, dd2, dd3,
                   # vv0 = vv2o<n> + vv3o<n>, vv1 = vv2o<n> - vv3o<n> < ee*Q
                   vv0, vv1, vv2, vv3, ee0, ee1, ee2, ee3,
                   # xx0 = xx2o<n> + xx3o<n>, xx1 = xx2o<n> - xx3o<n> < ff*Q
                   xx0, xx1, xx2, xx3, ff0, ff1, ff2, ff3,
                   # yy0 = yy2o<n> + yy3o<n>, yy1 = yy2o<n> - yy3o<n> < gg*Q
                   yy0, yy1, yy2, yy3, gg0, gg1, gg2, gg3,
                   c):
    print ('assert [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (uu0), dd0, dd1, dd2, dd3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (uu1), dd0, dd1, dd2, dd3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (vv0), ee0, ee1, ee2, ee3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (vv1), ee0, ee1, ee2, ee3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (xx0), ff0, ff1, ff2, ff3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (xx1), ff0, ff1, ff2, ff3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (yy0), gg0, gg1, gg2, gg3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (yy1), gg0, gg1, gg2, gg3))
    print ('       prove with [algebra solver isl, {0}] && true;'.
           format (c))
    print ('assume [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (uu0), dd0, dd1, dd2, dd3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (uu1), dd0, dd1, dd2, dd3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (vv0), ee0, ee1, ee2, ee3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (vv1), ee0, ee1, ee2, ee3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (xx0), ff0, ff1, ff2, ff3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (xx1), ff0, ff1, ff2, ff3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (yy0), gg0, gg1, gg2, gg3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (yy1), gg0, gg1, gg2, gg3))
    print ('    && [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (uu0), dd0, dd1, dd2, dd3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (uu1), dd0, dd1, dd2, dd3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (vv0), ee0, ee1, ee2, ee3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (vv1), ee0, ee1, ee2, ee3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (xx0), ff0, ff1, ff2, ff3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (xx1), ff0, ff1, ff2, ff3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (yy0), gg0, gg1, gg2, gg3))
    print ('       [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '       {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q];'.
           format ('%v{0}'.format (yy1), gg0, gg1, gg2, gg3))

    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (u0), '%v{0}'.format (u1),
                   '%v{0}'.format (u2), '%v{0}'.format (u3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (v0), '%v{0}'.format (v1),
                   '%v{0}'.format (v2), '%v{0}'.format (v3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (x0), '%v{0}'.format (x1),
                   '%v{0}'.format (x2), '%v{0}'.format (x3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (y0), '%v{0}'.format (y1),
                   '%v{0}'.format (y2), '%v{0}'.format (y3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (uu0), '%v{0}'.format (uu1),
                   '%v{0}'.format (uu2), '%v{0}'.format (uu3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (vv0), '%v{0}'.format (vv1),
                   '%v{0}'.format (vv2), '%v{0}'.format (vv3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (xx0), '%v{0}'.format (xx1),
                   '%v{0}'.format (xx2), '%v{0}'.format (xx3), n))
    print ('    {0:>4} = {2:>4}o{4:02x} + {3:>4}o{4:02x} /\\ {1:>4} = {2:>4}o{4:02x} - {3:>4}o{4:02x} /\\'.
           format ('%v{0}'.format (yy0), '%v{0}'.format (yy1),
                   '%v{0}'.format (yy2), '%v{0}'.format (yy3), n))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '    {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (uu0), dd0, dd1, dd2, dd3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (uu1), dd0, dd1, dd2, dd3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (vv0), ee0, ee1, ee2, ee3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (vv1), ee0, ee1, ee2, ee3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (xx0), ff0, ff1, ff2, ff3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (xx1), ff0, ff1, ff2, ff3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q] /\\'.
           format ('%v{0}'.format (yy0), gg0, gg1, gg2, gg3))
    print ('       [{1}*NQ,{2}*NQ,{3}*NQ,{4}*NQ] < {0:>4} /\\\n'\
           '       {0:>4} < [{1}*Q,{2}*Q,{3}*Q,{4}*Q]'.
           format ('%v{0}'.format (yy1), gg0, gg1, gg2, gg3))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u0), d0, d1, d2, d3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (u1), d0, d1, d2, d3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v0), e0, e1, e2, e3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (v1), e0, e1, e2, e3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x0), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (x1), f0, f1, f2, f3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y0), g0, g1, g2, g3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (y1), g0, g1, g2, g3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (uu0), dd0, dd1, dd2, dd3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (uu1), dd0, dd1, dd2, dd3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (vv0), ee0, ee1, ee2, ee3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (vv1), ee0, ee1, ee2, ee3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (xx0), ff0, ff1, ff2, ff3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (xx1), ff0, ff1, ff2, ff3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q] /\\'.
           format ('%v{0}'.format (yy0), gg0, gg1, gg2, gg3))
    print ('    [{1}@32*NQ,{2}@32*NQ,{3}@32*NQ,{4}@32*NQ] <s {0:>4} /\\\n'\
           '    {0:>4} <s [{1}@32*Q,{2}@32*Q,{3}@32*Q,{4}@32*Q]'.
           format ('%v{0}'.format (yy1), gg0, gg1, gg2, gg3))
    print ('    prove with [{0}];'.format (c))
    
def print_cut2eqmod (nc, n,
                     # eqmod j0 (k0*l0) [Q,Q,Q,Q]
                     j0, k0, l0, l00, l01, l02, l03,
                     # eqmod j1 (k1*l1) [Q,Q,Q,Q]
                     j1, k1, l1, l10, l11, l12, l13):
    print ('assert eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print ('       prove with [algebra solver isl] && true;')
    print ('assume eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print ('    && [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q];\n'.
           format ('%v{0}'.format (j1)))
    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j1)))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q];'.
           format ('%v{0}'.format (j1)))

def print_cut4eqmod (nc, n,
                     # eqmod j0 (k0*l0) [Q,Q,Q,Q]
                     j0, k0, l0, l00, l01, l02, l03,
                     # eqmod j1 (k1*l1) [Q,Q,Q,Q]
                     j1, k1, l1, l10, l11, l12, l13,
                     # eqmod j2 (k2*l2) [Q,Q,Q,Q]
                     j2, k2, l2, l20, l21, l22, l23,
                     # eqmod j3 (k3*l3) [Q,Q,Q,Q]
                     j3, k3, l3, l30, l31, l32, l33,
                     c):
    print ('assert eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2), '%v{0}o{1:02x}'.format (k2, n),
                   '%v{0}'.format (l2), l20, l21, l22, l23))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j3), '%v{0}o{1:02x}'.format (k3, n),
                   '%v{0}'.format (l3), l30, l31, l32, l33))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print ('       prove with [algebra solver isl, {0}] && true;'.
           format (c))
    print ('assume eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2), '%v{0}o{1:02x}'.format (k2, n),
                   '%v{0}'.format (l2), l20, l21, l22, l23))
    print ('       eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j3), '%v{0}o{1:02x}'.format (k3, n),
                   '%v{0}'.format (l3), l30, l31, l32, l33))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('       [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print ('    && [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('       [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q];\n'.
           format ('%v{0}'.format (j3)))
    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0), '%v{0}o{1:02x}'.format (k0, n),
                   '%v{0}'.format (l0), l00, l01, l02, l03))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1), '%v{0}o{1:02x}'.format (k1, n),
                   '%v{0}'.format (l1), l10, l11, l12, l13))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2), '%v{0}o{1:02x}'.format (k2, n),
                   '%v{0}'.format (l2), l20, l21, l22, l23))
    print ('    eqmod {0:>4} ({1:>7}*[{2:>4}[{3}],{2:>4}[{4}],{2:>4}[{5}],{2:>4}[{6}]]) [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j3), '%v{0}o{1:02x}'.format (k3, n),
                   '%v{0}'.format (l3), l30, l31, l32, l33))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('    [NQ,NQ,NQ,NQ] < {0:>4} /\\ {0:>4} < [Q,Q,Q,Q]'.
           format ('%v{0}'.format (j3)))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j0)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j1)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q] /\\'.
           format ('%v{0}'.format (j2)))
    print ('    [NQ,NQ,NQ,NQ] <s {0:>4} /\\ {0:>4} <s [Q,Q,Q,Q];'.
           format ('%v{0}'.format (j3)))

    
def print_midcut (nc, n, base, i0, i1, i2, i3, exp, c0, c1):
    print ('assert eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base, base + 0x4, base + 0x8, base + 0xc))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i0), n))
    print ('       eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base + 0x10, base + 0x14, base + 0x18, base + 0x1c))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i1), n))
    print ('       eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base + 0x200, base + 0x204, base + 0x208, base + 0x20c))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i2), n))
    print ('       eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base + 0x210, base + 0x214, base + 0x218, base + 0x21c))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i3), n))
    for i in range (2):
        for j in range (4):
            print ('       [NQ,NQ,NQ,NQ]<[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
                   '       [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<[Q,Q,Q,Q]'.
                   format (base + 0x200*i + 0x10*j,
                           base + 0x200*i + 0x10*j + 0x4,
                           base + 0x200*i + 0x10*j + 0x8,
                           base + 0x200*i + 0x10*j + 0xc),
                   end = '\n' if i == 1 and j == 3 else ' /\\\n')
    print ('       prove with [algebra solver ppl, {0}] && true;\n'.format (c0))
    print ('assume eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base, base + 0x4, base + 0x8, base + 0xc))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i0), n))
    print ('       eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base + 0x10, base + 0x14, base + 0x18, base + 0x1c))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i1), n))
    print ('       eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base + 0x200, base + 0x204, base + 0x208, base + 0x20c))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i2), n))
    print ('       eqmod [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
           format (base + 0x210, base + 0x214, base + 0x218, base + 0x21c))
    print ('             {0:>4}o{1:02x} [Q, Q, Q, Q] /\\'.
           format ('%v{0}'.format (i3), n))
    for i in range (2):
        for j in range (4):
            print ('       [NQ,NQ,NQ,NQ]<[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
                   '       [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<[Q,Q,Q,Q]'.
                   format (base + 0x200*i + 0x10*j,
                           base + 0x200*i + 0x10*j + 0x4,
                           base + 0x200*i + 0x10*j + 0x8,
                           base + 0x200*i + 0x10*j + 0xc),
                   end = ' &&\n' if i == 1 and j == 3 else ' /\\\n')
    for i in range (2):
        for j in range (4):
            print ('       [NQ,NQ,NQ,NQ]<s[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
                   '       [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<s[Q,Q,Q,Q]'.
                   format (base + 0x200*i + 0x10*j,
                           base + 0x200*i + 0x10*j + 0x4,
                           base + 0x200*i + 0x10*j + 0x8,
                           base + 0x200*i + 0x10*j + 0xc),
                   end = ';\n' if i == 1 and j == 3 else ' /\\\n')
    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    print ('    eqmod (poly X [', end = '')
    for i in range (16):
        print ('L0x{0:x}'.format (base + 4*i),
               end = '])\n          ' if i == 15 else
                     ',\n                   ' if i % 4 == 3 else ',')
    print ('(16*F**2) [Q, X**16 - {0}**{1:3}] /\\'.
           format (K, exp))
    print ('    eqmod (poly X [', end = '')
    for i in range (16):
        print ('L0x{0:x}'.format (base + 0x200 + 4*i),
               end = '])\n          ' if i == 15 else
                     ',\n                   ' if i % 4 == 3 else ',')
    print ('(16*F**2) [Q, X**16 - {0}**{1:3}] /\\'.
           format (K, exp + 32))
    for i in range (2):
        for j in range (4):
            print ('    [NQ,NQ,NQ,NQ]<[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
                   '    [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<[Q,Q,Q,Q]'.
                   format (base + 0x200*i + 0x10*j,
                           base + 0x200*i + 0x10*j + 0x4,
                           base + 0x200*i + 0x10*j + 0x8,
                           base + 0x200*i + 0x10*j + 0xc),
                   end = '\n' if i == 1 and j == 3 else ' /\\\n')
    print ('    prove with [all ghosts, precondition, {0}]'.format (c1))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    for i in range (2):
        for j in range (4):
            print ('    [NQ,NQ,NQ,NQ]<s[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
                   '    [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<s[Q,Q,Q,Q]'.
                   format (base + 0x200*i + 0x10*j,
                           base + 0x200*i + 0x10*j + 0x4,
                           base + 0x200*i + 0x10*j + 0x8,
                           base + 0x200*i + 0x10*j + 0xc),
                   end = ';\n' if i == 1 and j == 3 else ' /\\\n')

def print_midcondition (nc, base, exps, c):
    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2))
    for i in range (16):
        print ('eqmod (poly X [', end = '')
        for j in range (16):
            print ('L0x{0:x}'.format (base + 4*(16*i+j)),
                   end = '])\n      ' if j == 15 else
                         ',\n               ' if j % 4 == 3 else ',')
        print ('(16*F**2) [Q, X**16 - {0}**{1}] /\\'.
               format (K, exps[i]))
    for i in range (64):
        print ('[NQ,NQ,NQ,NQ]<[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
               '[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<[Q,Q,Q,Q]'.
               format (base + 0x10*i, base + 0x10*i + 0x4,
                       base + 0x10*i + 0x8, base + 0x10*i + 0xc),
               end = '\n' if i == 63 else ' /\\\n')
    print ('prove with [{0}] && '.format (c))
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2))
    for i in range (64):
        print ('[NQ,NQ,NQ,NQ]<s[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}] /\\\n'\
               '[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<s[Q,Q,Q,Q]'.
               format (base + 0x10*i, base + 0x10*i + 0x4,
                       base + 0x10*i + 0x8, base + 0x10*i + 0xc),
               end = '\n' if i == 63 else ' /\\\n')
    print ('prove with [{0}];'.format (c))
        
def print_centralreduction (nc, n, base, idxs, c0, c1):
    print ('assert true &&', end = '\n       ')
    for i in range (len (idxs)):
        print ('eqsmod [', end = '')
        for j in range (4):
            print ('L0x{0:x}'.format (base + 0x40*i + 4*j),
                   end = ']\n              ' if j == 3 else ',')
        print ('{0:>4} [Q, Q, Q, Q]'.
               format ('%v{0}o{1:02x}'.format (idxs[i], n)),
               end = '\n       ' if i == len (idxs) - 1 else ' /\\\n       ')
    print ('prove with [{0}];'.format (c0))
    print ('assume ', end = '')
    for i in range (len (idxs)):
        print ('eqmod [', end = '')
        for j in range (4):
            print ('L0x{0:x}'.format (base + 0x40*i + 4*j),
                   end = ']\n             ' if j == 3 else ',')
        print ('{0:>4} [Q, Q, Q, Q]'.
               format ('%v{0}o{1:02x}'.format (idxs[i], n)),
               end = ' && true;\n' if i == len (idxs) - 1 else ' /\\\n       ')
    print ('(* CUT {0} *)'.format (nc))
    print ('cut  Q = {0} /\\ Q2 = {1} /\\ NQ = {2} /\\ NQ2 = {3} /\\'.
           format (Q, Q2, -Q, -Q2),
           end = '\n    ')
    for i in range (len (idxs)):
        print ('eqmod [', end = '')
        for j in range (4):
            print ('L0x{0:x}'.format (base + 0x40*i + 4*j),
                   end = ']\n          ' if j == 3 else ',')
        print ('{0:>4} [Q, Q, Q, Q]'.
               format ('%v{0}o{1:02x}'.format (idxs[i], n)),
               end = '\n' if i == len (idxs) - 1 else ' /\\\n    ')
    print (' && Q={0}@32 /\\ Q2={1}@32 /\\ NQ=({2})@32 /\\ NQ2=({3})@32 /\\'.
           format (Q, Q2, -Q, -Q2),
           end = '\n    ')
    for i in range (len (idxs)):
        print ('[NQ2,NQ2,NQ2,NQ2]<s[L0x{0:x},L0x{0:x},L0x{0:x},L0x{0:x}] /\\'.
               format (base + 0x40*i + 0, base + 0x40*i + 4,
                       base + 0x40*i + 8, base + 0x40*i + 12),
               end = '\n    ')
        print ('[L0x{0:x},L0x{0:x},L0x{0:x},L0x{0:x}]<s[Q2,Q2,Q2,Q2]'.
               format (base + 0x40*i + 0, base + 0x40*i + 4,
                       base + 0x40*i + 8, base + 0x40*i + 12),
               end = '\n    ' if i == len (idxs) - 1 else ' /\\\n    ')
    print ('prove with [{0}];'.format (c1))

def print_postcondition (base, c):
    print ('eqmod (poly X [', end = '')
    for i in range (256):
        print ('L0x{0:x}'.format (base + 4*i),
               end = '])\n      ' if i == 255 else
                     ',\n               ' if i % 4 == 3 else ',')
    print ('(2**32*F**2) [Q, X**256 - {0}**256]'.
           format (K))
    print ('prove with [all ghosts, {0}]\n&&'.format (c))
    for i in range (0, 256, 4):
        print ('[NQ2,NQ2,NQ2,NQ2]<s[L0x{0:x},L0x{0:x},L0x{0:x},L0x{0:x}] /\\'.
               format (base + 4*(i + 0), base + 4*(i + 1),
                       base + 4*(i + 2), base + 4*(i + 3)))
        print ('[L0x{0:x},L0x{0:x},L0x{0:x},L0x{0:x}]<s[Q2,Q2,Q2,Q2]'.
               format (base + 4*(i + 0), base + 4*(i + 1),
                       base + 4*(i + 2), base + 4*(i + 3)),
               end = '\n' if i == 252 else ' /\\\n')
    print ('prove with [{0}]'.format (c))
        
    
exps16 = bit_reverse (range (16, 32), 9)
exps256 = bit_reverse (range (256, 512), 9)
    
print ('\n\n\n(**************** parameters ****************)\n\n')
print_parameters (0xffffffff0610, 'A')
print ('\n\n\n(**************** precondition ****************)\n\n')
print_precondition (0xffffffff0610, exps256)
print ('\n\n\n(**************** nondets ****************)\n\n')
print ('nondet x0@uint64;')
print ('nondet x19@uint64; nondet x20@uint64; nondet x21@uint64; nondet x22@uint64;')
print ('nondet x23@uint64; nondet x24@uint64; nondet x25@uint64; nondet x26@uint64;')
print ('nondet x27@uint64; nondet x28@uint64; nondet x29@uint64; nondet x30@uint64;')
print ('nondet  d8@uint64; nondet  d9@uint64; nondet d10@uint64; nondet d11@uint64;')
print ('nondet d12@uint64; nondet d13@uint64; nondet d14@uint64; nondet d15@uint64;')
print ('\n\n\n(**************** constants ****************)\n\n')
print ('mov L0x4159a0 {0}@int32;'.format (Q))
print ('mov L0x4159a8 0x0000000100000100@int64;')
print ('mov L0x4159b0 {0}@int32;'.format (4197891))
print ('mov L0x4159b4 {0}@int32;'.format (16382))
print ('mov L0x4159b8 ({0})@int32;'.format (-75523344))
print ('mov L0x4159bc ({0})@int32;'.format (-294725))
print_constants (0x416260, itable)

for i in range (8):
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 0))
    print_ghost2 (5*i + 0, 0, 2)
    print_cut4sum (11*i + 0, 5*i + 0,
                   0, 12, 1, 2, 2, 2, 2,
                   2, 13, 3, 2, 2, 2, 2, 'precondition')

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 1))
    print_ghost4 (5*i + 0, 16, 18, 12, 13)
    print_cut4 (11*i + 1, 5*i + 0,
                16, 28, 17, 2, 2, 2, 2,
                18, 29, 19, 2, 2, 2, 2,
                1, 12, 9, 0, 1, 2, 3,
                3, 13, 11, 0, 1, 2, 3, 'precondition')
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 2))
    print_ghost4 (5*i + 1, 0, 1, 28, 29)
    print_cut4 (11*i + 2, 5*i + 1,
                0, 12, 2, 4, 4, 4, 4,
                1, 13, 3, 2, 2, 2, 2,
                17, 28, 25, 0, 1, 2, 3,
                19, 29, 27, 0, 1, 2, 3, 'cuts [{0}]'.format (11*i))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 3))
    print_ghost4 (5*i + 1, 16, 17, 12, 13)
    print_cut4 (11*i + 3, 5*i + 1,
                16, 28, 18, 4, 4, 4, 4,
                17, 29, 19, 2, 2, 2, 2,
                2, 12, 7, 0, 1, 2, 3,
                3, 13, 7, 0, 1, 2, 3, 'cuts [{0}]'.format (11*i + 1))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 4))
    print_ghost2 (5*i + 2, 28, 29)
    print_cut2eqmod (11*i + 4, 5*i + 2,
                     18, 28, 23, 0, 1, 2, 3,
                     19, 29, 23, 0, 1, 2, 3)
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 5))
    print_ghost2 (5*i + 2, 0, 2)
    print_cut4sum (11*i + 5, 5*i + 2,
                   0, 12, 1, 8, 4, 2, 2,
                   2, 13, 3, 8, 4, 2, 2,
                   'cuts [{0}, {1}]'.format (11*i + 2, 11*i + 3))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 6))
    print_ghost4 (5*i + 2, 16, 18, 12, 13)
    print_cut4 (11*i + 6, 5*i + 2,
                16, 28, 17, 8, 4, 2, 2,
                18, 29, 19, 8, 4, 2, 2,
                1, 12, 5, 1, 1, 1, 1,
                3, 13, 5, 3, 3, 3, 3,
                'cuts [{0}, {1}]'.format (11*i + 3, 11*i + 4))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 7))
    print_ghost4 (5*i + 3, 0, 1, 28, 29)
    print_cut4 (11*i + 7, 5*i + 3,
                0, 12, 2, 16, 8, 4, 4,
                1, 13, 3, 2, 2, 2, 2,
                17, 28, 21, 1, 1, 1, 1,
                19, 29, 21, 3, 3, 3, 3,
                'cuts [{0}]'.format (11*i + 5))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 8))
    print_ghost4 (5*i + 3, 16, 17, 12, 13)
    print_cut4 (11*i + 8, 5*i + 3,
                16, 28, 18, 16, 8, 4, 4,
                17, 29, 19, 2, 2, 2, 2,
                2, 12, 4, 3, 3, 3, 3,
                3, 13, 4, 3, 3, 3, 3,
                'cuts [{0}]'.format (11*i + 6))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 9))
    print_ghost2 (5*i + 4, 28, 29)
    print_cut2eqmod (11*i + 9, 5*i + 4,
                     18, 28, 20, 3, 3, 3, 3,
                     19, 29, 20, 3, 3, 3, 3)
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (11*i + 10))
    print_ghost4 (5*i + 4, 0, 1, 16, 17)
    print_midcut (11*i + 10, 5*i + 4,
                  0xffffffff0610+0x40*i, 0, 1, 16, 17, exps16[i],
                  'cuts [{0}, {1}]'.format (11*i + 7, 11*i + 8),
                  'cuts [{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}]'.
                  format (11*i, 11*i+1, 11*i+2, 11*i+3, 11*i+4, 11*i+5,
                          11*i+6, 11*i+7, 11*i+8, 11*i+9))

print ('\n\n\n(**************** midcondition ****************)\n\n')
print_midcondition (88, 0xffffffff0610, exps16,
                    'cuts [10, 21, 32, 43, 54, 65, 76 ,87]')

for i in range (4):
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (89+13*i))
    print ('(*\nw21 = 4190208 /\\ w22 = -4190208 /\\\n'\
           'w21 = 4190208@32 /\ w22 = (-4190208)@32 /\\n*)')
    print_ghost8 (40+7*i, 0, 2, 4, 6, 8, 10, 12, 14)
    print_cut8sum (89+13*i, 40+7*i,
                   0, 16, 1, 2, 2, 2, 2,
                   2, 17, 3, 2, 2, 2, 2,
                   4, 18, 5, 2, 2, 2, 2,
                   6, 19, 7, 2, 2, 2, 2,
                   'cuts [88]')

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (90+13*i))
    print_ghost8 (41+7*i, 8, 10, 12, 14, 16, 17, 18, 19)
    print_cut8 (90+13*i, 41+7*i,
                8, 28,  9, 2, 2, 2, 2,
                10, 29, 11, 2, 2, 2, 2,
                12, 30, 13, 2, 2, 2, 2,
                14, 31, 15, 2, 2, 2, 2,
                1, 16, 24, 1, 1, 1, 1,
                3, 17, 24, 3, 3, 3, 3,
                5, 18, 25, 1, 1, 1, 1,
                7, 19, 25, 3, 3, 3, 3,
                'cuts [88]')

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (91+13*i))
    print_ghost8 (41+7*i, 0, 1, 4, 5, 28, 29, 30, 31)
    print_cut8 (91+13*i, 41+7*i,
                0, 16,  2, 4, 4, 4, 4,
                1, 17,  3, 4, 4, 4, 4,
                4, 18,  6, 4, 4, 4, 4,
                5, 19,  7, 4, 4, 4, 4,
                9, 28, 26, 1, 1, 1, 1,
                11, 29, 26, 3, 3, 3, 3,
                13, 30, 27, 1, 1, 1, 1,
                15, 31, 27, 3, 3, 3, 3,
                'cuts [{0}]'.format (89+13*i))

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (92+13*i))
    print_ghost8 (42+7*i, 8, 9, 12, 13, 16, 17, 18, 19)
    print_cut8 (92+13*i, 42+7*i,
                8, 28, 10, 4, 4, 4, 4,
                9, 29, 11, 4, 4, 4, 4,
                12, 30, 14, 4, 4, 4, 4,
                13, 31, 15, 4, 4, 4, 4,
                2, 16, 22, 1, 1, 1, 1,
                3, 17, 22, 1, 1, 1, 1,
                6, 18, 22, 3, 3, 3, 3,
                7, 19, 22, 3, 3, 3, 3,
                'cuts [{0}]'.format (90+13*i))

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (93+13*i))
    print_ghost8 (42+7*i, 0, 1, 2, 3, 28, 29, 30, 31)
    print_cut8 (93+13*i, 42+7*i,
                0, 16,  4, 8, 8, 8, 8,
                1, 17,  5, 8, 8, 8, 8,
                2, 18,  6, 8, 8, 8, 8,
                3, 19,  7, 8, 8, 8, 8,
                10, 28, 23, 1, 1, 1, 1,
                11, 29, 23, 1, 1, 1, 1,
                14, 30, 23, 3, 3, 3, 3,
                15, 31, 23, 3, 3, 3, 3,
                'cuts [{0}]'.format (91+13*i))

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (94+13*i))
    print_ghost8 (43+7*i, 8, 9, 10, 11, 16, 17, 18, 19)
    print_cut8 (94+13*i, 43+7*i,
                8, 28, 12, 8, 8, 8, 8,
                9, 29, 13, 8, 8, 8, 8,
                10, 30, 14, 8, 8, 8, 8,
                11, 31, 15, 8, 8, 8, 8,
                4, 16, 21, 1, 1, 1, 1,
                5, 17, 21, 1, 1, 1, 1,
                6, 18, 21, 1, 1, 1, 1,
                7, 19, 21, 1, 1, 1, 1,
                'cuts [{0}]'.format (92+13*i))

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (95+13*i))
    print_ghost4 (43+7*i, 28, 29, 30, 31)
    print_cut4eqmod (95+13*i, 43+7*i,
                     12, 28, 21, 3, 3, 3, 3,
                     13, 29, 21, 3, 3, 3, 3,
                     14, 30, 21, 3, 3, 3, 3,
                     15, 31, 21, 3, 3, 3, 3,
                     'cuts [{0}]'.format (94+13*i))

    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (96+13*i))
    print_ghost8 (44+7*i, 0, 1, 2, 3, 4, 5, 6, 7)
    print_ghost8 (44+7*i, 8, 9, 10, 11, 12, 13, 14, 15)
    print_cut16sum (96+13*i, 44+7*i,
                    16, 28,  0,  8, 16, 16, 16, 16,
                    17, 29,  2, 10, 16, 16, 16, 16,
                    18, 30,  4, 12, 16, 16, 16, 16,
                    19, 31,  6, 14, 16, 16, 16, 16,
                    0,  8,  1,  9, 16, 16, 16, 16,
                    2, 10,  3, 11, 16, 16, 16, 16,
                    4, 12,  5, 13, 16, 16, 16, 16,
                    6, 14,  7, 15, 16, 16, 16, 16,
                    'cuts [{0}, {1}]'.format (93+13*i, 94+13*i))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (97+13*i))
    print_ghost4 (45+7*i, 0, 2, 4, 6)
    print_cut4eqmod (97+13*i, 45+7*i,
                     1,  0, 20, 3, 3, 3, 3,
                     3,  2, 20, 3, 3, 3, 3,
                     5,  4, 20, 3, 3, 3, 3,
                     7,  6, 20, 3, 3, 3, 3,
                     'cuts [{0}]'.format (96+13*i))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (98+13*i))
    print_ghost4 (45+7*i, 16, 17, 18, 19)
    print_cut4eqmod (98+13*i, 45+7*i,
                     0, 16, 20, 3, 3, 3, 3,
                     2, 17, 20, 3, 3, 3, 3,
                     4, 18, 20, 3, 3, 3, 3,
                     6, 19, 20, 3, 3, 3, 3,
                     'cuts [{0}]'.format (96+13*i))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (99+13*i))
    print_ghost4 (45+7*i, 8, 10, 12, 14)
    print_cut4eqmod (99+13*i, 45+7*i,
                     9,  8, 20, 3, 3, 3, 3,
                     11, 10, 20, 3, 3, 3, 3,
                     13, 12, 20, 3, 3, 3, 3,
                     15, 14, 20, 3, 3, 3, 3,
                     'cuts [{0}]'.format (96+13*i))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (100+13*i))
    print_ghost4 (45+7*i, 28,29,30,31)
    print_cut4eqmod (100+13*i, 45+7*i,
                     8, 28, 20, 3, 3, 3, 3,
                     10, 29, 20, 3, 3, 3, 3,
                     12, 30, 20, 3, 3, 3, 3,
                     14, 31, 20, 3, 3, 3, 3,
                     'cuts [{0}]'.format (96+13*i))
    print ('\n\n\n(**************** {0} ****************)\n\n'.
           format (101+13*i))
    print_ghost8 (46+7*i, 0, 1, 2, 3, 4, 5, 6, 7)
    print_ghost8 (46+7*i, 8, 9, 10, 11, 12, 13, 14, 15)
    print_centralreduction (101+13*i, 46+7*i,
                            0xffffffff0610 + 0x10*i, range (16),
                            'cuts [89]',
                            'cuts [89, {0}, {1}, {2}, {3}]'.
                            format (97+13*i, 98+13*i, 99+13*i, 100+13*i))

print ('\n\n\n(**************** postcondition ****************)\n\n')
print_postcondition (0xffffffff0610, 'cuts {0}'.
                     format ([ i for i in range (88,141)]))
