Q=3329
K=17

twiddles = [
    0, 0, 15749, 1600, 394, 40, 7373, 749, -8347, -848, 14095, 1432, -6201, -630, 6762, 687, 15582, 1583, -5601, -569, 679, 69, 5345, 543, -7845, -797, -1900, -193, 13879, 1410, -10453, -1062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8081, -8081, -13121, -13121, 13338, 13338, 10719, 10719, -821, -821, -1333, -1333, 1355, 1355, 1089, 1089, -8957, -8957, 13918, 13918, 2156, 2156, -325, -325, -910, -910, 1414, 1414, 219, 219, -33, -33, -12078, -12078, -12993, -12993, 8416, 8416, 4567, 4567, -1227, -1227, -1320, -1320, 855, 855, 464, 464, 11566, 11566, -6309, -6309, -10129, -10129, 9262, 9262, 1175, 1175, -641, -641, -1029, -1029, 941, 941, -8711, -8711, -2638, -2638, 14322, 14322, 8780, 8780, -885, -885, -268, -268, 1455, 1455, 892, 892, 3878, 3878, 9764, 9764, -11930, -11930, 10050, 10050, 394, 394, 992, 992, -1212, -1212, 1021, 1021, 11999, 11999, -7215, -7215, 15818, 15818, -9243, -9243, 1219, 1219, -733, -733, 1607, 1607, -939, -939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4429, 4429, -551, -551, 9213, 9213, 2786, 2786, 450, 450, -56, -56, 936, 936, 283, 283, -6378, -6378, -6221, -6221, 7008, 7008, 13308, 13308, -648, -648, -632, -632, 712, 712, 1352, 1352, -14578, -14578, 8032, 8032, 6713, 6713, -6398, -6398, -1481, -1481, 816, 816, 682, 682, -650, -650, -8721, -8721, 6319, 6319, -10099, -10099, 15159, 15159, -886, -886, 642, 642, -1026, -1026, 1540, 1540, 5453, 5453, -14381, -14381, -3967, -3967, 5315, 5315, 554, 554, -1461, -1461, -403, -403, 540, 540, 11605, 11605, -9371, -9371, -10749, -10749, -16251, -16251, 1179, 1179, -952, -952, -1092, -1092, -1651, -1651, -11251, -11251, 14588, 14588, 5168, 5168, 16005, 16005, -1143, -1143, 1482, 1482, 525, 525, 1626, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4400, 4400, -14529, -14529, -5266, -5266, -13180, -13180, 447, 447, -1476, -1476, -535, -535, -1339, -1339, 9125, 9125, 12540, 12540, 4538, 4538, 10089, 10089, 927, 927, 1274, 1274, 461, 461, 1025, 1025, -15099, -15099, 10355, 10355, -14155, -14155, -11782, -11782, -1534, -1534, 1052, 1052, -1438, -1438, -1197, -1197, 7235, 7235, 2746, 2746, -7451, -7451, -2293, -2293, 735, 735, 279, 279, -757, -757, -233, -233, 8495, 8495, 3091, 3091, 5473, 5473, 472, 472, 863, 863, 314, 314, 556, 556, 48, 48, -5522, -5522, 11546, 11546, -3140, -3140, 6565, 6565, -561, -561, 1173, 1173, -319, -319, 667, 667, 12107, 12107, -7441, -7441, -10463, -10463, -13869, -13869, 1230, 1230, -756, -756, -1063, -1063, -1409, -1409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12156, 12156, 8682, 8682, -14036, -14036, -2914, -2914, 1235, 1235, 882, 882, -1426, -1426, -296, -296, -4449, -4449, 15483, 15483, -14125, -14125, -3258, -3258, -452, -452, 1573, 1573, -1435, -1435, -331, -331, -7943, -7943, 748, 748, 9942, 9942, -2845, -2845, -807, -807, 76, 76, 1010, 1010, -289, -289, -16192, -16192, -10828, -10828, 1073, 1073, 6693, 6693, -1645, -1645, -1100, -1100, 109, 109, 680, 680, 12196, 12196, 10247, 10247, 12717, 12717, -5739, -5739, 1239, 1239, 1041, 1041, 1292, 1292, -583, -583, 7678, 7678, -7117, -7117, 10148, 10148, 5591, 5591, 780, 780, -723, -723, 1031, 1031, 568, 568, -3691, -3691, -16113, -16113, -15592, -15592, -167, -167, -375, -375, -1637, -1637, -1584, -1584, -17, -17
    ]

exps = [1, 128+1,
        1+64, 1+64+128,
        1+32, 1+32+128, 1+32+64, 1+32+64+128,
        1+16, 1+16+128, 1+16+64, 1+16+64+128, 1+16+32, 1+16+32+128, 1+16+32+64, 1+16+32+64+128,
        1+8, 1+8+128, 1+8+64, 1+8+64+128, 1+8+32, 1+8+32+128, 1+8+32+64, 1+8+32+64+128, 1+8+16, 1+8+16+128, 1+8+16+64, 1+8+16+64+128, 1+8+16+32, 1+8+16+32+128, 1+8+16+32+64, 1+8+16+32+64+128,
        1+4, 1+4+128, 1+4+64, 1+4+64+128, 1+4+32, 1+4+32+128, 1+4+32+64, 1+4+32+64+128, 1+4+16, 1+4+16+128, 1+4+16+64, 1+4+16+64+128, 1+4+16+32, 1+4+16+32+128, 1+4+16+32+64, 1+4+16+32+64+128, 1+4+8, 1+4+8+128, 1+4+8+64, 1+4+8+64+128, 1+4+8+32, 1+4+8+32+128, 1+4+8+32+64, 1+4+8+32+64+128, 1+4+8+16, 1+4+8+16+128, 1+4+8+16+64, 1+4+8+16+64+128, 1+4+8+16+32, 1+4+8+16+32+128, 1+4+8+16+32+64, 1+4+8+16+32+64+128,
        1+2, 1+2+128, 1+2+64, 1+2+64+128, 1+2+32, 1+2+32+128, 1+2+32+64, 1+2+32+64+128, 1+2+16, 1+2+16+128, 1+2+16+64, 1+2+16+64+128, 1+2+16+32, 1+2+16+32+128, 1+2+16+32+64, 1+2+16+32+64+128, 1+2+8, 1+2+8+128, 1+2+8+64, 1+2+8+64+128, 1+2+8+32, 1+2+8+32+128, 1+2+8+32+64, 1+2+8+32+64+128, 1+2+8+16, 1+2+8+16+128, 1+2+8+16+64, 1+2+8+16+64+128, 1+2+8+16+32, 1+2+8+16+32+128, 1+2+8+16+32+64, 1+2+8+16+32+64+128, 1+2+4, 1+2+4+128, 1+2+4+64, 1+2+4+64+128, 1+2+4+32, 1+2+4+32+128, 1+2+4+32+64, 1+2+4+32+64+128, 1+2+4+16, 1+2+4+16+128, 1+2+4+16+64, 1+2+4+16+64+128, 1+2+4+16+32, 1+2+4+16+32+128, 1+2+4+16+32+64, 1+2+4+16+32+64+128, 1+2+4+8, 1+2+4+8+128, 1+2+4+8+64, 1+2+4+8+64+128, 1+2+4+8+32, 1+2+4+8+32+128, 1+2+4+8+32+64, 1+2+4+8+32+64+128, 1+2+4+8+16, 1+2+4+8+16+128, 1+2+4+8+16+64, 1+2+4+8+16+64+128, 1+2+4+8+16+32, 1+2+4+8+16+32+128, 1+2+4+8+16+32+64, 1+2+4+8+16+32+64+128]

def parameters (base, a, f):
    for i in range (256):
        print ('int16 L0x{0:x}'.format (base + 2*i),
               end = ',\n' if i % 4 == 3 else ',')
    for i in range (256):
        print ('int16 {0}{1:02x}'.format (a, i),
               end = ',\n' if i % 8 == 7 else ',')
    for i in range (32):
        print ('int16 {0}{1:x}{2}'.format (f, i//2, 8*(i%2)),
               end = ',\n' if i % 8 == 7 else ',')
    print ('int16 Q, int16 Q2, int16 NQ, int16 NQ2, int16 F, int16 X')

def F (f, a, i, j):
    print ('{0}{1:x}{2}**2='.format (f, i, 8*j), end = '')
    for k in range (8):
        print ('{0}{1:02x}*X**{1:3}'.format (a, 0x10*i+8*j+k),
               end = ' /\\\n' if k == 7 else
                     '+\n       ' if k % 4 == 3 else '+')

def preconditions (base):
    print ('   Q = 3329 /\\ Q2 = 1665 /\\ NQ = -3329 /\\ NQ2 = -1665 /\\')
    for i in range (128):
        print ('   eqmod (poly X [L0x{0:x},L0x{1:x}]) (F**2) [Q,X**2-17**{2:3}] /\\'.
               format (base + 4*i, base + 4*i + 2, exps[i]))
    for i in range (16):
        for j in range (2):
            F ('F', 'A', i, j)
    print ('F**2=', end = '')
    for i in range (16):
        for j in range (2):
            print ('F{0:x}{1}**2'.format (i, 8*j),
                   end = ' /\\\n' if i == 15 and j == 1 else
                         '+\n     ' if i%4 == 3 and j == 1 else '+')
    for i in range (64):
        print ('/\\ [NQ,NQ,NQ,NQ]<[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
               format (base + 8*i, base + 8*i+2, base + 8*i+4, base + 8*i+ 6))
        print ('/\\ [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<[Q,Q,Q,Q]'.
               format (base + 8*i, base + 8*i+2, base + 8*i+4, base + 8*i+ 6))
    print ('&& Q = 3329@16 /\\ Q2 = 1665@16 /\\ NQ = (-3329)@16 /\\ NQ2 = (-1665)@16')
    for i in range (64):
        print ('/\\ [NQ,NQ,NQ,NQ]<s[L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]'.
               format (base + 8*i, base + 8*i+2, base + 8*i+4, base + 8*i+ 6))
        print ('/\\ [L0x{0:x},L0x{1:x},L0x{2:x},L0x{3:x}]<s[Q,Q,Q,Q]'.
               format (base + 8*i, base + 8*i+2, base + 8*i+4, base + 8*i+ 6))

def nondets ():
    print ('nondet  sp@uint64;nondet  x0@uint64;nondet  x1@uint64;')
    print ('nondet x19@uint64;nondet x20@uint64;nondet x21@uint64;nondet x22@uint64;')
    print ('nondet x23@uint64;nondet x24@uint64;nondet x25@uint64;nondet x26@uint64;')
    print ('nondet x27@uint64;nondet x28@uint64;')
    print ('nondet  %v0@int16[8];nondet  %v8@int16[8];nondet  %v9@int16[8];')
    print ('nondet %v10@int16[8];nondet %v11@int16[8];nondet %v12@int16[8];')
    print ('nondet %v13@int16[8];nondet %v14@int16[8];nondet %v15@int16[8];')

def constants (base, table):
    for i in range (len (table)):
        print ('mov L0x{0:x} ({1:6})@int16;'.format (base + 2*i, table[i]),
               end = '\n' if i % 2 == 1 else ' ')
    print ()

print ('\n\n\n(**************** parameters ****************)\n')
parameters (0xffffffffc3a0, 'A', 'F')
print ('\n\n\n(**************** preconditions ****************)\n')
preconditions (0xffffffffc3a0)
print ('\n\n\n(**************** nondets ****************)\n')
nondets ()
print ('\n\n\n(**************** constants ****************)\n')
print ('mov L0x414860 0x0d01@int16;mov L0x414868 0x4ebf@int16;')
constants(0x414cc0, twiddles);
