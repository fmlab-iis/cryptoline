(* popper: cv.exe -v -isafety -slicing -enable_rewriting:eqmod -jobs 128 pqcrystals_dilithium_ntt.cl
Parsing CryptoLine file:                [OK]            0.1242 seconds
Checking well-formedness:               [OK]            0.0447 seconds

Procedure main
==============
Transforming to SSA form:               [OK]            0.0266 seconds
Normalizing specification:              [OK]            0.0234 seconds
Rewriting assignments:                  [OK]            0.0218 seconds
Verifying program safety:               [OK]            1097.9075 seconds
Verifying range assertions:             [OK]            0.0030 seconds
Verifying range specification:          [OK]            228.0362 seconds
Rewriting value-preserved casting:      [OK]            0.0068 seconds
Verifying algebraic assertions:         [OK]            13.1546 seconds
Verifying algebraic specification:      [OK]            6906.6068 seconds

Procedure Summary
-----------------
Procedure verification:                 [OK]            8245.8013 seconds

Summary
=======
Verification result:                    [OK]            8245.9672 seconds
*)
proc main (
int32 c00,int32 c01,int32 c02,int32 c03,int32 c04,int32 c05,int32 c06,
int32 c07,int32 c08,int32 c09,int32 c0a,int32 c0b,int32 c0c,int32 c0d,
int32 c0e,int32 c0f,int32 c10,int32 c11,int32 c12,int32 c13,int32 c14,
int32 c15,int32 c16,int32 c17,int32 c18,int32 c19,int32 c1a,int32 c1b,
int32 c1c,int32 c1d,int32 c1e,int32 c1f,int32 c20,int32 c21,int32 c22,
int32 c23,int32 c24,int32 c25,int32 c26,int32 c27,int32 c28,int32 c29,
int32 c2a,int32 c2b,int32 c2c,int32 c2d,int32 c2e,int32 c2f,int32 c30,
int32 c31,int32 c32,int32 c33,int32 c34,int32 c35,int32 c36,int32 c37,
int32 c38,int32 c39,int32 c3a,int32 c3b,int32 c3c,int32 c3d,int32 c3e,
int32 c3f,int32 c40,int32 c41,int32 c42,int32 c43,int32 c44,int32 c45,
int32 c46,int32 c47,int32 c48,int32 c49,int32 c4a,int32 c4b,int32 c4c,
int32 c4d,int32 c4e,int32 c4f,int32 c50,int32 c51,int32 c52,int32 c53,
int32 c54,int32 c55,int32 c56,int32 c57,int32 c58,int32 c59,int32 c5a,
int32 c5b,int32 c5c,int32 c5d,int32 c5e,int32 c5f,int32 c60,int32 c61,
int32 c62,int32 c63,int32 c64,int32 c65,int32 c66,int32 c67,int32 c68,
int32 c69,int32 c6a,int32 c6b,int32 c6c,int32 c6d,int32 c6e,int32 c6f,
int32 c70,int32 c71,int32 c72,int32 c73,int32 c74,int32 c75,int32 c76,
int32 c77,int32 c78,int32 c79,int32 c7a,int32 c7b,int32 c7c,int32 c7d,
int32 c7e,int32 c7f,int32 c80,int32 c81,int32 c82,int32 c83,int32 c84,
int32 c85,int32 c86,int32 c87,int32 c88,int32 c89,int32 c8a,int32 c8b,
int32 c8c,int32 c8d,int32 c8e,int32 c8f,int32 c90,int32 c91,int32 c92,
int32 c93,int32 c94,int32 c95,int32 c96,int32 c97,int32 c98,int32 c99,
int32 c9a,int32 c9b,int32 c9c,int32 c9d,int32 c9e,int32 c9f,int32 ca0,
int32 ca1,int32 ca2,int32 ca3,int32 ca4,int32 ca5,int32 ca6,int32 ca7,
int32 ca8,int32 ca9,int32 caa,int32 cab,int32 cac,int32 cad,int32 cae,
int32 caf,int32 cb0,int32 cb1,int32 cb2,int32 cb3,int32 cb4,int32 cb5,
int32 cb6,int32 cb7,int32 cb8,int32 cb9,int32 cba,int32 cbb,int32 cbc,
int32 cbd,int32 cbe,int32 cbf,int32 cc0,int32 cc1,int32 cc2,int32 cc3,
int32 cc4,int32 cc5,int32 cc6,int32 cc7,int32 cc8,int32 cc9,int32 cca,
int32 ccb,int32 ccc,int32 ccd,int32 cce,int32 ccf,int32 cd0,int32 cd1,
int32 cd2,int32 cd3,int32 cd4,int32 cd5,int32 cd6,int32 cd7,int32 cd8,
int32 cd9,int32 cda,int32 cdb,int32 cdc,int32 cdd,int32 cde,int32 cdf,
int32 ce0,int32 ce1,int32 ce2,int32 ce3,int32 ce4,int32 ce5,int32 ce6,
int32 ce7,int32 ce8,int32 ce9,int32 cea,int32 ceb,int32 cec,int32 ced,
int32 cee,int32 cef,int32 cf0,int32 cf1,int32 cf2,int32 cf3,int32 cf4,
int32 cf5,int32 cf6,int32 cf7,int32 cf8,int32 cf9,int32 cfa,int32 cfb,
int32 cfc,int32 cfd,int32 cfe,int32 cff,
int32 Q, int32 Q2, int32 NQ2, int32 K, int32 X
) =
{
(**************** precondition ****************)

Q = 8380417 /\ Q2 = 4190208 /\ NQ2 = -4190209 /\ K = 1753 /\
[NQ2,NQ2,NQ2,NQ2]<=[c00,c01,c02,c03] /\ [c00,c01,c02,c03]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c04,c05,c06,c07] /\ [c04,c05,c06,c07]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c08,c09,c0a,c0b] /\ [c08,c09,c0a,c0b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c0c,c0d,c0e,c0f] /\ [c0c,c0d,c0e,c0f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c10,c11,c12,c13] /\ [c10,c11,c12,c13]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c14,c15,c16,c17] /\ [c14,c15,c16,c17]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c18,c19,c1a,c1b] /\ [c18,c19,c1a,c1b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c1c,c1d,c1e,c1f] /\ [c1c,c1d,c1e,c1f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c20,c21,c22,c23] /\ [c20,c21,c22,c23]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c24,c25,c26,c27] /\ [c24,c25,c26,c27]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c28,c29,c2a,c2b] /\ [c28,c29,c2a,c2b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c2c,c2d,c2e,c2f] /\ [c2c,c2d,c2e,c2f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c30,c31,c32,c33] /\ [c30,c31,c32,c33]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c34,c35,c36,c37] /\ [c34,c35,c36,c37]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c38,c39,c3a,c3b] /\ [c38,c39,c3a,c3b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c3c,c3d,c3e,c3f] /\ [c3c,c3d,c3e,c3f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c40,c41,c42,c43] /\ [c40,c41,c42,c43]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c44,c45,c46,c47] /\ [c44,c45,c46,c47]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c48,c49,c4a,c4b] /\ [c48,c49,c4a,c4b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c4c,c4d,c4e,c4f] /\ [c4c,c4d,c4e,c4f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c50,c51,c52,c53] /\ [c50,c51,c52,c53]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c54,c55,c56,c57] /\ [c54,c55,c56,c57]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c58,c59,c5a,c5b] /\ [c58,c59,c5a,c5b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c5c,c5d,c5e,c5f] /\ [c5c,c5d,c5e,c5f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c60,c61,c62,c63] /\ [c60,c61,c62,c63]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c64,c65,c66,c67] /\ [c64,c65,c66,c67]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c68,c69,c6a,c6b] /\ [c68,c69,c6a,c6b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c6c,c6d,c6e,c6f] /\ [c6c,c6d,c6e,c6f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c70,c71,c72,c73] /\ [c70,c71,c72,c73]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c74,c75,c76,c77] /\ [c74,c75,c76,c77]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c78,c79,c7a,c7b] /\ [c78,c79,c7a,c7b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c7c,c7d,c7e,c7f] /\ [c7c,c7d,c7e,c7f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c80,c81,c82,c83] /\ [c80,c81,c82,c83]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c84,c85,c86,c87] /\ [c84,c85,c86,c87]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c88,c89,c8a,c8b] /\ [c88,c89,c8a,c8b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c8c,c8d,c8e,c8f] /\ [c8c,c8d,c8e,c8f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c90,c91,c92,c93] /\ [c90,c91,c92,c93]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c94,c95,c96,c97] /\ [c94,c95,c96,c97]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c98,c99,c9a,c9b] /\ [c98,c99,c9a,c9b]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[c9c,c9d,c9e,c9f] /\ [c9c,c9d,c9e,c9f]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ca0,ca1,ca2,ca3] /\ [ca0,ca1,ca2,ca3]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ca4,ca5,ca6,ca7] /\ [ca4,ca5,ca6,ca7]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ca8,ca9,caa,cab] /\ [ca8,ca9,caa,cab]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cac,cad,cae,caf] /\ [cac,cad,cae,caf]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cb0,cb1,cb2,cb3] /\ [cb0,cb1,cb2,cb3]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cb4,cb5,cb6,cb7] /\ [cb4,cb5,cb6,cb7]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cb8,cb9,cba,cbb] /\ [cb8,cb9,cba,cbb]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cbc,cbd,cbe,cbf] /\ [cbc,cbd,cbe,cbf]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cc0,cc1,cc2,cc3] /\ [cc0,cc1,cc2,cc3]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cc4,cc5,cc6,cc7] /\ [cc4,cc5,cc6,cc7]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cc8,cc9,cca,ccb] /\ [cc8,cc9,cca,ccb]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ccc,ccd,cce,ccf] /\ [ccc,ccd,cce,ccf]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cd0,cd1,cd2,cd3] /\ [cd0,cd1,cd2,cd3]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cd4,cd5,cd6,cd7] /\ [cd4,cd5,cd6,cd7]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cd8,cd9,cda,cdb] /\ [cd8,cd9,cda,cdb]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cdc,cdd,cde,cdf] /\ [cdc,cdd,cde,cdf]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ce0,ce1,ce2,ce3] /\ [ce0,ce1,ce2,ce3]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ce4,ce5,ce6,ce7] /\ [ce4,ce5,ce6,ce7]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[ce8,ce9,cea,ceb] /\ [ce8,ce9,cea,ceb]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cec,ced,cee,cef] /\ [cec,ced,cee,cef]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cf0,cf1,cf2,cf3] /\ [cf0,cf1,cf2,cf3]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cf4,cf5,cf6,cf7] /\ [cf4,cf5,cf6,cf7]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cf8,cf9,cfa,cfb] /\ [cf8,cf9,cfa,cfb]<=[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=[cfc,cfd,cfe,cff] /\ [cfc,cfd,cfe,cff]<=[Q2,Q2,Q2,Q2]
  &&
Q = 8380417@32 /\ Q2 = 4190208@32 /\ NQ2 = (-4190209)@32 /\
[NQ2,NQ2,NQ2,NQ2]<=s[c00,c01,c02,c03] /\ [c00,c01,c02,c03]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c04,c05,c06,c07] /\ [c04,c05,c06,c07]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c08,c09,c0a,c0b] /\ [c08,c09,c0a,c0b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c0c,c0d,c0e,c0f] /\ [c0c,c0d,c0e,c0f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c10,c11,c12,c13] /\ [c10,c11,c12,c13]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c14,c15,c16,c17] /\ [c14,c15,c16,c17]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c18,c19,c1a,c1b] /\ [c18,c19,c1a,c1b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c1c,c1d,c1e,c1f] /\ [c1c,c1d,c1e,c1f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c20,c21,c22,c23] /\ [c20,c21,c22,c23]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c24,c25,c26,c27] /\ [c24,c25,c26,c27]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c28,c29,c2a,c2b] /\ [c28,c29,c2a,c2b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c2c,c2d,c2e,c2f] /\ [c2c,c2d,c2e,c2f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c30,c31,c32,c33] /\ [c30,c31,c32,c33]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c34,c35,c36,c37] /\ [c34,c35,c36,c37]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c38,c39,c3a,c3b] /\ [c38,c39,c3a,c3b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c3c,c3d,c3e,c3f] /\ [c3c,c3d,c3e,c3f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c40,c41,c42,c43] /\ [c40,c41,c42,c43]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c44,c45,c46,c47] /\ [c44,c45,c46,c47]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c48,c49,c4a,c4b] /\ [c48,c49,c4a,c4b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c4c,c4d,c4e,c4f] /\ [c4c,c4d,c4e,c4f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c50,c51,c52,c53] /\ [c50,c51,c52,c53]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c54,c55,c56,c57] /\ [c54,c55,c56,c57]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c58,c59,c5a,c5b] /\ [c58,c59,c5a,c5b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c5c,c5d,c5e,c5f] /\ [c5c,c5d,c5e,c5f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c60,c61,c62,c63] /\ [c60,c61,c62,c63]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c64,c65,c66,c67] /\ [c64,c65,c66,c67]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c68,c69,c6a,c6b] /\ [c68,c69,c6a,c6b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c6c,c6d,c6e,c6f] /\ [c6c,c6d,c6e,c6f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c70,c71,c72,c73] /\ [c70,c71,c72,c73]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c74,c75,c76,c77] /\ [c74,c75,c76,c77]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c78,c79,c7a,c7b] /\ [c78,c79,c7a,c7b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c7c,c7d,c7e,c7f] /\ [c7c,c7d,c7e,c7f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c80,c81,c82,c83] /\ [c80,c81,c82,c83]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c84,c85,c86,c87] /\ [c84,c85,c86,c87]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c88,c89,c8a,c8b] /\ [c88,c89,c8a,c8b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c8c,c8d,c8e,c8f] /\ [c8c,c8d,c8e,c8f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c90,c91,c92,c93] /\ [c90,c91,c92,c93]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c94,c95,c96,c97] /\ [c94,c95,c96,c97]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c98,c99,c9a,c9b] /\ [c98,c99,c9a,c9b]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[c9c,c9d,c9e,c9f] /\ [c9c,c9d,c9e,c9f]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ca0,ca1,ca2,ca3] /\ [ca0,ca1,ca2,ca3]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ca4,ca5,ca6,ca7] /\ [ca4,ca5,ca6,ca7]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ca8,ca9,caa,cab] /\ [ca8,ca9,caa,cab]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cac,cad,cae,caf] /\ [cac,cad,cae,caf]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cb0,cb1,cb2,cb3] /\ [cb0,cb1,cb2,cb3]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cb4,cb5,cb6,cb7] /\ [cb4,cb5,cb6,cb7]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cb8,cb9,cba,cbb] /\ [cb8,cb9,cba,cbb]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cbc,cbd,cbe,cbf] /\ [cbc,cbd,cbe,cbf]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cc0,cc1,cc2,cc3] /\ [cc0,cc1,cc2,cc3]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cc4,cc5,cc6,cc7] /\ [cc4,cc5,cc6,cc7]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cc8,cc9,cca,ccb] /\ [cc8,cc9,cca,ccb]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ccc,ccd,cce,ccf] /\ [ccc,ccd,cce,ccf]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cd0,cd1,cd2,cd3] /\ [cd0,cd1,cd2,cd3]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cd4,cd5,cd6,cd7] /\ [cd4,cd5,cd6,cd7]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cd8,cd9,cda,cdb] /\ [cd8,cd9,cda,cdb]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cdc,cdd,cde,cdf] /\ [cdc,cdd,cde,cdf]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ce0,ce1,ce2,ce3] /\ [ce0,ce1,ce2,ce3]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ce4,ce5,ce6,ce7] /\ [ce4,ce5,ce6,ce7]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[ce8,ce9,cea,ceb] /\ [ce8,ce9,cea,ceb]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cec,ced,cee,cef] /\ [cec,ced,cee,cef]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cf0,cf1,cf2,cf3] /\ [cf0,cf1,cf2,cf3]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cf4,cf5,cf6,cf7] /\ [cf4,cf5,cf6,cf7]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cf8,cf9,cfa,cfb] /\ [cf8,cf9,cfa,cfb]<=s[Q2,Q2,Q2,Q2] /\
[NQ2,NQ2,NQ2,NQ2]<=s[cfc,cfd,cfe,cff] /\ [cfc,cfd,cfe,cff]<=s[Q2,Q2,Q2,Q2]

}


(**************** inputs ****************)

mov L0x203f0728 c00; mov L0x203f072c c01; mov L0x203f0730 c02;
mov L0x203f0734 c03; mov L0x203f0738 c04; mov L0x203f073c c05;
mov L0x203f0740 c06; mov L0x203f0744 c07; mov L0x203f0748 c08;
mov L0x203f074c c09; mov L0x203f0750 c0a; mov L0x203f0754 c0b;
mov L0x203f0758 c0c; mov L0x203f075c c0d; mov L0x203f0760 c0e;
mov L0x203f0764 c0f; mov L0x203f0768 c10; mov L0x203f076c c11;
mov L0x203f0770 c12; mov L0x203f0774 c13; mov L0x203f0778 c14;
mov L0x203f077c c15; mov L0x203f0780 c16; mov L0x203f0784 c17;
mov L0x203f0788 c18; mov L0x203f078c c19; mov L0x203f0790 c1a;
mov L0x203f0794 c1b; mov L0x203f0798 c1c; mov L0x203f079c c1d;
mov L0x203f07a0 c1e; mov L0x203f07a4 c1f; mov L0x203f07a8 c20;
mov L0x203f07ac c21; mov L0x203f07b0 c22; mov L0x203f07b4 c23;
mov L0x203f07b8 c24; mov L0x203f07bc c25; mov L0x203f07c0 c26;
mov L0x203f07c4 c27; mov L0x203f07c8 c28; mov L0x203f07cc c29;
mov L0x203f07d0 c2a; mov L0x203f07d4 c2b; mov L0x203f07d8 c2c;
mov L0x203f07dc c2d; mov L0x203f07e0 c2e; mov L0x203f07e4 c2f;
mov L0x203f07e8 c30; mov L0x203f07ec c31; mov L0x203f07f0 c32;
mov L0x203f07f4 c33; mov L0x203f07f8 c34; mov L0x203f07fc c35;
mov L0x203f0800 c36; mov L0x203f0804 c37; mov L0x203f0808 c38;
mov L0x203f080c c39; mov L0x203f0810 c3a; mov L0x203f0814 c3b;
mov L0x203f0818 c3c; mov L0x203f081c c3d; mov L0x203f0820 c3e;
mov L0x203f0824 c3f; mov L0x203f0828 c40; mov L0x203f082c c41;
mov L0x203f0830 c42; mov L0x203f0834 c43; mov L0x203f0838 c44;
mov L0x203f083c c45; mov L0x203f0840 c46; mov L0x203f0844 c47;
mov L0x203f0848 c48; mov L0x203f084c c49; mov L0x203f0850 c4a;
mov L0x203f0854 c4b; mov L0x203f0858 c4c; mov L0x203f085c c4d;
mov L0x203f0860 c4e; mov L0x203f0864 c4f; mov L0x203f0868 c50;
mov L0x203f086c c51; mov L0x203f0870 c52; mov L0x203f0874 c53;
mov L0x203f0878 c54; mov L0x203f087c c55; mov L0x203f0880 c56;
mov L0x203f0884 c57; mov L0x203f0888 c58; mov L0x203f088c c59;
mov L0x203f0890 c5a; mov L0x203f0894 c5b; mov L0x203f0898 c5c;
mov L0x203f089c c5d; mov L0x203f08a0 c5e; mov L0x203f08a4 c5f;
mov L0x203f08a8 c60; mov L0x203f08ac c61; mov L0x203f08b0 c62;
mov L0x203f08b4 c63; mov L0x203f08b8 c64; mov L0x203f08bc c65;
mov L0x203f08c0 c66; mov L0x203f08c4 c67; mov L0x203f08c8 c68;
mov L0x203f08cc c69; mov L0x203f08d0 c6a; mov L0x203f08d4 c6b;
mov L0x203f08d8 c6c; mov L0x203f08dc c6d; mov L0x203f08e0 c6e;
mov L0x203f08e4 c6f; mov L0x203f08e8 c70; mov L0x203f08ec c71;
mov L0x203f08f0 c72; mov L0x203f08f4 c73; mov L0x203f08f8 c74;
mov L0x203f08fc c75; mov L0x203f0900 c76; mov L0x203f0904 c77;
mov L0x203f0908 c78; mov L0x203f090c c79; mov L0x203f0910 c7a;
mov L0x203f0914 c7b; mov L0x203f0918 c7c; mov L0x203f091c c7d;
mov L0x203f0920 c7e; mov L0x203f0924 c7f; mov L0x203f0928 c80;
mov L0x203f092c c81; mov L0x203f0930 c82; mov L0x203f0934 c83;
mov L0x203f0938 c84; mov L0x203f093c c85; mov L0x203f0940 c86;
mov L0x203f0944 c87; mov L0x203f0948 c88; mov L0x203f094c c89;
mov L0x203f0950 c8a; mov L0x203f0954 c8b; mov L0x203f0958 c8c;
mov L0x203f095c c8d; mov L0x203f0960 c8e; mov L0x203f0964 c8f;
mov L0x203f0968 c90; mov L0x203f096c c91; mov L0x203f0970 c92;
mov L0x203f0974 c93; mov L0x203f0978 c94; mov L0x203f097c c95;
mov L0x203f0980 c96; mov L0x203f0984 c97; mov L0x203f0988 c98;
mov L0x203f098c c99; mov L0x203f0990 c9a; mov L0x203f0994 c9b;
mov L0x203f0998 c9c; mov L0x203f099c c9d; mov L0x203f09a0 c9e;
mov L0x203f09a4 c9f; mov L0x203f09a8 ca0; mov L0x203f09ac ca1;
mov L0x203f09b0 ca2; mov L0x203f09b4 ca3; mov L0x203f09b8 ca4;
mov L0x203f09bc ca5; mov L0x203f09c0 ca6; mov L0x203f09c4 ca7;
mov L0x203f09c8 ca8; mov L0x203f09cc ca9; mov L0x203f09d0 caa;
mov L0x203f09d4 cab; mov L0x203f09d8 cac; mov L0x203f09dc cad;
mov L0x203f09e0 cae; mov L0x203f09e4 caf; mov L0x203f09e8 cb0;
mov L0x203f09ec cb1; mov L0x203f09f0 cb2; mov L0x203f09f4 cb3;
mov L0x203f09f8 cb4; mov L0x203f09fc cb5; mov L0x203f0a00 cb6;
mov L0x203f0a04 cb7; mov L0x203f0a08 cb8; mov L0x203f0a0c cb9;
mov L0x203f0a10 cba; mov L0x203f0a14 cbb; mov L0x203f0a18 cbc;
mov L0x203f0a1c cbd; mov L0x203f0a20 cbe; mov L0x203f0a24 cbf;
mov L0x203f0a28 cc0; mov L0x203f0a2c cc1; mov L0x203f0a30 cc2;
mov L0x203f0a34 cc3; mov L0x203f0a38 cc4; mov L0x203f0a3c cc5;
mov L0x203f0a40 cc6; mov L0x203f0a44 cc7; mov L0x203f0a48 cc8;
mov L0x203f0a4c cc9; mov L0x203f0a50 cca; mov L0x203f0a54 ccb;
mov L0x203f0a58 ccc; mov L0x203f0a5c ccd; mov L0x203f0a60 cce;
mov L0x203f0a64 ccf; mov L0x203f0a68 cd0; mov L0x203f0a6c cd1;
mov L0x203f0a70 cd2; mov L0x203f0a74 cd3; mov L0x203f0a78 cd4;
mov L0x203f0a7c cd5; mov L0x203f0a80 cd6; mov L0x203f0a84 cd7;
mov L0x203f0a88 cd8; mov L0x203f0a8c cd9; mov L0x203f0a90 cda;
mov L0x203f0a94 cdb; mov L0x203f0a98 cdc; mov L0x203f0a9c cdd;
mov L0x203f0aa0 cde; mov L0x203f0aa4 cdf; mov L0x203f0aa8 ce0;
mov L0x203f0aac ce1; mov L0x203f0ab0 ce2; mov L0x203f0ab4 ce3;
mov L0x203f0ab8 ce4; mov L0x203f0abc ce5; mov L0x203f0ac0 ce6;
mov L0x203f0ac4 ce7; mov L0x203f0ac8 ce8; mov L0x203f0acc ce9;
mov L0x203f0ad0 cea; mov L0x203f0ad4 ceb; mov L0x203f0ad8 cec;
mov L0x203f0adc ced; mov L0x203f0ae0 cee; mov L0x203f0ae4 cef;
mov L0x203f0ae8 cf0; mov L0x203f0aec cf1; mov L0x203f0af0 cf2;
mov L0x203f0af4 cf3; mov L0x203f0af8 cf4; mov L0x203f0afc cf5;
mov L0x203f0b00 cf6; mov L0x203f0b04 cf7; mov L0x203f0b08 cf8;
mov L0x203f0b0c cf9; mov L0x203f0b10 cfa; mov L0x203f0b14 cfb;
mov L0x203f0b18 cfc; mov L0x203f0b1c cfd; mov L0x203f0b20 cfe;
mov L0x203f0b24 cff;

(**************** input polynomial ****************)

ghost F@int32:
F**2 = c00*X**  0+c01*X**  1+c02*X**  2+c03*X**  3+c04*X**  4+c05*X**  5+
       c06*X**  6+c07*X**  7+c08*X**  8+c09*X**  9+c0a*X** 10+c0b*X** 11+
       c0c*X** 12+c0d*X** 13+c0e*X** 14+c0f*X** 15+c10*X** 16+c11*X** 17+
       c12*X** 18+c13*X** 19+c14*X** 20+c15*X** 21+c16*X** 22+c17*X** 23+
       c18*X** 24+c19*X** 25+c1a*X** 26+c1b*X** 27+c1c*X** 28+c1d*X** 29+
       c1e*X** 30+c1f*X** 31+c20*X** 32+c21*X** 33+c22*X** 34+c23*X** 35+
       c24*X** 36+c25*X** 37+c26*X** 38+c27*X** 39+c28*X** 40+c29*X** 41+
       c2a*X** 42+c2b*X** 43+c2c*X** 44+c2d*X** 45+c2e*X** 46+c2f*X** 47+
       c30*X** 48+c31*X** 49+c32*X** 50+c33*X** 51+c34*X** 52+c35*X** 53+
       c36*X** 54+c37*X** 55+c38*X** 56+c39*X** 57+c3a*X** 58+c3b*X** 59+
       c3c*X** 60+c3d*X** 61+c3e*X** 62+c3f*X** 63+c40*X** 64+c41*X** 65+
       c42*X** 66+c43*X** 67+c44*X** 68+c45*X** 69+c46*X** 70+c47*X** 71+
       c48*X** 72+c49*X** 73+c4a*X** 74+c4b*X** 75+c4c*X** 76+c4d*X** 77+
       c4e*X** 78+c4f*X** 79+c50*X** 80+c51*X** 81+c52*X** 82+c53*X** 83+
       c54*X** 84+c55*X** 85+c56*X** 86+c57*X** 87+c58*X** 88+c59*X** 89+
       c5a*X** 90+c5b*X** 91+c5c*X** 92+c5d*X** 93+c5e*X** 94+c5f*X** 95+
       c60*X** 96+c61*X** 97+c62*X** 98+c63*X** 99+c64*X**100+c65*X**101+
       c66*X**102+c67*X**103+c68*X**104+c69*X**105+c6a*X**106+c6b*X**107+
       c6c*X**108+c6d*X**109+c6e*X**110+c6f*X**111+c70*X**112+c71*X**113+
       c72*X**114+c73*X**115+c74*X**116+c75*X**117+c76*X**118+c77*X**119+
       c78*X**120+c79*X**121+c7a*X**122+c7b*X**123+c7c*X**124+c7d*X**125+
       c7e*X**126+c7f*X**127+c80*X**128+c81*X**129+c82*X**130+c83*X**131+
       c84*X**132+c85*X**133+c86*X**134+c87*X**135+c88*X**136+c89*X**137+
       c8a*X**138+c8b*X**139+c8c*X**140+c8d*X**141+c8e*X**142+c8f*X**143+
       c90*X**144+c91*X**145+c92*X**146+c93*X**147+c94*X**148+c95*X**149+
       c96*X**150+c97*X**151+c98*X**152+c99*X**153+c9a*X**154+c9b*X**155+
       c9c*X**156+c9d*X**157+c9e*X**158+c9f*X**159+ca0*X**160+ca1*X**161+
       ca2*X**162+ca3*X**163+ca4*X**164+ca5*X**165+ca6*X**166+ca7*X**167+
       ca8*X**168+ca9*X**169+caa*X**170+cab*X**171+cac*X**172+cad*X**173+
       cae*X**174+caf*X**175+cb0*X**176+cb1*X**177+cb2*X**178+cb3*X**179+
       cb4*X**180+cb5*X**181+cb6*X**182+cb7*X**183+cb8*X**184+cb9*X**185+
       cba*X**186+cbb*X**187+cbc*X**188+cbd*X**189+cbe*X**190+cbf*X**191+
       cc0*X**192+cc1*X**193+cc2*X**194+cc3*X**195+cc4*X**196+cc5*X**197+
       cc6*X**198+cc7*X**199+cc8*X**200+cc9*X**201+cca*X**202+ccb*X**203+
       ccc*X**204+ccd*X**205+cce*X**206+ccf*X**207+cd0*X**208+cd1*X**209+
       cd2*X**210+cd3*X**211+cd4*X**212+cd5*X**213+cd6*X**214+cd7*X**215+
       cd8*X**216+cd9*X**217+cda*X**218+cdb*X**219+cdc*X**220+cdd*X**221+
       cde*X**222+cdf*X**223+ce0*X**224+ce1*X**225+ce2*X**226+ce3*X**227+
       ce4*X**228+ce5*X**229+ce6*X**230+ce7*X**231+ce8*X**232+ce9*X**233+
       cea*X**234+ceb*X**235+cec*X**236+ced*X**237+cee*X**238+cef*X**239+
       cf0*X**240+cf1*X**241+cf2*X**242+cf3*X**243+cf4*X**244+cf5*X**245+
       cf6*X**246+cf7*X**247+cf8*X**248+cf9*X**249+cfa*X**250+cfb*X**251+
       cfc*X**252+cfd*X**253+cfe*X**254+cff*X**255 && true;

nondet L0x5938@uint32;
nondet r0@uint32;

(**************** constants ****************)

mov L0x5d6c (-58728449)@int32; mov L0x5d70 (  8380417)@int32;

mov L0x7f98 (    25847)@int32; mov L0x7f9c ( -2608894)@int32;
mov L0x7fa0 (  -518909)@int32; mov L0x7fa4 (   237124)@int32;
mov L0x7fa8 (  -777960)@int32; mov L0x7fac (  -876248)@int32;
mov L0x7fb0 (   466468)@int32; mov L0x7fb4 (  1826347)@int32;
mov L0x7fb8 (  2725464)@int32; mov L0x7fbc (  1024112)@int32;
mov L0x7fc0 (  2706023)@int32; mov L0x7fc4 (    95776)@int32;
mov L0x7fc8 (  3077325)@int32; mov L0x7fcc (  3530437)@int32;
mov L0x7fd0 (  2353451)@int32; mov L0x7fd4 ( -1079900)@int32;
mov L0x7fd8 (  3585928)@int32; mov L0x7fdc ( -1661693)@int32;
mov L0x7fe0 ( -3592148)@int32; mov L0x7fe4 ( -2537516)@int32;
mov L0x7fe8 (  3915439)@int32; mov L0x7fec (  -359251)@int32;
mov L0x7ff0 (  -549488)@int32; mov L0x7ff4 ( -1119584)@int32;
mov L0x7ff8 ( -3861115)@int32; mov L0x7ffc ( -3043716)@int32;
mov L0x8000 (  3574422)@int32; mov L0x8004 ( -2867647)@int32;
mov L0x8008 ( -2091905)@int32; mov L0x800c (  2619752)@int32;
mov L0x8010 ( -2108549)@int32; mov L0x8014 (  3539968)@int32;
mov L0x8018 (  -300467)@int32; mov L0x801c (  2348700)@int32;
mov L0x8020 (  -539299)@int32; mov L0x8024 (  3119733)@int32;
mov L0x8028 ( -2118186)@int32; mov L0x802c ( -3859737)@int32;
mov L0x8030 ( -1699267)@int32; mov L0x8034 ( -1643818)@int32;
mov L0x8038 (  3505694)@int32; mov L0x803c ( -3821735)@int32;
mov L0x8040 ( -2884855)@int32; mov L0x8044 ( -1399561)@int32;
mov L0x8048 ( -3277672)@int32; mov L0x804c (  3507263)@int32;
mov L0x8050 ( -2140649)@int32; mov L0x8054 ( -1600420)@int32;
mov L0x8058 (  3699596)@int32; mov L0x805c (  3111497)@int32;
mov L0x8060 (  1757237)@int32; mov L0x8064 (   -19422)@int32;
mov L0x8068 (   811944)@int32; mov L0x806c (   531354)@int32;
mov L0x8070 (   954230)@int32; mov L0x8074 (  3881043)@int32;
mov L0x8078 (  2680103)@int32; mov L0x807c (  4010497)@int32;
mov L0x8080 (   280005)@int32; mov L0x8084 (  3900724)@int32;
mov L0x8088 ( -2556880)@int32; mov L0x808c (  2071892)@int32;
mov L0x8090 ( -2797779)@int32; mov L0x8094 ( -3930395)@int32;
mov L0x8098 (  2091667)@int32; mov L0x809c (  3407706)@int32;
mov L0x80a0 ( -1528703)@int32; mov L0x80a4 (  2316500)@int32;
mov L0x80a8 (  3817976)@int32; mov L0x80ac ( -3677745)@int32;
mov L0x80b0 ( -3342478)@int32; mov L0x80b4 (  2244091)@int32;
mov L0x80b8 ( -3041255)@int32; mov L0x80bc ( -2446433)@int32;
mov L0x80c0 ( -3562462)@int32; mov L0x80c4 ( -1452451)@int32;
mov L0x80c8 (   266997)@int32; mov L0x80cc (  2434439)@int32;
mov L0x80d0 (  3475950)@int32; mov L0x80d4 ( -1235728)@int32;
mov L0x80d8 (  3513181)@int32; mov L0x80dc (  2176455)@int32;
mov L0x80e0 ( -3520352)@int32; mov L0x80e4 ( -3759364)@int32;
mov L0x80e8 ( -1585221)@int32; mov L0x80ec ( -1197226)@int32;
mov L0x80f0 ( -3193378)@int32; mov L0x80f4 ( -1257611)@int32;
mov L0x80f8 (   900702)@int32; mov L0x80fc (  1859098)@int32;
mov L0x8100 (  1939314)@int32; mov L0x8104 (   909542)@int32;
mov L0x8108 (   819034)@int32; mov L0x810c ( -4083598)@int32;
mov L0x8110 (   495491)@int32; mov L0x8114 ( -1613174)@int32;
mov L0x8118 ( -1000202)@int32; mov L0x811c (   -43260)@int32;
mov L0x8120 (  -522500)@int32; mov L0x8124 ( -3190144)@int32;
mov L0x8128 (  -655327)@int32; mov L0x812c ( -3122442)@int32;
mov L0x8130 ( -3157330)@int32; mov L0x8134 (  2031748)@int32;
mov L0x8138 (  3207046)@int32; mov L0x813c ( -3632928)@int32;
mov L0x8140 ( -3556995)@int32; mov L0x8144 (  -525098)@int32;
mov L0x8148 (   126922)@int32; mov L0x814c (  -768622)@int32;
mov L0x8150 ( -3595838)@int32; mov L0x8154 (  3412210)@int32;
mov L0x8158 (   342297)@int32; mov L0x815c (   286988)@int32;
mov L0x8160 (  -983419)@int32; mov L0x8164 ( -2437823)@int32;
mov L0x8168 (  4108315)@int32; mov L0x816c (  2147896)@int32;
mov L0x8170 (  3437287)@int32; mov L0x8174 ( -3342277)@int32;
mov L0x8178 (  2715295)@int32; mov L0x817c (  1735879)@int32;
mov L0x8180 (   203044)@int32; mov L0x8184 ( -2967645)@int32;
mov L0x8188 (  2842341)@int32; mov L0x818c (  2691481)@int32;
mov L0x8190 ( -3693493)@int32; mov L0x8194 ( -2590150)@int32;
mov L0x8198 (  1265009)@int32; mov L0x819c (  -411027)@int32;
mov L0x81a0 (  4055324)@int32; mov L0x81a4 (  1247620)@int32;
mov L0x81a8 ( -2477047)@int32; mov L0x81ac (  2486353)@int32;
mov L0x81b0 (  1595974)@int32; mov L0x81b4 (  -671102)@int32;
mov L0x81b8 ( -3767016)@int32; mov L0x81bc (  1250494)@int32;
mov L0x81c0 ( -1228525)@int32; mov L0x81c4 (  2635921)@int32;
mov L0x81c8 ( -3548272)@int32; mov L0x81cc (   -22981)@int32;
mov L0x81d0 ( -2994039)@int32; mov L0x81d4 (  1869119)@int32;
mov L0x81d8 ( -1308169)@int32; mov L0x81dc (  1903435)@int32;
mov L0x81e0 ( -1050970)@int32; mov L0x81e4 (  -381987)@int32;
mov L0x81e8 ( -1333058)@int32; mov L0x81ec (  1237275)@int32;
mov L0x81f0 (  1349076)@int32; mov L0x81f4 ( -3318210)@int32;
mov L0x81f8 ( -1430225)@int32; mov L0x81fc (  1852771)@int32;
mov L0x8200 (  -451100)@int32; mov L0x8204 (  1312455)@int32;
mov L0x8208 ( -1430430)@int32; mov L0x820c (  3306115)@int32;
mov L0x8210 ( -1962642)@int32; mov L0x8214 ( -3343383)@int32;
mov L0x8218 ( -1279661)@int32; mov L0x821c (  1917081)@int32;
mov L0x8220 (   264944)@int32; mov L0x8224 ( -2546312)@int32;
mov L0x8228 ( -1374803)@int32; mov L0x822c (   508951)@int32;
mov L0x8230 (  1500165)@int32; mov L0x8234 (   777191)@int32;
mov L0x8238 (  3097992)@int32; mov L0x823c (  2235880)@int32;
mov L0x8240 (  3406031)@int32; mov L0x8244 (    44288)@int32;
mov L0x8248 (  -542412)@int32; mov L0x824c ( -2831860)@int32;
mov L0x8250 ( -1100098)@int32; mov L0x8254 ( -1671176)@int32;
mov L0x8258 ( -1846953)@int32; mov L0x825c (   904516)@int32;
mov L0x8260 ( -2584293)@int32; mov L0x8264 ( -3724270)@int32;
mov L0x8268 (  3958618)@int32; mov L0x826c (   594136)@int32;
mov L0x8270 ( -3776993)@int32; mov L0x8274 ( -3724342)@int32;
mov L0x8278 ( -2013608)@int32; mov L0x827c (  2432395)@int32;
mov L0x8280 (    -8578)@int32; mov L0x8284 (  2454455)@int32;
mov L0x8288 (  -164721)@int32; mov L0x828c (  1653064)@int32;
mov L0x8290 (  1957272)@int32; mov L0x8294 (  3369112)@int32;
mov L0x8298 ( -3249728)@int32; mov L0x829c (   185531)@int32;
mov L0x82a0 ( -1207385)@int32; mov L0x82a4 (  2389356)@int32;
mov L0x82a8 ( -3183426)@int32; mov L0x82ac (   162844)@int32;
mov L0x82b0 (  -210977)@int32; mov L0x82b4 (  1616392)@int32;
mov L0x82b8 (  3014001)@int32; mov L0x82bc (   759969)@int32;
mov L0x82c0 (   810149)@int32; mov L0x82c4 (  1652634)@int32;
mov L0x82c8 ( -1316856)@int32; mov L0x82cc ( -3694233)@int32;
mov L0x82d0 ( -1799107)@int32; mov L0x82d4 (   189548)@int32;
mov L0x82d8 ( -3038916)@int32; mov L0x82dc (  3523897)@int32;
mov L0x82e0 ( -3553272)@int32; mov L0x82e4 (  3866901)@int32;
mov L0x82e8 (   269760)@int32; mov L0x82ec (  3159746)@int32;
mov L0x82f0 (  2213111)@int32; mov L0x82f4 (  -975884)@int32;
mov L0x82f8 ( -1851402)@int32; mov L0x82fc (  1717735)@int32;
mov L0x8300 (   472078)@int32; mov L0x8304 ( -2409325)@int32;
mov L0x8308 (  -426683)@int32; mov L0x830c (  1723600)@int32;
mov L0x8310 (  -177440)@int32; mov L0x8314 ( -1803090)@int32;
mov L0x8318 (  1910376)@int32; mov L0x831c (  1315589)@int32;
mov L0x8320 ( -1667432)@int32; mov L0x8324 ( -1104333)@int32;
mov L0x8328 (  1341330)@int32; mov L0x832c (  -260646)@int32;
mov L0x8330 ( -3833893)@int32; mov L0x8334 (  1285669)@int32;
mov L0x8338 ( -2939036)@int32; mov L0x833c ( -2235985)@int32;
mov L0x8340 ( -1584928)@int32; mov L0x8344 (  -420899)@int32;
mov L0x8348 ( -2286327)@int32; mov L0x834c (  -812732)@int32;
mov L0x8350 (   183443)@int32; mov L0x8354 (  -976891)@int32;
mov L0x8358 ( -1439742)@int32; mov L0x835c (  1612842)@int32;
mov L0x8360 ( -3545687)@int32; mov L0x8364 ( -3019102)@int32;
mov L0x8368 (  -554416)@int32; mov L0x836c (  3919660)@int32;
mov L0x8370 ( -3881060)@int32; mov L0x8374 (   -48306)@int32;
mov L0x8378 ( -1362209)@int32; mov L0x837c ( -3628969)@int32;
mov L0x8380 (  3937738)@int32; mov L0x8384 (  1400424)@int32;
mov L0x8388 (  3839961)@int32; mov L0x838c (  -846154)@int32;
mov L0x8390 (  1976782)@int32; 

(* #! -> SP = 0x203ef248 *)
#! 0x203ef248 = 0x203ef248;
(* #stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}#! EA = L0x203ef248; PC = 0x5374 *)
#stmdb	sp!, {%%r4, %%r5, %%r6, %%r7, %%r8, %%r9, %%r10, %%r11, %%lr}#! L0x203ef248 = L0x203ef248; 0x5374 = 0x5374;
(* ldr.w	r2, [pc, #2544]	@ 0x5d6c #! EA = L0x5d6c; Value = 0xfc7fdfff; PC = 0x5378 *)
mov r2 L0x5d6c;
(* ldr.w	r3, [pc, #2544]	@ 0x5d70 #! EA = L0x5d70; Value = 0x007fe001; PC = 0x537c *)
mov r3 L0x5d70;
(* ldr.w	r1, [pc, #1460]	@ 0x5938 #! EA = L0x5938; Value = 0x00007f98; PC = 0x5380 *)
mov r1 L0x5938;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x7f98; PC = 0x5384 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x7f98,L0x7f9c,L0x7fa0,L0x7fa4,L0x7fa8,L0x7fac,L0x7fb0];
(* vmov	s0, r1                                     #! PC = 0x5388 *)
mov s0 r1;
(* add.w	r10, r0, #128	@ 0x80                      #! PC = 0x538c *)
adds dc r10 r0 128@uint32;
(* vmov	s9, r10                                    #! PC = 0x5390 *)
mov s9 r10;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0728; Value = 0xfffffffc; PC = 0x5394 *)
mov r5 L0x203f0728;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07a8; Value = 0x00000000; PC = 0x5398 *)
mov r6 L0x203f07a8;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0828; Value = 0xfffffffc; PC = 0x539c *)
mov r7 L0x203f0828;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08a8; Value = 0xfffffffe; PC = 0x53a0 *)
mov r8 L0x203f08a8;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0928; Value = 0xfffffffe; PC = 0x53a4 *)
mov r4 L0x203f0928;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09a8; Value = 0x00000004; PC = 0x53a8 *)
mov r11 L0x203f09a8;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a28; Value = 0xfffffffd; PC = 0x53ac *)
mov r12 L0x203f0a28;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0aa8; Value = 0x00000000; PC = 0x53b0 *)
mov lr L0x203f0aa8;
(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;

ghost r4o0@int32, r11o0@int32, r12o0@int32, lro0@int32:
      r4 = r4o0 /\ r11 = r11o0 /\ r12 = r12o0 /\ lr = lro0
   && r4 = r4o0 /\ r11 = r11o0 /\ r12 = r12o0 /\ lr = lro0;

(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o0,r11o0,r12o0,lro0]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o0,r11o0,r12o0,lro0]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o1@int32, r8o1@int32, r12o1@int32, lro1@int32:
      r7 = r7o1 /\ r8 = r8o1 /\ r12 = r12o1 /\ lr = lro1
   && r7 = r7o1 /\ r8 = r8o1 /\ r12 = r12o1 /\ lr = lro1;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o1,r8o1,r12o1,lro1]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o1,r8o1,r12o1,lro1]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o2@int32, r8o2@int32, r11o2@int32, lro2@int32:
      r6 = r6o2 /\ r8 = r8o2 /\ r11 = r11o2 /\ lr = lro2
   && r6 = r6o2 /\ r8 = r8o2 /\ r11 = r11o2 /\ lr = lro2;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o2,r8o2,r11o2,lro2]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o2,r8o2,r11o2,lro2]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07a8; PC = 0x54a8 *)
mov L0x203f07a8 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0828; PC = 0x54ac *)
mov L0x203f0828 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08a8; PC = 0x54b0 *)
mov L0x203f08a8 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0928; PC = 0x54b4 *)
mov L0x203f0928 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09a8; PC = 0x54b8 *)
mov L0x203f09a8 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a28; PC = 0x54bc *)
mov L0x203f0a28 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0aa8; PC = 0x54c0 *)
mov L0x203f0aa8 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0728; PC = 0x54c4 *)
mov L0x203f0728 r5;

(**************** CUT 0****************)

cut eqmod [L0x203f0728,L0x203f07a8,L0x203f0828,L0x203f08a8,
           L0x203f0928,L0x203f09a8,L0x203f0a28,L0x203f0aa8]
          [poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0],
           poly X**32 [c00,c20,c40,c60,c80,ca0,cc0,ce0]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0728,L0x203f07a8,L0x203f0828,L0x203f08a8,
     L0x203f0928,L0x203f09a8,L0x203f0a28,L0x203f0aa8] /\
    [L0x203f0728,L0x203f07a8,L0x203f0828,L0x203f08a8,
     L0x203f0928,L0x203f09a8,L0x203f0a28,L0x203f0aa8] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f072c; Value = 0xffffffff; PC = 0x54c8 *)
mov r5 L0x203f072c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07ac; Value = 0x00000001; PC = 0x54cc *)
mov r6 L0x203f07ac;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f082c; Value = 0xfffffffe; PC = 0x54d0 *)
mov r7 L0x203f082c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08ac; Value = 0xfffffffd; PC = 0x54d4 *)
mov r8 L0x203f08ac;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f092c; Value = 0x00000000; PC = 0x54d8 *)
mov r4 L0x203f092c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09ac; Value = 0x00000001; PC = 0x54dc *)
mov r11 L0x203f09ac;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a2c; Value = 0x00000003; PC = 0x54e0 *)
mov r12 L0x203f0a2c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0aac; Value = 0xffffffff; PC = 0x54e4 *)
mov lr L0x203f0aac;

(**************** twiddle ****************)

ghost r4o3@int32, r11o3@int32, r12o3@int32, lro3@int32:
      r4 = r4o3 /\ r11 = r11o3 /\ r12 = r12o3 /\ lr = lro3
   && r4 = r4o3 /\ r11 = r11o3 /\ r12 = r12o3 /\ lr = lro3;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o3,r11o3,r12o3,lro3]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o3,r11o3,r12o3,lro3]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o4@int32, r8o4@int32, r12o4@int32, lro4@int32:
      r7 = r7o4 /\ r8 = r8o4 /\ r12 = r12o4 /\ lr = lro4
   && r7 = r7o4 /\ r8 = r8o4 /\ r12 = r12o4 /\ lr = lro4;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o4,r8o4,r12o4,lro4]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o4,r8o4,r12o4,lro4]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o5@int32, r8o5@int32, r11o5@int32, lro5@int32:
      r6 = r6o5 /\ r8 = r8o5 /\ r11 = r11o5 /\ lr = lro5
   && r6 = r6o5 /\ r8 = r8o5 /\ r11 = r11o5 /\ lr = lro5;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o5,r8o5,r11o5,lro5]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o5,r8o5,r11o5,lro5]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07ac; PC = 0x55dc *)
mov L0x203f07ac r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f082c; PC = 0x55e0 *)
mov L0x203f082c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08ac; PC = 0x55e4 *)
mov L0x203f08ac r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f092c; PC = 0x55e8 *)
mov L0x203f092c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09ac; PC = 0x55ec *)
mov L0x203f09ac r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a2c; PC = 0x55f0 *)
mov L0x203f0a2c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0aac; PC = 0x55f4 *)
mov L0x203f0aac lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f072c; PC = 0x55f8 *)
mov L0x203f072c r5;

(**************** CUT 1****************)

cut eqmod [L0x203f072c,L0x203f07ac,L0x203f082c,L0x203f08ac,
           L0x203f092c,L0x203f09ac,L0x203f0a2c,L0x203f0aac]
          [poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1],
           poly X**32 [c01,c21,c41,c61,c81,ca1,cc1,ce1]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f072c,L0x203f07ac,L0x203f082c,L0x203f08ac,
     L0x203f092c,L0x203f09ac,L0x203f0a2c,L0x203f0aac] /\
    [L0x203f072c,L0x203f07ac,L0x203f082c,L0x203f08ac,
     L0x203f092c,L0x203f09ac,L0x203f0a2c,L0x203f0aac] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0730; Value = 0xffffffff; PC = 0x5394 *)
mov r5 L0x203f0730;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07b0; Value = 0x00000002; PC = 0x5398 *)
mov r6 L0x203f07b0;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0830; Value = 0xffffffff; PC = 0x539c *)
mov r7 L0x203f0830;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08b0; Value = 0x00000004; PC = 0x53a0 *)
mov r8 L0x203f08b0;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0930; Value = 0x00000004; PC = 0x53a4 *)
mov r4 L0x203f0930;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09b0; Value = 0xfffffffe; PC = 0x53a8 *)
mov r11 L0x203f09b0;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a30; Value = 0xfffffffe; PC = 0x53ac *)
mov r12 L0x203f0a30;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ab0; Value = 0x00000001; PC = 0x53b0 *)
mov lr L0x203f0ab0;

ghost r4o6@int32, r11o6@int32, r12o6@int32, lro6@int32:
      r4 = r4o6 /\ r11 = r11o6 /\ r12 = r12o6 /\ lr = lro6
   && r4 = r4o6 /\ r11 = r11o6 /\ r12 = r12o6 /\ lr = lro6;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o6,r11o6,r12o6,lro6]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o6,r11o6,r12o6,lro6]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o7@int32, r8o7@int32, r12o7@int32, lro7@int32:
      r7 = r7o7 /\ r8 = r8o7 /\ r12 = r12o7 /\ lr = lro7
   && r7 = r7o7 /\ r8 = r8o7 /\ r12 = r12o7 /\ lr = lro7;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o7,r8o7,r12o7,lro7]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o7,r8o7,r12o7,lro7]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o8@int32, r8o8@int32, r11o8@int32, lro8@int32:
      r6 = r6o8 /\ r8 = r8o8 /\ r11 = r11o8 /\ lr = lro8
   && r6 = r6o8 /\ r8 = r8o8 /\ r11 = r11o8 /\ lr = lro8;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o8,r8o8,r11o8,lro8]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o8,r8o8,r11o8,lro8]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07b0; PC = 0x54a8 *)
mov L0x203f07b0 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0830; PC = 0x54ac *)
mov L0x203f0830 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08b0; PC = 0x54b0 *)
mov L0x203f08b0 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0930; PC = 0x54b4 *)
mov L0x203f0930 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09b0; PC = 0x54b8 *)
mov L0x203f09b0 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a30; PC = 0x54bc *)
mov L0x203f0a30 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ab0; PC = 0x54c0 *)
mov L0x203f0ab0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0730; PC = 0x54c4 *)
mov L0x203f0730 r5;

(**************** CUT 2****************)

cut eqmod [L0x203f0730,L0x203f07b0,L0x203f0830,L0x203f08b0,
           L0x203f0930,L0x203f09b0,L0x203f0a30,L0x203f0ab0]
          [poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2],
           poly X**32 [c02,c22,c42,c62,c82,ca2,cc2,ce2]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0730,L0x203f07b0,L0x203f0830,L0x203f08b0,
     L0x203f0930,L0x203f09b0,L0x203f0a30,L0x203f0ab0] /\
    [L0x203f0730,L0x203f07b0,L0x203f0830,L0x203f08b0,
     L0x203f0930,L0x203f09b0,L0x203f0a30,L0x203f0ab0] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0734; Value = 0xfffffffe; PC = 0x54c8 *)
mov r5 L0x203f0734;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07b4; Value = 0x00000004; PC = 0x54cc *)
mov r6 L0x203f07b4;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0834; Value = 0xfffffffd; PC = 0x54d0 *)
mov r7 L0x203f0834;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08b4; Value = 0xfffffffe; PC = 0x54d4 *)
mov r8 L0x203f08b4;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0934; Value = 0xfffffffc; PC = 0x54d8 *)
mov r4 L0x203f0934;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09b4; Value = 0xffffffff; PC = 0x54dc *)
mov r11 L0x203f09b4;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a34; Value = 0xffffffff; PC = 0x54e0 *)
mov r12 L0x203f0a34;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ab4; Value = 0x00000004; PC = 0x54e4 *)
mov lr L0x203f0ab4;

ghost r4o9@int32, r11o9@int32, r12o9@int32, lro9@int32:
      r4 = r4o9 /\ r11 = r11o9 /\ r12 = r12o9 /\ lr = lro9
   && r4 = r4o9 /\ r11 = r11o9 /\ r12 = r12o9 /\ lr = lro9;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o9,r11o9,r12o9,lro9]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o9,r11o9,r12o9,lro9]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o10@int32, r8o10@int32, r12o10@int32, lro10@int32:
      r7 = r7o10 /\ r8 = r8o10 /\ r12 = r12o10 /\ lr = lro10
   && r7 = r7o10 /\ r8 = r8o10 /\ r12 = r12o10 /\ lr = lro10;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o10,r8o10,r12o10,lro10]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o10,r8o10,r12o10,lro10]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o11@int32, r8o11@int32, r11o11@int32, lro11@int32:
      r6 = r6o11 /\ r8 = r8o11 /\ r11 = r11o11 /\ lr = lro11
   && r6 = r6o11 /\ r8 = r8o11 /\ r11 = r11o11 /\ lr = lro11;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o11,r8o11,r11o11,lro11]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o11,r8o11,r11o11,lro11]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07b4; PC = 0x55dc *)
mov L0x203f07b4 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0834; PC = 0x55e0 *)
mov L0x203f0834 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08b4; PC = 0x55e4 *)
mov L0x203f08b4 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0934; PC = 0x55e8 *)
mov L0x203f0934 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09b4; PC = 0x55ec *)
mov L0x203f09b4 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a34; PC = 0x55f0 *)
mov L0x203f0a34 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ab4; PC = 0x55f4 *)
mov L0x203f0ab4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0734; PC = 0x55f8 *)
mov L0x203f0734 r5;

(**************** CUT 3****************)

cut eqmod [L0x203f0734,L0x203f07b4,L0x203f0834,L0x203f08b4,
           L0x203f0934,L0x203f09b4,L0x203f0a34,L0x203f0ab4]
          [poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3],
           poly X**32 [c03,c23,c43,c63,c83,ca3,cc3,ce3]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0734,L0x203f07b4,L0x203f0834,L0x203f08b4,
     L0x203f0934,L0x203f09b4,L0x203f0a34,L0x203f0ab4] /\
    [L0x203f0734,L0x203f07b4,L0x203f0834,L0x203f08b4,
     L0x203f0934,L0x203f09b4,L0x203f0a34,L0x203f0ab4] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0738; Value = 0xfffffffd; PC = 0x5394 *)
mov r5 L0x203f0738;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07b8; Value = 0x00000004; PC = 0x5398 *)
mov r6 L0x203f07b8;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0838; Value = 0xfffffffe; PC = 0x539c *)
mov r7 L0x203f0838;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08b8; Value = 0xfffffffc; PC = 0x53a0 *)
mov r8 L0x203f08b8;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0938; Value = 0xffffffff; PC = 0x53a4 *)
mov r4 L0x203f0938;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09b8; Value = 0x00000003; PC = 0x53a8 *)
mov r11 L0x203f09b8;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a38; Value = 0xfffffffd; PC = 0x53ac *)
mov r12 L0x203f0a38;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ab8; Value = 0xfffffffe; PC = 0x53b0 *)
mov lr L0x203f0ab8;

ghost r4o12@int32, r11o12@int32, r12o12@int32, lro12@int32:
      r4 = r4o12 /\ r11 = r11o12 /\ r12 = r12o12 /\ lr = lro12
   && r4 = r4o12 /\ r11 = r11o12 /\ r12 = r12o12 /\ lr = lro12;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o12,r11o12,r12o12,lro12]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o12,r11o12,r12o12,lro12]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o13@int32, r8o13@int32, r12o13@int32, lro13@int32:
      r7 = r7o13 /\ r8 = r8o13 /\ r12 = r12o13 /\ lr = lro13
   && r7 = r7o13 /\ r8 = r8o13 /\ r12 = r12o13 /\ lr = lro13;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o13,r8o13,r12o13,lro13]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o13,r8o13,r12o13,lro13]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o14@int32, r8o14@int32, r11o14@int32, lro14@int32:
      r6 = r6o14 /\ r8 = r8o14 /\ r11 = r11o14 /\ lr = lro14
   && r6 = r6o14 /\ r8 = r8o14 /\ r11 = r11o14 /\ lr = lro14;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o14,r8o14,r11o14,lro14]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o14,r8o14,r11o14,lro14]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07b8; PC = 0x54a8 *)
mov L0x203f07b8 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0838; PC = 0x54ac *)
mov L0x203f0838 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08b8; PC = 0x54b0 *)
mov L0x203f08b8 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0938; PC = 0x54b4 *)
mov L0x203f0938 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09b8; PC = 0x54b8 *)
mov L0x203f09b8 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a38; PC = 0x54bc *)
mov L0x203f0a38 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ab8; PC = 0x54c0 *)
mov L0x203f0ab8 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0738; PC = 0x54c4 *)
mov L0x203f0738 r5;

(**************** CUT 4****************)

cut eqmod [L0x203f0738,L0x203f07b8,L0x203f0838,L0x203f08b8,
           L0x203f0938,L0x203f09b8,L0x203f0a38,L0x203f0ab8]
          [poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4],
           poly X**32 [c04,c24,c44,c64,c84,ca4,cc4,ce4]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0738,L0x203f07b8,L0x203f0838,L0x203f08b8,
     L0x203f0938,L0x203f09b8,L0x203f0a38,L0x203f0ab8] /\
    [L0x203f0738,L0x203f07b8,L0x203f0838,L0x203f08b8,
     L0x203f0938,L0x203f09b8,L0x203f0a38,L0x203f0ab8] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f073c; Value = 0xfffffffe; PC = 0x54c8 *)
mov r5 L0x203f073c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07bc; Value = 0xfffffffd; PC = 0x54cc *)
mov r6 L0x203f07bc;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f083c; Value = 0xfffffffe; PC = 0x54d0 *)
mov r7 L0x203f083c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08bc; Value = 0xfffffffc; PC = 0x54d4 *)
mov r8 L0x203f08bc;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f093c; Value = 0xfffffffd; PC = 0x54d8 *)
mov r4 L0x203f093c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09bc; Value = 0x00000000; PC = 0x54dc *)
mov r11 L0x203f09bc;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a3c; Value = 0xfffffffc; PC = 0x54e0 *)
mov r12 L0x203f0a3c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0abc; Value = 0x00000004; PC = 0x54e4 *)
mov lr L0x203f0abc;

ghost r4o15@int32, r11o15@int32, r12o15@int32, lro15@int32:
      r4 = r4o15 /\ r11 = r11o15 /\ r12 = r12o15 /\ lr = lro15
   && r4 = r4o15 /\ r11 = r11o15 /\ r12 = r12o15 /\ lr = lro15;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o15,r11o15,r12o15,lro15]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o15,r11o15,r12o15,lro15]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o16@int32, r8o16@int32, r12o16@int32, lro16@int32:
      r7 = r7o16 /\ r8 = r8o16 /\ r12 = r12o16 /\ lr = lro16
   && r7 = r7o16 /\ r8 = r8o16 /\ r12 = r12o16 /\ lr = lro16;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o16,r8o16,r12o16,lro16]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o16,r8o16,r12o16,lro16]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o17@int32, r8o17@int32, r11o17@int32, lro17@int32:
      r6 = r6o17 /\ r8 = r8o17 /\ r11 = r11o17 /\ lr = lro17
   && r6 = r6o17 /\ r8 = r8o17 /\ r11 = r11o17 /\ lr = lro17;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o17,r8o17,r11o17,lro17]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o17,r8o17,r11o17,lro17]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07bc; PC = 0x55dc *)
mov L0x203f07bc r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f083c; PC = 0x55e0 *)
mov L0x203f083c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08bc; PC = 0x55e4 *)
mov L0x203f08bc r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f093c; PC = 0x55e8 *)
mov L0x203f093c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09bc; PC = 0x55ec *)
mov L0x203f09bc r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a3c; PC = 0x55f0 *)
mov L0x203f0a3c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0abc; PC = 0x55f4 *)
mov L0x203f0abc lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f073c; PC = 0x55f8 *)
mov L0x203f073c r5;

(**************** CUT 5****************)

cut eqmod [L0x203f073c,L0x203f07bc,L0x203f083c,L0x203f08bc,
           L0x203f093c,L0x203f09bc,L0x203f0a3c,L0x203f0abc]
          [poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5],
           poly X**32 [c05,c25,c45,c65,c85,ca5,cc5,ce5]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f073c,L0x203f07bc,L0x203f083c,L0x203f08bc,
     L0x203f093c,L0x203f09bc,L0x203f0a3c,L0x203f0abc] /\
    [L0x203f073c,L0x203f07bc,L0x203f083c,L0x203f08bc,
     L0x203f093c,L0x203f09bc,L0x203f0a3c,L0x203f0abc] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0740; Value = 0x00000003; PC = 0x5394 *)
mov r5 L0x203f0740;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07c0; Value = 0x00000001; PC = 0x5398 *)
mov r6 L0x203f07c0;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0840; Value = 0x00000003; PC = 0x539c *)
mov r7 L0x203f0840;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08c0; Value = 0xfffffffe; PC = 0x53a0 *)
mov r8 L0x203f08c0;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0940; Value = 0x00000002; PC = 0x53a4 *)
mov r4 L0x203f0940;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09c0; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f09c0;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a40; Value = 0x00000000; PC = 0x53ac *)
mov r12 L0x203f0a40;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ac0; Value = 0xfffffffe; PC = 0x53b0 *)
mov lr L0x203f0ac0;

ghost r4o18@int32, r11o18@int32, r12o18@int32, lro18@int32:
      r4 = r4o18 /\ r11 = r11o18 /\ r12 = r12o18 /\ lr = lro18
   && r4 = r4o18 /\ r11 = r11o18 /\ r12 = r12o18 /\ lr = lro18;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o18,r11o18,r12o18,lro18]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o18,r11o18,r12o18,lro18]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o19@int32, r8o19@int32, r12o19@int32, lro19@int32:
      r7 = r7o19 /\ r8 = r8o19 /\ r12 = r12o19 /\ lr = lro19
   && r7 = r7o19 /\ r8 = r8o19 /\ r12 = r12o19 /\ lr = lro19;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o19,r8o19,r12o19,lro19]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o19,r8o19,r12o19,lro19]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o20@int32, r8o20@int32, r11o20@int32, lro20@int32:
      r6 = r6o20 /\ r8 = r8o20 /\ r11 = r11o20 /\ lr = lro20
   && r6 = r6o20 /\ r8 = r8o20 /\ r11 = r11o20 /\ lr = lro20;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o20,r8o20,r11o20,lro20]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o20,r8o20,r11o20,lro20]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07c0; PC = 0x54a8 *)
mov L0x203f07c0 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0840; PC = 0x54ac *)
mov L0x203f0840 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08c0; PC = 0x54b0 *)
mov L0x203f08c0 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0940; PC = 0x54b4 *)
mov L0x203f0940 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09c0; PC = 0x54b8 *)
mov L0x203f09c0 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a40; PC = 0x54bc *)
mov L0x203f0a40 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ac0; PC = 0x54c0 *)
mov L0x203f0ac0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0740; PC = 0x54c4 *)
mov L0x203f0740 r5;

(**************** CUT 6****************)

cut eqmod [L0x203f0740,L0x203f07c0,L0x203f0840,L0x203f08c0,
           L0x203f0940,L0x203f09c0,L0x203f0a40,L0x203f0ac0]
          [poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6],
           poly X**32 [c06,c26,c46,c66,c86,ca6,cc6,ce6]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0740,L0x203f07c0,L0x203f0840,L0x203f08c0,
     L0x203f0940,L0x203f09c0,L0x203f0a40,L0x203f0ac0] /\
    [L0x203f0740,L0x203f07c0,L0x203f0840,L0x203f08c0,
     L0x203f0940,L0x203f09c0,L0x203f0a40,L0x203f0ac0] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0744; Value = 0xfffffffc; PC = 0x54c8 *)
mov r5 L0x203f0744;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07c4; Value = 0xffffffff; PC = 0x54cc *)
mov r6 L0x203f07c4;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0844; Value = 0x00000002; PC = 0x54d0 *)
mov r7 L0x203f0844;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08c4; Value = 0x00000004; PC = 0x54d4 *)
mov r8 L0x203f08c4;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0944; Value = 0xfffffffe; PC = 0x54d8 *)
mov r4 L0x203f0944;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09c4; Value = 0x00000003; PC = 0x54dc *)
mov r11 L0x203f09c4;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a44; Value = 0x00000004; PC = 0x54e0 *)
mov r12 L0x203f0a44;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ac4; Value = 0x00000000; PC = 0x54e4 *)
mov lr L0x203f0ac4;

ghost r4o21@int32, r11o21@int32, r12o21@int32, lro21@int32:
      r4 = r4o21 /\ r11 = r11o21 /\ r12 = r12o21 /\ lr = lro21
   && r4 = r4o21 /\ r11 = r11o21 /\ r12 = r12o21 /\ lr = lro21;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o21,r11o21,r12o21,lro21]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o21,r11o21,r12o21,lro21]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o22@int32, r8o22@int32, r12o22@int32, lro22@int32:
      r7 = r7o22 /\ r8 = r8o22 /\ r12 = r12o22 /\ lr = lro22
   && r7 = r7o22 /\ r8 = r8o22 /\ r12 = r12o22 /\ lr = lro22;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o22,r8o22,r12o22,lro22]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o22,r8o22,r12o22,lro22]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o23@int32, r8o23@int32, r11o23@int32, lro23@int32:
      r6 = r6o23 /\ r8 = r8o23 /\ r11 = r11o23 /\ lr = lro23
   && r6 = r6o23 /\ r8 = r8o23 /\ r11 = r11o23 /\ lr = lro23;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o23,r8o23,r11o23,lro23]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o23,r8o23,r11o23,lro23]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07c4; PC = 0x55dc *)
mov L0x203f07c4 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0844; PC = 0x55e0 *)
mov L0x203f0844 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08c4; PC = 0x55e4 *)
mov L0x203f08c4 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0944; PC = 0x55e8 *)
mov L0x203f0944 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09c4; PC = 0x55ec *)
mov L0x203f09c4 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a44; PC = 0x55f0 *)
mov L0x203f0a44 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ac4; PC = 0x55f4 *)
mov L0x203f0ac4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0744; PC = 0x55f8 *)
mov L0x203f0744 r5;

(**************** CUT 7****************)

cut eqmod [L0x203f0744,L0x203f07c4,L0x203f0844,L0x203f08c4,
           L0x203f0944,L0x203f09c4,L0x203f0a44,L0x203f0ac4]
          [poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7],
           poly X**32 [c07,c27,c47,c67,c87,ca7,cc7,ce7]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0744,L0x203f07c4,L0x203f0844,L0x203f08c4,
     L0x203f0944,L0x203f09c4,L0x203f0a44,L0x203f0ac4] /\
    [L0x203f0744,L0x203f07c4,L0x203f0844,L0x203f08c4,
     L0x203f0944,L0x203f09c4,L0x203f0a44,L0x203f0ac4] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0748; Value = 0x00000001; PC = 0x5394 *)
mov r5 L0x203f0748;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07c8; Value = 0x00000003; PC = 0x5398 *)
mov r6 L0x203f07c8;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0848; Value = 0x00000002; PC = 0x539c *)
mov r7 L0x203f0848;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08c8; Value = 0x00000002; PC = 0x53a0 *)
mov r8 L0x203f08c8;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0948; Value = 0xffffffff; PC = 0x53a4 *)
mov r4 L0x203f0948;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09c8; Value = 0xfffffffc; PC = 0x53a8 *)
mov r11 L0x203f09c8;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a48; Value = 0xfffffffd; PC = 0x53ac *)
mov r12 L0x203f0a48;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ac8; Value = 0x00000001; PC = 0x53b0 *)
mov lr L0x203f0ac8;

ghost r4o24@int32, r11o24@int32, r12o24@int32, lro24@int32:
      r4 = r4o24 /\ r11 = r11o24 /\ r12 = r12o24 /\ lr = lro24
   && r4 = r4o24 /\ r11 = r11o24 /\ r12 = r12o24 /\ lr = lro24;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o24,r11o24,r12o24,lro24]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o24,r11o24,r12o24,lro24]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o25@int32, r8o25@int32, r12o25@int32, lro25@int32:
      r7 = r7o25 /\ r8 = r8o25 /\ r12 = r12o25 /\ lr = lro25
   && r7 = r7o25 /\ r8 = r8o25 /\ r12 = r12o25 /\ lr = lro25;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o25,r8o25,r12o25,lro25]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o25,r8o25,r12o25,lro25]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o26@int32, r8o26@int32, r11o26@int32, lro26@int32:
      r6 = r6o26 /\ r8 = r8o26 /\ r11 = r11o26 /\ lr = lro26
   && r6 = r6o26 /\ r8 = r8o26 /\ r11 = r11o26 /\ lr = lro26;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o26,r8o26,r11o26,lro26]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o26,r8o26,r11o26,lro26]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07c8; PC = 0x54a8 *)
mov L0x203f07c8 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0848; PC = 0x54ac *)
mov L0x203f0848 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08c8; PC = 0x54b0 *)
mov L0x203f08c8 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0948; PC = 0x54b4 *)
mov L0x203f0948 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09c8; PC = 0x54b8 *)
mov L0x203f09c8 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a48; PC = 0x54bc *)
mov L0x203f0a48 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ac8; PC = 0x54c0 *)
mov L0x203f0ac8 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0748; PC = 0x54c4 *)
mov L0x203f0748 r5;
(**************** CUT 8****************)

cut eqmod [L0x203f0748,L0x203f07c8,L0x203f0848,L0x203f08c8,
           L0x203f0948,L0x203f09c8,L0x203f0a48,L0x203f0ac8]
          [poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8],
           poly X**32 [c08,c28,c48,c68,c88,ca8,cc8,ce8]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0748,L0x203f07c8,L0x203f0848,L0x203f08c8,
     L0x203f0948,L0x203f09c8,L0x203f0a48,L0x203f0ac8] /\
    [L0x203f0748,L0x203f07c8,L0x203f0848,L0x203f08c8,
     L0x203f0948,L0x203f09c8,L0x203f0a48,L0x203f0ac8] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f074c; Value = 0x00000002; PC = 0x54c8 *)
mov r5 L0x203f074c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07cc; Value = 0xffffffff; PC = 0x54cc *)
mov r6 L0x203f07cc;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f084c; Value = 0xfffffffd; PC = 0x54d0 *)
mov r7 L0x203f084c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08cc; Value = 0x00000002; PC = 0x54d4 *)
mov r8 L0x203f08cc;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f094c; Value = 0xffffffff; PC = 0x54d8 *)
mov r4 L0x203f094c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09cc; Value = 0xfffffffc; PC = 0x54dc *)
mov r11 L0x203f09cc;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a4c; Value = 0x00000000; PC = 0x54e0 *)
mov r12 L0x203f0a4c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0acc; Value = 0xfffffffd; PC = 0x54e4 *)
mov lr L0x203f0acc;

ghost r4o27@int32, r11o27@int32, r12o27@int32, lro27@int32:
      r4 = r4o27 /\ r11 = r11o27 /\ r12 = r12o27 /\ lr = lro27
   && r4 = r4o27 /\ r11 = r11o27 /\ r12 = r12o27 /\ lr = lro27;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o27,r11o27,r12o27,lro27]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o27,r11o27,r12o27,lro27]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o28@int32, r8o28@int32, r12o28@int32, lro28@int32:
      r7 = r7o28 /\ r8 = r8o28 /\ r12 = r12o28 /\ lr = lro28
   && r7 = r7o28 /\ r8 = r8o28 /\ r12 = r12o28 /\ lr = lro28;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o28,r8o28,r12o28,lro28]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o28,r8o28,r12o28,lro28]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o29@int32, r8o29@int32, r11o29@int32, lro29@int32:
      r6 = r6o29 /\ r8 = r8o29 /\ r11 = r11o29 /\ lr = lro29
   && r6 = r6o29 /\ r8 = r8o29 /\ r11 = r11o29 /\ lr = lro29;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o29,r8o29,r11o29,lro29]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o29,r8o29,r11o29,lro29]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07cc; PC = 0x55dc *)
mov L0x203f07cc r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f084c; PC = 0x55e0 *)
mov L0x203f084c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08cc; PC = 0x55e4 *)
mov L0x203f08cc r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f094c; PC = 0x55e8 *)
mov L0x203f094c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09cc; PC = 0x55ec *)
mov L0x203f09cc r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a4c; PC = 0x55f0 *)
mov L0x203f0a4c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0acc; PC = 0x55f4 *)
mov L0x203f0acc lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f074c; PC = 0x55f8 *)
mov L0x203f074c r5;

(**************** CUT 9****************)

cut eqmod [L0x203f074c,L0x203f07cc,L0x203f084c,L0x203f08cc,
           L0x203f094c,L0x203f09cc,L0x203f0a4c,L0x203f0acc]
          [poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9],
           poly X**32 [c09,c29,c49,c69,c89,ca9,cc9,ce9]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f074c,L0x203f07cc,L0x203f084c,L0x203f08cc,
     L0x203f094c,L0x203f09cc,L0x203f0a4c,L0x203f0acc] /\
    [L0x203f074c,L0x203f07cc,L0x203f084c,L0x203f08cc,
     L0x203f094c,L0x203f09cc,L0x203f0a4c,L0x203f0acc] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0750; Value = 0xfffffffe; PC = 0x5394 *)
mov r5 L0x203f0750;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07d0; Value = 0x00000000; PC = 0x5398 *)
mov r6 L0x203f07d0;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0850; Value = 0x00000003; PC = 0x539c *)
mov r7 L0x203f0850;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08d0; Value = 0x00000000; PC = 0x53a0 *)
mov r8 L0x203f08d0;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0950; Value = 0x00000004; PC = 0x53a4 *)
mov r4 L0x203f0950;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09d0; Value = 0x00000004; PC = 0x53a8 *)
mov r11 L0x203f09d0;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a50; Value = 0x00000003; PC = 0x53ac *)
mov r12 L0x203f0a50;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ad0; Value = 0xffffffff; PC = 0x53b0 *)
mov lr L0x203f0ad0;

ghost r4o30@int32, r11o30@int32, r12o30@int32, lro30@int32:
      r4 = r4o30 /\ r11 = r11o30 /\ r12 = r12o30 /\ lr = lro30
   && r4 = r4o30 /\ r11 = r11o30 /\ r12 = r12o30 /\ lr = lro30;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o30,r11o30,r12o30,lro30]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o30,r11o30,r12o30,lro30]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o31@int32, r8o31@int32, r12o31@int32, lro31@int32:
      r7 = r7o31 /\ r8 = r8o31 /\ r12 = r12o31 /\ lr = lro31
   && r7 = r7o31 /\ r8 = r8o31 /\ r12 = r12o31 /\ lr = lro31;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o31,r8o31,r12o31,lro31]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o31,r8o31,r12o31,lro31]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o32@int32, r8o32@int32, r11o32@int32, lro32@int32:
      r6 = r6o32 /\ r8 = r8o32 /\ r11 = r11o32 /\ lr = lro32
   && r6 = r6o32 /\ r8 = r8o32 /\ r11 = r11o32 /\ lr = lro32;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o32,r8o32,r11o32,lro32]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o32,r8o32,r11o32,lro32]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07d0; PC = 0x54a8 *)
mov L0x203f07d0 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0850; PC = 0x54ac *)
mov L0x203f0850 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08d0; PC = 0x54b0 *)
mov L0x203f08d0 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0950; PC = 0x54b4 *)
mov L0x203f0950 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09d0; PC = 0x54b8 *)
mov L0x203f09d0 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a50; PC = 0x54bc *)
mov L0x203f0a50 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ad0; PC = 0x54c0 *)
mov L0x203f0ad0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0750; PC = 0x54c4 *)
mov L0x203f0750 r5;

(**************** CUT 10****************)

cut eqmod [L0x203f0750,L0x203f07d0,L0x203f0850,L0x203f08d0,
           L0x203f0950,L0x203f09d0,L0x203f0a50,L0x203f0ad0]
          [poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea],
           poly X**32 [c0a,c2a,c4a,c6a,c8a,caa,cca,cea]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0750,L0x203f07d0,L0x203f0850,L0x203f08d0,
     L0x203f0950,L0x203f09d0,L0x203f0a50,L0x203f0ad0] /\
    [L0x203f0750,L0x203f07d0,L0x203f0850,L0x203f08d0,
     L0x203f0950,L0x203f09d0,L0x203f0a50,L0x203f0ad0] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0754; Value = 0x00000000; PC = 0x54c8 *)
mov r5 L0x203f0754;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07d4; Value = 0x00000001; PC = 0x54cc *)
mov r6 L0x203f07d4;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0854; Value = 0xffffffff; PC = 0x54d0 *)
mov r7 L0x203f0854;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08d4; Value = 0xfffffffd; PC = 0x54d4 *)
mov r8 L0x203f08d4;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0954; Value = 0x00000003; PC = 0x54d8 *)
mov r4 L0x203f0954;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09d4; Value = 0xfffffffc; PC = 0x54dc *)
mov r11 L0x203f09d4;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a54; Value = 0x00000000; PC = 0x54e0 *)
mov r12 L0x203f0a54;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ad4; Value = 0x00000002; PC = 0x54e4 *)
mov lr L0x203f0ad4;

ghost r4o33@int32, r11o33@int32, r12o33@int32, lro33@int32:
      r4 = r4o33 /\ r11 = r11o33 /\ r12 = r12o33 /\ lr = lro33
   && r4 = r4o33 /\ r11 = r11o33 /\ r12 = r12o33 /\ lr = lro33;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o33,r11o33,r12o33,lro33]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o33,r11o33,r12o33,lro33]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o34@int32, r8o34@int32, r12o34@int32, lro34@int32:
      r7 = r7o34 /\ r8 = r8o34 /\ r12 = r12o34 /\ lr = lro34
   && r7 = r7o34 /\ r8 = r8o34 /\ r12 = r12o34 /\ lr = lro34;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o34,r8o34,r12o34,lro34]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o34,r8o34,r12o34,lro34]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o35@int32, r8o35@int32, r11o35@int32, lro35@int32:
      r6 = r6o35 /\ r8 = r8o35 /\ r11 = r11o35 /\ lr = lro35
   && r6 = r6o35 /\ r8 = r8o35 /\ r11 = r11o35 /\ lr = lro35;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o35,r8o35,r11o35,lro35]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o35,r8o35,r11o35,lro35]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07d4; PC = 0x55dc *)
mov L0x203f07d4 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0854; PC = 0x55e0 *)
mov L0x203f0854 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08d4; PC = 0x55e4 *)
mov L0x203f08d4 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0954; PC = 0x55e8 *)
mov L0x203f0954 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09d4; PC = 0x55ec *)
mov L0x203f09d4 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a54; PC = 0x55f0 *)
mov L0x203f0a54 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ad4; PC = 0x55f4 *)
mov L0x203f0ad4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0754; PC = 0x55f8 *)
mov L0x203f0754 r5;

(**************** CUT 11****************)

cut eqmod [L0x203f0754,L0x203f07d4,L0x203f0854,L0x203f08d4,
           L0x203f0954,L0x203f09d4,L0x203f0a54,L0x203f0ad4]
          [poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb],
           poly X**32 [c0b,c2b,c4b,c6b,c8b,cab,ccb,ceb]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0754,L0x203f07d4,L0x203f0854,L0x203f08d4,
     L0x203f0954,L0x203f09d4,L0x203f0a54,L0x203f0ad4] /\
    [L0x203f0754,L0x203f07d4,L0x203f0854,L0x203f08d4,
     L0x203f0954,L0x203f09d4,L0x203f0a54,L0x203f0ad4] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0758; Value = 0x00000002; PC = 0x5394 *)
mov r5 L0x203f0758;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07d8; Value = 0x00000000; PC = 0x5398 *)
mov r6 L0x203f07d8;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0858; Value = 0xffffffff; PC = 0x539c *)
mov r7 L0x203f0858;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08d8; Value = 0xfffffffe; PC = 0x53a0 *)
mov r8 L0x203f08d8;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0958; Value = 0x00000000; PC = 0x53a4 *)
mov r4 L0x203f0958;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09d8; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f09d8;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a58; Value = 0x00000004; PC = 0x53ac *)
mov r12 L0x203f0a58;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ad8; Value = 0x00000003; PC = 0x53b0 *)
mov lr L0x203f0ad8;

ghost r4o36@int32, r11o36@int32, r12o36@int32, lro36@int32:
      r4 = r4o36 /\ r11 = r11o36 /\ r12 = r12o36 /\ lr = lro36
   && r4 = r4o36 /\ r11 = r11o36 /\ r12 = r12o36 /\ lr = lro36;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o36,r11o36,r12o36,lro36]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o36,r11o36,r12o36,lro36]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o37@int32, r8o37@int32, r12o37@int32, lro37@int32:
      r7 = r7o37 /\ r8 = r8o37 /\ r12 = r12o37 /\ lr = lro37
   && r7 = r7o37 /\ r8 = r8o37 /\ r12 = r12o37 /\ lr = lro37;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o37,r8o37,r12o37,lro37]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o37,r8o37,r12o37,lro37]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o38@int32, r8o38@int32, r11o38@int32, lro38@int32:
      r6 = r6o38 /\ r8 = r8o38 /\ r11 = r11o38 /\ lr = lro38
   && r6 = r6o38 /\ r8 = r8o38 /\ r11 = r11o38 /\ lr = lro38;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o38,r8o38,r11o38,lro38]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o38,r8o38,r11o38,lro38]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07d8; PC = 0x54a8 *)
mov L0x203f07d8 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0858; PC = 0x54ac *)
mov L0x203f0858 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08d8; PC = 0x54b0 *)
mov L0x203f08d8 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0958; PC = 0x54b4 *)
mov L0x203f0958 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09d8; PC = 0x54b8 *)
mov L0x203f09d8 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a58; PC = 0x54bc *)
mov L0x203f0a58 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ad8; PC = 0x54c0 *)
mov L0x203f0ad8 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0758; PC = 0x54c4 *)
mov L0x203f0758 r5;

(**************** CUT 12****************)

cut eqmod [L0x203f0758,L0x203f07d8,L0x203f0858,L0x203f08d8,
           L0x203f0958,L0x203f09d8,L0x203f0a58,L0x203f0ad8]
          [poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec],
           poly X**32 [c0c,c2c,c4c,c6c,c8c,cac,ccc,cec]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0758,L0x203f07d8,L0x203f0858,L0x203f08d8,
     L0x203f0958,L0x203f09d8,L0x203f0a58,L0x203f0ad8] /\
    [L0x203f0758,L0x203f07d8,L0x203f0858,L0x203f08d8,
     L0x203f0958,L0x203f09d8,L0x203f0a58,L0x203f0ad8] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f075c; Value = 0xfffffffd; PC = 0x54c8 *)
mov r5 L0x203f075c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07dc; Value = 0xffffffff; PC = 0x54cc *)
mov r6 L0x203f07dc;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f085c; Value = 0xfffffffd; PC = 0x54d0 *)
mov r7 L0x203f085c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08dc; Value = 0x00000004; PC = 0x54d4 *)
mov r8 L0x203f08dc;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f095c; Value = 0x00000000; PC = 0x54d8 *)
mov r4 L0x203f095c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09dc; Value = 0x00000000; PC = 0x54dc *)
mov r11 L0x203f09dc;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a5c; Value = 0x00000002; PC = 0x54e0 *)
mov r12 L0x203f0a5c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0adc; Value = 0x00000001; PC = 0x54e4 *)
mov lr L0x203f0adc;

ghost r4o39@int32, r11o39@int32, r12o39@int32, lro39@int32:
      r4 = r4o39 /\ r11 = r11o39 /\ r12 = r12o39 /\ lr = lro39
   && r4 = r4o39 /\ r11 = r11o39 /\ r12 = r12o39 /\ lr = lro39;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o39,r11o39,r12o39,lro39]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o39,r11o39,r12o39,lro39]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o40@int32, r8o40@int32, r12o40@int32, lro40@int32:
      r7 = r7o40 /\ r8 = r8o40 /\ r12 = r12o40 /\ lr = lro40
   && r7 = r7o40 /\ r8 = r8o40 /\ r12 = r12o40 /\ lr = lro40;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o40,r8o40,r12o40,lro40]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o40,r8o40,r12o40,lro40]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o41@int32, r8o41@int32, r11o41@int32, lro41@int32:
      r6 = r6o41 /\ r8 = r8o41 /\ r11 = r11o41 /\ lr = lro41
   && r6 = r6o41 /\ r8 = r8o41 /\ r11 = r11o41 /\ lr = lro41;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o41,r8o41,r11o41,lro41]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o41,r8o41,r11o41,lro41]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07dc; PC = 0x55dc *)
mov L0x203f07dc r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f085c; PC = 0x55e0 *)
mov L0x203f085c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08dc; PC = 0x55e4 *)
mov L0x203f08dc r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f095c; PC = 0x55e8 *)
mov L0x203f095c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09dc; PC = 0x55ec *)
mov L0x203f09dc r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a5c; PC = 0x55f0 *)
mov L0x203f0a5c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0adc; PC = 0x55f4 *)
mov L0x203f0adc lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f075c; PC = 0x55f8 *)
mov L0x203f075c r5;

(**************** CUT 13****************)

cut eqmod [L0x203f075c,L0x203f07dc,L0x203f085c,L0x203f08dc,
           L0x203f095c,L0x203f09dc,L0x203f0a5c,L0x203f0adc]
          [poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced],
           poly X**32 [c0d,c2d,c4d,c6d,c8d,cad,ccd,ced]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f075c,L0x203f07dc,L0x203f085c,L0x203f08dc,
     L0x203f095c,L0x203f09dc,L0x203f0a5c,L0x203f0adc] /\
    [L0x203f075c,L0x203f07dc,L0x203f085c,L0x203f08dc,
     L0x203f095c,L0x203f09dc,L0x203f0a5c,L0x203f0adc] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0760; Value = 0x00000001; PC = 0x5394 *)
mov r5 L0x203f0760;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07e0; Value = 0x00000000; PC = 0x5398 *)
mov r6 L0x203f07e0;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0860; Value = 0x00000000; PC = 0x539c *)
mov r7 L0x203f0860;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08e0; Value = 0x00000000; PC = 0x53a0 *)
mov r8 L0x203f08e0;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0960; Value = 0x00000001; PC = 0x53a4 *)
mov r4 L0x203f0960;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09e0; Value = 0xfffffffc; PC = 0x53a8 *)
mov r11 L0x203f09e0;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a60; Value = 0xfffffffd; PC = 0x53ac *)
mov r12 L0x203f0a60;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ae0; Value = 0xffffffff; PC = 0x53b0 *)
mov lr L0x203f0ae0;

ghost r4o42@int32, r11o42@int32, r12o42@int32, lro42@int32:
      r4 = r4o42 /\ r11 = r11o42 /\ r12 = r12o42 /\ lr = lro42
   && r4 = r4o42 /\ r11 = r11o42 /\ r12 = r12o42 /\ lr = lro42;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o42,r11o42,r12o42,lro42]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o42,r11o42,r12o42,lro42]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o43@int32, r8o43@int32, r12o43@int32, lro43@int32:
      r7 = r7o43 /\ r8 = r8o43 /\ r12 = r12o43 /\ lr = lro43
   && r7 = r7o43 /\ r8 = r8o43 /\ r12 = r12o43 /\ lr = lro43;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o43,r8o43,r12o43,lro43]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o43,r8o43,r12o43,lro43]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o44@int32, r8o44@int32, r11o44@int32, lro44@int32:
      r6 = r6o44 /\ r8 = r8o44 /\ r11 = r11o44 /\ lr = lro44
   && r6 = r6o44 /\ r8 = r8o44 /\ r11 = r11o44 /\ lr = lro44;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o44,r8o44,r11o44,lro44]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o44,r8o44,r11o44,lro44]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07e0; PC = 0x54a8 *)
mov L0x203f07e0 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0860; PC = 0x54ac *)
mov L0x203f0860 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08e0; PC = 0x54b0 *)
mov L0x203f08e0 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0960; PC = 0x54b4 *)
mov L0x203f0960 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09e0; PC = 0x54b8 *)
mov L0x203f09e0 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a60; PC = 0x54bc *)
mov L0x203f0a60 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ae0; PC = 0x54c0 *)
mov L0x203f0ae0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0760; PC = 0x54c4 *)
mov L0x203f0760 r5;

(**************** CUT 14****************)

cut eqmod [L0x203f0760,L0x203f07e0,L0x203f0860,L0x203f08e0,
           L0x203f0960,L0x203f09e0,L0x203f0a60,L0x203f0ae0]
          [poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee],
           poly X**32 [c0e,c2e,c4e,c6e,c8e,cae,cce,cee]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0760,L0x203f07e0,L0x203f0860,L0x203f08e0,
     L0x203f0960,L0x203f09e0,L0x203f0a60,L0x203f0ae0] /\
    [L0x203f0760,L0x203f07e0,L0x203f0860,L0x203f08e0,
     L0x203f0960,L0x203f09e0,L0x203f0a60,L0x203f0ae0] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0764; Value = 0xffffffff; PC = 0x54c8 *)
mov r5 L0x203f0764;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07e4; Value = 0x00000002; PC = 0x54cc *)
mov r6 L0x203f07e4;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0864; Value = 0x00000001; PC = 0x54d0 *)
mov r7 L0x203f0864;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08e4; Value = 0x00000002; PC = 0x54d4 *)
mov r8 L0x203f08e4;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0964; Value = 0x00000001; PC = 0x54d8 *)
mov r4 L0x203f0964;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09e4; Value = 0xfffffffe; PC = 0x54dc *)
mov r11 L0x203f09e4;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a64; Value = 0x00000001; PC = 0x54e0 *)
mov r12 L0x203f0a64;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ae4; Value = 0x00000001; PC = 0x54e4 *)
mov lr L0x203f0ae4;

ghost r4o45@int32, r11o45@int32, r12o45@int32, lro45@int32:
      r4 = r4o45 /\ r11 = r11o45 /\ r12 = r12o45 /\ lr = lro45
   && r4 = r4o45 /\ r11 = r11o45 /\ r12 = r12o45 /\ lr = lro45;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o45,r11o45,r12o45,lro45]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o45,r11o45,r12o45,lro45]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o46@int32, r8o46@int32, r12o46@int32, lro46@int32:
      r7 = r7o46 /\ r8 = r8o46 /\ r12 = r12o46 /\ lr = lro46
   && r7 = r7o46 /\ r8 = r8o46 /\ r12 = r12o46 /\ lr = lro46;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o46,r8o46,r12o46,lro46]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o46,r8o46,r12o46,lro46]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o47@int32, r8o47@int32, r11o47@int32, lro47@int32:
      r6 = r6o47 /\ r8 = r8o47 /\ r11 = r11o47 /\ lr = lro47
   && r6 = r6o47 /\ r8 = r8o47 /\ r11 = r11o47 /\ lr = lro47;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o47,r8o47,r11o47,lro47]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o47,r8o47,r11o47,lro47]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07e4; PC = 0x55dc *)
mov L0x203f07e4 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0864; PC = 0x55e0 *)
mov L0x203f0864 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08e4; PC = 0x55e4 *)
mov L0x203f08e4 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0964; PC = 0x55e8 *)
mov L0x203f0964 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09e4; PC = 0x55ec *)
mov L0x203f09e4 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a64; PC = 0x55f0 *)
mov L0x203f0a64 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ae4; PC = 0x55f4 *)
mov L0x203f0ae4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0764; PC = 0x55f8 *)
mov L0x203f0764 r5;

(**************** CUT 15****************)

cut eqmod [L0x203f0764,L0x203f07e4,L0x203f0864,L0x203f08e4,
           L0x203f0964,L0x203f09e4,L0x203f0a64,L0x203f0ae4]
          [poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef],
           poly X**32 [c0f,c2f,c4f,c6f,c8f,caf,ccf,cef]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0764,L0x203f07e4,L0x203f0864,L0x203f08e4,
     L0x203f0964,L0x203f09e4,L0x203f0a64,L0x203f0ae4] /\
    [L0x203f0764,L0x203f07e4,L0x203f0864,L0x203f08e4,
     L0x203f0964,L0x203f09e4,L0x203f0a64,L0x203f0ae4] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0768; Value = 0x00000000; PC = 0x5394 *)
mov r5 L0x203f0768;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07e8; Value = 0xfffffffd; PC = 0x5398 *)
mov r6 L0x203f07e8;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0868; Value = 0x00000000; PC = 0x539c *)
mov r7 L0x203f0868;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08e8; Value = 0x00000002; PC = 0x53a0 *)
mov r8 L0x203f08e8;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0968; Value = 0x00000000; PC = 0x53a4 *)
mov r4 L0x203f0968;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09e8; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f09e8;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a68; Value = 0xfffffffd; PC = 0x53ac *)
mov r12 L0x203f0a68;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ae8; Value = 0x00000004; PC = 0x53b0 *)
mov lr L0x203f0ae8;

ghost r4o48@int32, r11o48@int32, r12o48@int32, lro48@int32:
      r4 = r4o48 /\ r11 = r11o48 /\ r12 = r12o48 /\ lr = lro48
   && r4 = r4o48 /\ r11 = r11o48 /\ r12 = r12o48 /\ lr = lro48;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o48,r11o48,r12o48,lro48]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o48,r11o48,r12o48,lro48]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o49@int32, r8o49@int32, r12o49@int32, lro49@int32:
      r7 = r7o49 /\ r8 = r8o49 /\ r12 = r12o49 /\ lr = lro49
   && r7 = r7o49 /\ r8 = r8o49 /\ r12 = r12o49 /\ lr = lro49;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o49,r8o49,r12o49,lro49]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o49,r8o49,r12o49,lro49]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o50@int32, r8o50@int32, r11o50@int32, lro50@int32:
      r6 = r6o50 /\ r8 = r8o50 /\ r11 = r11o50 /\ lr = lro50
   && r6 = r6o50 /\ r8 = r8o50 /\ r11 = r11o50 /\ lr = lro50;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o50,r8o50,r11o50,lro50]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o50,r8o50,r11o50,lro50]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07e8; PC = 0x54a8 *)
mov L0x203f07e8 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0868; PC = 0x54ac *)
mov L0x203f0868 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08e8; PC = 0x54b0 *)
mov L0x203f08e8 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0968; PC = 0x54b4 *)
mov L0x203f0968 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09e8; PC = 0x54b8 *)
mov L0x203f09e8 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a68; PC = 0x54bc *)
mov L0x203f0a68 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0ae8; PC = 0x54c0 *)
mov L0x203f0ae8 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0768; PC = 0x54c4 *)
mov L0x203f0768 r5;

(**************** CUT 16****************)

cut eqmod [L0x203f0768,L0x203f07e8,L0x203f0868,L0x203f08e8,
           L0x203f0968,L0x203f09e8,L0x203f0a68,L0x203f0ae8]
          [poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0],
           poly X**32 [c10,c30,c50,c70,c90,cb0,cd0,cf0]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0768,L0x203f07e8,L0x203f0868,L0x203f08e8,
     L0x203f0968,L0x203f09e8,L0x203f0a68,L0x203f0ae8] /\
    [L0x203f0768,L0x203f07e8,L0x203f0868,L0x203f08e8,
     L0x203f0968,L0x203f09e8,L0x203f0a68,L0x203f0ae8] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f076c; Value = 0x00000000; PC = 0x54c8 *)
mov r5 L0x203f076c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07ec; Value = 0x00000001; PC = 0x54cc *)
mov r6 L0x203f07ec;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f086c; Value = 0x00000002; PC = 0x54d0 *)
mov r7 L0x203f086c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08ec; Value = 0xfffffffe; PC = 0x54d4 *)
mov r8 L0x203f08ec;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f096c; Value = 0xffffffff; PC = 0x54d8 *)
mov r4 L0x203f096c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09ec; Value = 0xfffffffd; PC = 0x54dc *)
mov r11 L0x203f09ec;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a6c; Value = 0xfffffffc; PC = 0x54e0 *)
mov r12 L0x203f0a6c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0aec; Value = 0x00000000; PC = 0x54e4 *)
mov lr L0x203f0aec;

ghost r4o51@int32, r11o51@int32, r12o51@int32, lro51@int32:
      r4 = r4o51 /\ r11 = r11o51 /\ r12 = r12o51 /\ lr = lro51
   && r4 = r4o51 /\ r11 = r11o51 /\ r12 = r12o51 /\ lr = lro51;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o51,r11o51,r12o51,lro51]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o51,r11o51,r12o51,lro51]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o52@int32, r8o52@int32, r12o52@int32, lro52@int32:
      r7 = r7o52 /\ r8 = r8o52 /\ r12 = r12o52 /\ lr = lro52
   && r7 = r7o52 /\ r8 = r8o52 /\ r12 = r12o52 /\ lr = lro52;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o52,r8o52,r12o52,lro52]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o52,r8o52,r12o52,lro52]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o53@int32, r8o53@int32, r11o53@int32, lro53@int32:
      r6 = r6o53 /\ r8 = r8o53 /\ r11 = r11o53 /\ lr = lro53
   && r6 = r6o53 /\ r8 = r8o53 /\ r11 = r11o53 /\ lr = lro53;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o53,r8o53,r11o53,lro53]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o53,r8o53,r11o53,lro53]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07ec; PC = 0x55dc *)
mov L0x203f07ec r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f086c; PC = 0x55e0 *)
mov L0x203f086c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08ec; PC = 0x55e4 *)
mov L0x203f08ec r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f096c; PC = 0x55e8 *)
mov L0x203f096c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09ec; PC = 0x55ec *)
mov L0x203f09ec r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a6c; PC = 0x55f0 *)
mov L0x203f0a6c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0aec; PC = 0x55f4 *)
mov L0x203f0aec lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f076c; PC = 0x55f8 *)
mov L0x203f076c r5;

(**************** CUT 17****************)

cut eqmod [L0x203f076c,L0x203f07ec,L0x203f086c,L0x203f08ec,
           L0x203f096c,L0x203f09ec,L0x203f0a6c,L0x203f0aec]
          [poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1],
           poly X**32 [c11,c31,c51,c71,c91,cb1,cd1,cf1]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f076c,L0x203f07ec,L0x203f086c,L0x203f08ec,
     L0x203f096c,L0x203f09ec,L0x203f0a6c,L0x203f0aec] /\
    [L0x203f076c,L0x203f07ec,L0x203f086c,L0x203f08ec,
     L0x203f096c,L0x203f09ec,L0x203f0a6c,L0x203f0aec] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0770; Value = 0xfffffffd; PC = 0x5394 *)
mov r5 L0x203f0770;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07f0; Value = 0xfffffffc; PC = 0x5398 *)
mov r6 L0x203f07f0;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0870; Value = 0xfffffffc; PC = 0x539c *)
mov r7 L0x203f0870;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08f0; Value = 0xfffffffe; PC = 0x53a0 *)
mov r8 L0x203f08f0;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0970; Value = 0x00000003; PC = 0x53a4 *)
mov r4 L0x203f0970;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09f0; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f09f0;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a70; Value = 0x00000004; PC = 0x53ac *)
mov r12 L0x203f0a70;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0af0; Value = 0x00000002; PC = 0x53b0 *)
mov lr L0x203f0af0;

ghost r4o54@int32, r11o54@int32, r12o54@int32, lro54@int32:
      r4 = r4o54 /\ r11 = r11o54 /\ r12 = r12o54 /\ lr = lro54
   && r4 = r4o54 /\ r11 = r11o54 /\ r12 = r12o54 /\ lr = lro54;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o54,r11o54,r12o54,lro54]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o54,r11o54,r12o54,lro54]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o55@int32, r8o55@int32, r12o55@int32, lro55@int32:
      r7 = r7o55 /\ r8 = r8o55 /\ r12 = r12o55 /\ lr = lro55
   && r7 = r7o55 /\ r8 = r8o55 /\ r12 = r12o55 /\ lr = lro55;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o55,r8o55,r12o55,lro55]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o55,r8o55,r12o55,lro55]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o56@int32, r8o56@int32, r11o56@int32, lro56@int32:
      r6 = r6o56 /\ r8 = r8o56 /\ r11 = r11o56 /\ lr = lro56
   && r6 = r6o56 /\ r8 = r8o56 /\ r11 = r11o56 /\ lr = lro56;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o56,r8o56,r11o56,lro56]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o56,r8o56,r11o56,lro56]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07f0; PC = 0x54a8 *)
mov L0x203f07f0 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0870; PC = 0x54ac *)
mov L0x203f0870 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08f0; PC = 0x54b0 *)
mov L0x203f08f0 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0970; PC = 0x54b4 *)
mov L0x203f0970 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09f0; PC = 0x54b8 *)
mov L0x203f09f0 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a70; PC = 0x54bc *)
mov L0x203f0a70 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0af0; PC = 0x54c0 *)
mov L0x203f0af0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0770; PC = 0x54c4 *)
mov L0x203f0770 r5;

(**************** CUT 18****************)

cut eqmod [L0x203f0770,L0x203f07f0,L0x203f0870,L0x203f08f0,
           L0x203f0970,L0x203f09f0,L0x203f0a70,L0x203f0af0]
          [poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2],
           poly X**32 [c12,c32,c52,c72,c92,cb2,cd2,cf2]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0770,L0x203f07f0,L0x203f0870,L0x203f08f0,
     L0x203f0970,L0x203f09f0,L0x203f0a70,L0x203f0af0] /\
    [L0x203f0770,L0x203f07f0,L0x203f0870,L0x203f08f0,
     L0x203f0970,L0x203f09f0,L0x203f0a70,L0x203f0af0] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0774; Value = 0x00000003; PC = 0x54c8 *)
mov r5 L0x203f0774;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07f4; Value = 0x00000004; PC = 0x54cc *)
mov r6 L0x203f07f4;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0874; Value = 0x00000000; PC = 0x54d0 *)
mov r7 L0x203f0874;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08f4; Value = 0xfffffffe; PC = 0x54d4 *)
mov r8 L0x203f08f4;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0974; Value = 0xfffffffc; PC = 0x54d8 *)
mov r4 L0x203f0974;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09f4; Value = 0xfffffffd; PC = 0x54dc *)
mov r11 L0x203f09f4;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a74; Value = 0x00000003; PC = 0x54e0 *)
mov r12 L0x203f0a74;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0af4; Value = 0x00000001; PC = 0x54e4 *)
mov lr L0x203f0af4;

ghost r4o57@int32, r11o57@int32, r12o57@int32, lro57@int32:
      r4 = r4o57 /\ r11 = r11o57 /\ r12 = r12o57 /\ lr = lro57
   && r4 = r4o57 /\ r11 = r11o57 /\ r12 = r12o57 /\ lr = lro57;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o57,r11o57,r12o57,lro57]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o57,r11o57,r12o57,lro57]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o58@int32, r8o58@int32, r12o58@int32, lro58@int32:
      r7 = r7o58 /\ r8 = r8o58 /\ r12 = r12o58 /\ lr = lro58
   && r7 = r7o58 /\ r8 = r8o58 /\ r12 = r12o58 /\ lr = lro58;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o58,r8o58,r12o58,lro58]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o58,r8o58,r12o58,lro58]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o59@int32, r8o59@int32, r11o59@int32, lro59@int32:
      r6 = r6o59 /\ r8 = r8o59 /\ r11 = r11o59 /\ lr = lro59
   && r6 = r6o59 /\ r8 = r8o59 /\ r11 = r11o59 /\ lr = lro59;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o59,r8o59,r11o59,lro59]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o59,r8o59,r11o59,lro59]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07f4; PC = 0x55dc *)
mov L0x203f07f4 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0874; PC = 0x55e0 *)
mov L0x203f0874 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08f4; PC = 0x55e4 *)
mov L0x203f08f4 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0974; PC = 0x55e8 *)
mov L0x203f0974 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09f4; PC = 0x55ec *)
mov L0x203f09f4 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a74; PC = 0x55f0 *)
mov L0x203f0a74 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0af4; PC = 0x55f4 *)
mov L0x203f0af4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0774; PC = 0x55f8 *)
mov L0x203f0774 r5;

(**************** CUT 19****************)

cut eqmod [L0x203f0774,L0x203f07f4,L0x203f0874,L0x203f08f4,
           L0x203f0974,L0x203f09f4,L0x203f0a74,L0x203f0af4]
          [poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3],
           poly X**32 [c13,c33,c53,c73,c93,cb3,cd3,cf3]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0774,L0x203f07f4,L0x203f0874,L0x203f08f4,
     L0x203f0974,L0x203f09f4,L0x203f0a74,L0x203f0af4] /\
    [L0x203f0774,L0x203f07f4,L0x203f0874,L0x203f08f4,
     L0x203f0974,L0x203f09f4,L0x203f0a74,L0x203f0af4] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0778; Value = 0x00000001; PC = 0x5394 *)
mov r5 L0x203f0778;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07f8; Value = 0x00000000; PC = 0x5398 *)
mov r6 L0x203f07f8;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0878; Value = 0xfffffffc; PC = 0x539c *)
mov r7 L0x203f0878;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08f8; Value = 0xfffffffc; PC = 0x53a0 *)
mov r8 L0x203f08f8;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0978; Value = 0xfffffffc; PC = 0x53a4 *)
mov r4 L0x203f0978;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09f8; Value = 0x00000004; PC = 0x53a8 *)
mov r11 L0x203f09f8;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a78; Value = 0x00000004; PC = 0x53ac *)
mov r12 L0x203f0a78;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0af8; Value = 0x00000001; PC = 0x53b0 *)
mov lr L0x203f0af8;

ghost r4o60@int32, r11o60@int32, r12o60@int32, lro60@int32:
      r4 = r4o60 /\ r11 = r11o60 /\ r12 = r12o60 /\ lr = lro60
   && r4 = r4o60 /\ r11 = r11o60 /\ r12 = r12o60 /\ lr = lro60;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o60,r11o60,r12o60,lro60]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o60,r11o60,r12o60,lro60]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o61@int32, r8o61@int32, r12o61@int32, lro61@int32:
      r7 = r7o61 /\ r8 = r8o61 /\ r12 = r12o61 /\ lr = lro61
   && r7 = r7o61 /\ r8 = r8o61 /\ r12 = r12o61 /\ lr = lro61;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o61,r8o61,r12o61,lro61]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o61,r8o61,r12o61,lro61]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o62@int32, r8o62@int32, r11o62@int32, lro62@int32:
      r6 = r6o62 /\ r8 = r8o62 /\ r11 = r11o62 /\ lr = lro62
   && r6 = r6o62 /\ r8 = r8o62 /\ r11 = r11o62 /\ lr = lro62;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o62,r8o62,r11o62,lro62]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o62,r8o62,r11o62,lro62]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07f8; PC = 0x54a8 *)
mov L0x203f07f8 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0878; PC = 0x54ac *)
mov L0x203f0878 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08f8; PC = 0x54b0 *)
mov L0x203f08f8 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0978; PC = 0x54b4 *)
mov L0x203f0978 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09f8; PC = 0x54b8 *)
mov L0x203f09f8 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a78; PC = 0x54bc *)
mov L0x203f0a78 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0af8; PC = 0x54c0 *)
mov L0x203f0af8 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0778; PC = 0x54c4 *)
mov L0x203f0778 r5;

(**************** CUT 20****************)

cut eqmod [L0x203f0778,L0x203f07f8,L0x203f0878,L0x203f08f8,
           L0x203f0978,L0x203f09f8,L0x203f0a78,L0x203f0af8]
          [poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4],
           poly X**32 [c14,c34,c54,c74,c94,cb4,cd4,cf4]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0778,L0x203f07f8,L0x203f0878,L0x203f08f8,
     L0x203f0978,L0x203f09f8,L0x203f0a78,L0x203f0af8] /\
    [L0x203f0778,L0x203f07f8,L0x203f0878,L0x203f08f8,
     L0x203f0978,L0x203f09f8,L0x203f0a78,L0x203f0af8] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f077c; Value = 0x00000001; PC = 0x54c8 *)
mov r5 L0x203f077c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07fc; Value = 0x00000004; PC = 0x54cc *)
mov r6 L0x203f07fc;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f087c; Value = 0xfffffffc; PC = 0x54d0 *)
mov r7 L0x203f087c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08fc; Value = 0x00000000; PC = 0x54d4 *)
mov r8 L0x203f08fc;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f097c; Value = 0x00000002; PC = 0x54d8 *)
mov r4 L0x203f097c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09fc; Value = 0x00000003; PC = 0x54dc *)
mov r11 L0x203f09fc;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a7c; Value = 0xfffffffc; PC = 0x54e0 *)
mov r12 L0x203f0a7c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0afc; Value = 0xfffffffd; PC = 0x54e4 *)
mov lr L0x203f0afc;

ghost r4o63@int32, r11o63@int32, r12o63@int32, lro63@int32:
      r4 = r4o63 /\ r11 = r11o63 /\ r12 = r12o63 /\ lr = lro63
   && r4 = r4o63 /\ r11 = r11o63 /\ r12 = r12o63 /\ lr = lro63;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o63,r11o63,r12o63,lro63]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o63,r11o63,r12o63,lro63]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o64@int32, r8o64@int32, r12o64@int32, lro64@int32:
      r7 = r7o64 /\ r8 = r8o64 /\ r12 = r12o64 /\ lr = lro64
   && r7 = r7o64 /\ r8 = r8o64 /\ r12 = r12o64 /\ lr = lro64;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o64,r8o64,r12o64,lro64]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o64,r8o64,r12o64,lro64]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o65@int32, r8o65@int32, r11o65@int32, lro65@int32:
      r6 = r6o65 /\ r8 = r8o65 /\ r11 = r11o65 /\ lr = lro65
   && r6 = r6o65 /\ r8 = r8o65 /\ r11 = r11o65 /\ lr = lro65;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o65,r8o65,r11o65,lro65]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o65,r8o65,r11o65,lro65]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f07fc; PC = 0x55dc *)
mov L0x203f07fc r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f087c; PC = 0x55e0 *)
mov L0x203f087c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f08fc; PC = 0x55e4 *)
mov L0x203f08fc r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f097c; PC = 0x55e8 *)
mov L0x203f097c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f09fc; PC = 0x55ec *)
mov L0x203f09fc r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a7c; PC = 0x55f0 *)
mov L0x203f0a7c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0afc; PC = 0x55f4 *)
mov L0x203f0afc lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f077c; PC = 0x55f8 *)
mov L0x203f077c r5;

(**************** CUT 21****************)

cut eqmod [L0x203f077c,L0x203f07fc,L0x203f087c,L0x203f08fc,
           L0x203f097c,L0x203f09fc,L0x203f0a7c,L0x203f0afc]
          [poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5],
           poly X**32 [c15,c35,c55,c75,c95,cb5,cd5,cf5]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f077c,L0x203f07fc,L0x203f087c,L0x203f08fc,
     L0x203f097c,L0x203f09fc,L0x203f0a7c,L0x203f0afc] /\
    [L0x203f077c,L0x203f07fc,L0x203f087c,L0x203f08fc,
     L0x203f097c,L0x203f09fc,L0x203f0a7c,L0x203f0afc] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0780; Value = 0x00000000; PC = 0x5394 *)
mov r5 L0x203f0780;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0800; Value = 0x00000004; PC = 0x5398 *)
mov r6 L0x203f0800;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0880; Value = 0xffffffff; PC = 0x539c *)
mov r7 L0x203f0880;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0900; Value = 0x00000004; PC = 0x53a0 *)
mov r8 L0x203f0900;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0980; Value = 0xfffffffe; PC = 0x53a4 *)
mov r4 L0x203f0980;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a00; Value = 0xffffffff; PC = 0x53a8 *)
mov r11 L0x203f0a00;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a80; Value = 0x00000004; PC = 0x53ac *)
mov r12 L0x203f0a80;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b00; Value = 0x00000001; PC = 0x53b0 *)
mov lr L0x203f0b00;

ghost r4o66@int32, r11o66@int32, r12o66@int32, lro66@int32:
      r4 = r4o66 /\ r11 = r11o66 /\ r12 = r12o66 /\ lr = lro66
   && r4 = r4o66 /\ r11 = r11o66 /\ r12 = r12o66 /\ lr = lro66;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o66,r11o66,r12o66,lro66]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o66,r11o66,r12o66,lro66]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o67@int32, r8o67@int32, r12o67@int32, lro67@int32:
      r7 = r7o67 /\ r8 = r8o67 /\ r12 = r12o67 /\ lr = lro67
   && r7 = r7o67 /\ r8 = r8o67 /\ r12 = r12o67 /\ lr = lro67;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o67,r8o67,r12o67,lro67]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o67,r8o67,r12o67,lro67]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o68@int32, r8o68@int32, r11o68@int32, lro68@int32:
      r6 = r6o68 /\ r8 = r8o68 /\ r11 = r11o68 /\ lr = lro68
   && r6 = r6o68 /\ r8 = r8o68 /\ r11 = r11o68 /\ lr = lro68;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o68,r8o68,r11o68,lro68]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o68,r8o68,r11o68,lro68]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0800; PC = 0x54a8 *)
mov L0x203f0800 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0880; PC = 0x54ac *)
mov L0x203f0880 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0900; PC = 0x54b0 *)
mov L0x203f0900 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0980; PC = 0x54b4 *)
mov L0x203f0980 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a00; PC = 0x54b8 *)
mov L0x203f0a00 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a80; PC = 0x54bc *)
mov L0x203f0a80 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b00; PC = 0x54c0 *)
mov L0x203f0b00 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0780; PC = 0x54c4 *)
mov L0x203f0780 r5;

(**************** CUT 22****************)

cut eqmod [L0x203f0780,L0x203f0800,L0x203f0880,L0x203f0900,
           L0x203f0980,L0x203f0a00,L0x203f0a80,L0x203f0b00]
          [poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6],
           poly X**32 [c16,c36,c56,c76,c96,cb6,cd6,cf6]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0780,L0x203f0800,L0x203f0880,L0x203f0900,
     L0x203f0980,L0x203f0a00,L0x203f0a80,L0x203f0b00] /\
    [L0x203f0780,L0x203f0800,L0x203f0880,L0x203f0900,
     L0x203f0980,L0x203f0a00,L0x203f0a80,L0x203f0b00] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0784; Value = 0x00000003; PC = 0x54c8 *)
mov r5 L0x203f0784;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0804; Value = 0x00000004; PC = 0x54cc *)
mov r6 L0x203f0804;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0884; Value = 0xfffffffe; PC = 0x54d0 *)
mov r7 L0x203f0884;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0904; Value = 0xffffffff; PC = 0x54d4 *)
mov r8 L0x203f0904;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0984; Value = 0xfffffffd; PC = 0x54d8 *)
mov r4 L0x203f0984;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a04; Value = 0x00000001; PC = 0x54dc *)
mov r11 L0x203f0a04;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a84; Value = 0x00000003; PC = 0x54e0 *)
mov r12 L0x203f0a84;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b04; Value = 0x00000003; PC = 0x54e4 *)
mov lr L0x203f0b04;

ghost r4o69@int32, r11o69@int32, r12o69@int32, lro69@int32:
      r4 = r4o69 /\ r11 = r11o69 /\ r12 = r12o69 /\ lr = lro69
   && r4 = r4o69 /\ r11 = r11o69 /\ r12 = r12o69 /\ lr = lro69;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o69,r11o69,r12o69,lro69]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o69,r11o69,r12o69,lro69]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o70@int32, r8o70@int32, r12o70@int32, lro70@int32:
      r7 = r7o70 /\ r8 = r8o70 /\ r12 = r12o70 /\ lr = lro70
   && r7 = r7o70 /\ r8 = r8o70 /\ r12 = r12o70 /\ lr = lro70;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o70,r8o70,r12o70,lro70]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o70,r8o70,r12o70,lro70]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o71@int32, r8o71@int32, r11o71@int32, lro71@int32:
      r6 = r6o71 /\ r8 = r8o71 /\ r11 = r11o71 /\ lr = lro71
   && r6 = r6o71 /\ r8 = r8o71 /\ r11 = r11o71 /\ lr = lro71;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o71,r8o71,r11o71,lro71]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o71,r8o71,r11o71,lro71]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0804; PC = 0x55dc *)
mov L0x203f0804 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0884; PC = 0x55e0 *)
mov L0x203f0884 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0904; PC = 0x55e4 *)
mov L0x203f0904 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0984; PC = 0x55e8 *)
mov L0x203f0984 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a04; PC = 0x55ec *)
mov L0x203f0a04 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a84; PC = 0x55f0 *)
mov L0x203f0a84 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b04; PC = 0x55f4 *)
mov L0x203f0b04 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0784; PC = 0x55f8 *)
mov L0x203f0784 r5;

(**************** CUT 23****************)

cut eqmod [L0x203f0784,L0x203f0804,L0x203f0884,L0x203f0904,
           L0x203f0984,L0x203f0a04,L0x203f0a84,L0x203f0b04]
          [poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7],
           poly X**32 [c17,c37,c57,c77,c97,cb7,cd7,cf7]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0784,L0x203f0804,L0x203f0884,L0x203f0904,
     L0x203f0984,L0x203f0a04,L0x203f0a84,L0x203f0b04] /\
    [L0x203f0784,L0x203f0804,L0x203f0884,L0x203f0904,
     L0x203f0984,L0x203f0a04,L0x203f0a84,L0x203f0b04] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0788; Value = 0xfffffffe; PC = 0x5394 *)
mov r5 L0x203f0788;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0808; Value = 0x00000001; PC = 0x5398 *)
mov r6 L0x203f0808;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0888; Value = 0xffffffff; PC = 0x539c *)
mov r7 L0x203f0888;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0908; Value = 0x00000003; PC = 0x53a0 *)
mov r8 L0x203f0908;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0988; Value = 0x00000001; PC = 0x53a4 *)
mov r4 L0x203f0988;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a08; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f0a08;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a88; Value = 0xfffffffc; PC = 0x53ac *)
mov r12 L0x203f0a88;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b08; Value = 0x00000003; PC = 0x53b0 *)
mov lr L0x203f0b08;

ghost r4o72@int32, r11o72@int32, r12o72@int32, lro72@int32:
      r4 = r4o72 /\ r11 = r11o72 /\ r12 = r12o72 /\ lr = lro72
   && r4 = r4o72 /\ r11 = r11o72 /\ r12 = r12o72 /\ lr = lro72;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o72,r11o72,r12o72,lro72]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o72,r11o72,r12o72,lro72]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o73@int32, r8o73@int32, r12o73@int32, lro73@int32:
      r7 = r7o73 /\ r8 = r8o73 /\ r12 = r12o73 /\ lr = lro73
   && r7 = r7o73 /\ r8 = r8o73 /\ r12 = r12o73 /\ lr = lro73;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o73,r8o73,r12o73,lro73]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o73,r8o73,r12o73,lro73]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o74@int32, r8o74@int32, r11o74@int32, lro74@int32:
      r6 = r6o74 /\ r8 = r8o74 /\ r11 = r11o74 /\ lr = lro74
   && r6 = r6o74 /\ r8 = r8o74 /\ r11 = r11o74 /\ lr = lro74;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o74,r8o74,r11o74,lro74]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o74,r8o74,r11o74,lro74]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0808; PC = 0x54a8 *)
mov L0x203f0808 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0888; PC = 0x54ac *)
mov L0x203f0888 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0908; PC = 0x54b0 *)
mov L0x203f0908 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0988; PC = 0x54b4 *)
mov L0x203f0988 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a08; PC = 0x54b8 *)
mov L0x203f0a08 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a88; PC = 0x54bc *)
mov L0x203f0a88 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b08; PC = 0x54c0 *)
mov L0x203f0b08 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0788; PC = 0x54c4 *)
mov L0x203f0788 r5;

(**************** CUT 24****************)

cut eqmod [L0x203f0788,L0x203f0808,L0x203f0888,L0x203f0908,
           L0x203f0988,L0x203f0a08,L0x203f0a88,L0x203f0b08]
          [poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8],
           poly X**32 [c18,c38,c58,c78,c98,cb8,cd8,cf8]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0788,L0x203f0808,L0x203f0888,L0x203f0908,
     L0x203f0988,L0x203f0a08,L0x203f0a88,L0x203f0b08] /\
    [L0x203f0788,L0x203f0808,L0x203f0888,L0x203f0908,
     L0x203f0988,L0x203f0a08,L0x203f0a88,L0x203f0b08] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f078c; Value = 0xfffffffd; PC = 0x54c8 *)
mov r5 L0x203f078c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f080c; Value = 0x00000000; PC = 0x54cc *)
mov r6 L0x203f080c;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f088c; Value = 0x00000003; PC = 0x54d0 *)
mov r7 L0x203f088c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f090c; Value = 0xfffffffe; PC = 0x54d4 *)
mov r8 L0x203f090c;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f098c; Value = 0xfffffffc; PC = 0x54d8 *)
mov r4 L0x203f098c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a0c; Value = 0xfffffffd; PC = 0x54dc *)
mov r11 L0x203f0a0c;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a8c; Value = 0x00000001; PC = 0x54e0 *)
mov r12 L0x203f0a8c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b0c; Value = 0x00000000; PC = 0x54e4 *)
mov lr L0x203f0b0c;

ghost r4o75@int32, r11o75@int32, r12o75@int32, lro75@int32:
      r4 = r4o75 /\ r11 = r11o75 /\ r12 = r12o75 /\ lr = lro75
   && r4 = r4o75 /\ r11 = r11o75 /\ r12 = r12o75 /\ lr = lro75;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o75,r11o75,r12o75,lro75]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o75,r11o75,r12o75,lro75]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o76@int32, r8o76@int32, r12o76@int32, lro76@int32:
      r7 = r7o76 /\ r8 = r8o76 /\ r12 = r12o76 /\ lr = lro76
   && r7 = r7o76 /\ r8 = r8o76 /\ r12 = r12o76 /\ lr = lro76;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o76,r8o76,r12o76,lro76]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o76,r8o76,r12o76,lro76]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o77@int32, r8o77@int32, r11o77@int32, lro77@int32:
      r6 = r6o77 /\ r8 = r8o77 /\ r11 = r11o77 /\ lr = lro77
   && r6 = r6o77 /\ r8 = r8o77 /\ r11 = r11o77 /\ lr = lro77;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o77,r8o77,r11o77,lro77]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o77,r8o77,r11o77,lro77]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f080c; PC = 0x55dc *)
mov L0x203f080c r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f088c; PC = 0x55e0 *)
mov L0x203f088c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f090c; PC = 0x55e4 *)
mov L0x203f090c r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f098c; PC = 0x55e8 *)
mov L0x203f098c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a0c; PC = 0x55ec *)
mov L0x203f0a0c r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a8c; PC = 0x55f0 *)
mov L0x203f0a8c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b0c; PC = 0x55f4 *)
mov L0x203f0b0c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f078c; PC = 0x55f8 *)
mov L0x203f078c r5;

(**************** CUT 25****************)

cut eqmod [L0x203f078c,L0x203f080c,L0x203f088c,L0x203f090c,
           L0x203f098c,L0x203f0a0c,L0x203f0a8c,L0x203f0b0c]
          [poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9],
           poly X**32 [c19,c39,c59,c79,c99,cb9,cd9,cf9]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f078c,L0x203f080c,L0x203f088c,L0x203f090c,
     L0x203f098c,L0x203f0a0c,L0x203f0a8c,L0x203f0b0c] /\
    [L0x203f078c,L0x203f080c,L0x203f088c,L0x203f090c,
     L0x203f098c,L0x203f0a0c,L0x203f0a8c,L0x203f0b0c] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0790; Value = 0xfffffffc; PC = 0x5394 *)
mov r5 L0x203f0790;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0810; Value = 0xffffffff; PC = 0x5398 *)
mov r6 L0x203f0810;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0890; Value = 0x00000001; PC = 0x539c *)
mov r7 L0x203f0890;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0910; Value = 0x00000000; PC = 0x53a0 *)
mov r8 L0x203f0910;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0990; Value = 0x00000002; PC = 0x53a4 *)
mov r4 L0x203f0990;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a10; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f0a10;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a90; Value = 0xfffffffe; PC = 0x53ac *)
mov r12 L0x203f0a90;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b10; Value = 0x00000004; PC = 0x53b0 *)
mov lr L0x203f0b10;

ghost r4o78@int32, r11o78@int32, r12o78@int32, lro78@int32:
      r4 = r4o78 /\ r11 = r11o78 /\ r12 = r12o78 /\ lr = lro78
   && r4 = r4o78 /\ r11 = r11o78 /\ r12 = r12o78 /\ lr = lro78;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o78,r11o78,r12o78,lro78]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o78,r11o78,r12o78,lro78]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o79@int32, r8o79@int32, r12o79@int32, lro79@int32:
      r7 = r7o79 /\ r8 = r8o79 /\ r12 = r12o79 /\ lr = lro79
   && r7 = r7o79 /\ r8 = r8o79 /\ r12 = r12o79 /\ lr = lro79;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o79,r8o79,r12o79,lro79]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o79,r8o79,r12o79,lro79]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o80@int32, r8o80@int32, r11o80@int32, lro80@int32:
      r6 = r6o80 /\ r8 = r8o80 /\ r11 = r11o80 /\ lr = lro80
   && r6 = r6o80 /\ r8 = r8o80 /\ r11 = r11o80 /\ lr = lro80;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o80,r8o80,r11o80,lro80]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o80,r8o80,r11o80,lro80]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0810; PC = 0x54a8 *)
mov L0x203f0810 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0890; PC = 0x54ac *)
mov L0x203f0890 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0910; PC = 0x54b0 *)
mov L0x203f0910 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0990; PC = 0x54b4 *)
mov L0x203f0990 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a10; PC = 0x54b8 *)
mov L0x203f0a10 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a90; PC = 0x54bc *)
mov L0x203f0a90 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b10; PC = 0x54c0 *)
mov L0x203f0b10 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0790; PC = 0x54c4 *)
mov L0x203f0790 r5;

(**************** CUT 26****************)

cut eqmod [L0x203f0790,L0x203f0810,L0x203f0890,L0x203f0910,
           L0x203f0990,L0x203f0a10,L0x203f0a90,L0x203f0b10]
          [poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa],
           poly X**32 [c1a,c3a,c5a,c7a,c9a,cba,cda,cfa]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0790,L0x203f0810,L0x203f0890,L0x203f0910,
     L0x203f0990,L0x203f0a10,L0x203f0a90,L0x203f0b10] /\
    [L0x203f0790,L0x203f0810,L0x203f0890,L0x203f0910,
     L0x203f0990,L0x203f0a10,L0x203f0a90,L0x203f0b10] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0794; Value = 0xfffffffd; PC = 0x54c8 *)
mov r5 L0x203f0794;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0814; Value = 0xfffffffd; PC = 0x54cc *)
mov r6 L0x203f0814;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0894; Value = 0x00000002; PC = 0x54d0 *)
mov r7 L0x203f0894;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0914; Value = 0xffffffff; PC = 0x54d4 *)
mov r8 L0x203f0914;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0994; Value = 0x00000000; PC = 0x54d8 *)
mov r4 L0x203f0994;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a14; Value = 0xfffffffd; PC = 0x54dc *)
mov r11 L0x203f0a14;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a94; Value = 0xfffffffc; PC = 0x54e0 *)
mov r12 L0x203f0a94;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b14; Value = 0x00000003; PC = 0x54e4 *)
mov lr L0x203f0b14;

ghost r4o81@int32, r11o81@int32, r12o81@int32, lro81@int32:
      r4 = r4o81 /\ r11 = r11o81 /\ r12 = r12o81 /\ lr = lro81
   && r4 = r4o81 /\ r11 = r11o81 /\ r12 = r12o81 /\ lr = lro81;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o81,r11o81,r12o81,lro81]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o81,r11o81,r12o81,lro81]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o82@int32, r8o82@int32, r12o82@int32, lro82@int32:
      r7 = r7o82 /\ r8 = r8o82 /\ r12 = r12o82 /\ lr = lro82
   && r7 = r7o82 /\ r8 = r8o82 /\ r12 = r12o82 /\ lr = lro82;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o82,r8o82,r12o82,lro82]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o82,r8o82,r12o82,lro82]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o83@int32, r8o83@int32, r11o83@int32, lro83@int32:
      r6 = r6o83 /\ r8 = r8o83 /\ r11 = r11o83 /\ lr = lro83
   && r6 = r6o83 /\ r8 = r8o83 /\ r11 = r11o83 /\ lr = lro83;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o83,r8o83,r11o83,lro83]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o83,r8o83,r11o83,lro83]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0814; PC = 0x55dc *)
mov L0x203f0814 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0894; PC = 0x55e0 *)
mov L0x203f0894 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0914; PC = 0x55e4 *)
mov L0x203f0914 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0994; PC = 0x55e8 *)
mov L0x203f0994 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a14; PC = 0x55ec *)
mov L0x203f0a14 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a94; PC = 0x55f0 *)
mov L0x203f0a94 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b14; PC = 0x55f4 *)
mov L0x203f0b14 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0794; PC = 0x55f8 *)
mov L0x203f0794 r5;

(**************** CUT 27****************)

cut eqmod [L0x203f0794,L0x203f0814,L0x203f0894,L0x203f0914,
           L0x203f0994,L0x203f0a14,L0x203f0a94,L0x203f0b14]
          [poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb],
           poly X**32 [c1b,c3b,c5b,c7b,c9b,cbb,cdb,cfb]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0794,L0x203f0814,L0x203f0894,L0x203f0914,
     L0x203f0994,L0x203f0a14,L0x203f0a94,L0x203f0b14] /\
    [L0x203f0794,L0x203f0814,L0x203f0894,L0x203f0914,
     L0x203f0994,L0x203f0a14,L0x203f0a94,L0x203f0b14] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0798; Value = 0xfffffffd; PC = 0x5394 *)
mov r5 L0x203f0798;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0818; Value = 0x00000000; PC = 0x5398 *)
mov r6 L0x203f0818;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0898; Value = 0x00000003; PC = 0x539c *)
mov r7 L0x203f0898;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0918; Value = 0xfffffffe; PC = 0x53a0 *)
mov r8 L0x203f0918;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0998; Value = 0x00000003; PC = 0x53a4 *)
mov r4 L0x203f0998;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a18; Value = 0xfffffffd; PC = 0x53a8 *)
mov r11 L0x203f0a18;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a98; Value = 0xffffffff; PC = 0x53ac *)
mov r12 L0x203f0a98;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b18; Value = 0x00000001; PC = 0x53b0 *)
mov lr L0x203f0b18;

ghost r4o84@int32, r11o84@int32, r12o84@int32, lro84@int32:
      r4 = r4o84 /\ r11 = r11o84 /\ r12 = r12o84 /\ lr = lro84
   && r4 = r4o84 /\ r11 = r11o84 /\ r12 = r12o84 /\ lr = lro84;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o84,r11o84,r12o84,lro84]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o84,r11o84,r12o84,lro84]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o85@int32, r8o85@int32, r12o85@int32, lro85@int32:
      r7 = r7o85 /\ r8 = r8o85 /\ r12 = r12o85 /\ lr = lro85
   && r7 = r7o85 /\ r8 = r8o85 /\ r12 = r12o85 /\ lr = lro85;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o85,r8o85,r12o85,lro85]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o85,r8o85,r12o85,lro85]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o86@int32, r8o86@int32, r11o86@int32, lro86@int32:
      r6 = r6o86 /\ r8 = r8o86 /\ r11 = r11o86 /\ lr = lro86
   && r6 = r6o86 /\ r8 = r8o86 /\ r11 = r11o86 /\ lr = lro86;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o86,r8o86,r11o86,lro86]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o86,r8o86,r11o86,lro86]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0818; PC = 0x54a8 *)
mov L0x203f0818 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f0898; PC = 0x54ac *)
mov L0x203f0898 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0918; PC = 0x54b0 *)
mov L0x203f0918 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f0998; PC = 0x54b4 *)
mov L0x203f0998 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a18; PC = 0x54b8 *)
mov L0x203f0a18 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a98; PC = 0x54bc *)
mov L0x203f0a98 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b18; PC = 0x54c0 *)
mov L0x203f0b18 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0798; PC = 0x54c4 *)
mov L0x203f0798 r5;

(**************** CUT 28****************)

cut eqmod [L0x203f0798,L0x203f0818,L0x203f0898,L0x203f0918,
           L0x203f0998,L0x203f0a18,L0x203f0a98,L0x203f0b18]
          [poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc],
           poly X**32 [c1c,c3c,c5c,c7c,c9c,cbc,cdc,cfc]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f0798,L0x203f0818,L0x203f0898,L0x203f0918,
     L0x203f0998,L0x203f0a18,L0x203f0a98,L0x203f0b18] /\
    [L0x203f0798,L0x203f0818,L0x203f0898,L0x203f0918,
     L0x203f0998,L0x203f0a18,L0x203f0a98,L0x203f0b18] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f079c; Value = 0xffffffff; PC = 0x54c8 *)
mov r5 L0x203f079c;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f081c; Value = 0xfffffffc; PC = 0x54cc *)
mov r6 L0x203f081c;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f089c; Value = 0xfffffffe; PC = 0x54d0 *)
mov r7 L0x203f089c;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f091c; Value = 0xfffffffe; PC = 0x54d4 *)
mov r8 L0x203f091c;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f099c; Value = 0x00000001; PC = 0x54d8 *)
mov r4 L0x203f099c;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a1c; Value = 0x00000003; PC = 0x54dc *)
mov r11 L0x203f0a1c;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a9c; Value = 0x00000003; PC = 0x54e0 *)
mov r12 L0x203f0a9c;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b1c; Value = 0xfffffffe; PC = 0x54e4 *)
mov lr L0x203f0b1c;

ghost r4o87@int32, r11o87@int32, r12o87@int32, lro87@int32:
      r4 = r4o87 /\ r11 = r11o87 /\ r12 = r12o87 /\ lr = lro87
   && r4 = r4o87 /\ r11 = r11o87 /\ r12 = r12o87 /\ lr = lro87;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o87,r11o87,r12o87,lro87]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o87,r11o87,r12o87,lro87]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o88@int32, r8o88@int32, r12o88@int32, lro88@int32:
      r7 = r7o88 /\ r8 = r8o88 /\ r12 = r12o88 /\ lr = lro88
   && r7 = r7o88 /\ r8 = r8o88 /\ r12 = r12o88 /\ lr = lro88;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o88,r8o88,r12o88,lro88]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o88,r8o88,r12o88,lro88]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o89@int32, r8o89@int32, r11o89@int32, lro89@int32:
      r6 = r6o89 /\ r8 = r8o89 /\ r11 = r11o89 /\ lr = lro89
   && r6 = r6o89 /\ r8 = r8o89 /\ r11 = r11o89 /\ lr = lro89;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o89,r8o89,r11o89,lro89]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o89,r8o89,r11o89,lro89]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f081c; PC = 0x55dc *)
mov L0x203f081c r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f089c; PC = 0x55e0 *)
mov L0x203f089c r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f091c; PC = 0x55e4 *)
mov L0x203f091c r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f099c; PC = 0x55e8 *)
mov L0x203f099c r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a1c; PC = 0x55ec *)
mov L0x203f0a1c r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0a9c; PC = 0x55f0 *)
mov L0x203f0a9c r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b1c; PC = 0x55f4 *)
mov L0x203f0b1c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f079c; PC = 0x55f8 *)
mov L0x203f079c r5;

(**************** CUT 29****************)

cut eqmod [L0x203f079c,L0x203f081c,L0x203f089c,L0x203f091c,
           L0x203f099c,L0x203f0a1c,L0x203f0a9c,L0x203f0b1c]
          [poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd],
           poly X**32 [c1d,c3d,c5d,c7d,c9d,cbd,cdd,cfd]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f079c,L0x203f081c,L0x203f089c,L0x203f091c,
     L0x203f099c,L0x203f0a1c,L0x203f0a9c,L0x203f0b1c] /\
    [L0x203f079c,L0x203f081c,L0x203f089c,L0x203f091c,
     L0x203f099c,L0x203f0a1c,L0x203f0a9c,L0x203f0b1c] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07a0; Value = 0x00000002; PC = 0x5394 *)
mov r5 L0x203f07a0;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0820; Value = 0x00000004; PC = 0x5398 *)
mov r6 L0x203f0820;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f08a0; Value = 0xffffffff; PC = 0x539c *)
mov r7 L0x203f08a0;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0920; Value = 0xfffffffd; PC = 0x53a0 *)
mov r8 L0x203f0920;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f09a0; Value = 0x00000004; PC = 0x53a4 *)
mov r4 L0x203f09a0;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a20; Value = 0x00000001; PC = 0x53a8 *)
mov r11 L0x203f0a20;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0aa0; Value = 0x00000001; PC = 0x53ac *)
mov r12 L0x203f0aa0;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b20; Value = 0x00000002; PC = 0x53b0 *)
mov lr L0x203f0b20;

ghost r4o90@int32, r11o90@int32, r12o90@int32, lro90@int32:
      r4 = r4o90 /\ r11 = r11o90 /\ r12 = r12o90 /\ lr = lro90
   && r4 = r4o90 /\ r11 = r11o90 /\ r12 = r12o90 /\ lr = lro90;

(* vmov	r1, s2                                     #! PC = 0x53b4 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x53b8 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x53c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x53c4 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53c8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x53cc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x53d0 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53d4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x53d8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x53dc *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x53e0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x53e4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o90,r11o90,r12o90,lro90]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o90,r11o90,r12o90,lro90]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x53e8 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x53ea *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x53ec *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x53ee *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x53f0 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x53f4 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x53f8 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x53fc *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o91@int32, r8o91@int32, r12o91@int32, lro91@int32:
      r7 = r7o91 /\ r8 = r8o91 /\ r12 = r12o91 /\ lr = lro91
   && r7 = r7o91 /\ r8 = r8o91 /\ r12 = r12o91 /\ lr = lro91;

(* vmov	r1, s3                                     #! PC = 0x5400 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5404 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5408 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x540c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5410 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5414 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5418 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x541c *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5420 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5424 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x5428 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x542c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5430 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5434 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o91,r8o91,r12o91,lro91]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o91,r8o91,r12o91,lro91]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5438 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x543a *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x543c *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x543e *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5440 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5444 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5448 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x544c *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o92@int32, r8o92@int32, r11o92@int32, lro92@int32:
      r6 = r6o92 /\ r8 = r8o92 /\ r11 = r11o92 /\ lr = lro92
   && r6 = r6o92 /\ r8 = r8o92 /\ r11 = r11o92 /\ lr = lro92;

(* vmov	r1, s5                                     #! PC = 0x5450 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5454 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5458 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x545c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5460 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5464 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5468 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x546c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5470 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5474 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5478 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x547c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5480 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5484 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5488 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x548c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o92,r8o92,r11o92,lro92]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o92,r8o92,r11o92,lro92]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5490 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5492 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5494 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x5496 *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5498 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x549c *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x54a0 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x54a4 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0820; PC = 0x54a8 *)
mov L0x203f0820 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f08a0; PC = 0x54ac *)
mov L0x203f08a0 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0920; PC = 0x54b0 *)
mov L0x203f0920 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f09a0; PC = 0x54b4 *)
mov L0x203f09a0 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a20; PC = 0x54b8 *)
mov L0x203f0a20 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0aa0; PC = 0x54bc *)
mov L0x203f0aa0 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b20; PC = 0x54c0 *)
mov L0x203f0b20 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f07a0; PC = 0x54c4 *)
mov L0x203f07a0 r5;

(**************** CUT 30****************)

cut eqmod [L0x203f07a0,L0x203f0820,L0x203f08a0,L0x203f0920,
           L0x203f09a0,L0x203f0a20,L0x203f0aa0,L0x203f0b20]
          [poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe],
           poly X**32 [c1e,c3e,c5e,c7e,c9e,cbe,cde,cfe]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f07a0,L0x203f0820,L0x203f08a0,L0x203f0920,
     L0x203f09a0,L0x203f0a20,L0x203f0aa0,L0x203f0b20] /\
    [L0x203f07a0,L0x203f0820,L0x203f08a0,L0x203f0920,
     L0x203f09a0,L0x203f0a20,L0x203f0aa0,L0x203f0b20] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f07a4; Value = 0x00000000; PC = 0x54c8 *)
mov r5 L0x203f07a4;
(* ldr.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0824; Value = 0x00000001; PC = 0x54cc *)
mov r6 L0x203f0824;
(* ldr.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f08a4; Value = 0x00000004; PC = 0x54d0 *)
mov r7 L0x203f08a4;
(* ldr.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0924; Value = 0x00000000; PC = 0x54d4 *)
mov r8 L0x203f0924;
(* ldr.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f09a4; Value = 0xffffffff; PC = 0x54d8 *)
mov r4 L0x203f09a4;
(* ldr.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a24; Value = 0x00000000; PC = 0x54dc *)
mov r11 L0x203f0a24;
(* ldr.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0aa4; Value = 0x00000000; PC = 0x54e0 *)
mov r12 L0x203f0aa4;
(* ldr.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b24; Value = 0x00000000; PC = 0x54e4 *)
mov lr L0x203f0b24;

ghost r4o93@int32, r11o93@int32, r12o93@int32, lro93@int32:
      r4 = r4o93 /\ r11 = r11o93 /\ r12 = r12o93 /\ lr = lro93
   && r4 = r4o93 /\ r11 = r11o93 /\ r12 = r12o93 /\ lr = lro93;

(* vmov	r1, s2                                     #! PC = 0x54e8 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x54ec *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54f0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x54f4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x54f8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x54fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5500 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5504 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5508 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x550c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5510 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5514 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5518 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o93,r11o93,r12o93,lro93]*[K**128,K**128,K**128,K**128])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o93,r11o93,r12o93,lro93]*[K**128,K**128,K**128,K**128])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x551c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x551e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5520 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5522 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5524 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5528 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x552c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5530 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o94@int32, r8o94@int32, r12o94@int32, lro94@int32:
      r7 = r7o94 /\ r8 = r8o94 /\ r12 = r12o94 /\ lr = lro94
   && r7 = r7o94 /\ r8 = r8o94 /\ r12 = r12o94 /\ lr = lro94;

(* vmov	r1, s3                                     #! PC = 0x5534 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5538 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x553c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x5540 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x5544 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5548 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x554c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x5550 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x5554 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5558 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x555c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5560 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5564 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5568 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o94,r8o94,r12o94,lro94]*[K** 64,K** 64,K**192,K**192])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o94,r8o94,r12o94,lro94]*[K** 64,K** 64,K**192,K**192])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x556c *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x556e *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5570 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5572 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5574 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x5578 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x557c *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5580 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o95@int32, r8o95@int32, r11o95@int32, lro95@int32:
      r6 = r6o95 /\ r8 = r8o95 /\ r11 = r11o95 /\ lr = lro95
   && r6 = r6o95 /\ r8 = r8o95 /\ r11 = r11o95 /\ lr = lro95;

(* vmov	r1, s5                                     #! PC = 0x5584 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x5588 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x558c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5590 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5594 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x5598 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* mul.w	r10, r9, r2                               #! PC = 0x559c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x55a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x55a4 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x55a8 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55ac *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x55b0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x55b4 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x55b8 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x55bc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x55c0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o95,r8o95,r11o95,lro95]*[K** 32,K**160,K** 96,K**224])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o95,r8o95,r11o95,lro95]*[K** 32,K**160,K** 96,K**224])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x55c4 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x55c6 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x55c8 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x55ca *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x55cc *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x55d0 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x55d4 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x55d8 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #128]	@ 0x80                     #! EA = L0x203f0824; PC = 0x55dc *)
mov L0x203f0824 r6;
(* str.w	r7, [r0, #256]	@ 0x100                    #! EA = L0x203f08a4; PC = 0x55e0 *)
mov L0x203f08a4 r7;
(* str.w	r8, [r0, #384]	@ 0x180                    #! EA = L0x203f0924; PC = 0x55e4 *)
mov L0x203f0924 r8;
(* str.w	r4, [r0, #512]	@ 0x200                    #! EA = L0x203f09a4; PC = 0x55e8 *)
mov L0x203f09a4 r4;
(* str.w	r11, [r0, #640]	@ 0x280                   #! EA = L0x203f0a24; PC = 0x55ec *)
mov L0x203f0a24 r11;
(* str.w	r12, [r0, #768]	@ 0x300                   #! EA = L0x203f0aa4; PC = 0x55f0 *)
mov L0x203f0aa4 r12;
(* str.w	lr, [r0, #896]	@ 0x380                    #! EA = L0x203f0b24; PC = 0x55f4 *)
mov L0x203f0b24 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f07a4; PC = 0x55f8 *)
mov L0x203f07a4 r5;

(**************** CUT 31****************)

cut eqmod [L0x203f07a4,L0x203f0824,L0x203f08a4,L0x203f0924,
           L0x203f09a4,L0x203f0a24,L0x203f0aa4,L0x203f0b24]
          [poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff],
           poly X**32 [c1f,c3f,c5f,c7f,c9f,cbf,cdf,cff]]
          [[Q, X**32 - K** 32], [Q, X**32 - K**288],
           [Q, X**32 - K**160], [Q, X**32 - K**416],
           [Q, X**32 - K** 96], [Q, X**32 - K**352],
           [Q, X**32 - K**224], [Q, X**32 - K**480]]
    prove with [precondition]
 && [5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2,
     5@32*NQ2,5@32*NQ2,5@32*NQ2,5@32*NQ2] <=s
    [L0x203f07a4,L0x203f0824,L0x203f08a4,L0x203f0924,
     L0x203f09a4,L0x203f0a24,L0x203f0aa4,L0x203f0b24] /\
    [L0x203f07a4,L0x203f0824,L0x203f08a4,L0x203f0924,
     L0x203f09a4,L0x203f0a24,L0x203f0aa4,L0x203f0b24] <=s
    [5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2,5@32*Q2]
    prove with [precondition];

(* vmov	r10, s9                                    #! PC = 0x55fc *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x5600 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! PC = 0x5604 *)
#bne.w	0x5394 <pqcrystals_dilithium_ntt+32>     #! 0x5604 = 0x5604;
(* sub.w	r0, r0, #128	@ 0x80                       #! PC = 0x5608 *)
subs dc r0 r0 128@uint32;
(* add.w	r10, r0, #1024	@ 0x400                    #! PC = 0x560c *)
adds dc r10 r0 1024@uint32;
(* vmov	s9, r10                                    #! PC = 0x5610 *)
mov s9 r10;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x7fb4; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x7fb4,L0x7fb8,L0x7fbc,L0x7fc0,L0x7fc4,L0x7fc8,L0x7fcc];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0728; Value = 0x000a9b8a; PC = 0x5628 *)
mov r5 L0x203f0728;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0738; Value = 0xfff17057; PC = 0x562c *)
mov r6 L0x203f0738;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0748; Value = 0x0009b818; PC = 0x5630 *)
mov r7 L0x203f0748;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0758; Value = 0x004d928b; PC = 0x5634 *)
mov r8 L0x203f0758;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0768; Value = 0xff96b6c7; PC = 0x5638 *)
mov r4 L0x203f0768;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0778; Value = 0xffb92b6d; PC = 0x563c *)
mov r11 L0x203f0778;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0788; Value = 0xffaa6c69; PC = 0x5640 *)
mov r12 L0x203f0788;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0798; Value = 0x0002bc7b; PC = 0x5644 *)
mov lr L0x203f0798;

ghost c00o0@int32, c04o0@int32, c08o0@int32, c0co0@int32,
      c10o0@int32, c14o0@int32, c18o0@int32, c1co0@int32:
      c00o0 = r5 /\ c04o0 = r6 /\ c08o0 = r7 /\ c0co0 = r8 /\
      c10o0 = r4 /\ c14o0 = r11 /\ c18o0 = r12 /\ c1co0 = lr
   && c00o0 = r5 /\ c04o0 = r6 /\ c08o0 = r7 /\ c0co0 = r8 /\
      c10o0 = r4 /\ c14o0 = r11 /\ c18o0 = r12 /\ c1co0 = lr;
ghost r4o96@int32, r11o96@int32, r12o96@int32, lro96@int32:
      r4o96 = r4 /\ r11o96 = r11 /\ r12o96 = r12 /\ lro96 = lr
   && r4o96 = r4 /\ r11o96 = r11 /\ r12o96 = r12 /\ lro96 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o96,r11o96,r12o96,lro96]*[K** 16,K** 16,K** 16,K** 16])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o96,r11o96,r12o96,lro96]*[K** 16,K** 16,K** 16,K** 16])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o97@int32, r8o97@int32, r12o97@int32, lro97@int32:
      r7o97 = r7 /\ r8o97 = r8 /\ r12o97 = r12 /\ lro97 = lr
   && r7o97 = r7 /\ r8o97 = r8 /\ r12o97 = r12 /\ lro97 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o97,r8o97,r12o97,lro97]*[K**  8,K**  8,K**136,K**136])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o97,r8o97,r12o97,lro97]*[K**  8,K**  8,K**136,K**136])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o98@int32, r8o98@int32, r11o98@int32, lro98@int32:
      r6o98 = r6 /\ r8o98 = r8 /\ r11o98 = r11 /\ lro98 = lr
   && r6o98 = r6 /\ r8o98 = r8 /\ r11o98 = r11 /\ lro98 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o98,r8o98,r11o98,lro98]*[K**  4,K**132,K** 68,K**196])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o98,r8o98,r11o98,lro98]*[K**  4,K**132,K** 68,K**196])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0738; PC = 0x573c *)
mov L0x203f0738 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0748; PC = 0x5740 *)
mov L0x203f0748 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0758; PC = 0x5744 *)
mov L0x203f0758 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0768; PC = 0x5748 *)
mov L0x203f0768 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0778; PC = 0x574c *)
mov L0x203f0778 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0788; PC = 0x5750 *)
mov L0x203f0788 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0798; PC = 0x5754 *)
mov L0x203f0798 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0728; PC = 0x5758 *)
mov L0x203f0728 r5;

(**************** CUT 32****************)

cut eqmod [L0x203f0728,L0x203f0738,L0x203f0748,L0x203f0758,
           L0x203f0768,L0x203f0778,L0x203f0788,L0x203f0798]
          [poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0],
           poly X**4 [c00o0,c04o0,c08o0,c0co0,c10o0,c14o0,c18o0,c1co0]]
          [[Q, X**4 - K**  4], [Q, X**4 - K**260],
           [Q, X**4 - K**132], [Q, X**4 - K**388],
           [Q, X**4 - K** 68], [Q, X**4 - K**324],
           [Q, X**4 - K**196], [Q, X**4 - K**452]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0728,L0x203f0738,L0x203f0748,L0x203f0758,
     L0x203f0768,L0x203f0778,L0x203f0788,L0x203f0798] /\
    [L0x203f0728,L0x203f0738,L0x203f0748,L0x203f0758,
     L0x203f0768,L0x203f0778,L0x203f0788,L0x203f0798] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f072c; Value = 0x001d6407; PC = 0x575c *)
mov r5 L0x203f072c;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f073c; Value = 0x005a0bec; PC = 0x5760 *)
mov r6 L0x203f073c;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f074c; Value = 0x001daaff; PC = 0x5764 *)
mov r7 L0x203f074c;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f075c; Value = 0x00062ba4; PC = 0x5768 *)
mov r8 L0x203f075c;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f076c; Value = 0x0076fe99; PC = 0x576c *)
mov r4 L0x203f076c;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f077c; Value = 0x0011f489; PC = 0x5770 *)
mov r11 L0x203f077c;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f078c; Value = 0xffa48ed7; PC = 0x5774 *)
mov r12 L0x203f078c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f079c; Value = 0x00041be1; PC = 0x5778 *)
mov lr L0x203f079c;

ghost c01o0@int32, c05o0@int32, c09o0@int32, c0do0@int32,
      c11o0@int32, c15o0@int32, c19o0@int32, c1do0@int32:
      c01o0 = r5 /\ c05o0 = r6 /\ c09o0 = r7 /\ c0do0 = r8 /\
      c11o0 = r4 /\ c15o0 = r11 /\ c19o0 = r12 /\ c1do0 = lr
   && c01o0 = r5 /\ c05o0 = r6 /\ c09o0 = r7 /\ c0do0 = r8 /\
      c11o0 = r4 /\ c15o0 = r11 /\ c19o0 = r12 /\ c1do0 = lr;
ghost r4o99@int32, r11o99@int32, r12o99@int32, lro99@int32:
      r4o99 = r4 /\ r11o99 = r11 /\ r12o99 = r12 /\ lro99 = lr
   && r4o99 = r4 /\ r11o99 = r11 /\ r12o99 = r12 /\ lro99 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o99,r11o99,r12o99,lro99]*[K** 16,K** 16,K** 16,K** 16])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o99,r11o99,r12o99,lro99]*[K** 16,K** 16,K** 16,K** 16])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o100@int32, r8o100@int32, r12o100@int32, lro100@int32:
      r7o100 = r7 /\ r8o100 = r8 /\ r12o100 = r12 /\ lro100 = lr
   && r7o100 = r7 /\ r8o100 = r8 /\ r12o100 = r12 /\ lro100 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o100,r8o100,r12o100,lro100]*[K**  8,K**  8,K**136,K**136])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o100,r8o100,r12o100,lro100]*[K**  8,K**  8,K**136,K**136])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o101@int32, r8o101@int32, r11o101@int32, lro101@int32:
      r6o101 = r6 /\ r8o101 = r8 /\ r11o101 = r11 /\ lro101 = lr
   && r6o101 = r6 /\ r8o101 = r8 /\ r11o101 = r11 /\ lro101 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o101,r8o101,r11o101,lro101]*[K**  4,K**132,K** 68,K**196])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o101,r8o101,r11o101,lro101]*[K**  4,K**132,K** 68,K**196])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f073c; PC = 0x5870 *)
mov L0x203f073c r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f074c; PC = 0x5874 *)
mov L0x203f074c r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f075c; PC = 0x5878 *)
mov L0x203f075c r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f076c; PC = 0x587c *)
mov L0x203f076c r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f077c; PC = 0x5880 *)
mov L0x203f077c r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f078c; PC = 0x5884 *)
mov L0x203f078c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f079c; PC = 0x5888 *)
mov L0x203f079c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f072c; PC = 0x588c *)
mov L0x203f072c r5;

(**************** CUT 33****************)

cut eqmod [L0x203f072c,L0x203f073c,L0x203f074c,L0x203f075c,
           L0x203f076c,L0x203f077c,L0x203f078c,L0x203f079c]
          [poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0],
           poly X**4 [c01o0,c05o0,c09o0,c0do0,c11o0,c15o0,c19o0,c1do0]]
          [[Q, X**4 - K**  4], [Q, X**4 - K**260],
           [Q, X**4 - K**132], [Q, X**4 - K**388],
           [Q, X**4 - K** 68], [Q, X**4 - K**324],
           [Q, X**4 - K**196], [Q, X**4 - K**452]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f072c,L0x203f073c,L0x203f074c,L0x203f075c,
     L0x203f076c,L0x203f077c,L0x203f078c,L0x203f079c] /\
    [L0x203f072c,L0x203f073c,L0x203f074c,L0x203f075c,
     L0x203f076c,L0x203f077c,L0x203f078c,L0x203f079c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0730; Value = 0xfffe8c71; PC = 0x5628 *)
mov r5 L0x203f0730;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0740; Value = 0x0024549d; PC = 0x562c *)
mov r6 L0x203f0740;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0750; Value = 0xffff5fd0; PC = 0x5630 *)
mov r7 L0x203f0750;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0760; Value = 0xff7e4994; PC = 0x5634 *)
mov r8 L0x203f0760;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0770; Value = 0xfff1ed42; PC = 0x5638 *)
mov r4 L0x203f0770;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0780; Value = 0x0010c4a4; PC = 0x563c *)
mov r11 L0x203f0780;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0790; Value = 0xff9ad985; PC = 0x5640 *)
mov r12 L0x203f0790;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f07a0; Value = 0x00644c64; PC = 0x5644 *)
mov lr L0x203f07a0;

ghost c02o0@int32, c06o0@int32, c0ao0@int32, c0eo0@int32,
      c12o0@int32, c16o0@int32, c1ao0@int32, c1eo0@int32:
      c02o0 = r5 /\ c06o0 = r6 /\ c0ao0 = r7 /\ c0eo0 = r8 /\
      c12o0 = r4 /\ c16o0 = r11 /\ c1ao0 = r12 /\ c1eo0 = lr
   && c02o0 = r5 /\ c06o0 = r6 /\ c0ao0 = r7 /\ c0eo0 = r8 /\
      c12o0 = r4 /\ c16o0 = r11 /\ c1ao0 = r12 /\ c1eo0 = lr;
ghost r4o102@int32, r11o102@int32, r12o102@int32, lro102@int32:
      r4o102 = r4 /\ r11o102 = r11 /\ r12o102 = r12 /\ lro102 = lr
   && r4o102 = r4 /\ r11o102 = r11 /\ r12o102 = r12 /\ lro102 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o102,r11o102,r12o102,lro102]*[K** 16,K** 16,K** 16,K** 16])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o102,r11o102,r12o102,lro102]*[K** 16,K** 16,K** 16,K** 16])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o103@int32, r8o103@int32, r12o103@int32, lro103@int32:
      r7o103 = r7 /\ r8o103 = r8 /\ r12o103 = r12 /\ lro103 = lr
   && r7o103 = r7 /\ r8o103 = r8 /\ r12o103 = r12 /\ lro103 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o103,r8o103,r12o103,lro103]*[K**  8,K**  8,K**136,K**136])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o103,r8o103,r12o103,lro103]*[K**  8,K**  8,K**136,K**136])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o104@int32, r8o104@int32, r11o104@int32, lro104@int32:
      r6o104 = r6 /\ r8o104 = r8 /\ r11o104 = r11 /\ lro104 = lr
   && r6o104 = r6 /\ r8o104 = r8 /\ r11o104 = r11 /\ lro104 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o104,r8o104,r11o104,lro104]*[K**  4,K**132,K** 68,K**196])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o104,r8o104,r11o104,lro104]*[K**  4,K**132,K** 68,K**196])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0740; PC = 0x573c *)
mov L0x203f0740 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0750; PC = 0x5740 *)
mov L0x203f0750 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0760; PC = 0x5744 *)
mov L0x203f0760 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0770; PC = 0x5748 *)
mov L0x203f0770 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0780; PC = 0x574c *)
mov L0x203f0780 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0790; PC = 0x5750 *)
mov L0x203f0790 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f07a0; PC = 0x5754 *)
mov L0x203f07a0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0730; PC = 0x5758 *)
mov L0x203f0730 r5;

(**************** CUT 34****************)

cut eqmod [L0x203f0730,L0x203f0740,L0x203f0750,L0x203f0760,
           L0x203f0770,L0x203f0780,L0x203f0790,L0x203f07a0]
          [poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0],
           poly X**4 [c02o0,c06o0,c0ao0,c0eo0,c12o0,c16o0,c1ao0,c1eo0]]
          [[Q, X**4 - K**  4], [Q, X**4 - K**260],
           [Q, X**4 - K**132], [Q, X**4 - K**388],
           [Q, X**4 - K** 68], [Q, X**4 - K**324],
           [Q, X**4 - K**196], [Q, X**4 - K**452]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0730,L0x203f0740,L0x203f0750,L0x203f0760,
     L0x203f0770,L0x203f0780,L0x203f0790,L0x203f07a0] /\
    [L0x203f0730,L0x203f0740,L0x203f0750,L0x203f0760,
     L0x203f0770,L0x203f0780,L0x203f0790,L0x203f07a0] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0734; Value = 0xfff934d8; PC = 0x575c *)
mov r5 L0x203f0734;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0744; Value = 0xffb29d5e; PC = 0x5760 *)
mov r6 L0x203f0744;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0754; Value = 0xffd0793c; PC = 0x5764 *)
mov r7 L0x203f0754;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0764; Value = 0xffa1cd0e; PC = 0x5768 *)
mov r8 L0x203f0764;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0774; Value = 0xfff6588f; PC = 0x576c *)
mov r4 L0x203f0774;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0784; Value = 0x008a9695; PC = 0x5770 *)
mov r11 L0x203f0784;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0794; Value = 0x0041575f; PC = 0x5774 *)
mov r12 L0x203f0794;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f07a4; Value = 0xffebbdc3; PC = 0x5778 *)
mov lr L0x203f07a4;

ghost c03o0@int32, c07o0@int32, c0bo0@int32, c0fo0@int32,
      c13o0@int32, c17o0@int32, c1bo0@int32, c1fo0@int32:
      c03o0 = r5 /\ c07o0 = r6 /\ c0bo0 = r7 /\ c0fo0 = r8 /\
      c13o0 = r4 /\ c17o0 = r11 /\ c1bo0 = r12 /\ c1fo0 = lr
   && c03o0 = r5 /\ c07o0 = r6 /\ c0bo0 = r7 /\ c0fo0 = r8 /\
      c13o0 = r4 /\ c17o0 = r11 /\ c1bo0 = r12 /\ c1fo0 = lr;
ghost r4o105@int32, r11o105@int32, r12o105@int32, lro105@int32:
      r4o105 = r4 /\ r11o105 = r11 /\ r12o105 = r12 /\ lro105 = lr
   && r4o105 = r4 /\ r11o105 = r11 /\ r12o105 = r12 /\ lro105 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o105,r11o105,r12o105,lro105]*[K** 16,K** 16,K** 16,K** 16])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o105,r11o105,r12o105,lro105]*[K** 16,K** 16,K** 16,K** 16])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o106@int32, r8o106@int32, r12o106@int32, lro106@int32:
      r7o106 = r7 /\ r8o106 = r8 /\ r12o106 = r12 /\ lro106 = lr
   && r7o106 = r7 /\ r8o106 = r8 /\ r12o106 = r12 /\ lro106 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o106,r8o106,r12o106,lro106]*[K**  8,K**  8,K**136,K**136])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o106,r8o106,r12o106,lro106]*[K**  8,K**  8,K**136,K**136])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o107@int32, r8o107@int32, r11o107@int32, lro107@int32:
      r6o107 = r6 /\ r8o107 = r8 /\ r11o107 = r11 /\ lro107 = lr
   && r6o107 = r6 /\ r8o107 = r8 /\ r11o107 = r11 /\ lro107 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o107,r8o107,r11o107,lro107]*[K**  4,K**132,K** 68,K**196])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o107,r8o107,r11o107,lro107]*[K**  4,K**132,K** 68,K**196])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0744; PC = 0x5870 *)
mov L0x203f0744 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0754; PC = 0x5874 *)
mov L0x203f0754 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0764; PC = 0x5878 *)
mov L0x203f0764 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0774; PC = 0x587c *)
mov L0x203f0774 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0784; PC = 0x5880 *)
mov L0x203f0784 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0794; PC = 0x5884 *)
mov L0x203f0794 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f07a4; PC = 0x5888 *)
mov L0x203f07a4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0734; PC = 0x588c *)
mov L0x203f0734 r5;

(**************** CUT 35****************)

cut eqmod [L0x203f0734,L0x203f0744,L0x203f0754,L0x203f0764,
           L0x203f0774,L0x203f0784,L0x203f0794,L0x203f07a4]
          [poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0],
           poly X**4 [c03o0,c07o0,c0bo0,c0fo0,c13o0,c17o0,c1bo0,c1fo0]]
          [[Q, X**4 - K**  4], [Q, X**4 - K**260],
           [Q, X**4 - K**132], [Q, X**4 - K**388],
           [Q, X**4 - K** 68], [Q, X**4 - K**324],
           [Q, X**4 - K**196], [Q, X**4 - K**452]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0734,L0x203f0744,L0x203f0754,L0x203f0764,
     L0x203f0774,L0x203f0784,L0x203f0794,L0x203f07a4] /\
    [L0x203f0734,L0x203f0744,L0x203f0754,L0x203f0764,
     L0x203f0774,L0x203f0784,L0x203f0794,L0x203f07a4] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x7fd0; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x7fd0,L0x7fd4,L0x7fd8,L0x7fdc,L0x7fe0,L0x7fe4,L0x7fe8];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07a8; Value = 0xffaae0c0; PC = 0x5628 *)
mov r5 L0x203f07a8;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f07b8; Value = 0x003cdd93; PC = 0x562c *)
mov r6 L0x203f07b8;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f07c8; Value = 0xfff0c10e; PC = 0x5630 *)
mov r7 L0x203f07c8;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07d8; Value = 0x000aedf1; PC = 0x5634 *)
mov r8 L0x203f07d8;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07e8; Value = 0x0010a8c5; PC = 0x5638 *)
mov r4 L0x203f07e8;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f07f8; Value = 0xfffae499; PC = 0x563c *)
mov r11 L0x203f07f8;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0808; Value = 0xffa9f983; PC = 0x5640 *)
mov r12 L0x203f0808;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0818; Value = 0xff9c2d1d; PC = 0x5644 *)
mov lr L0x203f0818;

ghost c20o0@int32, c24o0@int32, c28o0@int32, c2co0@int32,
      c30o0@int32, c34o0@int32, c38o0@int32, c3co0@int32:
      c20o0 = r5 /\ c24o0 = r6 /\ c28o0 = r7 /\ c2co0 = r8 /\
      c30o0 = r4 /\ c34o0 = r11 /\ c38o0 = r12 /\ c3co0 = lr
   && c20o0 = r5 /\ c24o0 = r6 /\ c28o0 = r7 /\ c2co0 = r8 /\
      c30o0 = r4 /\ c34o0 = r11 /\ c38o0 = r12 /\ c3co0 = lr;
ghost r4o108@int32, r11o108@int32, r12o108@int32, lro108@int32:
      r4o108 = r4 /\ r11o108 = r11 /\ r12o108 = r12 /\ lro108 = lr
   && r4o108 = r4 /\ r11o108 = r11 /\ r12o108 = r12 /\ lro108 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o108,r11o108,r12o108,lro108]*[K**144,K**144,K**144,K**144])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o108,r11o108,r12o108,lro108]*[K**144,K**144,K**144,K**144])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o109@int32, r8o109@int32, r12o109@int32, lro109@int32:
      r7o109 = r7 /\ r8o109 = r8 /\ r12o109 = r12 /\ lro109 = lr
   && r7o109 = r7 /\ r8o109 = r8 /\ r12o109 = r12 /\ lro109 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o109,r8o109,r12o109,lro109]*[K** 72,K** 72,K**200,K**200])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o109,r8o109,r12o109,lro109]*[K** 72,K** 72,K**200,K**200])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o110@int32, r8o110@int32, r11o110@int32, lro110@int32:
      r6o110 = r6 /\ r8o110 = r8 /\ r11o110 = r11 /\ lro110 = lr
   && r6o110 = r6 /\ r8o110 = r8 /\ r11o110 = r11 /\ lro110 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o110,r8o110,r11o110,lro110]*[K** 36,K**164,K**100,K**228])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o110,r8o110,r11o110,lro110]*[K** 36,K**164,K**100,K**228])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f07b8; PC = 0x573c *)
mov L0x203f07b8 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f07c8; PC = 0x5740 *)
mov L0x203f07c8 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07d8; PC = 0x5744 *)
mov L0x203f07d8 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07e8; PC = 0x5748 *)
mov L0x203f07e8 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f07f8; PC = 0x574c *)
mov L0x203f07f8 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0808; PC = 0x5750 *)
mov L0x203f0808 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0818; PC = 0x5754 *)
mov L0x203f0818 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f07a8; PC = 0x5758 *)
mov L0x203f07a8 r5;

(**************** CUT 36****************)

cut eqmod [L0x203f07a8,L0x203f07b8,L0x203f07c8,L0x203f07d8,
           L0x203f07e8,L0x203f07f8,L0x203f0808,L0x203f0818]
          [poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0],
           poly X**4 [c20o0,c24o0,c28o0,c2co0,c30o0,c34o0,c38o0,c3co0]]
          [[Q, X**4 - K** 36], [Q, X**4 - K**292],
           [Q, X**4 - K**164], [Q, X**4 - K**420],
           [Q, X**4 - K**100], [Q, X**4 - K**356],
           [Q, X**4 - K**228], [Q, X**4 - K**484]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f07a8,L0x203f07b8,L0x203f07c8,L0x203f07d8,
     L0x203f07e8,L0x203f07f8,L0x203f0808,L0x203f0818] /\
    [L0x203f07a8,L0x203f07b8,L0x203f07c8,L0x203f07d8,
     L0x203f07e8,L0x203f07f8,L0x203f0808,L0x203f0818] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f07ac; Value = 0x005526d1; PC = 0x575c *)
mov r5 L0x203f07ac;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f07bc; Value = 0x003b7f2a; PC = 0x5760 *)
mov r6 L0x203f07bc;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f07cc; Value = 0xfff6589b; PC = 0x5764 *)
mov r7 L0x203f07cc;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07dc; Value = 0xff86a990; PC = 0x5768 *)
mov r8 L0x203f07dc;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07ec; Value = 0x00106fbb; PC = 0x576c *)
mov r4 L0x203f07ec;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f07fc; Value = 0x007bed07; PC = 0x5770 *)
mov r11 L0x203f07fc;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f080c; Value = 0xffdc0c4f; PC = 0x5774 *)
mov r12 L0x203f080c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f081c; Value = 0x00016af9; PC = 0x5778 *)
mov lr L0x203f081c;

ghost c21o0@int32, c25o0@int32, c29o0@int32, c2do0@int32,
      c31o0@int32, c35o0@int32, c39o0@int32, c3do0@int32:
      c21o0 = r5 /\ c25o0 = r6 /\ c29o0 = r7 /\ c2do0 = r8 /\
      c31o0 = r4 /\ c35o0 = r11 /\ c39o0 = r12 /\ c3do0 = lr
   && c21o0 = r5 /\ c25o0 = r6 /\ c29o0 = r7 /\ c2do0 = r8 /\
      c31o0 = r4 /\ c35o0 = r11 /\ c39o0 = r12 /\ c3do0 = lr;
ghost r4o111@int32, r11o111@int32, r12o111@int32, lro111@int32:
      r4o111 = r4 /\ r11o111 = r11 /\ r12o111 = r12 /\ lro111 = lr
   && r4o111 = r4 /\ r11o111 = r11 /\ r12o111 = r12 /\ lro111 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o111,r11o111,r12o111,lro111]*[K**144,K**144,K**144,K**144])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o111,r11o111,r12o111,lro111]*[K**144,K**144,K**144,K**144])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o112@int32, r8o112@int32, r12o112@int32, lro112@int32:
      r7o112 = r7 /\ r8o112 = r8 /\ r12o112 = r12 /\ lro112 = lr
   && r7o112 = r7 /\ r8o112 = r8 /\ r12o112 = r12 /\ lro112 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o112,r8o112,r12o112,lro112]*[K** 72,K** 72,K**200,K**200])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o112,r8o112,r12o112,lro112]*[K** 72,K** 72,K**200,K**200])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o113@int32, r8o113@int32, r11o113@int32, lro113@int32:
      r6o113 = r6 /\ r8o113 = r8 /\ r11o113 = r11 /\ lro113 = lr
   && r6o113 = r6 /\ r8o113 = r8 /\ r11o113 = r11 /\ lro113 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o113,r8o113,r11o113,lro113]*[K** 36,K**164,K**100,K**228])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o113,r8o113,r11o113,lro113]*[K** 36,K**164,K**100,K**228])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f07bc; PC = 0x5870 *)
mov L0x203f07bc r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f07cc; PC = 0x5874 *)
mov L0x203f07cc r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07dc; PC = 0x5878 *)
mov L0x203f07dc r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07ec; PC = 0x587c *)
mov L0x203f07ec r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f07fc; PC = 0x5880 *)
mov L0x203f07fc r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f080c; PC = 0x5884 *)
mov L0x203f080c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f081c; PC = 0x5888 *)
mov L0x203f081c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f07ac; PC = 0x588c *)
mov L0x203f07ac r5;

(**************** CUT 37****************)

cut eqmod [L0x203f07ac,L0x203f07bc,L0x203f07cc,L0x203f07dc,
           L0x203f07ec,L0x203f07fc,L0x203f080c,L0x203f081c]
          [poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0],
           poly X**4 [c21o0,c25o0,c29o0,c2do0,c31o0,c35o0,c39o0,c3do0]]
          [[Q, X**4 - K** 36], [Q, X**4 - K**292],
           [Q, X**4 - K**164], [Q, X**4 - K**420],
           [Q, X**4 - K**100], [Q, X**4 - K**356],
           [Q, X**4 - K**228], [Q, X**4 - K**484]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f07ac,L0x203f07bc,L0x203f07cc,L0x203f07dc,
     L0x203f07ec,L0x203f07fc,L0x203f080c,L0x203f081c] /\
    [L0x203f07ac,L0x203f07bc,L0x203f07cc,L0x203f07dc,
     L0x203f07ec,L0x203f07fc,L0x203f080c,L0x203f081c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07b0; Value = 0xfff42329; PC = 0x5628 *)
mov r5 L0x203f07b0;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f07c0; Value = 0x005a63d7; PC = 0x562c *)
mov r6 L0x203f07c0;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f07d0; Value = 0xfffdf112; PC = 0x5630 *)
mov r7 L0x203f07d0;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07e0; Value = 0xffbc11fc; PC = 0x5634 *)
mov r8 L0x203f07e0;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07f0; Value = 0xffc646d0; PC = 0x5638 *)
mov r4 L0x203f07f0;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0800; Value = 0x002203ce; PC = 0x563c *)
mov r11 L0x203f0800;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0810; Value = 0x001833a3; PC = 0x5640 *)
mov r12 L0x203f0810;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0820; Value = 0xffe703b0; PC = 0x5644 *)
mov lr L0x203f0820;

ghost c22o0@int32, c26o0@int32, c2ao0@int32, c2eo0@int32,
      c32o0@int32, c36o0@int32, c3ao0@int32, c3eo0@int32:
      c22o0 = r5 /\ c26o0 = r6 /\ c2ao0 = r7 /\ c2eo0 = r8 /\
      c32o0 = r4 /\ c36o0 = r11 /\ c3ao0 = r12 /\ c3eo0 = lr
   && c22o0 = r5 /\ c26o0 = r6 /\ c2ao0 = r7 /\ c2eo0 = r8 /\
      c32o0 = r4 /\ c36o0 = r11 /\ c3ao0 = r12 /\ c3eo0 = lr;
ghost r4o114@int32, r11o114@int32, r12o114@int32, lro114@int32:
      r4o114 = r4 /\ r11o114 = r11 /\ r12o114 = r12 /\ lro114 = lr
   && r4o114 = r4 /\ r11o114 = r11 /\ r12o114 = r12 /\ lro114 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o114,r11o114,r12o114,lro114]*[K**144,K**144,K**144,K**144])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o114,r11o114,r12o114,lro114]*[K**144,K**144,K**144,K**144])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o115@int32, r8o115@int32, r12o115@int32, lro115@int32:
      r7o115 = r7 /\ r8o115 = r8 /\ r12o115 = r12 /\ lro115 = lr
   && r7o115 = r7 /\ r8o115 = r8 /\ r12o115 = r12 /\ lro115 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o115,r8o115,r12o115,lro115]*[K** 72,K** 72,K**200,K**200])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o115,r8o115,r12o115,lro115]*[K** 72,K** 72,K**200,K**200])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o116@int32, r8o116@int32, r11o116@int32, lro116@int32:
      r6o116 = r6 /\ r8o116 = r8 /\ r11o116 = r11 /\ lro116 = lr
   && r6o116 = r6 /\ r8o116 = r8 /\ r11o116 = r11 /\ lro116 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o116,r8o116,r11o116,lro116]*[K** 36,K**164,K**100,K**228])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o116,r8o116,r11o116,lro116]*[K** 36,K**164,K**100,K**228])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f07c0; PC = 0x573c *)
mov L0x203f07c0 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f07d0; PC = 0x5740 *)
mov L0x203f07d0 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07e0; PC = 0x5744 *)
mov L0x203f07e0 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07f0; PC = 0x5748 *)
mov L0x203f07f0 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0800; PC = 0x574c *)
mov L0x203f0800 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0810; PC = 0x5750 *)
mov L0x203f0810 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0820; PC = 0x5754 *)
mov L0x203f0820 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f07b0; PC = 0x5758 *)
mov L0x203f07b0 r5;

(**************** CUT 38****************)

cut eqmod [L0x203f07b0,L0x203f07c0,L0x203f07d0,L0x203f07e0,
           L0x203f07f0,L0x203f0800,L0x203f0810,L0x203f0820]
          [poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0],
           poly X**4 [c22o0,c26o0,c2ao0,c2eo0,c32o0,c36o0,c3ao0,c3eo0]]
          [[Q, X**4 - K** 36], [Q, X**4 - K**292],
           [Q, X**4 - K**164], [Q, X**4 - K**420],
           [Q, X**4 - K**100], [Q, X**4 - K**356],
           [Q, X**4 - K**228], [Q, X**4 - K**484]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f07b0,L0x203f07c0,L0x203f07d0,L0x203f07e0,
     L0x203f07f0,L0x203f0800,L0x203f0810,L0x203f0820] /\
    [L0x203f07b0,L0x203f07c0,L0x203f07d0,L0x203f07e0,
     L0x203f07f0,L0x203f0800,L0x203f0810,L0x203f0820] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f07b4; Value = 0xffef4fe0; PC = 0x575c *)
mov r5 L0x203f07b4;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f07c4; Value = 0xffd96b72; PC = 0x5760 *)
mov r6 L0x203f07c4;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f07d4; Value = 0xff754ffe; PC = 0x5764 *)
mov r7 L0x203f07d4;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07e4; Value = 0xffd72490; PC = 0x5768 *)
mov r8 L0x203f07e4;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07f4; Value = 0x0016d7df; PC = 0x576c *)
mov r4 L0x203f07f4;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0804; Value = 0x002f4043; PC = 0x5770 *)
mov r11 L0x203f0804;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0814; Value = 0xffd912f1; PC = 0x5774 *)
mov r12 L0x203f0814;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0824; Value = 0x004d716f; PC = 0x5778 *)
mov lr L0x203f0824;

ghost c23o0@int32, c27o0@int32, c2bo0@int32, c2fo0@int32,
      c33o0@int32, c37o0@int32, c3bo0@int32, c3fo0@int32:
      c23o0 = r5 /\ c27o0 = r6 /\ c2bo0 = r7 /\ c2fo0 = r8 /\
      c33o0 = r4 /\ c37o0 = r11 /\ c3bo0 = r12 /\ c3fo0 = lr
   && c23o0 = r5 /\ c27o0 = r6 /\ c2bo0 = r7 /\ c2fo0 = r8 /\
      c33o0 = r4 /\ c37o0 = r11 /\ c3bo0 = r12 /\ c3fo0 = lr;
ghost r4o117@int32, r11o117@int32, r12o117@int32, lro117@int32:
      r4o117 = r4 /\ r11o117 = r11 /\ r12o117 = r12 /\ lro117 = lr
   && r4o117 = r4 /\ r11o117 = r11 /\ r12o117 = r12 /\ lro117 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o117,r11o117,r12o117,lro117]*[K**144,K**144,K**144,K**144])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o117,r11o117,r12o117,lro117]*[K**144,K**144,K**144,K**144])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o118@int32, r8o118@int32, r12o118@int32, lro118@int32:
      r7o118 = r7 /\ r8o118 = r8 /\ r12o118 = r12 /\ lro118 = lr
   && r7o118 = r7 /\ r8o118 = r8 /\ r12o118 = r12 /\ lro118 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o118,r8o118,r12o118,lro118]*[K** 72,K** 72,K**200,K**200])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o118,r8o118,r12o118,lro118]*[K** 72,K** 72,K**200,K**200])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o119@int32, r8o119@int32, r11o119@int32, lro119@int32:
      r6o119 = r6 /\ r8o119 = r8 /\ r11o119 = r11 /\ lro119 = lr
   && r6o119 = r6 /\ r8o119 = r8 /\ r11o119 = r11 /\ lro119 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o119,r8o119,r11o119,lro119]*[K** 36,K**164,K**100,K**228])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o119,r8o119,r11o119,lro119]*[K** 36,K**164,K**100,K**228])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f07c4; PC = 0x5870 *)
mov L0x203f07c4 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f07d4; PC = 0x5874 *)
mov L0x203f07d4 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f07e4; PC = 0x5878 *)
mov L0x203f07e4 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f07f4; PC = 0x587c *)
mov L0x203f07f4 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0804; PC = 0x5880 *)
mov L0x203f0804 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0814; PC = 0x5884 *)
mov L0x203f0814 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0824; PC = 0x5888 *)
mov L0x203f0824 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f07b4; PC = 0x588c *)
mov L0x203f07b4 r5;

(**************** CUT 39****************)

cut eqmod [L0x203f07b4,L0x203f07c4,L0x203f07d4,L0x203f07e4,
           L0x203f07f4,L0x203f0804,L0x203f0814,L0x203f0824]
          [poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0],
           poly X**4 [c23o0,c27o0,c2bo0,c2fo0,c33o0,c37o0,c3bo0,c3fo0]]
          [[Q, X**4 - K** 36], [Q, X**4 - K**292],
           [Q, X**4 - K**164], [Q, X**4 - K**420],
           [Q, X**4 - K**100], [Q, X**4 - K**356],
           [Q, X**4 - K**228], [Q, X**4 - K**484]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f07b4,L0x203f07c4,L0x203f07d4,L0x203f07e4,
     L0x203f07f4,L0x203f0804,L0x203f0814,L0x203f0824] /\
    [L0x203f07b4,L0x203f07c4,L0x203f07d4,L0x203f07e4,
     L0x203f07f4,L0x203f0804,L0x203f0814,L0x203f0824] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x7fec; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x7fec,L0x7ff0,L0x7ff4,L0x7ff8,L0x7ffc,L0x8000,L0x8004];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0828; Value = 0xffe15df8; PC = 0x5628 *)
mov r5 L0x203f0828;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0838; Value = 0x0054e192; PC = 0x562c *)
mov r6 L0x203f0838;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0848; Value = 0x0059d1cb; PC = 0x5630 *)
mov r7 L0x203f0848;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0858; Value = 0x0012a708; PC = 0x5634 *)
mov r8 L0x203f0858;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0868; Value = 0x0002ffad; PC = 0x5638 *)
mov r4 L0x203f0868;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0878; Value = 0xffaa8925; PC = 0x563c *)
mov r11 L0x203f0878;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0888; Value = 0xfff02fa8; PC = 0x5640 *)
mov r12 L0x203f0888;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0898; Value = 0xffc4bebc; PC = 0x5644 *)
mov lr L0x203f0898;

ghost c40o0@int32, c44o0@int32, c48o0@int32, c4co0@int32,
      c50o0@int32, c54o0@int32, c58o0@int32, c5co0@int32:
      c40o0 = r5 /\ c44o0 = r6 /\ c48o0 = r7 /\ c4co0 = r8 /\
      c50o0 = r4 /\ c54o0 = r11 /\ c58o0 = r12 /\ c5co0 = lr
   && c40o0 = r5 /\ c44o0 = r6 /\ c48o0 = r7 /\ c4co0 = r8 /\
      c50o0 = r4 /\ c54o0 = r11 /\ c58o0 = r12 /\ c5co0 = lr;
ghost r4o120@int32, r11o120@int32, r12o120@int32, lro120@int32:
      r4o120 = r4 /\ r11o120 = r11 /\ r12o120 = r12 /\ lro120 = lr
   && r4o120 = r4 /\ r11o120 = r11 /\ r12o120 = r12 /\ lro120 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o120,r11o120,r12o120,lro120]*[K** 80,K** 80,K** 80,K** 80])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o120,r11o120,r12o120,lro120]*[K** 80,K** 80,K** 80,K** 80])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o121@int32, r8o121@int32, r12o121@int32, lro121@int32:
      r7o121 = r7 /\ r8o121 = r8 /\ r12o121 = r12 /\ lro121 = lr
   && r7o121 = r7 /\ r8o121 = r8 /\ r12o121 = r12 /\ lro121 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o121,r8o121,r12o121,lro121]*[K** 40,K** 40,K**168,K**168])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o121,r8o121,r12o121,lro121]*[K** 40,K** 40,K**168,K**168])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o122@int32, r8o122@int32, r11o122@int32, lro122@int32:
      r6o122 = r6 /\ r8o122 = r8 /\ r11o122 = r11 /\ lro122 = lr
   && r6o122 = r6 /\ r8o122 = r8 /\ r11o122 = r11 /\ lro122 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o122,r8o122,r11o122,lro122]*[K** 20,K**148,K** 84,K**212])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o122,r8o122,r11o122,lro122]*[K** 20,K**148,K** 84,K**212])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0838; PC = 0x573c *)
mov L0x203f0838 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0848; PC = 0x5740 *)
mov L0x203f0848 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0858; PC = 0x5744 *)
mov L0x203f0858 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0868; PC = 0x5748 *)
mov L0x203f0868 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0878; PC = 0x574c *)
mov L0x203f0878 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0888; PC = 0x5750 *)
mov L0x203f0888 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0898; PC = 0x5754 *)
mov L0x203f0898 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0828; PC = 0x5758 *)
mov L0x203f0828 r5;

(**************** CUT 40****************)

cut eqmod [L0x203f0828,L0x203f0838,L0x203f0848,L0x203f0858,
           L0x203f0868,L0x203f0878,L0x203f0888,L0x203f0898]
          [poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0],
           poly X**4 [c40o0,c44o0,c48o0,c4co0,c50o0,c54o0,c58o0,c5co0]]
          [[Q, X**4 - K** 20], [Q, X**4 - K**276],
           [Q, X**4 - K**148], [Q, X**4 - K**404],
           [Q, X**4 - K** 84], [Q, X**4 - K**340],
           [Q, X**4 - K**212], [Q, X**4 - K**468]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0828,L0x203f0838,L0x203f0848,L0x203f0858,
     L0x203f0868,L0x203f0878,L0x203f0888,L0x203f0898] /\
    [L0x203f0828,L0x203f0838,L0x203f0848,L0x203f0858,
     L0x203f0868,L0x203f0878,L0x203f0888,L0x203f0898] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f082c; Value = 0xffe8e6e7; PC = 0x575c *)
mov r5 L0x203f082c;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f083c; Value = 0xfffce285; PC = 0x5760 *)
mov r6 L0x203f083c;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f084c; Value = 0x003d6e00; PC = 0x5764 *)
mov r7 L0x203f084c;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f085c; Value = 0x00791c77; PC = 0x5768 *)
mov r8 L0x203f085c;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f086c; Value = 0x0008cb9a; PC = 0x576c *)
mov r4 L0x203f086c;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f087c; Value = 0xffd171f3; PC = 0x5770 *)
mov r11 L0x203f087c;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f088c; Value = 0xffffc1af; PC = 0x5774 *)
mov r12 L0x203f088c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f089c; Value = 0xff5174ba; PC = 0x5778 *)
mov lr L0x203f089c;

ghost c41o0@int32, c45o0@int32, c49o0@int32, c4do0@int32,
      c51o0@int32, c55o0@int32, c59o0@int32, c5do0@int32:
      c41o0 = r5 /\ c45o0 = r6 /\ c49o0 = r7 /\ c4do0 = r8 /\
      c51o0 = r4 /\ c55o0 = r11 /\ c59o0 = r12 /\ c5do0 = lr
   && c41o0 = r5 /\ c45o0 = r6 /\ c49o0 = r7 /\ c4do0 = r8 /\
      c51o0 = r4 /\ c55o0 = r11 /\ c59o0 = r12 /\ c5do0 = lr;
ghost r4o123@int32, r11o123@int32, r12o123@int32, lro123@int32:
      r4o123 = r4 /\ r11o123 = r11 /\ r12o123 = r12 /\ lro123 = lr
   && r4o123 = r4 /\ r11o123 = r11 /\ r12o123 = r12 /\ lro123 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o123,r11o123,r12o123,lro123]*[K** 80,K** 80,K** 80,K** 80])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o123,r11o123,r12o123,lro123]*[K** 80,K** 80,K** 80,K** 80])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o124@int32, r8o124@int32, r12o124@int32, lro124@int32:
      r7o124 = r7 /\ r8o124 = r8 /\ r12o124 = r12 /\ lro124 = lr
   && r7o124 = r7 /\ r8o124 = r8 /\ r12o124 = r12 /\ lro124 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o124,r8o124,r12o124,lro124]*[K** 40,K** 40,K**168,K**168])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o124,r8o124,r12o124,lro124]*[K** 40,K** 40,K**168,K**168])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o125@int32, r8o125@int32, r11o125@int32, lro125@int32:
      r6o125 = r6 /\ r8o125 = r8 /\ r11o125 = r11 /\ lro125 = lr
   && r6o125 = r6 /\ r8o125 = r8 /\ r11o125 = r11 /\ lro125 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o125,r8o125,r11o125,lro125]*[K** 20,K**148,K** 84,K**212])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o125,r8o125,r11o125,lro125]*[K** 20,K**148,K** 84,K**212])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f083c; PC = 0x5870 *)
mov L0x203f083c r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f084c; PC = 0x5874 *)
mov L0x203f084c r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f085c; PC = 0x5878 *)
mov L0x203f085c r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f086c; PC = 0x587c *)
mov L0x203f086c r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f087c; PC = 0x5880 *)
mov L0x203f087c r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f088c; PC = 0x5884 *)
mov L0x203f088c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f089c; PC = 0x5888 *)
mov L0x203f089c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f082c; PC = 0x588c *)
mov L0x203f082c r5;

(**************** CUT 41****************)

cut eqmod [L0x203f082c,L0x203f083c,L0x203f084c,L0x203f085c,
           L0x203f086c,L0x203f087c,L0x203f088c,L0x203f089c]
          [poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0],
           poly X**4 [c41o0,c45o0,c49o0,c4do0,c51o0,c55o0,c59o0,c5do0]]
          [[Q, X**4 - K** 20], [Q, X**4 - K**276],
           [Q, X**4 - K**148], [Q, X**4 - K**404],
           [Q, X**4 - K** 84], [Q, X**4 - K**340],
           [Q, X**4 - K**212], [Q, X**4 - K**468]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f082c,L0x203f083c,L0x203f084c,L0x203f085c,
     L0x203f086c,L0x203f087c,L0x203f088c,L0x203f089c] /\
    [L0x203f082c,L0x203f083c,L0x203f084c,L0x203f085c,
     L0x203f086c,L0x203f087c,L0x203f088c,L0x203f089c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0830; Value = 0x002bc9ff; PC = 0x5628 *)
mov r5 L0x203f0830;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0840; Value = 0xffe9818a; PC = 0x562c *)
mov r6 L0x203f0840;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0850; Value = 0x00406ebb; PC = 0x5630 *)
mov r7 L0x203f0850;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0860; Value = 0xffe246b3; PC = 0x5634 *)
mov r8 L0x203f0860;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0870; Value = 0xfffbc33f; PC = 0x5638 *)
mov r4 L0x203f0870;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0880; Value = 0xfff34e3e; PC = 0x563c *)
mov r11 L0x203f0880;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0890; Value = 0x0068ec97; PC = 0x5640 *)
mov r12 L0x203f0890;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f08a0; Value = 0x0033b349; PC = 0x5644 *)
mov lr L0x203f08a0;

ghost c42o0@int32, c46o0@int32, c4ao0@int32, c4eo0@int32,
      c52o0@int32, c56o0@int32, c5ao0@int32, c5eo0@int32:
      c42o0 = r5 /\ c46o0 = r6 /\ c4ao0 = r7 /\ c4eo0 = r8 /\
      c52o0 = r4 /\ c56o0 = r11 /\ c5ao0 = r12 /\ c5eo0 = lr
   && c42o0 = r5 /\ c46o0 = r6 /\ c4ao0 = r7 /\ c4eo0 = r8 /\
      c52o0 = r4 /\ c56o0 = r11 /\ c5ao0 = r12 /\ c5eo0 = lr;
ghost r4o126@int32, r11o126@int32, r12o126@int32, lro126@int32:
      r4o126 = r4 /\ r11o126 = r11 /\ r12o126 = r12 /\ lro126 = lr
   && r4o126 = r4 /\ r11o126 = r11 /\ r12o126 = r12 /\ lro126 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o126,r11o126,r12o126,lro126]*[K** 80,K** 80,K** 80,K** 80])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o126,r11o126,r12o126,lro126]*[K** 80,K** 80,K** 80,K** 80])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o127@int32, r8o127@int32, r12o127@int32, lro127@int32:
      r7o127 = r7 /\ r8o127 = r8 /\ r12o127 = r12 /\ lro127 = lr
   && r7o127 = r7 /\ r8o127 = r8 /\ r12o127 = r12 /\ lro127 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o127,r8o127,r12o127,lro127]*[K** 40,K** 40,K**168,K**168])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o127,r8o127,r12o127,lro127]*[K** 40,K** 40,K**168,K**168])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o128@int32, r8o128@int32, r11o128@int32, lro128@int32:
      r6o128 = r6 /\ r8o128 = r8 /\ r11o128 = r11 /\ lro128 = lr
   && r6o128 = r6 /\ r8o128 = r8 /\ r11o128 = r11 /\ lro128 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o128,r8o128,r11o128,lro128]*[K** 20,K**148,K** 84,K**212])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o128,r8o128,r11o128,lro128]*[K** 20,K**148,K** 84,K**212])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0840; PC = 0x573c *)
mov L0x203f0840 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0850; PC = 0x5740 *)
mov L0x203f0850 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0860; PC = 0x5744 *)
mov L0x203f0860 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0870; PC = 0x5748 *)
mov L0x203f0870 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0880; PC = 0x574c *)
mov L0x203f0880 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0890; PC = 0x5750 *)
mov L0x203f0890 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f08a0; PC = 0x5754 *)
mov L0x203f08a0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0830; PC = 0x5758 *)
mov L0x203f0830 r5;

(**************** CUT 42****************)

cut eqmod [L0x203f0830,L0x203f0840,L0x203f0850,L0x203f0860,
           L0x203f0870,L0x203f0880,L0x203f0890,L0x203f08a0]
          [poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0],
           poly X**4 [c42o0,c46o0,c4ao0,c4eo0,c52o0,c56o0,c5ao0,c5eo0]]
          [[Q, X**4 - K** 20], [Q, X**4 - K**276],
           [Q, X**4 - K**148], [Q, X**4 - K**404],
           [Q, X**4 - K** 84], [Q, X**4 - K**340],
           [Q, X**4 - K**212], [Q, X**4 - K**468]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0830,L0x203f0840,L0x203f0850,L0x203f0860,
     L0x203f0870,L0x203f0880,L0x203f0890,L0x203f08a0] /\
    [L0x203f0830,L0x203f0840,L0x203f0850,L0x203f0860,
     L0x203f0870,L0x203f0880,L0x203f0890,L0x203f08a0] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0834; Value = 0xffbd3f26; PC = 0x575c *)
mov r5 L0x203f0834;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0844; Value = 0x001697ef; PC = 0x5760 *)
mov r6 L0x203f0844;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0854; Value = 0x00335b2b; PC = 0x5764 *)
mov r7 L0x203f0854;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0864; Value = 0xffce61c8; PC = 0x5768 *)
mov r8 L0x203f0864;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0874; Value = 0xffd93513; PC = 0x576c *)
mov r4 L0x203f0874;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0884; Value = 0x0029ff33; PC = 0x5770 *)
mov r11 L0x203f0884;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0894; Value = 0x002325fc; PC = 0x5774 *)
mov r12 L0x203f0894;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f08a4; Value = 0x00246bd7; PC = 0x5778 *)
mov lr L0x203f08a4;

ghost c43o0@int32, c47o0@int32, c4bo0@int32, c4fo0@int32,
      c53o0@int32, c57o0@int32, c5bo0@int32, c5fo0@int32:
      c43o0 = r5 /\ c47o0 = r6 /\ c4bo0 = r7 /\ c4fo0 = r8 /\
      c53o0 = r4 /\ c57o0 = r11 /\ c5bo0 = r12 /\ c5fo0 = lr
   && c43o0 = r5 /\ c47o0 = r6 /\ c4bo0 = r7 /\ c4fo0 = r8 /\
      c53o0 = r4 /\ c57o0 = r11 /\ c5bo0 = r12 /\ c5fo0 = lr;
ghost r4o129@int32, r11o129@int32, r12o129@int32, lro129@int32:
      r4o129 = r4 /\ r11o129 = r11 /\ r12o129 = r12 /\ lro129 = lr
   && r4o129 = r4 /\ r11o129 = r11 /\ r12o129 = r12 /\ lro129 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o129,r11o129,r12o129,lro129]*[K** 80,K** 80,K** 80,K** 80])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o129,r11o129,r12o129,lro129]*[K** 80,K** 80,K** 80,K** 80])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o130@int32, r8o130@int32, r12o130@int32, lro130@int32:
      r7o130 = r7 /\ r8o130 = r8 /\ r12o130 = r12 /\ lro130 = lr
   && r7o130 = r7 /\ r8o130 = r8 /\ r12o130 = r12 /\ lro130 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o130,r8o130,r12o130,lro130]*[K** 40,K** 40,K**168,K**168])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o130,r8o130,r12o130,lro130]*[K** 40,K** 40,K**168,K**168])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o131@int32, r8o131@int32, r11o131@int32, lro131@int32:
      r6o131 = r6 /\ r8o131 = r8 /\ r11o131 = r11 /\ lro131 = lr
   && r6o131 = r6 /\ r8o131 = r8 /\ r11o131 = r11 /\ lro131 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o131,r8o131,r11o131,lro131]*[K** 20,K**148,K** 84,K**212])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o131,r8o131,r11o131,lro131]*[K** 20,K**148,K** 84,K**212])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0844; PC = 0x5870 *)
mov L0x203f0844 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0854; PC = 0x5874 *)
mov L0x203f0854 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0864; PC = 0x5878 *)
mov L0x203f0864 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0874; PC = 0x587c *)
mov L0x203f0874 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0884; PC = 0x5880 *)
mov L0x203f0884 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0894; PC = 0x5884 *)
mov L0x203f0894 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f08a4; PC = 0x5888 *)
mov L0x203f08a4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0834; PC = 0x588c *)
mov L0x203f0834 r5;

(**************** CUT 43****************)

cut eqmod [L0x203f0834,L0x203f0844,L0x203f0854,L0x203f0864,
           L0x203f0874,L0x203f0884,L0x203f0894,L0x203f08a4]
          [poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0],
           poly X**4 [c43o0,c47o0,c4bo0,c4fo0,c53o0,c57o0,c5bo0,c5fo0]]
          [[Q, X**4 - K** 20], [Q, X**4 - K**276],
           [Q, X**4 - K**148], [Q, X**4 - K**404],
           [Q, X**4 - K** 84], [Q, X**4 - K**340],
           [Q, X**4 - K**212], [Q, X**4 - K**468]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0834,L0x203f0844,L0x203f0854,L0x203f0864,
     L0x203f0874,L0x203f0884,L0x203f0894,L0x203f08a4] /\
    [L0x203f0834,L0x203f0844,L0x203f0854,L0x203f0864,
     L0x203f0874,L0x203f0884,L0x203f0894,L0x203f08a4] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x8008; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x8008,L0x800c,L0x8010,L0x8014,L0x8018,L0x801c,L0x8020];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08a8; Value = 0x001db5a2; PC = 0x5628 *)
mov r5 L0x203f08a8;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f08b8; Value = 0x0056d874; PC = 0x562c *)
mov r6 L0x203f08b8;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f08c8; Value = 0x0085bd0f; PC = 0x5630 *)
mov r7 L0x203f08c8;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08d8; Value = 0xff94d884; PC = 0x5634 *)
mov r8 L0x203f08d8;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08e8; Value = 0x0055a0c7; PC = 0x5638 *)
mov r4 L0x203f08e8;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f08f8; Value = 0x000a86c1; PC = 0x563c *)
mov r11 L0x203f08f8;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0908; Value = 0xffe16268; PC = 0x5640 *)
mov r12 L0x203f0908;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0918; Value = 0x000dbfb0; PC = 0x5644 *)
mov lr L0x203f0918;

ghost c60o0@int32, c64o0@int32, c68o0@int32, c6co0@int32,
      c70o0@int32, c74o0@int32, c78o0@int32, c7co0@int32:
      c60o0 = r5 /\ c64o0 = r6 /\ c68o0 = r7 /\ c6co0 = r8 /\
      c70o0 = r4 /\ c74o0 = r11 /\ c78o0 = r12 /\ c7co0 = lr
   && c60o0 = r5 /\ c64o0 = r6 /\ c68o0 = r7 /\ c6co0 = r8 /\
      c70o0 = r4 /\ c74o0 = r11 /\ c78o0 = r12 /\ c7co0 = lr;
ghost r4o132@int32, r11o132@int32, r12o132@int32, lro132@int32:
      r4o132 = r4 /\ r11o132 = r11 /\ r12o132 = r12 /\ lro132 = lr
   && r4o132 = r4 /\ r11o132 = r11 /\ r12o132 = r12 /\ lro132 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o132,r11o132,r12o132,lro132]*[K**208,K**208,K**208,K**208])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o132,r11o132,r12o132,lro132]*[K**208,K**208,K**208,K**208])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o133@int32, r8o133@int32, r12o133@int32, lro133@int32:
      r7o133 = r7 /\ r8o133 = r8 /\ r12o133 = r12 /\ lro133 = lr
   && r7o133 = r7 /\ r8o133 = r8 /\ r12o133 = r12 /\ lro133 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o133,r8o133,r12o133,lro133]*[K**104,K**104,K**232,K**232])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o133,r8o133,r12o133,lro133]*[K**104,K**104,K**232,K**232])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o134@int32, r8o134@int32, r11o134@int32, lro134@int32:
      r6o134 = r6 /\ r8o134 = r8 /\ r11o134 = r11 /\ lro134 = lr
   && r6o134 = r6 /\ r8o134 = r8 /\ r11o134 = r11 /\ lro134 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o134,r8o134,r11o134,lro134]*[K** 52,K**180,K**116,K**244])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o134,r8o134,r11o134,lro134]*[K** 52,K**180,K**116,K**244])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f08b8; PC = 0x573c *)
mov L0x203f08b8 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f08c8; PC = 0x5740 *)
mov L0x203f08c8 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08d8; PC = 0x5744 *)
mov L0x203f08d8 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08e8; PC = 0x5748 *)
mov L0x203f08e8 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f08f8; PC = 0x574c *)
mov L0x203f08f8 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0908; PC = 0x5750 *)
mov L0x203f0908 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0918; PC = 0x5754 *)
mov L0x203f0918 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f08a8; PC = 0x5758 *)
mov L0x203f08a8 r5;

(**************** CUT 44****************)

cut eqmod [L0x203f08a8,L0x203f08b8,L0x203f08c8,L0x203f08d8,
           L0x203f08e8,L0x203f08f8,L0x203f0908,L0x203f0918]
          [poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0],
           poly X**4 [c60o0,c64o0,c68o0,c6co0,c70o0,c74o0,c78o0,c7co0]]
          [[Q, X**4 - K** 52], [Q, X**4 - K**308],
           [Q, X**4 - K**180], [Q, X**4 - K**436],
           [Q, X**4 - K**116], [Q, X**4 - K**372],
           [Q, X**4 - K**244], [Q, X**4 - K**500]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f08a8,L0x203f08b8,L0x203f08c8,L0x203f08d8,
     L0x203f08e8,L0x203f08f8,L0x203f0908,L0x203f0918] /\
    [L0x203f08a8,L0x203f08b8,L0x203f08c8,L0x203f08d8,
     L0x203f08e8,L0x203f08f8,L0x203f0908,L0x203f0918] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f08ac; Value = 0xffa48e3d; PC = 0x575c *)
mov r5 L0x203f08ac;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f08bc; Value = 0xfffc2a4d; PC = 0x5760 *)
mov r6 L0x203f08bc;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f08cc; Value = 0x0088966a; PC = 0x5764 *)
mov r7 L0x203f08cc;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08dc; Value = 0xfffa0e49; PC = 0x5768 *)
mov r8 L0x203f08dc;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08ec; Value = 0x0049ce0e; PC = 0x576c *)
mov r4 L0x203f08ec;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f08fc; Value = 0xffec1c8d; PC = 0x5770 *)
mov r11 L0x203f08fc;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f090c; Value = 0xffe8c307; PC = 0x5774 *)
mov r12 L0x203f090c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f091c; Value = 0xffcefc6c; PC = 0x5778 *)
mov lr L0x203f091c;

ghost c61o0@int32, c65o0@int32, c69o0@int32, c6do0@int32,
      c71o0@int32, c75o0@int32, c79o0@int32, c7do0@int32:
      c61o0 = r5 /\ c65o0 = r6 /\ c69o0 = r7 /\ c6do0 = r8 /\
      c71o0 = r4 /\ c75o0 = r11 /\ c79o0 = r12 /\ c7do0 = lr
   && c61o0 = r5 /\ c65o0 = r6 /\ c69o0 = r7 /\ c6do0 = r8 /\
      c71o0 = r4 /\ c75o0 = r11 /\ c79o0 = r12 /\ c7do0 = lr;
ghost r4o135@int32, r11o135@int32, r12o135@int32, lro135@int32:
      r4o135 = r4 /\ r11o135 = r11 /\ r12o135 = r12 /\ lro135 = lr
   && r4o135 = r4 /\ r11o135 = r11 /\ r12o135 = r12 /\ lro135 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o135,r11o135,r12o135,lro135]*[K**208,K**208,K**208,K**208])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o135,r11o135,r12o135,lro135]*[K**208,K**208,K**208,K**208])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o136@int32, r8o136@int32, r12o136@int32, lro136@int32:
      r7o136 = r7 /\ r8o136 = r8 /\ r12o136 = r12 /\ lro136 = lr
   && r7o136 = r7 /\ r8o136 = r8 /\ r12o136 = r12 /\ lro136 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o136,r8o136,r12o136,lro136]*[K**104,K**104,K**232,K**232])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o136,r8o136,r12o136,lro136]*[K**104,K**104,K**232,K**232])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o137@int32, r8o137@int32, r11o137@int32, lro137@int32:
      r6o137 = r6 /\ r8o137 = r8 /\ r11o137 = r11 /\ lro137 = lr
   && r6o137 = r6 /\ r8o137 = r8 /\ r11o137 = r11 /\ lro137 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o137,r8o137,r11o137,lro137]*[K** 52,K**180,K**116,K**244])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o137,r8o137,r11o137,lro137]*[K** 52,K**180,K**116,K**244])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f08bc; PC = 0x5870 *)
mov L0x203f08bc r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f08cc; PC = 0x5874 *)
mov L0x203f08cc r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08dc; PC = 0x5878 *)
mov L0x203f08dc r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08ec; PC = 0x587c *)
mov L0x203f08ec r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f08fc; PC = 0x5880 *)
mov L0x203f08fc r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f090c; PC = 0x5884 *)
mov L0x203f090c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f091c; PC = 0x5888 *)
mov L0x203f091c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f08ac; PC = 0x588c *)
mov L0x203f08ac r5;

(**************** CUT 45****************)

cut eqmod [L0x203f08ac,L0x203f08bc,L0x203f08cc,L0x203f08dc,
           L0x203f08ec,L0x203f08fc,L0x203f090c,L0x203f091c]
          [poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0],
           poly X**4 [c61o0,c65o0,c69o0,c6do0,c71o0,c75o0,c79o0,c7do0]]
          [[Q, X**4 - K** 52], [Q, X**4 - K**308],
           [Q, X**4 - K**180], [Q, X**4 - K**436],
           [Q, X**4 - K**116], [Q, X**4 - K**372],
           [Q, X**4 - K**244], [Q, X**4 - K**500]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f08ac,L0x203f08bc,L0x203f08cc,L0x203f08dc,
     L0x203f08ec,L0x203f08fc,L0x203f090c,L0x203f091c] /\
    [L0x203f08ac,L0x203f08bc,L0x203f08cc,L0x203f08dc,
     L0x203f08ec,L0x203f08fc,L0x203f090c,L0x203f091c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08b0; Value = 0x0078667b; PC = 0x5628 *)
mov r5 L0x203f08b0;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f08c0; Value = 0xffe3361a; PC = 0x562c *)
mov r6 L0x203f08c0;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f08d0; Value = 0x00592073; PC = 0x5630 *)
mov r7 L0x203f08d0;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08e0; Value = 0x000955c5; PC = 0x5634 *)
mov r8 L0x203f08e0;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08f0; Value = 0xffbd70b3; PC = 0x5638 *)
mov r4 L0x203f08f0;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0900; Value = 0xff8e7944; PC = 0x563c *)
mov r11 L0x203f0900;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0910; Value = 0x002f763d; PC = 0x5640 *)
mov r12 L0x203f0910;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0920; Value = 0x0017dcc3; PC = 0x5644 *)
mov lr L0x203f0920;

ghost c62o0@int32, c66o0@int32, c6ao0@int32, c6eo0@int32,
      c72o0@int32, c76o0@int32, c7ao0@int32, c7eo0@int32:
      c62o0 = r5 /\ c66o0 = r6 /\ c6ao0 = r7 /\ c6eo0 = r8 /\
      c72o0 = r4 /\ c76o0 = r11 /\ c7ao0 = r12 /\ c7eo0 = lr
   && c62o0 = r5 /\ c66o0 = r6 /\ c6ao0 = r7 /\ c6eo0 = r8 /\
      c72o0 = r4 /\ c76o0 = r11 /\ c7ao0 = r12 /\ c7eo0 = lr;
ghost r4o138@int32, r11o138@int32, r12o138@int32, lro138@int32:
      r4o138 = r4 /\ r11o138 = r11 /\ r12o138 = r12 /\ lro138 = lr
   && r4o138 = r4 /\ r11o138 = r11 /\ r12o138 = r12 /\ lro138 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o138,r11o138,r12o138,lro138]*[K**208,K**208,K**208,K**208])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o138,r11o138,r12o138,lro138]*[K**208,K**208,K**208,K**208])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o139@int32, r8o139@int32, r12o139@int32, lro139@int32:
      r7o139 = r7 /\ r8o139 = r8 /\ r12o139 = r12 /\ lro139 = lr
   && r7o139 = r7 /\ r8o139 = r8 /\ r12o139 = r12 /\ lro139 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o139,r8o139,r12o139,lro139]*[K**104,K**104,K**232,K**232])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o139,r8o139,r12o139,lro139]*[K**104,K**104,K**232,K**232])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o140@int32, r8o140@int32, r11o140@int32, lro140@int32:
      r6o140 = r6 /\ r8o140 = r8 /\ r11o140 = r11 /\ lro140 = lr
   && r6o140 = r6 /\ r8o140 = r8 /\ r11o140 = r11 /\ lro140 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o140,r8o140,r11o140,lro140]*[K** 52,K**180,K**116,K**244])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o140,r8o140,r11o140,lro140]*[K** 52,K**180,K**116,K**244])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f08c0; PC = 0x573c *)
mov L0x203f08c0 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f08d0; PC = 0x5740 *)
mov L0x203f08d0 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08e0; PC = 0x5744 *)
mov L0x203f08e0 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08f0; PC = 0x5748 *)
mov L0x203f08f0 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0900; PC = 0x574c *)
mov L0x203f0900 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0910; PC = 0x5750 *)
mov L0x203f0910 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0920; PC = 0x5754 *)
mov L0x203f0920 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f08b0; PC = 0x5758 *)
mov L0x203f08b0 r5;

(**************** CUT 46****************)

cut eqmod [L0x203f08b0,L0x203f08c0,L0x203f08d0,L0x203f08e0,
           L0x203f08f0,L0x203f0900,L0x203f0910,L0x203f0920]
          [poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0],
           poly X**4 [c62o0,c66o0,c6ao0,c6eo0,c72o0,c76o0,c7ao0,c7eo0]]
          [[Q, X**4 - K** 52], [Q, X**4 - K**308],
           [Q, X**4 - K**180], [Q, X**4 - K**436],
           [Q, X**4 - K**116], [Q, X**4 - K**372],
           [Q, X**4 - K**244], [Q, X**4 - K**500]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f08b0,L0x203f08c0,L0x203f08d0,L0x203f08e0,
     L0x203f08f0,L0x203f0900,L0x203f0910,L0x203f0920] /\
    [L0x203f08b0,L0x203f08c0,L0x203f08d0,L0x203f08e0,
     L0x203f08f0,L0x203f0900,L0x203f0910,L0x203f0920] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f08b4; Value = 0xffc35c02; PC = 0x575c *)
mov r5 L0x203f08b4;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f08c4; Value = 0x0011ef25; PC = 0x5760 *)
mov r6 L0x203f08c4;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f08d4; Value = 0xfff843ab; PC = 0x5764 *)
mov r7 L0x203f08d4;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08e4; Value = 0xffdea49a; PC = 0x5768 *)
mov r8 L0x203f08e4;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08f4; Value = 0xff82ba73; PC = 0x576c *)
mov r4 L0x203f08f4;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0904; Value = 0xffaac1f1; PC = 0x5770 *)
mov r11 L0x203f0904;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0914; Value = 0xffc26fa8; PC = 0x5774 *)
mov r12 L0x203f0914;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0924; Value = 0x007c6cf3; PC = 0x5778 *)
mov lr L0x203f0924;

ghost c63o0@int32, c67o0@int32, c6bo0@int32, c6fo0@int32,
      c73o0@int32, c77o0@int32, c7bo0@int32, c7fo0@int32:
      c63o0 = r5 /\ c67o0 = r6 /\ c6bo0 = r7 /\ c6fo0 = r8 /\
      c73o0 = r4 /\ c77o0 = r11 /\ c7bo0 = r12 /\ c7fo0 = lr
   && c63o0 = r5 /\ c67o0 = r6 /\ c6bo0 = r7 /\ c6fo0 = r8 /\
      c73o0 = r4 /\ c77o0 = r11 /\ c7bo0 = r12 /\ c7fo0 = lr;
ghost r4o141@int32, r11o141@int32, r12o141@int32, lro141@int32:
      r4o141 = r4 /\ r11o141 = r11 /\ r12o141 = r12 /\ lro141 = lr
   && r4o141 = r4 /\ r11o141 = r11 /\ r12o141 = r12 /\ lro141 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o141,r11o141,r12o141,lro141]*[K**208,K**208,K**208,K**208])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o141,r11o141,r12o141,lro141]*[K**208,K**208,K**208,K**208])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o142@int32, r8o142@int32, r12o142@int32, lro142@int32:
      r7o142 = r7 /\ r8o142 = r8 /\ r12o142 = r12 /\ lro142 = lr
   && r7o142 = r7 /\ r8o142 = r8 /\ r12o142 = r12 /\ lro142 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o142,r8o142,r12o142,lro142]*[K**104,K**104,K**232,K**232])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o142,r8o142,r12o142,lro142]*[K**104,K**104,K**232,K**232])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o143@int32, r8o143@int32, r11o143@int32, lro143@int32:
      r6o143 = r6 /\ r8o143 = r8 /\ r11o143 = r11 /\ lro143 = lr
   && r6o143 = r6 /\ r8o143 = r8 /\ r11o143 = r11 /\ lro143 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o143,r8o143,r11o143,lro143]*[K** 52,K**180,K**116,K**244])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o143,r8o143,r11o143,lro143]*[K** 52,K**180,K**116,K**244])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f08c4; PC = 0x5870 *)
mov L0x203f08c4 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f08d4; PC = 0x5874 *)
mov L0x203f08d4 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f08e4; PC = 0x5878 *)
mov L0x203f08e4 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f08f4; PC = 0x587c *)
mov L0x203f08f4 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0904; PC = 0x5880 *)
mov L0x203f0904 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0914; PC = 0x5884 *)
mov L0x203f0914 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0924; PC = 0x5888 *)
mov L0x203f0924 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f08b4; PC = 0x588c *)
mov L0x203f08b4 r5;

(**************** CUT 47****************)

cut eqmod [L0x203f08b4,L0x203f08c4,L0x203f08d4,L0x203f08e4,
           L0x203f08f4,L0x203f0904,L0x203f0914,L0x203f0924]
          [poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0],
           poly X**4 [c63o0,c67o0,c6bo0,c6fo0,c73o0,c77o0,c7bo0,c7fo0]]
          [[Q, X**4 - K** 52], [Q, X**4 - K**308],
           [Q, X**4 - K**180], [Q, X**4 - K**436],
           [Q, X**4 - K**116], [Q, X**4 - K**372],
           [Q, X**4 - K**244], [Q, X**4 - K**500]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f08b4,L0x203f08c4,L0x203f08d4,L0x203f08e4,
     L0x203f08f4,L0x203f0904,L0x203f0914,L0x203f0924] /\
    [L0x203f08b4,L0x203f08c4,L0x203f08d4,L0x203f08e4,
     L0x203f08f4,L0x203f0904,L0x203f0914,L0x203f0924] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x8024; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x8024,L0x8028,L0x802c,L0x8030,L0x8034,L0x8038,L0x803c];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0928; Value = 0xffe258d4; PC = 0x5628 *)
mov r5 L0x203f0928;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0938; Value = 0xff911a48; PC = 0x562c *)
mov r6 L0x203f0938;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0948; Value = 0xff71f5fd; PC = 0x5630 *)
mov r7 L0x203f0948;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0958; Value = 0xfff79475; PC = 0x5634 *)
mov r8 L0x203f0958;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0968; Value = 0xffc62a3f; PC = 0x5638 *)
mov r4 L0x203f0968;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0978; Value = 0xfff9f671; PC = 0x563c *)
mov r11 L0x203f0978;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0988; Value = 0x00266c9a; PC = 0x5640 *)
mov r12 L0x203f0988;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0998; Value = 0xfff5ffd2; PC = 0x5644 *)
mov lr L0x203f0998;

ghost c80o0@int32, c84o0@int32, c88o0@int32, c8co0@int32,
      c90o0@int32, c94o0@int32, c98o0@int32, c9co0@int32:
      c80o0 = r5 /\ c84o0 = r6 /\ c88o0 = r7 /\ c8co0 = r8 /\
      c90o0 = r4 /\ c94o0 = r11 /\ c98o0 = r12 /\ c9co0 = lr
   && c80o0 = r5 /\ c84o0 = r6 /\ c88o0 = r7 /\ c8co0 = r8 /\
      c90o0 = r4 /\ c94o0 = r11 /\ c98o0 = r12 /\ c9co0 = lr;
ghost r4o144@int32, r11o144@int32, r12o144@int32, lro144@int32:
      r4o144 = r4 /\ r11o144 = r11 /\ r12o144 = r12 /\ lro144 = lr
   && r4o144 = r4 /\ r11o144 = r11 /\ r12o144 = r12 /\ lro144 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o144,r11o144,r12o144,lro144]*[K** 48,K** 48,K** 48,K** 48])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o144,r11o144,r12o144,lro144]*[K** 48,K** 48,K** 48,K** 48])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o145@int32, r8o145@int32, r12o145@int32, lro145@int32:
      r7o145 = r7 /\ r8o145 = r8 /\ r12o145 = r12 /\ lro145 = lr
   && r7o145 = r7 /\ r8o145 = r8 /\ r12o145 = r12 /\ lro145 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o145,r8o145,r12o145,lro145]*[K** 24,K** 24,K**152,K**152])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o145,r8o145,r12o145,lro145]*[K** 24,K** 24,K**152,K**152])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o146@int32, r8o146@int32, r11o146@int32, lro146@int32:
      r6o146 = r6 /\ r8o146 = r8 /\ r11o146 = r11 /\ lro146 = lr
   && r6o146 = r6 /\ r8o146 = r8 /\ r11o146 = r11 /\ lro146 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o146,r8o146,r11o146,lro146]*[K** 12,K**140,K** 76,K**204])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o146,r8o146,r11o146,lro146]*[K** 12,K**140,K** 76,K**204])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0938; PC = 0x573c *)
mov L0x203f0938 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0948; PC = 0x5740 *)
mov L0x203f0948 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0958; PC = 0x5744 *)
mov L0x203f0958 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0968; PC = 0x5748 *)
mov L0x203f0968 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0978; PC = 0x574c *)
mov L0x203f0978 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0988; PC = 0x5750 *)
mov L0x203f0988 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0998; PC = 0x5754 *)
mov L0x203f0998 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0928; PC = 0x5758 *)
mov L0x203f0928 r5;

(**************** CUT 48****************)

cut eqmod [L0x203f0928,L0x203f0938,L0x203f0948,L0x203f0958,
           L0x203f0968,L0x203f0978,L0x203f0988,L0x203f0998]
          [poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0],
           poly X**4 [c80o0,c84o0,c88o0,c8co0,c90o0,c94o0,c98o0,c9co0]]
          [[Q, X**4 - K** 12], [Q, X**4 - K**268],
           [Q, X**4 - K**140], [Q, X**4 - K**396],
           [Q, X**4 - K** 76], [Q, X**4 - K**332],
           [Q, X**4 - K**204], [Q, X**4 - K**460]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0928,L0x203f0938,L0x203f0948,L0x203f0958,
     L0x203f0968,L0x203f0978,L0x203f0988,L0x203f0998] /\
    [L0x203f0928,L0x203f0938,L0x203f0948,L0x203f0958,
     L0x203f0968,L0x203f0978,L0x203f0988,L0x203f0998] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f092c; Value = 0x0053c237; PC = 0x575c *)
mov r5 L0x203f092c;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f093c; Value = 0x001faf73; PC = 0x5760 *)
mov r6 L0x203f093c;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f094c; Value = 0xff6f9c94; PC = 0x5764 *)
mov r7 L0x203f094c;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f095c; Value = 0xff8e6126; PC = 0x5768 *)
mov r8 L0x203f095c;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f096c; Value = 0xffb1d2fe; PC = 0x576c *)
mov r4 L0x203f096c;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f097c; Value = 0xfff7e7f5; PC = 0x5770 *)
mov r11 L0x203f097c;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f098c; Value = 0x00171d37; PC = 0x5774 *)
mov r12 L0x203f098c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f099c; Value = 0x003950c8; PC = 0x5778 *)
mov lr L0x203f099c;

ghost c81o0@int32, c85o0@int32, c89o0@int32, c8do0@int32,
      c91o0@int32, c95o0@int32, c99o0@int32, c9do0@int32:
      c81o0 = r5 /\ c85o0 = r6 /\ c89o0 = r7 /\ c8do0 = r8 /\
      c91o0 = r4 /\ c95o0 = r11 /\ c99o0 = r12 /\ c9do0 = lr
   && c81o0 = r5 /\ c85o0 = r6 /\ c89o0 = r7 /\ c8do0 = r8 /\
      c91o0 = r4 /\ c95o0 = r11 /\ c99o0 = r12 /\ c9do0 = lr;
ghost r4o147@int32, r11o147@int32, r12o147@int32, lro147@int32:
      r4o147 = r4 /\ r11o147 = r11 /\ r12o147 = r12 /\ lro147 = lr
   && r4o147 = r4 /\ r11o147 = r11 /\ r12o147 = r12 /\ lro147 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o147,r11o147,r12o147,lro147]*[K** 48,K** 48,K** 48,K** 48])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o147,r11o147,r12o147,lro147]*[K** 48,K** 48,K** 48,K** 48])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o148@int32, r8o148@int32, r12o148@int32, lro148@int32:
      r7o148 = r7 /\ r8o148 = r8 /\ r12o148 = r12 /\ lro148 = lr
   && r7o148 = r7 /\ r8o148 = r8 /\ r12o148 = r12 /\ lro148 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o148,r8o148,r12o148,lro148]*[K** 24,K** 24,K**152,K**152])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o148,r8o148,r12o148,lro148]*[K** 24,K** 24,K**152,K**152])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o149@int32, r8o149@int32, r11o149@int32, lro149@int32:
      r6o149 = r6 /\ r8o149 = r8 /\ r11o149 = r11 /\ lro149 = lr
   && r6o149 = r6 /\ r8o149 = r8 /\ r11o149 = r11 /\ lro149 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o149,r8o149,r11o149,lro149]*[K** 12,K**140,K** 76,K**204])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o149,r8o149,r11o149,lro149]*[K** 12,K**140,K** 76,K**204])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f093c; PC = 0x5870 *)
mov L0x203f093c r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f094c; PC = 0x5874 *)
mov L0x203f094c r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f095c; PC = 0x5878 *)
mov L0x203f095c r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f096c; PC = 0x587c *)
mov L0x203f096c r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f097c; PC = 0x5880 *)
mov L0x203f097c r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f098c; PC = 0x5884 *)
mov L0x203f098c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f099c; PC = 0x5888 *)
mov L0x203f099c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f092c; PC = 0x588c *)
mov L0x203f092c r5;

(**************** CUT 49****************)

cut eqmod [L0x203f092c,L0x203f093c,L0x203f094c,L0x203f095c,
           L0x203f096c,L0x203f097c,L0x203f098c,L0x203f099c]
          [poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0],
           poly X**4 [c81o0,c85o0,c89o0,c8do0,c91o0,c95o0,c99o0,c9do0]]
          [[Q, X**4 - K** 12], [Q, X**4 - K**268],
           [Q, X**4 - K**140], [Q, X**4 - K**396],
           [Q, X**4 - K** 76], [Q, X**4 - K**332],
           [Q, X**4 - K**204], [Q, X**4 - K**460]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f092c,L0x203f093c,L0x203f094c,L0x203f095c,
     L0x203f096c,L0x203f097c,L0x203f098c,L0x203f099c] /\
    [L0x203f092c,L0x203f093c,L0x203f094c,L0x203f095c,
     L0x203f096c,L0x203f097c,L0x203f098c,L0x203f099c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0930; Value = 0xff838bc5; PC = 0x5628 *)
mov r5 L0x203f0930;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0940; Value = 0x00109b72; PC = 0x562c *)
mov r6 L0x203f0940;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0950; Value = 0xffa2df49; PC = 0x5630 *)
mov r7 L0x203f0950;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0960; Value = 0xfff27c03; PC = 0x5634 *)
mov r8 L0x203f0960;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0970; Value = 0x005b09f7; PC = 0x5638 *)
mov r4 L0x203f0970;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0980; Value = 0x0065da32; PC = 0x563c *)
mov r11 L0x203f0980;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0990; Value = 0xffe455c1; PC = 0x5640 *)
mov r12 L0x203f0990;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f09a0; Value = 0xffe043bd; PC = 0x5644 *)
mov lr L0x203f09a0;

ghost c82o0@int32, c86o0@int32, c8ao0@int32, c8eo0@int32,
      c92o0@int32, c96o0@int32, c9ao0@int32, c9eo0@int32:
      c82o0 = r5 /\ c86o0 = r6 /\ c8ao0 = r7 /\ c8eo0 = r8 /\
      c92o0 = r4 /\ c96o0 = r11 /\ c9ao0 = r12 /\ c9eo0 = lr
   && c82o0 = r5 /\ c86o0 = r6 /\ c8ao0 = r7 /\ c8eo0 = r8 /\
      c92o0 = r4 /\ c96o0 = r11 /\ c9ao0 = r12 /\ c9eo0 = lr;
ghost r4o150@int32, r11o150@int32, r12o150@int32, lro150@int32:
      r4o150 = r4 /\ r11o150 = r11 /\ r12o150 = r12 /\ lro150 = lr
   && r4o150 = r4 /\ r11o150 = r11 /\ r12o150 = r12 /\ lro150 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o150,r11o150,r12o150,lro150]*[K** 48,K** 48,K** 48,K** 48])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o150,r11o150,r12o150,lro150]*[K** 48,K** 48,K** 48,K** 48])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o151@int32, r8o151@int32, r12o151@int32, lro151@int32:
      r7o151 = r7 /\ r8o151 = r8 /\ r12o151 = r12 /\ lro151 = lr
   && r7o151 = r7 /\ r8o151 = r8 /\ r12o151 = r12 /\ lro151 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o151,r8o151,r12o151,lro151]*[K** 24,K** 24,K**152,K**152])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o151,r8o151,r12o151,lro151]*[K** 24,K** 24,K**152,K**152])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o152@int32, r8o152@int32, r11o152@int32, lro152@int32:
      r6o152 = r6 /\ r8o152 = r8 /\ r11o152 = r11 /\ lro152 = lr
   && r6o152 = r6 /\ r8o152 = r8 /\ r11o152 = r11 /\ lro152 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o152,r8o152,r11o152,lro152]*[K** 12,K**140,K** 76,K**204])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o152,r8o152,r11o152,lro152]*[K** 12,K**140,K** 76,K**204])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0940; PC = 0x573c *)
mov L0x203f0940 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0950; PC = 0x5740 *)
mov L0x203f0950 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0960; PC = 0x5744 *)
mov L0x203f0960 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0970; PC = 0x5748 *)
mov L0x203f0970 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0980; PC = 0x574c *)
mov L0x203f0980 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0990; PC = 0x5750 *)
mov L0x203f0990 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f09a0; PC = 0x5754 *)
mov L0x203f09a0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0930; PC = 0x5758 *)
mov L0x203f0930 r5;

(**************** CUT 50****************)

cut eqmod [L0x203f0930,L0x203f0940,L0x203f0950,L0x203f0960,
           L0x203f0970,L0x203f0980,L0x203f0990,L0x203f09a0]
          [poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0],
           poly X**4 [c82o0,c86o0,c8ao0,c8eo0,c92o0,c96o0,c9ao0,c9eo0]]
          [[Q, X**4 - K** 12], [Q, X**4 - K**268],
           [Q, X**4 - K**140], [Q, X**4 - K**396],
           [Q, X**4 - K** 76], [Q, X**4 - K**332],
           [Q, X**4 - K**204], [Q, X**4 - K**460]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0930,L0x203f0940,L0x203f0950,L0x203f0960,
     L0x203f0970,L0x203f0980,L0x203f0990,L0x203f09a0] /\
    [L0x203f0930,L0x203f0940,L0x203f0950,L0x203f0960,
     L0x203f0970,L0x203f0980,L0x203f0990,L0x203f09a0] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0934; Value = 0x003cc3b6; PC = 0x575c *)
mov r5 L0x203f0934;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0944; Value = 0xfff2304f; PC = 0x5760 *)
mov r6 L0x203f0944;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0954; Value = 0x000bcbd3; PC = 0x5764 *)
mov r7 L0x203f0954;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0964; Value = 0x001d5d24; PC = 0x5768 *)
mov r8 L0x203f0964;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0974; Value = 0x0071780d; PC = 0x576c *)
mov r4 L0x203f0974;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0984; Value = 0x00518e4b; PC = 0x5770 *)
mov r11 L0x203f0984;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0994; Value = 0xffd54c5d; PC = 0x5774 *)
mov r12 L0x203f0994;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f09a4; Value = 0xff7f53d5; PC = 0x5778 *)
mov lr L0x203f09a4;

ghost c83o0@int32, c87o0@int32, c8bo0@int32, c8fo0@int32,
      c93o0@int32, c97o0@int32, c9bo0@int32, c9fo0@int32:
      c83o0 = r5 /\ c87o0 = r6 /\ c8bo0 = r7 /\ c8fo0 = r8 /\
      c93o0 = r4 /\ c97o0 = r11 /\ c9bo0 = r12 /\ c9fo0 = lr
   && c83o0 = r5 /\ c87o0 = r6 /\ c8bo0 = r7 /\ c8fo0 = r8 /\
      c93o0 = r4 /\ c97o0 = r11 /\ c9bo0 = r12 /\ c9fo0 = lr;
ghost r4o153@int32, r11o153@int32, r12o153@int32, lro153@int32:
      r4o153 = r4 /\ r11o153 = r11 /\ r12o153 = r12 /\ lro153 = lr
   && r4o153 = r4 /\ r11o153 = r11 /\ r12o153 = r12 /\ lro153 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o153,r11o153,r12o153,lro153]*[K** 48,K** 48,K** 48,K** 48])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o153,r11o153,r12o153,lro153]*[K** 48,K** 48,K** 48,K** 48])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o154@int32, r8o154@int32, r12o154@int32, lro154@int32:
      r7o154 = r7 /\ r8o154 = r8 /\ r12o154 = r12 /\ lro154 = lr
   && r7o154 = r7 /\ r8o154 = r8 /\ r12o154 = r12 /\ lro154 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o154,r8o154,r12o154,lro154]*[K** 24,K** 24,K**152,K**152])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o154,r8o154,r12o154,lro154]*[K** 24,K** 24,K**152,K**152])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o155@int32, r8o155@int32, r11o155@int32, lro155@int32:
      r6o155 = r6 /\ r8o155 = r8 /\ r11o155 = r11 /\ lro155 = lr
   && r6o155 = r6 /\ r8o155 = r8 /\ r11o155 = r11 /\ lro155 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o155,r8o155,r11o155,lro155]*[K** 12,K**140,K** 76,K**204])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o155,r8o155,r11o155,lro155]*[K** 12,K**140,K** 76,K**204])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0944; PC = 0x5870 *)
mov L0x203f0944 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0954; PC = 0x5874 *)
mov L0x203f0954 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0964; PC = 0x5878 *)
mov L0x203f0964 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0974; PC = 0x587c *)
mov L0x203f0974 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0984; PC = 0x5880 *)
mov L0x203f0984 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0994; PC = 0x5884 *)
mov L0x203f0994 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f09a4; PC = 0x5888 *)
mov L0x203f09a4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0934; PC = 0x588c *)
mov L0x203f0934 r5;

(**************** CUT 51****************)

cut eqmod [L0x203f0934,L0x203f0944,L0x203f0954,L0x203f0964,
           L0x203f0974,L0x203f0984,L0x203f0994,L0x203f09a4]
          [poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0],
           poly X**4 [c83o0,c87o0,c8bo0,c8fo0,c93o0,c97o0,c9bo0,c9fo0]]
          [[Q, X**4 - K** 12], [Q, X**4 - K**268],
           [Q, X**4 - K**140], [Q, X**4 - K**396],
           [Q, X**4 - K** 76], [Q, X**4 - K**332],
           [Q, X**4 - K**204], [Q, X**4 - K**460]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0934,L0x203f0944,L0x203f0954,L0x203f0964,
     L0x203f0974,L0x203f0984,L0x203f0994,L0x203f09a4] /\
    [L0x203f0934,L0x203f0944,L0x203f0954,L0x203f0964,
     L0x203f0974,L0x203f0984,L0x203f0994,L0x203f09a4] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x8040; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x8040,L0x8044,L0x8048,L0x804c,L0x8050,L0x8054,L0x8058];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09a8; Value = 0x001eb37e; PC = 0x5628 *)
mov r5 L0x203f09a8;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f09b8; Value = 0xffc30baa; PC = 0x562c *)
mov r6 L0x203f09b8;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f09c8; Value = 0xffaddb41; PC = 0x5630 *)
mov r7 L0x203f09c8;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09d8; Value = 0x00618bf3; PC = 0x5634 *)
mov r8 L0x203f09d8;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09e8; Value = 0xffe0d559; PC = 0x5638 *)
mov r4 L0x203f09e8;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f09f8; Value = 0x0051f98d; PC = 0x563c *)
mov r11 L0x203f09f8;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a08; Value = 0x0007a15a; PC = 0x5640 *)
mov r12 L0x203f0a08;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a18; Value = 0x003701c6; PC = 0x5644 *)
mov lr L0x203f0a18;

ghost ca0o0@int32, ca4o0@int32, ca8o0@int32, caco0@int32,
      cb0o0@int32, cb4o0@int32, cb8o0@int32, cbco0@int32:
      ca0o0 = r5 /\ ca4o0 = r6 /\ ca8o0 = r7 /\ caco0 = r8 /\
      cb0o0 = r4 /\ cb4o0 = r11 /\ cb8o0 = r12 /\ cbco0 = lr
   && ca0o0 = r5 /\ ca4o0 = r6 /\ ca8o0 = r7 /\ caco0 = r8 /\
      cb0o0 = r4 /\ cb4o0 = r11 /\ cb8o0 = r12 /\ cbco0 = lr;
ghost r4o156@int32, r11o156@int32, r12o156@int32, lro156@int32:
      r4o156 = r4 /\ r11o156 = r11 /\ r12o156 = r12 /\ lro156 = lr
   && r4o156 = r4 /\ r11o156 = r11 /\ r12o156 = r12 /\ lro156 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o156,r11o156,r12o156,lro156]*[K**176,K**176,K**176,K**176])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o156,r11o156,r12o156,lro156]*[K**176,K**176,K**176,K**176])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o157@int32, r8o157@int32, r12o157@int32, lro157@int32:
      r7o157 = r7 /\ r8o157 = r8 /\ r12o157 = r12 /\ lro157 = lr
   && r7o157 = r7 /\ r8o157 = r8 /\ r12o157 = r12 /\ lro157 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o157,r8o157,r12o157,lro157]*[K** 88,K** 88,K**216,K**216])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o157,r8o157,r12o157,lro157]*[K** 88,K** 88,K**216,K**216])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o158@int32, r8o158@int32, r11o158@int32, lro158@int32:
      r6o158 = r6 /\ r8o158 = r8 /\ r11o158 = r11 /\ lro158 = lr
   && r6o158 = r6 /\ r8o158 = r8 /\ r11o158 = r11 /\ lro158 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o158,r8o158,r11o158,lro158]*[K** 44,K**172,K**108,K**236])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o158,r8o158,r11o158,lro158]*[K** 44,K**172,K**108,K**236])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f09b8; PC = 0x573c *)
mov L0x203f09b8 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f09c8; PC = 0x5740 *)
mov L0x203f09c8 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09d8; PC = 0x5744 *)
mov L0x203f09d8 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09e8; PC = 0x5748 *)
mov L0x203f09e8 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f09f8; PC = 0x574c *)
mov L0x203f09f8 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a08; PC = 0x5750 *)
mov L0x203f0a08 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a18; PC = 0x5754 *)
mov L0x203f0a18 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f09a8; PC = 0x5758 *)
mov L0x203f09a8 r5;

(**************** CUT 52****************)

cut eqmod [L0x203f09a8,L0x203f09b8,L0x203f09c8,L0x203f09d8,
           L0x203f09e8,L0x203f09f8,L0x203f0a08,L0x203f0a18]
          [poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0],
           poly X**4 [ca0o0,ca4o0,ca8o0,caco0,cb0o0,cb4o0,cb8o0,cbco0]]
          [[Q, X**4 - K** 44], [Q, X**4 - K**300],
           [Q, X**4 - K**172], [Q, X**4 - K**428],
           [Q, X**4 - K**108], [Q, X**4 - K**364],
           [Q, X**4 - K**236], [Q, X**4 - K**492]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f09a8,L0x203f09b8,L0x203f09c8,L0x203f09d8,
     L0x203f09e8,L0x203f09f8,L0x203f0a08,L0x203f0a18] /\
    [L0x203f09a8,L0x203f09b8,L0x203f09c8,L0x203f09d8,
     L0x203f09e8,L0x203f09f8,L0x203f0a08,L0x203f0a18] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f09ac; Value = 0x001f688d; PC = 0x575c *)
mov r5 L0x203f09ac;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f09bc; Value = 0xffe703bb; PC = 0x5760 *)
mov r6 L0x203f09bc;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f09cc; Value = 0xffcabefe; PC = 0x5764 *)
mov r7 L0x203f09cc;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09dc; Value = 0xffff13fa; PC = 0x5768 *)
mov r8 L0x203f09dc;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09ec; Value = 0xfffad372; PC = 0x576c *)
mov r4 L0x203f09ec;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f09fc; Value = 0x004a898f; PC = 0x5770 *)
mov r11 L0x203f09fc;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a0c; Value = 0x00001e0f; PC = 0x5774 *)
mov r12 L0x203f0a0c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a1c; Value = 0x00a6ddfa; PC = 0x5778 *)
mov lr L0x203f0a1c;

ghost ca1o0@int32, ca5o0@int32, ca9o0@int32, cado0@int32,
      cb1o0@int32, cb5o0@int32, cb9o0@int32, cbdo0@int32:
      ca1o0 = r5 /\ ca5o0 = r6 /\ ca9o0 = r7 /\ cado0 = r8 /\
      cb1o0 = r4 /\ cb5o0 = r11 /\ cb9o0 = r12 /\ cbdo0 = lr
   && ca1o0 = r5 /\ ca5o0 = r6 /\ ca9o0 = r7 /\ cado0 = r8 /\
      cb1o0 = r4 /\ cb5o0 = r11 /\ cb9o0 = r12 /\ cbdo0 = lr;
ghost r4o159@int32, r11o159@int32, r12o159@int32, lro159@int32:
      r4o159 = r4 /\ r11o159 = r11 /\ r12o159 = r12 /\ lro159 = lr
   && r4o159 = r4 /\ r11o159 = r11 /\ r12o159 = r12 /\ lro159 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o159,r11o159,r12o159,lro159]*[K**176,K**176,K**176,K**176])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o159,r11o159,r12o159,lro159]*[K**176,K**176,K**176,K**176])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o160@int32, r8o160@int32, r12o160@int32, lro160@int32:
      r7o160 = r7 /\ r8o160 = r8 /\ r12o160 = r12 /\ lro160 = lr
   && r7o160 = r7 /\ r8o160 = r8 /\ r12o160 = r12 /\ lro160 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o160,r8o160,r12o160,lro160]*[K** 88,K** 88,K**216,K**216])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o160,r8o160,r12o160,lro160]*[K** 88,K** 88,K**216,K**216])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o161@int32, r8o161@int32, r11o161@int32, lro161@int32:
      r6o161 = r6 /\ r8o161 = r8 /\ r11o161 = r11 /\ lro161 = lr
   && r6o161 = r6 /\ r8o161 = r8 /\ r11o161 = r11 /\ lro161 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o161,r8o161,r11o161,lro161]*[K** 44,K**172,K**108,K**236])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o161,r8o161,r11o161,lro161]*[K** 44,K**172,K**108,K**236])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f09bc; PC = 0x5870 *)
mov L0x203f09bc r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f09cc; PC = 0x5874 *)
mov L0x203f09cc r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09dc; PC = 0x5878 *)
mov L0x203f09dc r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09ec; PC = 0x587c *)
mov L0x203f09ec r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f09fc; PC = 0x5880 *)
mov L0x203f09fc r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a0c; PC = 0x5884 *)
mov L0x203f0a0c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a1c; PC = 0x5888 *)
mov L0x203f0a1c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f09ac; PC = 0x588c *)
mov L0x203f09ac r5;

(**************** CUT 53****************)

cut eqmod [L0x203f09ac,L0x203f09bc,L0x203f09cc,L0x203f09dc,
           L0x203f09ec,L0x203f09fc,L0x203f0a0c,L0x203f0a1c]
          [poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0],
           poly X**4 [ca1o0,ca5o0,ca9o0,cado0,cb1o0,cb5o0,cb9o0,cbdo0]]
          [[Q, X**4 - K** 44], [Q, X**4 - K**300],
           [Q, X**4 - K**172], [Q, X**4 - K**428],
           [Q, X**4 - K**108], [Q, X**4 - K**364],
           [Q, X**4 - K**236], [Q, X**4 - K**492]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f09ac,L0x203f09bc,L0x203f09cc,L0x203f09dc,
     L0x203f09ec,L0x203f09fc,L0x203f0a0c,L0x203f0a1c] /\
    [L0x203f09ac,L0x203f09bc,L0x203f09cc,L0x203f09dc,
     L0x203f09ec,L0x203f09fc,L0x203f0a0c,L0x203f0a1c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09b0; Value = 0xffd823c1; PC = 0x5628 *)
mov r5 L0x203f09b0;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f09c0; Value = 0x00224d02; PC = 0x562c *)
mov r6 L0x203f09c0;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f09d0; Value = 0xffc39181; PC = 0x5630 *)
mov r7 L0x203f09d0;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09e0; Value = 0x00218795; PC = 0x5634 *)
mov r8 L0x203f09e0;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09f0; Value = 0xffecc1eb; PC = 0x5638 *)
mov r4 L0x203f09f0;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a00; Value = 0x0018fe38; PC = 0x563c *)
mov r11 L0x203f0a00;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a10; Value = 0xff82e767; PC = 0x5640 *)
mov r12 L0x203f0a10;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a20; Value = 0xffd46c37; PC = 0x5644 *)
mov lr L0x203f0a20;

ghost ca2o0@int32, ca6o0@int32, caao0@int32, caeo0@int32,
      cb2o0@int32, cb6o0@int32, cbao0@int32, cbeo0@int32:
      ca2o0 = r5 /\ ca6o0 = r6 /\ caao0 = r7 /\ caeo0 = r8 /\
      cb2o0 = r4 /\ cb6o0 = r11 /\ cbao0 = r12 /\ cbeo0 = lr
   && ca2o0 = r5 /\ ca6o0 = r6 /\ caao0 = r7 /\ caeo0 = r8 /\
      cb2o0 = r4 /\ cb6o0 = r11 /\ cbao0 = r12 /\ cbeo0 = lr;
ghost r4o162@int32, r11o162@int32, r12o162@int32, lro162@int32:
      r4o162 = r4 /\ r11o162 = r11 /\ r12o162 = r12 /\ lro162 = lr
   && r4o162 = r4 /\ r11o162 = r11 /\ r12o162 = r12 /\ lro162 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o162,r11o162,r12o162,lro162]*[K**176,K**176,K**176,K**176])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o162,r11o162,r12o162,lro162]*[K**176,K**176,K**176,K**176])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o163@int32, r8o163@int32, r12o163@int32, lro163@int32:
      r7o163 = r7 /\ r8o163 = r8 /\ r12o163 = r12 /\ lro163 = lr
   && r7o163 = r7 /\ r8o163 = r8 /\ r12o163 = r12 /\ lro163 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o163,r8o163,r12o163,lro163]*[K** 88,K** 88,K**216,K**216])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o163,r8o163,r12o163,lro163]*[K** 88,K** 88,K**216,K**216])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o164@int32, r8o164@int32, r11o164@int32, lro164@int32:
      r6o164 = r6 /\ r8o164 = r8 /\ r11o164 = r11 /\ lro164 = lr
   && r6o164 = r6 /\ r8o164 = r8 /\ r11o164 = r11 /\ lro164 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o164,r8o164,r11o164,lro164]*[K** 44,K**172,K**108,K**236])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o164,r8o164,r11o164,lro164]*[K** 44,K**172,K**108,K**236])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f09c0; PC = 0x573c *)
mov L0x203f09c0 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f09d0; PC = 0x5740 *)
mov L0x203f09d0 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09e0; PC = 0x5744 *)
mov L0x203f09e0 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09f0; PC = 0x5748 *)
mov L0x203f09f0 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a00; PC = 0x574c *)
mov L0x203f0a00 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a10; PC = 0x5750 *)
mov L0x203f0a10 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a20; PC = 0x5754 *)
mov L0x203f0a20 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f09b0; PC = 0x5758 *)
mov L0x203f09b0 r5;

(**************** CUT 54****************)

cut eqmod [L0x203f09b0,L0x203f09c0,L0x203f09d0,L0x203f09e0,
           L0x203f09f0,L0x203f0a00,L0x203f0a10,L0x203f0a20]
          [poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0],
           poly X**4 [ca2o0,ca6o0,caao0,caeo0,cb2o0,cb6o0,cbao0,cbeo0]]
          [[Q, X**4 - K** 44], [Q, X**4 - K**300],
           [Q, X**4 - K**172], [Q, X**4 - K**428],
           [Q, X**4 - K**108], [Q, X**4 - K**364],
           [Q, X**4 - K**236], [Q, X**4 - K**492]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f09b0,L0x203f09c0,L0x203f09d0,L0x203f09e0,
     L0x203f09f0,L0x203f0a00,L0x203f0a10,L0x203f0a20] /\
    [L0x203f09b0,L0x203f09c0,L0x203f09d0,L0x203f09e0,
     L0x203f09f0,L0x203f0a00,L0x203f0a10,L0x203f0a20] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f09b4; Value = 0x0042e112; PC = 0x575c *)
mov r5 L0x203f09b4;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f09c4; Value = 0xffe58885; PC = 0x5760 *)
mov r6 L0x203f09c4;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f09d4; Value = 0xffc8b553; PC = 0x5764 *)
mov r7 L0x203f09d4;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09e4; Value = 0x00359c76; PC = 0x5768 *)
mov r8 L0x203f09e4;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09f4; Value = 0x0032f86d; PC = 0x576c *)
mov r4 L0x203f09f4;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a04; Value = 0xffda5089; PC = 0x5770 *)
mov r11 L0x203f0a04;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a14; Value = 0x00445e0b; PC = 0x5774 *)
mov r12 L0x203f0a14;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a24; Value = 0xffdf5371; PC = 0x5778 *)
mov lr L0x203f0a24;

ghost ca3o0@int32, ca7o0@int32, cabo0@int32, cafo0@int32,
      cb3o0@int32, cb7o0@int32, cbbo0@int32, cbfo0@int32:
      ca3o0 = r5 /\ ca7o0 = r6 /\ cabo0 = r7 /\ cafo0 = r8 /\
      cb3o0 = r4 /\ cb7o0 = r11 /\ cbbo0 = r12 /\ cbfo0 = lr
   && ca3o0 = r5 /\ ca7o0 = r6 /\ cabo0 = r7 /\ cafo0 = r8 /\
      cb3o0 = r4 /\ cb7o0 = r11 /\ cbbo0 = r12 /\ cbfo0 = lr;
ghost r4o165@int32, r11o165@int32, r12o165@int32, lro165@int32:
      r4o165 = r4 /\ r11o165 = r11 /\ r12o165 = r12 /\ lro165 = lr
   && r4o165 = r4 /\ r11o165 = r11 /\ r12o165 = r12 /\ lro165 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o165,r11o165,r12o165,lro165]*[K**176,K**176,K**176,K**176])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o165,r11o165,r12o165,lro165]*[K**176,K**176,K**176,K**176])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o166@int32, r8o166@int32, r12o166@int32, lro166@int32:
      r7o166 = r7 /\ r8o166 = r8 /\ r12o166 = r12 /\ lro166 = lr
   && r7o166 = r7 /\ r8o166 = r8 /\ r12o166 = r12 /\ lro166 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o166,r8o166,r12o166,lro166]*[K** 88,K** 88,K**216,K**216])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o166,r8o166,r12o166,lro166]*[K** 88,K** 88,K**216,K**216])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o167@int32, r8o167@int32, r11o167@int32, lro167@int32:
      r6o167 = r6 /\ r8o167 = r8 /\ r11o167 = r11 /\ lro167 = lr
   && r6o167 = r6 /\ r8o167 = r8 /\ r11o167 = r11 /\ lro167 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o167,r8o167,r11o167,lro167]*[K** 44,K**172,K**108,K**236])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o167,r8o167,r11o167,lro167]*[K** 44,K**172,K**108,K**236])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f09c4; PC = 0x5870 *)
mov L0x203f09c4 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f09d4; PC = 0x5874 *)
mov L0x203f09d4 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f09e4; PC = 0x5878 *)
mov L0x203f09e4 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f09f4; PC = 0x587c *)
mov L0x203f09f4 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a04; PC = 0x5880 *)
mov L0x203f0a04 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a14; PC = 0x5884 *)
mov L0x203f0a14 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a24; PC = 0x5888 *)
mov L0x203f0a24 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f09b4; PC = 0x588c *)
mov L0x203f09b4 r5;

(**************** CUT 55****************)

cut eqmod [L0x203f09b4,L0x203f09c4,L0x203f09d4,L0x203f09e4,
           L0x203f09f4,L0x203f0a04,L0x203f0a14,L0x203f0a24]
          [poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0],
           poly X**4 [ca3o0,ca7o0,cabo0,cafo0,cb3o0,cb7o0,cbbo0,cbfo0]]
          [[Q, X**4 - K** 44], [Q, X**4 - K**300],
           [Q, X**4 - K**172], [Q, X**4 - K**428],
           [Q, X**4 - K**108], [Q, X**4 - K**364],
           [Q, X**4 - K**236], [Q, X**4 - K**492]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f09b4,L0x203f09c4,L0x203f09d4,L0x203f09e4,
     L0x203f09f4,L0x203f0a04,L0x203f0a14,L0x203f0a24] /\
    [L0x203f09b4,L0x203f09c4,L0x203f09d4,L0x203f09e4,
     L0x203f09f4,L0x203f0a04,L0x203f0a14,L0x203f0a24] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x805c; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x805c,L0x8060,L0x8064,L0x8068,L0x806c,L0x8070,L0x8074];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a28; Value = 0x003d13ba; PC = 0x5628 *)
mov r5 L0x203f0a28;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0a38; Value = 0x00271926; PC = 0x562c *)
mov r6 L0x203f0a38;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0a48; Value = 0x00278aea; PC = 0x5630 *)
mov r7 L0x203f0a48;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a58; Value = 0xffe8c39d; PC = 0x5634 *)
mov r8 L0x203f0a58;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a68; Value = 0xfff384b5; PC = 0x5638 *)
mov r4 L0x203f0a68;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a78; Value = 0x0064813a; PC = 0x563c *)
mov r11 L0x203f0a78;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a88; Value = 0x005e3473; PC = 0x5640 *)
mov r12 L0x203f0a88;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a98; Value = 0x006811d5; PC = 0x5644 *)
mov lr L0x203f0a98;

ghost cc0o0@int32, cc4o0@int32, cc8o0@int32, ccco0@int32,
      cd0o0@int32, cd4o0@int32, cd8o0@int32, cdco0@int32:
      cc0o0 = r5 /\ cc4o0 = r6 /\ cc8o0 = r7 /\ ccco0 = r8 /\
      cd0o0 = r4 /\ cd4o0 = r11 /\ cd8o0 = r12 /\ cdco0 = lr
   && cc0o0 = r5 /\ cc4o0 = r6 /\ cc8o0 = r7 /\ ccco0 = r8 /\
      cd0o0 = r4 /\ cd4o0 = r11 /\ cd8o0 = r12 /\ cdco0 = lr;
ghost r4o168@int32, r11o168@int32, r12o168@int32, lro168@int32:
      r4o168 = r4 /\ r11o168 = r11 /\ r12o168 = r12 /\ lro168 = lr
   && r4o168 = r4 /\ r11o168 = r11 /\ r12o168 = r12 /\ lro168 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o168,r11o168,r12o168,lro168]*[K**112,K**112,K**112,K**112])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o168,r11o168,r12o168,lro168]*[K**112,K**112,K**112,K**112])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o169@int32, r8o169@int32, r12o169@int32, lro169@int32:
      r7o169 = r7 /\ r8o169 = r8 /\ r12o169 = r12 /\ lro169 = lr
   && r7o169 = r7 /\ r8o169 = r8 /\ r12o169 = r12 /\ lro169 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o169,r8o169,r12o169,lro169]*[K** 56,K** 56,K**184,K**184])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o169,r8o169,r12o169,lro169]*[K** 56,K** 56,K**184,K**184])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o170@int32, r8o170@int32, r11o170@int32, lro170@int32:
      r6o170 = r6 /\ r8o170 = r8 /\ r11o170 = r11 /\ lro170 = lr
   && r6o170 = r6 /\ r8o170 = r8 /\ r11o170 = r11 /\ lro170 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o170,r8o170,r11o170,lro170]*[K** 28,K**156,K** 92,K**220])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o170,r8o170,r11o170,lro170]*[K** 28,K**156,K** 92,K**220])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0a38; PC = 0x573c *)
mov L0x203f0a38 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0a48; PC = 0x5740 *)
mov L0x203f0a48 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a58; PC = 0x5744 *)
mov L0x203f0a58 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a68; PC = 0x5748 *)
mov L0x203f0a68 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a78; PC = 0x574c *)
mov L0x203f0a78 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a88; PC = 0x5750 *)
mov L0x203f0a88 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a98; PC = 0x5754 *)
mov L0x203f0a98 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0a28; PC = 0x5758 *)
mov L0x203f0a28 r5;

(**************** CUT 56****************)

cut eqmod [L0x203f0a28,L0x203f0a38,L0x203f0a48,L0x203f0a58,
           L0x203f0a68,L0x203f0a78,L0x203f0a88,L0x203f0a98]
          [poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0],
           poly X**4 [cc0o0,cc4o0,cc8o0,ccco0,cd0o0,cd4o0,cd8o0,cdco0]]
          [[Q, X**4 - K** 28], [Q, X**4 - K**284],
           [Q, X**4 - K**156], [Q, X**4 - K**412],
           [Q, X**4 - K** 92], [Q, X**4 - K**348],
           [Q, X**4 - K**220], [Q, X**4 - K**476]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0a28,L0x203f0a38,L0x203f0a48,L0x203f0a58,
     L0x203f0a68,L0x203f0a78,L0x203f0a88,L0x203f0a98] /\
    [L0x203f0a28,L0x203f0a38,L0x203f0a48,L0x203f0a58,
     L0x203f0a68,L0x203f0a78,L0x203f0a88,L0x203f0a98] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a2c; Value = 0xff9a8cb7; PC = 0x575c *)
mov r5 L0x203f0a2c;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0a3c; Value = 0xffb4a20e; PC = 0x5760 *)
mov r6 L0x203f0a3c;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0a4c; Value = 0x0021736f; PC = 0x5764 *)
mov r7 L0x203f0a4c;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a5c; Value = 0x000922f3; PC = 0x5768 *)
mov r8 L0x203f0a5c;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a6c; Value = 0xfff3efb9; PC = 0x576c *)
mov r4 L0x203f0a6c;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a7c; Value = 0xfff7f6fc; PC = 0x5770 *)
mov r11 L0x203f0a7c;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a8c; Value = 0x002812e7; PC = 0x5774 *)
mov r12 L0x203f0a8c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a9c; Value = 0xffea484f; PC = 0x5778 *)
mov lr L0x203f0a9c;

ghost cc1o0@int32, cc5o0@int32, cc9o0@int32, ccdo0@int32,
      cd1o0@int32, cd5o0@int32, cd9o0@int32, cddo0@int32:
      cc1o0 = r5 /\ cc5o0 = r6 /\ cc9o0 = r7 /\ ccdo0 = r8 /\
      cd1o0 = r4 /\ cd5o0 = r11 /\ cd9o0 = r12 /\ cddo0 = lr
   && cc1o0 = r5 /\ cc5o0 = r6 /\ cc9o0 = r7 /\ ccdo0 = r8 /\
      cd1o0 = r4 /\ cd5o0 = r11 /\ cd9o0 = r12 /\ cddo0 = lr;
ghost r4o171@int32, r11o171@int32, r12o171@int32, lro171@int32:
      r4o171 = r4 /\ r11o171 = r11 /\ r12o171 = r12 /\ lro171 = lr
   && r4o171 = r4 /\ r11o171 = r11 /\ r12o171 = r12 /\ lro171 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o171,r11o171,r12o171,lro171]*[K**112,K**112,K**112,K**112])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o171,r11o171,r12o171,lro171]*[K**112,K**112,K**112,K**112])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o172@int32, r8o172@int32, r12o172@int32, lro172@int32:
      r7o172 = r7 /\ r8o172 = r8 /\ r12o172 = r12 /\ lro172 = lr
   && r7o172 = r7 /\ r8o172 = r8 /\ r12o172 = r12 /\ lro172 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o172,r8o172,r12o172,lro172]*[K** 56,K** 56,K**184,K**184])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o172,r8o172,r12o172,lro172]*[K** 56,K** 56,K**184,K**184])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o173@int32, r8o173@int32, r11o173@int32, lro173@int32:
      r6o173 = r6 /\ r8o173 = r8 /\ r11o173 = r11 /\ lro173 = lr
   && r6o173 = r6 /\ r8o173 = r8 /\ r11o173 = r11 /\ lro173 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o173,r8o173,r11o173,lro173]*[K** 28,K**156,K** 92,K**220])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o173,r8o173,r11o173,lro173]*[K** 28,K**156,K** 92,K**220])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0a3c; PC = 0x5870 *)
mov L0x203f0a3c r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0a4c; PC = 0x5874 *)
mov L0x203f0a4c r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a5c; PC = 0x5878 *)
mov L0x203f0a5c r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a6c; PC = 0x587c *)
mov L0x203f0a6c r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a7c; PC = 0x5880 *)
mov L0x203f0a7c r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a8c; PC = 0x5884 *)
mov L0x203f0a8c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0a9c; PC = 0x5888 *)
mov L0x203f0a9c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0a2c; PC = 0x588c *)
mov L0x203f0a2c r5;

(**************** CUT 57****************)

cut eqmod [L0x203f0a2c,L0x203f0a3c,L0x203f0a4c,L0x203f0a5c,
           L0x203f0a6c,L0x203f0a7c,L0x203f0a8c,L0x203f0a9c]
          [poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0],
           poly X**4 [cc1o0,cc5o0,cc9o0,ccdo0,cd1o0,cd5o0,cd9o0,cddo0]]
          [[Q, X**4 - K** 28], [Q, X**4 - K**284],
           [Q, X**4 - K**156], [Q, X**4 - K**412],
           [Q, X**4 - K** 92], [Q, X**4 - K**348],
           [Q, X**4 - K**220], [Q, X**4 - K**476]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0a2c,L0x203f0a3c,L0x203f0a4c,L0x203f0a5c,
     L0x203f0a6c,L0x203f0a7c,L0x203f0a8c,L0x203f0a9c] /\
    [L0x203f0a2c,L0x203f0a3c,L0x203f0a4c,L0x203f0a5c,
     L0x203f0a6c,L0x203f0a7c,L0x203f0a8c,L0x203f0a9c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a30; Value = 0x0023e893; PC = 0x5628 *)
mov r5 L0x203f0a30;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0a40; Value = 0xff99cf29; PC = 0x562c *)
mov r6 L0x203f0a40;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0a50; Value = 0xfff2122a; PC = 0x5630 *)
mov r7 L0x203f0a50;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a60; Value = 0x00541b40; PC = 0x5634 *)
mov r8 L0x203f0a60;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a70; Value = 0x002d39fa; PC = 0x5638 *)
mov r4 L0x203f0a70;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a80; Value = 0xfff1a93c; PC = 0x563c *)
mov r11 L0x203f0a80;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a90; Value = 0x0063dbd0; PC = 0x5640 *)
mov r12 L0x203f0a90;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0aa0; Value = 0x0008dfd8; PC = 0x5644 *)
mov lr L0x203f0aa0;

ghost cc2o0@int32, cc6o0@int32, ccao0@int32, cceo0@int32,
      cd2o0@int32, cd6o0@int32, cdao0@int32, cdeo0@int32:
      cc2o0 = r5 /\ cc6o0 = r6 /\ ccao0 = r7 /\ cceo0 = r8 /\
      cd2o0 = r4 /\ cd6o0 = r11 /\ cdao0 = r12 /\ cdeo0 = lr
   && cc2o0 = r5 /\ cc6o0 = r6 /\ ccao0 = r7 /\ cceo0 = r8 /\
      cd2o0 = r4 /\ cd6o0 = r11 /\ cdao0 = r12 /\ cdeo0 = lr;
ghost r4o174@int32, r11o174@int32, r12o174@int32, lro174@int32:
      r4o174 = r4 /\ r11o174 = r11 /\ r12o174 = r12 /\ lro174 = lr
   && r4o174 = r4 /\ r11o174 = r11 /\ r12o174 = r12 /\ lro174 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o174,r11o174,r12o174,lro174]*[K**112,K**112,K**112,K**112])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o174,r11o174,r12o174,lro174]*[K**112,K**112,K**112,K**112])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o175@int32, r8o175@int32, r12o175@int32, lro175@int32:
      r7o175 = r7 /\ r8o175 = r8 /\ r12o175 = r12 /\ lro175 = lr
   && r7o175 = r7 /\ r8o175 = r8 /\ r12o175 = r12 /\ lro175 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o175,r8o175,r12o175,lro175]*[K** 56,K** 56,K**184,K**184])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o175,r8o175,r12o175,lro175]*[K** 56,K** 56,K**184,K**184])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o176@int32, r8o176@int32, r11o176@int32, lro176@int32:
      r6o176 = r6 /\ r8o176 = r8 /\ r11o176 = r11 /\ lro176 = lr
   && r6o176 = r6 /\ r8o176 = r8 /\ r11o176 = r11 /\ lro176 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o176,r8o176,r11o176,lro176]*[K** 28,K**156,K** 92,K**220])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o176,r8o176,r11o176,lro176]*[K** 28,K**156,K** 92,K**220])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0a40; PC = 0x573c *)
mov L0x203f0a40 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0a50; PC = 0x5740 *)
mov L0x203f0a50 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a60; PC = 0x5744 *)
mov L0x203f0a60 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a70; PC = 0x5748 *)
mov L0x203f0a70 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a80; PC = 0x574c *)
mov L0x203f0a80 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a90; PC = 0x5750 *)
mov L0x203f0a90 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0aa0; PC = 0x5754 *)
mov L0x203f0aa0 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0a30; PC = 0x5758 *)
mov L0x203f0a30 r5;

(**************** CUT 58****************)

cut eqmod [L0x203f0a30,L0x203f0a40,L0x203f0a50,L0x203f0a60,
           L0x203f0a70,L0x203f0a80,L0x203f0a90,L0x203f0aa0]
          [poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0],
           poly X**4 [cc2o0,cc6o0,ccao0,cceo0,cd2o0,cd6o0,cdao0,cdeo0]]
          [[Q, X**4 - K** 28], [Q, X**4 - K**284],
           [Q, X**4 - K**156], [Q, X**4 - K**412],
           [Q, X**4 - K** 92], [Q, X**4 - K**348],
           [Q, X**4 - K**220], [Q, X**4 - K**476]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0a30,L0x203f0a40,L0x203f0a50,L0x203f0a60,
     L0x203f0a70,L0x203f0a80,L0x203f0a90,L0x203f0aa0] /\
    [L0x203f0a30,L0x203f0a40,L0x203f0a50,L0x203f0a60,
     L0x203f0a70,L0x203f0a80,L0x203f0a90,L0x203f0aa0] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a34; Value = 0x000c90e0; PC = 0x575c *)
mov r5 L0x203f0a34;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0a44; Value = 0x002a738a; PC = 0x5760 *)
mov r6 L0x203f0a44;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0a54; Value = 0x008e9f04; PC = 0x5764 *)
mov r7 L0x203f0a54;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a64; Value = 0x0038d8ae; PC = 0x5768 *)
mov r8 L0x203f0a64;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a74; Value = 0xffecf82d; PC = 0x576c *)
mov r4 L0x203f0a74;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a84; Value = 0xffc8718d; PC = 0x5770 *)
mov r11 L0x203f0a84;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a94; Value = 0x002f49fd; PC = 0x5774 *)
mov r12 L0x203f0a94;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0aa4; Value = 0xffb2cec9; PC = 0x5778 *)
mov lr L0x203f0aa4;

ghost cc3o0@int32, cc7o0@int32, ccbo0@int32, ccfo0@int32,
      cd3o0@int32, cd7o0@int32, cdbo0@int32, cdfo0@int32:
      cc3o0 = r5 /\ cc7o0 = r6 /\ ccbo0 = r7 /\ ccfo0 = r8 /\
      cd3o0 = r4 /\ cd7o0 = r11 /\ cdbo0 = r12 /\ cdfo0 = lr
   && cc3o0 = r5 /\ cc7o0 = r6 /\ ccbo0 = r7 /\ ccfo0 = r8 /\
      cd3o0 = r4 /\ cd7o0 = r11 /\ cdbo0 = r12 /\ cdfo0 = lr;
ghost r4o177@int32, r11o177@int32, r12o177@int32, lro177@int32:
      r4o177 = r4 /\ r11o177 = r11 /\ r12o177 = r12 /\ lro177 = lr
   && r4o177 = r4 /\ r11o177 = r11 /\ r12o177 = r12 /\ lro177 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o177,r11o177,r12o177,lro177]*[K**112,K**112,K**112,K**112])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o177,r11o177,r12o177,lro177]*[K**112,K**112,K**112,K**112])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o178@int32, r8o178@int32, r12o178@int32, lro178@int32:
      r7o178 = r7 /\ r8o178 = r8 /\ r12o178 = r12 /\ lro178 = lr
   && r7o178 = r7 /\ r8o178 = r8 /\ r12o178 = r12 /\ lro178 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o178,r8o178,r12o178,lro178]*[K** 56,K** 56,K**184,K**184])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o178,r8o178,r12o178,lro178]*[K** 56,K** 56,K**184,K**184])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o179@int32, r8o179@int32, r11o179@int32, lro179@int32:
      r6o179 = r6 /\ r8o179 = r8 /\ r11o179 = r11 /\ lro179 = lr
   && r6o179 = r6 /\ r8o179 = r8 /\ r11o179 = r11 /\ lro179 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o179,r8o179,r11o179,lro179]*[K** 28,K**156,K** 92,K**220])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o179,r8o179,r11o179,lro179]*[K** 28,K**156,K** 92,K**220])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0a44; PC = 0x5870 *)
mov L0x203f0a44 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0a54; PC = 0x5874 *)
mov L0x203f0a54 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0a64; PC = 0x5878 *)
mov L0x203f0a64 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0a74; PC = 0x587c *)
mov L0x203f0a74 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0a84; PC = 0x5880 *)
mov L0x203f0a84 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0a94; PC = 0x5884 *)
mov L0x203f0a94 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0aa4; PC = 0x5888 *)
mov L0x203f0aa4 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0a34; PC = 0x588c *)
mov L0x203f0a34 r5;

(**************** CUT 59****************)

cut eqmod [L0x203f0a34,L0x203f0a44,L0x203f0a54,L0x203f0a64,
           L0x203f0a74,L0x203f0a84,L0x203f0a94,L0x203f0aa4]
          [poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0],
           poly X**4 [cc3o0,cc7o0,ccbo0,ccfo0,cd3o0,cd7o0,cdbo0,cdfo0]]
          [[Q, X**4 - K** 28], [Q, X**4 - K**284],
           [Q, X**4 - K**156], [Q, X**4 - K**412],
           [Q, X**4 - K** 92], [Q, X**4 - K**348],
           [Q, X**4 - K**220], [Q, X**4 - K**476]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0a34,L0x203f0a44,L0x203f0a54,L0x203f0a64,
     L0x203f0a74,L0x203f0a84,L0x203f0a94,L0x203f0aa4] /\
    [L0x203f0a34,L0x203f0a44,L0x203f0a54,L0x203f0a64,
     L0x203f0a74,L0x203f0a84,L0x203f0a94,L0x203f0aa4] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* add.w	r10, r0, #16                              #! PC = 0x5614 *)
adds dc r10 r0 16@uint32;
(* vmov	s10, r10                                   #! PC = 0x5618 *)
mov s10 r10;
(* vmov	r1, s0                                     #! PC = 0x561c *)
mov r1 s0;
(* vldmia	r1!, {s2-s8}                             #! EA = L0x8078; PC = 0x5620 *)
mov [s2,s3,s4,s5,s6,s7,s8]
    [L0x8078,L0x807c,L0x8080,L0x8084,L0x8088,L0x808c,L0x8090];
(* vmov	s0, r1                                     #! PC = 0x5624 *)
mov s0 r1;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0aa8; Value = 0x000d4ff0; PC = 0x5628 *)
mov r5 L0x203f0aa8;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0ab8; Value = 0xffaab8e0; PC = 0x562c *)
mov r6 L0x203f0ab8;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0ac8; Value = 0xffde9be0; PC = 0x5630 *)
mov r7 L0x203f0ac8;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0ad8; Value = 0xffbe1c03; PC = 0x5634 *)
mov r8 L0x203f0ad8;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0ae8; Value = 0x00657bb3; PC = 0x5638 *)
mov r4 L0x203f0ae8;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0af8; Value = 0xffe66ee4; PC = 0x563c *)
mov r11 L0x203f0af8;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b08; Value = 0x004dc58d; PC = 0x5640 *)
mov r12 L0x203f0b08;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b18; Value = 0xfff98477; PC = 0x5644 *)
mov lr L0x203f0b18;

ghost ce0o0@int32, ce4o0@int32, ce8o0@int32, ceco0@int32,
      cf0o0@int32, cf4o0@int32, cf8o0@int32, cfco0@int32:
      ce0o0 = r5 /\ ce4o0 = r6 /\ ce8o0 = r7 /\ ceco0 = r8 /\
      cf0o0 = r4 /\ cf4o0 = r11 /\ cf8o0 = r12 /\ cfco0 = lr
   && ce0o0 = r5 /\ ce4o0 = r6 /\ ce8o0 = r7 /\ ceco0 = r8 /\
      cf0o0 = r4 /\ cf4o0 = r11 /\ cf8o0 = r12 /\ cfco0 = lr;
ghost r4o180@int32, r11o180@int32, r12o180@int32, lro180@int32:
      r4o180 = r4 /\ r11o180 = r11 /\ r12o180 = r12 /\ lro180 = lr
   && r4o180 = r4 /\ r11o180 = r11 /\ r12o180 = r12 /\ lro180 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o180,r11o180,r12o180,lro180]*[K**240,K**240,K**240,K**240])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o180,r11o180,r12o180,lro180]*[K**240,K**240,K**240,K**240])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o181@int32, r8o181@int32, r12o181@int32, lro181@int32:
      r7o181 = r7 /\ r8o181 = r8 /\ r12o181 = r12 /\ lro181 = lr
   && r7o181 = r7 /\ r8o181 = r8 /\ r12o181 = r12 /\ lro181 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o181,r8o181,r12o181,lro181]*[K**120,K**120,K**248,K**248])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o181,r8o181,r12o181,lro181]*[K**120,K**120,K**248,K**248])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o182@int32, r8o182@int32, r11o182@int32, lro182@int32:
      r6o182 = r6 /\ r8o182 = r8 /\ r11o182 = r11 /\ lro182 = lr
   && r6o182 = r6 /\ r8o182 = r8 /\ r11o182 = r11 /\ lro182 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o182,r8o182,r11o182,lro182]*[K** 60,K**188,K**124,K**252])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o182,r8o182,r11o182,lro182]*[K** 60,K**188,K**124,K**252])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0ab8; PC = 0x573c *)
mov L0x203f0ab8 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0ac8; PC = 0x5740 *)
mov L0x203f0ac8 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0ad8; PC = 0x5744 *)
mov L0x203f0ad8 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0ae8; PC = 0x5748 *)
mov L0x203f0ae8 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0af8; PC = 0x574c *)
mov L0x203f0af8 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b08; PC = 0x5750 *)
mov L0x203f0b08 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b18; PC = 0x5754 *)
mov L0x203f0b18 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0aa8; PC = 0x5758 *)
mov L0x203f0aa8 r5;

(**************** CUT 60****************)

cut eqmod [L0x203f0aa8,L0x203f0ab8,L0x203f0ac8,L0x203f0ad8,
           L0x203f0ae8,L0x203f0af8,L0x203f0b08,L0x203f0b18]
          [poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0],
           poly X**4 [ce0o0,ce4o0,ce8o0,ceco0,cf0o0,cf4o0,cf8o0,cfco0]]
          [[Q, X**4 - K** 60], [Q, X**4 - K**316],
           [Q, X**4 - K**188], [Q, X**4 - K**444],
           [Q, X**4 - K**124], [Q, X**4 - K**380],
           [Q, X**4 - K**252], [Q, X**4 - K**508]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0aa8,L0x203f0ab8,L0x203f0ac8,L0x203f0ad8,
     L0x203f0ae8,L0x203f0af8,L0x203f0b08,L0x203f0b18] /\
    [L0x203f0aa8,L0x203f0ab8,L0x203f0ac8,L0x203f0ad8,
     L0x203f0ae8,L0x203f0af8,L0x203f0b08,L0x203f0b18] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [0, 4, 8, 12, 16, 20, 24, 28]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0aac; Value = 0xfff24881; PC = 0x575c *)
mov r5 L0x203f0aac;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0abc; Value = 0xffb612cc; PC = 0x5760 *)
mov r6 L0x203f0abc;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0acc; Value = 0xffca290b; PC = 0x5764 *)
mov r7 L0x203f0acc;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0adc; Value = 0x006967e1; PC = 0x5768 *)
mov r8 L0x203f0adc;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0aec; Value = 0xff8561db; PC = 0x576c *)
mov r4 L0x203f0aec;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0afc; Value = 0xff7a2778; PC = 0x5770 *)
mov r11 L0x203f0afc;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b0c; Value = 0x005791df; PC = 0x5774 *)
mov r12 L0x203f0b0c;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b1c; Value = 0x000f90e7; PC = 0x5778 *)
mov lr L0x203f0b1c;

ghost ce1o0@int32, ce5o0@int32, ce9o0@int32, cedo0@int32,
      cf1o0@int32, cf5o0@int32, cf9o0@int32, cfdo0@int32:
      ce1o0 = r5 /\ ce5o0 = r6 /\ ce9o0 = r7 /\ cedo0 = r8 /\
      cf1o0 = r4 /\ cf5o0 = r11 /\ cf9o0 = r12 /\ cfdo0 = lr
   && ce1o0 = r5 /\ ce5o0 = r6 /\ ce9o0 = r7 /\ cedo0 = r8 /\
      cf1o0 = r4 /\ cf5o0 = r11 /\ cf9o0 = r12 /\ cfdo0 = lr;
ghost r4o183@int32, r11o183@int32, r12o183@int32, lro183@int32:
      r4o183 = r4 /\ r11o183 = r11 /\ r12o183 = r12 /\ lro183 = lr
   && r4o183 = r4 /\ r11o183 = r11 /\ r12o183 = r12 /\ lro183 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o183,r11o183,r12o183,lro183]*[K**240,K**240,K**240,K**240])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o183,r11o183,r12o183,lro183]*[K**240,K**240,K**240,K**240])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o184@int32, r8o184@int32, r12o184@int32, lro184@int32:
      r7o184 = r7 /\ r8o184 = r8 /\ r12o184 = r12 /\ lro184 = lr
   && r7o184 = r7 /\ r8o184 = r8 /\ r12o184 = r12 /\ lro184 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o184,r8o184,r12o184,lro184]*[K**120,K**120,K**248,K**248])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o184,r8o184,r12o184,lro184]*[K**120,K**120,K**248,K**248])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o185@int32, r8o185@int32, r11o185@int32, lro185@int32:
      r6o185 = r6 /\ r8o185 = r8 /\ r11o185 = r11 /\ lro185 = lr
   && r6o185 = r6 /\ r8o185 = r8 /\ r11o185 = r11 /\ lro185 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o185,r8o185,r11o185,lro185]*[K** 60,K**188,K**124,K**252])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o185,r8o185,r11o185,lro185]*[K** 60,K**188,K**124,K**252])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0abc; PC = 0x5870 *)
mov L0x203f0abc r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0acc; PC = 0x5874 *)
mov L0x203f0acc r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0adc; PC = 0x5878 *)
mov L0x203f0adc r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0aec; PC = 0x587c *)
mov L0x203f0aec r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0afc; PC = 0x5880 *)
mov L0x203f0afc r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b0c; PC = 0x5884 *)
mov L0x203f0b0c r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b1c; PC = 0x5888 *)
mov L0x203f0b1c lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0aac; PC = 0x588c *)
mov L0x203f0aac r5;

(**************** CUT 61****************)

cut eqmod [L0x203f0aac,L0x203f0abc,L0x203f0acc,L0x203f0adc,
           L0x203f0aec,L0x203f0afc,L0x203f0b0c,L0x203f0b1c]
          [poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0],
           poly X**4 [ce1o0,ce5o0,ce9o0,cedo0,cf1o0,cf5o0,cf9o0,cfdo0]]
          [[Q, X**4 - K** 60], [Q, X**4 - K**316],
           [Q, X**4 - K**188], [Q, X**4 - K**444],
           [Q, X**4 - K**124], [Q, X**4 - K**380],
           [Q, X**4 - K**252], [Q, X**4 - K**508]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0aac,L0x203f0abc,L0x203f0acc,L0x203f0adc,
     L0x203f0aec,L0x203f0afc,L0x203f0b0c,L0x203f0b1c] /\
    [L0x203f0aac,L0x203f0abc,L0x203f0acc,L0x203f0adc,
     L0x203f0aec,L0x203f0afc,L0x203f0b0c,L0x203f0b1c] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [1, 5, 9, 13, 17, 21, 25, 29]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0ab0; Value = 0xffe987cb; PC = 0x5628 *)
mov r5 L0x203f0ab0;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0ac0; Value = 0xffe7d863; PC = 0x562c *)
mov r6 L0x203f0ac0;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0ad0; Value = 0x00109cec; PC = 0x5630 *)
mov r7 L0x203f0ad0;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0ae0; Value = 0x0071e928; PC = 0x5634 *)
mov r8 L0x203f0ae0;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0af0; Value = 0x00199208; PC = 0x5638 *)
mov r4 L0x203f0af0;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0b00; Value = 0xffdaee66; PC = 0x563c *)
mov r11 L0x203f0b00;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b10; Value = 0xffe976ec; PC = 0x5640 *)
mov r12 L0x203f0b10;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b20; Value = 0xffab9024; PC = 0x5644 *)
mov lr L0x203f0b20;

ghost ce2o0@int32, ce6o0@int32, ceao0@int32, ceeo0@int32,
      cf2o0@int32, cf6o0@int32, cfao0@int32, cfeo0@int32:
      ce2o0 = r5 /\ ce6o0 = r6 /\ ceao0 = r7 /\ ceeo0 = r8 /\
      cf2o0 = r4 /\ cf6o0 = r11 /\ cfao0 = r12 /\ cfeo0 = lr
   && ce2o0 = r5 /\ ce6o0 = r6 /\ ceao0 = r7 /\ ceeo0 = r8 /\
      cf2o0 = r4 /\ cf6o0 = r11 /\ cfao0 = r12 /\ cfeo0 = lr;
ghost r4o186@int32, r11o186@int32, r12o186@int32, lro186@int32:
      r4o186 = r4 /\ r11o186 = r11 /\ r12o186 = r12 /\ lro186 = lr
   && r4o186 = r4 /\ r11o186 = r11 /\ r12o186 = r12 /\ lro186 = lr;

(* vmov	r1, s2                                     #! PC = 0x5648 *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x564c *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5650 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5654 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x5658 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x565c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5660 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5664 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5668 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x566c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x5670 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5674 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5678 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o186,r11o186,r12o186,lro186]*[K**240,K**240,K**240,K**240])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o186,r11o186,r12o186,lro186]*[K**240,K**240,K**240,K**240])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x567c *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x567e *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x5680 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x5682 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x5684 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x5688 *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x568c *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x5690 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o187@int32, r8o187@int32, r12o187@int32, lro187@int32:
      r7o187 = r7 /\ r8o187 = r8 /\ r12o187 = r12 /\ lro187 = lr
   && r7o187 = r7 /\ r8o187 = r8 /\ r12o187 = r12 /\ lro187 = lr;

(* vmov	r1, s3                                     #! PC = 0x5694 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x5698 *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x569c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x56a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x56a4 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x56ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x56b0 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x56b4 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56b8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x56bc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x56c0 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56c4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x56c8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o187,r8o187,r12o187,lro187]*[K**120,K**120,K**248,K**248])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o187,r8o187,r12o187,lro187]*[K**120,K**120,K**248,K**248])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x56cc *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x56ce *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x56d0 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x56d2 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x56d4 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x56d8 *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x56dc *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x56e0 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o188@int32, r8o188@int32, r11o188@int32, lro188@int32:
      r6o188 = r6 /\ r8o188 = r8 /\ r11o188 = r11 /\ lro188 = lr
   && r6o188 = r6 /\ r8o188 = r8 /\ r11o188 = r11 /\ lro188 = lr;

(* vmov	r1, s5                                     #! PC = 0x56e4 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x56e8 *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x56f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x56f4 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x56f8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x56fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5700 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5704 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x5708 *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x570c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5710 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5714 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x5718 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x571c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5720 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o188,r8o188,r11o188,lro188]*[K** 60,K**188,K**124,K**252])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o188,r8o188,r11o188,lro188]*[K** 60,K**188,K**124,K**252])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5724 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5726 *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x5728 *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x572a *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x572c *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5730 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5734 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x5738 *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0ac0; PC = 0x573c *)
mov L0x203f0ac0 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0ad0; PC = 0x5740 *)
mov L0x203f0ad0 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0ae0; PC = 0x5744 *)
mov L0x203f0ae0 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0af0; PC = 0x5748 *)
mov L0x203f0af0 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0b00; PC = 0x574c *)
mov L0x203f0b00 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b10; PC = 0x5750 *)
mov L0x203f0b10 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b20; PC = 0x5754 *)
mov L0x203f0b20 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0ab0; PC = 0x5758 *)
mov L0x203f0ab0 r5;

(**************** CUT 62****************)

cut eqmod [L0x203f0ab0,L0x203f0ac0,L0x203f0ad0,L0x203f0ae0,
           L0x203f0af0,L0x203f0b00,L0x203f0b10,L0x203f0b20]
          [poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0],
           poly X**4 [ce2o0,ce6o0,ceao0,ceeo0,cf2o0,cf6o0,cfao0,cfeo0]]
          [[Q, X**4 - K** 60], [Q, X**4 - K**316],
           [Q, X**4 - K**188], [Q, X**4 - K**444],
           [Q, X**4 - K**124], [Q, X**4 - K**380],
           [Q, X**4 - K**252], [Q, X**4 - K**508]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0ab0,L0x203f0ac0,L0x203f0ad0,L0x203f0ae0,
     L0x203f0af0,L0x203f0b00,L0x203f0b10,L0x203f0b20] /\
    [L0x203f0ab0,L0x203f0ac0,L0x203f0ad0,L0x203f0ae0,
     L0x203f0af0,L0x203f0b00,L0x203f0b10,L0x203f0b20] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [2, 6, 10, 14, 18, 22, 26, 30]];

(* ldr.w	r5, [r0]                                  #! EA = L0x203f0ab4; Value = 0x000aaa68; PC = 0x575c *)
mov r5 L0x203f0ab4;
(* ldr.w	r6, [r0, #16]                             #! EA = L0x203f0ac4; Value = 0x0049439e; PC = 0x5760 *)
mov r6 L0x203f0ac4;
(* ldr.w	r7, [r0, #32]                             #! EA = L0x203f0ad4; Value = 0x002b77c6; PC = 0x5764 *)
mov r7 L0x203f0ad4;
(* ldr.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0ae4; Value = 0x004e35b0; PC = 0x5768 *)
mov r8 L0x203f0ae4;
(* ldr.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0af4; Value = 0x0005777d; PC = 0x576c *)
mov r4 L0x203f0af4;
(* ldr.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0b04; Value = 0xff7d17bb; PC = 0x5770 *)
mov r11 L0x203f0b04;
(* ldr.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b14; Value = 0xffb70b8f; PC = 0x5774 *)
mov r12 L0x203f0b14;
(* ldr.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b24; Value = 0x001481f5; PC = 0x5778 *)
mov lr L0x203f0b24;

ghost ce3o0@int32, ce7o0@int32, cebo0@int32, cefo0@int32,
      cf3o0@int32, cf7o0@int32, cfbo0@int32, cffo0@int32:
      ce3o0 = r5 /\ ce7o0 = r6 /\ cebo0 = r7 /\ cefo0 = r8 /\
      cf3o0 = r4 /\ cf7o0 = r11 /\ cfbo0 = r12 /\ cffo0 = lr
   && ce3o0 = r5 /\ ce7o0 = r6 /\ cebo0 = r7 /\ cefo0 = r8 /\
      cf3o0 = r4 /\ cf7o0 = r11 /\ cfbo0 = r12 /\ cffo0 = lr;
ghost r4o189@int32, r11o189@int32, r12o189@int32, lro189@int32:
      r4o189 = r4 /\ r11o189 = r11 /\ r12o189 = r12 /\ lro189 = lr
   && r4o189 = r4 /\ r11o189 = r11 /\ r12o189 = r12 /\ lro189 = lr;

(* vmov	r1, s2                                     #! PC = 0x577c *)
mov r1 s2;
(* smull	r9, r4, r4, r1                            #! PC = 0x5780 *)
smull r4 r9 r4 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5784 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r4, r10, r3                           #! PC = 0x5788 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r4 r4 smlH smlc;
(* smull	r9, r11, r11, r1                          #! PC = 0x578c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5790 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5794 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* smull	r9, r12, r12, r1                          #! PC = 0x5798 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x579c *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57a0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57a4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57a8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57ac *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r4,r11,r12,lr]
              ([r4o189,r11o189,r12o189,lro189]*[K**240,K**240,K**240,K**240])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r4,r11,r12,lr]
             ([r4o189,r11o189,r12o189,lro189]*[K**240,K**240,K**240,K**240])
             [Q, Q, Q, Q] && true;

(* add	r5, r4                                      #! PC = 0x57b0 *)
add r5 r5 r4;
(* add	r6, r11                                     #! PC = 0x57b2 *)
add r6 r6 r11;
(* add	r7, r12                                     #! PC = 0x57b4 *)
add r7 r7 r12;
(* add	r8, lr                                      #! PC = 0x57b6 *)
add r8 r8 lr;
(* sub.w	r4, r5, r4, lsl #1                        #! PC = 0x57b8 *)
shl slsl r4 1@int32; sub r4 r5 slsl;
(* sub.w	r11, r6, r11, lsl #1                      #! PC = 0x57bc *)
shl slsl r11 1@int32; sub r11 r6 slsl;
(* sub.w	r12, r7, r12, lsl #1                      #! PC = 0x57c0 *)
shl slsl r12 1@int32; sub r12 r7 slsl;
(* sub.w	lr, r8, lr, lsl #1                        #! PC = 0x57c4 *)
shl slsl lr 1@int32; sub lr r8 slsl;

ghost r7o190@int32, r8o190@int32, r12o190@int32, lro190@int32:
      r7o190 = r7 /\ r8o190 = r8 /\ r12o190 = r12 /\ lro190 = lr
   && r7o190 = r7 /\ r8o190 = r8 /\ r12o190 = r12 /\ lro190 = lr;

(* vmov	r1, s3                                     #! PC = 0x57c8 *)
mov r1 s3;
(* smull	r9, r7, r7, r1                            #! PC = 0x57cc *)
smull r7 r9 r7 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57d0 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x57d4 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r1                            #! PC = 0x57d8 *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57dc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x57e0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s4                                     #! PC = 0x57e4 *)
mov r1 s4;
(* smull	r9, r12, r12, r1                          #! PC = 0x57e8 *)
smull r12 r9 r12 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57ec *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r12, r10, r3                          #! PC = 0x57f0 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r12 r12 smlH smlc;
(* smull	r9, lr, lr, r1                            #! PC = 0x57f4 *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x57f8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x57fc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r7,r8,r12,lr]
              ([r7o190,r8o190,r12o190,lro190]*[K**120,K**120,K**248,K**248])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8,r12,lr]
             ([r7o190,r8o190,r12o190,lro190]*[K**120,K**120,K**248,K**248])
             [Q, Q, Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x5800 *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x5802 *)
add r6 r6 r8;
(* add	r4, r12                                     #! PC = 0x5804 *)
add r4 r4 r12;
(* add	r11, lr                                     #! PC = 0x5806 *)
add r11 r11 lr;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x5808 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x580c *)
shl slsl r8 1@int32; sub r8 r6 slsl;
(* sub.w	r12, r4, r12, lsl #1                      #! PC = 0x5810 *)
shl slsl r12 1@int32; sub r12 r4 slsl;
(* sub.w	lr, r11, lr, lsl #1                       #! PC = 0x5814 *)
shl slsl lr 1@int32; sub lr r11 slsl;

ghost r6o191@int32, r8o191@int32, r11o191@int32, lro191@int32:
      r6o191 = r6 /\ r8o191 = r8 /\ r11o191 = r11 /\ lro191 = lr
   && r6o191 = r6 /\ r8o191 = r8 /\ r11o191 = r11 /\ lro191 = lr;

(* vmov	r1, s5                                     #! PC = 0x5818 *)
mov r1 s5;
(* smull	r9, r6, r6, r1                            #! PC = 0x581c *)
smull r6 r9 r6 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5820 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5824 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* vmov	r1, s6                                     #! PC = 0x5828 *)
mov r1 s6;
(* smull	r9, r8, r8, r1                            #! PC = 0x582c *)
smull r8 r9 r8 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5830 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x5834 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;
(* vmov	r1, s7                                     #! PC = 0x5838 *)
mov r1 s7;
(* smull	r9, r11, r11, r1                          #! PC = 0x583c *)
smull r11 r9 r11 r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5840 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r11, r10, r3                          #! PC = 0x5844 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r11 r11 smlH smlc;
(* vmov	r1, s8                                     #! PC = 0x5848 *)
mov r1 s8;
(* smull	r9, lr, lr, r1                            #! PC = 0x584c *)
smull lr r9 lr r1; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5850 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, lr, r10, r3                           #! PC = 0x5854 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc lr lr smlH smlc;

eassert eqmod [r6,r8,r11,lr]
              ([r6o191,r8o191,r11o191,lro191]*[K** 60,K**188,K**124,K**252])
              [Q, Q, Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8,r11,lr]
             ([r6o191,r8o191,r11o191,lro191]*[K** 60,K**188,K**124,K**252])
             [Q, Q, Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5858 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x585a *)
add r7 r7 r8;
(* add	r4, r11                                     #! PC = 0x585c *)
add r4 r4 r11;
(* add	r12, lr                                     #! PC = 0x585e *)
add r12 r12 lr;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5860 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5864 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* sub.w	r11, r4, r11, lsl #1                      #! PC = 0x5868 *)
shl slsl r11 1@int32; sub r11 r4 slsl;
(* sub.w	lr, r12, lr, lsl #1                       #! PC = 0x586c *)
shl slsl lr 1@int32; sub lr r12 slsl;
(* str.w	r6, [r0, #16]                             #! EA = L0x203f0ac4; PC = 0x5870 *)
mov L0x203f0ac4 r6;
(* str.w	r7, [r0, #32]                             #! EA = L0x203f0ad4; PC = 0x5874 *)
mov L0x203f0ad4 r7;
(* str.w	r8, [r0, #48]	@ 0x30                      #! EA = L0x203f0ae4; PC = 0x5878 *)
mov L0x203f0ae4 r8;
(* str.w	r4, [r0, #64]	@ 0x40                      #! EA = L0x203f0af4; PC = 0x587c *)
mov L0x203f0af4 r4;
(* str.w	r11, [r0, #80]	@ 0x50                     #! EA = L0x203f0b04; PC = 0x5880 *)
mov L0x203f0b04 r11;
(* str.w	r12, [r0, #96]	@ 0x60                     #! EA = L0x203f0b14; PC = 0x5884 *)
mov L0x203f0b14 r12;
(* str.w	lr, [r0, #112]	@ 0x70                     #! EA = L0x203f0b24; PC = 0x5888 *)
mov L0x203f0b24 lr;
(* str.w	r5, [r0], #4                              #! EA = L0x203f0ab4; PC = 0x588c *)
mov L0x203f0ab4 r5;

(**************** CUT 63****************)

cut eqmod [L0x203f0ab4,L0x203f0ac4,L0x203f0ad4,L0x203f0ae4,
           L0x203f0af4,L0x203f0b04,L0x203f0b14,L0x203f0b24]
          [poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0],
           poly X**4 [ce3o0,ce7o0,cebo0,cefo0,cf3o0,cf7o0,cfbo0,cffo0]]
          [[Q, X**4 - K** 60], [Q, X**4 - K**316],
           [Q, X**4 - K**188], [Q, X**4 - K**444],
           [Q, X**4 - K**124], [Q, X**4 - K**380],
           [Q, X**4 - K**252], [Q, X**4 - K**508]]
    prove with [precondition]
 && [9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2,
     9@32*NQ2,9@32*NQ2,9@32*NQ2,9@32*NQ2] <=s
    [L0x203f0ab4,L0x203f0ac4,L0x203f0ad4,L0x203f0ae4,
     L0x203f0af4,L0x203f0b04,L0x203f0b14,L0x203f0b24] /\
    [L0x203f0ab4,L0x203f0ac4,L0x203f0ad4,L0x203f0ae4,
     L0x203f0af4,L0x203f0b04,L0x203f0b14,L0x203f0b24] <=s
    [9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2,9@32*Q2]
    prove with [precondition, cuts [3, 7, 11, 15, 19, 23, 27, 31]];

(* vmov	r10, s10                                   #! PC = 0x5890 *)
mov r10 s10;
(* cmp.w	r0, r10                                   #! PC = 0x5894 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! PC = 0x5898 *)
#bne.w	0x5628 <pqcrystals_dilithium_ntt+692>    #! 0x5898 = 0x5898;
(* add.w	r0, r0, #112	@ 0x70                       #! PC = 0x589c *)
adds dc r0 r0 112@uint32;
(* vmov	r10, s9                                    #! PC = 0x58a0 *)
mov r10 s9;
(* cmp.w	r0, r10                                   #! PC = 0x58a4 *)
(* cmp.w r0, r10 *)
nop;
(* #bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! PC = 0x58a8 *)
#bne.w	0x5614 <pqcrystals_dilithium_ntt+672>    #! 0x58a8 = 0x58a8;
(* sub.w	r0, r0, #1024	@ 0x400                     #! PC = 0x58ac *)
subs dc r0 r0 1024@uint32;
(* vmov	r1, s0                                     #! PC = 0x58b0 *)
mov r1 s0;
(* add.w	r4, r0, #1024	@ 0x400                     #! PC = 0x58b4 *)
adds dc r4 r0 1024@uint32;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8098; Value = 0x001fea93; PC = 0x58b8 *)
mov r12 L0x8098;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x809c; Value = 0x0033ff5a; PC = 0x58bc *)
mov lr L0x809c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8094; Value = 0xffc406e5; PC = 0x58c0 *)
mov r11 L0x8094;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0728; Value = 0x00008878; PC = 0x58c4 *)
mov r5 L0x203f0728;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f072c; Value = 0xffdf5152; PC = 0x58c8 *)
mov r6 L0x203f072c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0730; Value = 0x0005f29e; PC = 0x58cc *)
mov r7 L0x203f0730;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0734; Value = 0xffda1667; PC = 0x58d0 *)
mov r8 L0x203f0734;

ghost r5o192@int32, r6o192@int32, r7o192@int32, r8o192@int32:
      r5o192 = r5 /\ r6o192 = r6 /\ r7o192 = r7 /\ r8o192 = r8
   && r5o192 = r5 /\ r6o192 = r6 /\ r7o192 = r7 /\ r8o192 = r8;
   
(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o192,r8o192]*[K**  2,K**  2])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o192,r8o192]*[K**  2,K**  2])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o193@int32, r8o193@int32:
      r6o193 = r6 /\ r8o193 = r8
   && r6o193 = r6 /\ r8o193 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o193,r8o193]*[K**  1,K**129])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o193,r8o193]*[K**  1,K**129])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f072c; PC = 0x591c *)
mov L0x203f072c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0730; PC = 0x5920 *)
mov L0x203f0730 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0734; PC = 0x5924 *)
mov L0x203f0734 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0728; PC = 0x5928 *)
mov L0x203f0728 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 64 ****************)

cut eqmod L0x203f0728 (poly X [r5o192,r6o192,r7o192,r8o192]) [Q,X-K**  1]/\
    eqmod L0x203f072c (poly X [r5o192,r6o192,r7o192,r8o192]) [Q,X-K**257]/\
    eqmod L0x203f0730 (poly X [r5o192,r6o192,r7o192,r8o192]) [Q,X-K**129]/\
    eqmod L0x203f0734 (poly X [r5o192,r6o192,r7o192,r8o192]) [Q,X-K**385]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]/\
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]/\
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]/\
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]/\
    [L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];
     
(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80a4; Value = 0x002358d4; PC = 0x58b8 *)
mov r12 L0x80a4;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80a8; Value = 0x003a41f8; PC = 0x58bc *)
mov lr L0x80a8;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80a0; Value = 0xffe8ac81; PC = 0x58c0 *)
mov r11 L0x80a0;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0738; Value = 0xfff8dcd8; PC = 0x58c4 *)
mov r5 L0x203f0738;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f073c; Value = 0x003af39a; PC = 0x58c8 *)
mov r6 L0x203f073c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0740; Value = 0xffa5f7c4; PC = 0x58cc *)
mov r7 L0x203f0740;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0744; Value = 0x005244e3; PC = 0x58d0 *)
mov r8 L0x203f0744;

ghost r5o194@int32, r6o194@int32, r7o194@int32, r8o194@int32:
      r5o194 = r5 /\ r6o194 = r6 /\ r7o194 = r7 /\ r8o194 = r8
   && r5o194 = r5 /\ r6o194 = r6 /\ r7o194 = r7 /\ r8o194 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o194,r8o194]*[K**130,K**130])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o194,r8o194]*[K**130,K**130])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o195@int32, r8o195@int32:
      r6o195 = r6 /\ r8o195 = r8
   && r6o195 = r6 /\ r8o195 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o195,r8o195]*[K** 65,K**193])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o195,r8o195]*[K** 65,K**193])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f073c; PC = 0x591c *)
mov L0x203f073c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0740; PC = 0x5920 *)
mov L0x203f0740 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0744; PC = 0x5924 *)
mov L0x203f0744 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0738; PC = 0x5928 *)
mov L0x203f0738 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 65 ****************)

cut eqmod L0x203f0738 (poly X [r5o194,r6o194,r7o194,r8o194]) [Q,X-K** 65]/\
    eqmod L0x203f073c (poly X [r5o194,r6o194,r7o194,r8o194]) [Q,X-K**321]/\
    eqmod L0x203f0740 (poly X [r5o194,r6o194,r7o194,r8o194]) [Q,X-K**193]/\
    eqmod L0x203f0744 (poly X [r5o194,r6o194,r7o194,r8o194]) [Q,X-K**449]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]/\
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]/\
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]/\
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]/\
    [L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80b0; Value = 0xffccff72; PC = 0x58b8 *)
mov r12 L0x80b0;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80b4; Value = 0x00223dfb; PC = 0x58bc *)
mov lr L0x80b4;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80ac; Value = 0xffc7e1cf; PC = 0x58c0 *)
mov r11 L0x80ac;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0748; Value = 0x00474f8f; PC = 0x58c4 *)
mov r5 L0x203f0748;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f074c; Value = 0xffe40752; PC = 0x58c8 *)
mov r6 L0x203f074c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0750; Value = 0x003b03a4; PC = 0x58cc *)
mov r7 L0x203f0750;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0754; Value = 0xffd26d3a; PC = 0x58d0 *)
mov r8 L0x203f0754;

ghost r5o196@int32, r6o196@int32, r7o196@int32, r8o196@int32:
      r5o196 = r5 /\ r6o196 = r6 /\ r7o196 = r7 /\ r8o196 = r8
   && r5o196 = r5 /\ r6o196 = r6 /\ r7o196 = r7 /\ r8o196 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o196,r8o196]*[K** 66,K** 66])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o196,r8o196]*[K** 66,K** 66])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o197@int32, r8o197@int32:
      r6o197 = r6 /\ r8o197 = r8
   && r6o197 = r6 /\ r8o197 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o197,r8o197]*[K** 33,K**161])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o197,r8o197]*[K** 33,K**161])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f074c; PC = 0x591c *)
mov L0x203f074c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0750; PC = 0x5920 *)
mov L0x203f0750 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0754; PC = 0x5924 *)
mov L0x203f0754 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0748; PC = 0x5928 *)
mov L0x203f0748 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 66 ****************)

cut eqmod L0x203f0748 (poly X [r5o196,r6o196,r7o196,r8o196]) [Q,X-K** 33]/\
    eqmod L0x203f074c (poly X [r5o196,r6o196,r7o196,r8o196]) [Q,X-K**289]/\
    eqmod L0x203f0750 (poly X [r5o196,r6o196,r7o196,r8o196]) [Q,X-K**161]/\
    eqmod L0x203f0754 (poly X [r5o196,r6o196,r7o196,r8o196]) [Q,X-K**417]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]/\
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]/\
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]/\
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]/\
    [L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80bc; Value = 0xffdaab9f; PC = 0x58b8 *)
mov r12 L0x80bc;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80c0; Value = 0xffc9a422; PC = 0x58bc *)
mov lr L0x80c0;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80b8; Value = 0xffd19819; PC = 0x58c0 *)
mov r11 L0x80b8;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0758; Value = 0x008d6aa5; PC = 0x58c4 *)
mov r5 L0x203f0758;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f075c; Value = 0x003849da; PC = 0x58c8 *)
mov r6 L0x203f075c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0760; Value = 0xffd5177e; PC = 0x58cc *)
mov r7 L0x203f0760;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0764; Value = 0xff5e23a4; PC = 0x58d0 *)
mov r8 L0x203f0764;

ghost r5o198@int32, r6o198@int32, r7o198@int32, r8o198@int32:
      r5o198 = r5 /\ r6o198 = r6 /\ r7o198 = r7 /\ r8o198 = r8
   && r5o198 = r5 /\ r6o198 = r6 /\ r7o198 = r7 /\ r8o198 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o198,r8o198]*[K**194,K**194])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o198,r8o198]*[K**194,K**194])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o199@int32, r8o199@int32:
      r6o199 = r6 /\ r8o199 = r8
   && r6o199 = r6 /\ r8o199 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o199,r8o199]*[K** 97,K**225])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o199,r8o199]*[K** 97,K**225])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f075c; PC = 0x591c *)
mov L0x203f075c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0760; PC = 0x5920 *)
mov L0x203f0760 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0764; PC = 0x5924 *)
mov L0x203f0764 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0758; PC = 0x5928 *)
mov L0x203f0758 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 67 ****************)

cut eqmod L0x203f0758 (poly X [r5o198,r6o198,r7o198,r8o198]) [Q,X-K** 97]/\
    eqmod L0x203f075c (poly X [r5o198,r6o198,r7o198,r8o198]) [Q,X-K**353]/\
    eqmod L0x203f0760 (poly X [r5o198,r6o198,r7o198,r8o198]) [Q,X-K**225]/\
    eqmod L0x203f0764 (poly X [r5o198,r6o198,r7o198,r8o198]) [Q,X-K**481]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]/\
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]/\
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]/\
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]/\
    [L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80c8; Value = 0x000412f5; PC = 0x58b8 *)
mov r12 L0x80c8;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80cc; Value = 0x00252587; PC = 0x58bc *)
mov lr L0x80cc;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80c4; Value = 0xffe9d65d; PC = 0x58c0 *)
mov r11 L0x80c4;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0768; Value = 0xffa73f7a; PC = 0x58c4 *)
mov r5 L0x203f0768;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f076c; Value = 0x00424e0b; PC = 0x58c8 *)
mov r6 L0x203f076c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0770; Value = 0x0018cf8e; PC = 0x58cc *)
mov r7 L0x203f0770;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0774; Value = 0x003d0197; PC = 0x58d0 *)
mov r8 L0x203f0774;

ghost r5o200@int32, r6o200@int32, r7o200@int32, r8o200@int32:
      r5o200 = r5 /\ r6o200 = r6 /\ r7o200 = r7 /\ r8o200 = r8
   && r5o200 = r5 /\ r6o200 = r6 /\ r7o200 = r7 /\ r8o200 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o200,r8o200]*[K** 34,K** 34])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o200,r8o200]*[K** 34,K** 34])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o201@int32, r8o201@int32:
      r6o201 = r6 /\ r8o201 = r8
   && r6o201 = r6 /\ r8o201 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o201,r8o201]*[K** 17,K**145])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o201,r8o201]*[K** 17,K**145])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f076c; PC = 0x591c *)
mov L0x203f076c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0770; PC = 0x5920 *)
mov L0x203f0770 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0774; PC = 0x5924 *)
mov L0x203f0774 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0768; PC = 0x5928 *)
mov L0x203f0768 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 68 ****************)

cut eqmod L0x203f0768 (poly X [r5o200,r6o200,r7o200,r8o200]) [Q,X-K** 17]/\
    eqmod L0x203f076c (poly X [r5o200,r6o200,r7o200,r8o200]) [Q,X-K**273]/\
    eqmod L0x203f0770 (poly X [r5o200,r6o200,r7o200,r8o200]) [Q,X-K**145]/\
    eqmod L0x203f0774 (poly X [r5o200,r6o200,r7o200,r8o200]) [Q,X-K**401]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]/\
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]/\
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]/\
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]/\
    [L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80d4; Value = 0xffed24f0; PC = 0x58b8 *)
mov r12 L0x80d4;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80d8; Value = 0x00359b5d; PC = 0x58bc *)
mov lr L0x80d8;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80d0; Value = 0x003509ee; PC = 0x58c0 *)
mov r11 L0x80d0;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0778; Value = 0x001ba0a4; PC = 0x58c4 *)
mov r5 L0x203f0778;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f077c; Value = 0x0050371f; PC = 0x58c8 *)
mov r6 L0x203f077c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0780; Value = 0xffedd56c; PC = 0x58cc *)
mov r7 L0x203f0780;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0784; Value = 0x0048a13b; PC = 0x58d0 *)
mov r8 L0x203f0784;

ghost r5o202@int32, r6o202@int32, r7o202@int32, r8o202@int32:
      r5o202 = r5 /\ r6o202 = r6 /\ r7o202 = r7 /\ r8o202 = r8
   && r5o202 = r5 /\ r6o202 = r6 /\ r7o202 = r7 /\ r8o202 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o202,r8o202]*[K**162,K**162])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o202,r8o202]*[K**162,K**162])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o203@int32, r8o203@int32:
      r6o203 = r6 /\ r8o203 = r8
   && r6o203 = r6 /\ r8o203 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o203,r8o203]*[K** 81,K**209])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o203,r8o203]*[K** 81,K**209])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f077c; PC = 0x591c *)
mov L0x203f077c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0780; PC = 0x5920 *)
mov L0x203f0780 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0784; PC = 0x5924 *)
mov L0x203f0784 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0778; PC = 0x5928 *)
mov L0x203f0778 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 69 ****************)

cut eqmod L0x203f0778 (poly X [r5o202,r6o202,r7o202,r8o202]) [Q,X-K** 81]/\
    eqmod L0x203f077c (poly X [r5o202,r6o202,r7o202,r8o202]) [Q,X-K**337]/\
    eqmod L0x203f0780 (poly X [r5o202,r6o202,r7o202,r8o202]) [Q,X-K**209]/\
    eqmod L0x203f0784 (poly X [r5o202,r6o202,r7o202,r8o202]) [Q,X-K**465]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]/\
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]/\
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]/\
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]/\
    [L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80e0; Value = 0xffca48a0; PC = 0x58b8 *)
mov r12 L0x80e0;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80e4; Value = 0xffc6a2fc; PC = 0x58bc *)
mov lr L0x80e4;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80dc; Value = 0x002135c7; PC = 0x58c0 *)
mov r11 L0x80dc;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0788; Value = 0xfff748c5; PC = 0x58c4 *)
mov r5 L0x203f0788;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f078c; Value = 0xffe04e85; PC = 0x58c8 *)
mov r6 L0x203f078c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0790; Value = 0x0023a62f; PC = 0x58cc *)
mov r7 L0x203f0790;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0794; Value = 0x0028aa5c; PC = 0x58d0 *)
mov r8 L0x203f0794;

ghost r5o204@int32, r6o204@int32, r7o204@int32, r8o204@int32:
      r5o204 = r5 /\ r6o204 = r6 /\ r7o204 = r7 /\ r8o204 = r8
   && r5o204 = r5 /\ r6o204 = r6 /\ r7o204 = r7 /\ r8o204 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o204,r8o204]*[K** 98,K** 98])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o204,r8o204]*[K** 98,K** 98])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o205@int32, r8o205@int32:
      r6o205 = r6 /\ r8o205 = r8
   && r6o205 = r6 /\ r8o205 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o205,r8o205]*[K** 49,K**177])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o205,r8o205]*[K** 49,K**177])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f078c; PC = 0x591c *)
mov L0x203f078c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0790; PC = 0x5920 *)
mov L0x203f0790 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0794; PC = 0x5924 *)
mov L0x203f0794 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0788; PC = 0x5928 *)
mov L0x203f0788 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 70 ****************)

cut eqmod L0x203f0788 (poly X [r5o204,r6o204,r7o204,r8o204]) [Q,X-K** 49]/\
    eqmod L0x203f078c (poly X [r5o204,r6o204,r7o204,r8o204]) [Q,X-K**305]/\
    eqmod L0x203f0790 (poly X [r5o204,r6o204,r7o204,r8o204]) [Q,X-K**177]/\
    eqmod L0x203f0794 (poly X [r5o204,r6o204,r7o204,r8o204]) [Q,X-K**433]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]/\
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]/\
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]/\
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]/\
    [L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80ec; Value = 0xffedbb56; PC = 0x58b8 *)
mov r12 L0x80ec;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80f0; Value = 0xffcf45de; PC = 0x58bc *)
mov lr L0x80f0;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80e8; Value = 0xffe7cfbb; PC = 0x58c0 *)
mov r11 L0x80e8;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0798; Value = 0xffcc93e9; PC = 0x58c4 *)
mov r5 L0x203f0798;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f079c; Value = 0x0041b671; PC = 0x58c8 *)
mov r6 L0x203f079c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f07a0; Value = 0x000e12db; PC = 0x58cc *)
mov r7 L0x203f07a0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f07a4; Value = 0xffbe6d6a; PC = 0x58d0 *)
mov r8 L0x203f07a4;

ghost r5o206@int32, r6o206@int32, r7o206@int32, r8o206@int32:
      r5o206 = r5 /\ r6o206 = r6 /\ r7o206 = r7 /\ r8o206 = r8
   && r5o206 = r5 /\ r6o206 = r6 /\ r7o206 = r7 /\ r8o206 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o206,r8o206]*[K**226,K**226])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o206,r8o206]*[K**226,K**226])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o207@int32, r8o207@int32:
      r6o207 = r6 /\ r8o207 = r8
   && r6o207 = r6 /\ r8o207 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o207,r8o207]*[K**113,K**241])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o207,r8o207]*[K**113,K**241])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f079c; PC = 0x591c *)
mov L0x203f079c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f07a0; PC = 0x5920 *)
mov L0x203f07a0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f07a4; PC = 0x5924 *)
mov L0x203f07a4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0798; PC = 0x5928 *)
mov L0x203f0798 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 71 ****************)

cut eqmod L0x203f0798 (poly X [r5o206,r6o206,r7o206,r8o206]) [Q,X-K**113]/\
    eqmod L0x203f079c (poly X [r5o206,r6o206,r7o206,r8o206]) [Q,X-K**369]/\
    eqmod L0x203f07a0 (poly X [r5o206,r6o206,r7o206,r8o206]) [Q,X-K**241]/\
    eqmod L0x203f07a4 (poly X [r5o206,r6o206,r7o206,r8o206]) [Q,X-K**497]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]/\
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]/\
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]/\
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]/\
    [L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [32,33,34,35]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x80f8; Value = 0x000dbe5e; PC = 0x58b8 *)
mov r12 L0x80f8;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x80fc; Value = 0x001c5e1a; PC = 0x58bc *)
mov lr L0x80fc;
(* ldr.w	r11, [r1], #12                            #! EA = L0x80f4; Value = 0xffeccf75; PC = 0x58c0 *)
mov r11 L0x80f4;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07a8; Value = 0xffe5c3c7; PC = 0x58c4 *)
mov r5 L0x203f07a8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f07ac; Value = 0x006ec7f3; PC = 0x58c8 *)
mov r6 L0x203f07ac;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f07b0; Value = 0x001d9149; PC = 0x58cc *)
mov r7 L0x203f07b0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f07b4; Value = 0x000d23a8; PC = 0x58d0 *)
mov r8 L0x203f07b4;

ghost r5o208@int32, r6o208@int32, r7o208@int32, r8o208@int32:
      r5o208 = r5 /\ r6o208 = r6 /\ r7o208 = r7 /\ r8o208 = r8
   && r5o208 = r5 /\ r6o208 = r6 /\ r7o208 = r7 /\ r8o208 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o208,r8o208]*[K** 18,K** 18])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o208,r8o208]*[K** 18,K** 18])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o209@int32, r8o209@int32:
      r6o209 = r6 /\ r8o209 = r8
   && r6o209 = r6 /\ r8o209 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o209,r8o209]*[K**  9,K**137])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o209,r8o209]*[K**  9,K**137])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f07ac; PC = 0x591c *)
mov L0x203f07ac r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f07b0; PC = 0x5920 *)
mov L0x203f07b0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f07b4; PC = 0x5924 *)
mov L0x203f07b4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f07a8; PC = 0x5928 *)
mov L0x203f07a8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 72 ****************)

cut eqmod L0x203f07a8 (poly X [r5o208,r6o208,r7o208,r8o208]) [Q,X-K**  9]/\
    eqmod L0x203f07ac (poly X [r5o208,r6o208,r7o208,r8o208]) [Q,X-K**265]/\
    eqmod L0x203f07b0 (poly X [r5o208,r6o208,r7o208,r8o208]) [Q,X-K**137]/\
    eqmod L0x203f07b4 (poly X [r5o208,r6o208,r7o208,r8o208]) [Q,X-K**393]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]/\
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]/\
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]/\
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]/\
    [L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8104; Value = 0x000de0e6; PC = 0x58b8 *)
mov r12 L0x8104;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8108; Value = 0x000c7f5a; PC = 0x58bc *)
mov lr L0x8108;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8100; Value = 0x001d9772; PC = 0x58c0 *)
mov r11 L0x8100;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07b8; Value = 0xff87e475; PC = 0x58c4 *)
mov r5 L0x203f07b8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f07bc; Value = 0x0045e80d; PC = 0x58c8 *)
mov r6 L0x203f07bc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f07c0; Value = 0x00097dcf; PC = 0x58cc *)
mov r7 L0x203f07c0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f07c4; Value = 0xff95defc; PC = 0x58d0 *)
mov r8 L0x203f07c4;

ghost r5o210@int32, r6o210@int32, r7o210@int32, r8o210@int32:
      r5o210 = r5 /\ r6o210 = r6 /\ r7o210 = r7 /\ r8o210 = r8
   && r5o210 = r5 /\ r6o210 = r6 /\ r7o210 = r7 /\ r8o210 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o210,r8o210]*[K**146,K**146])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o210,r8o210]*[K**146,K**146])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o211@int32, r8o211@int32:
      r6o211 = r6 /\ r8o211 = r8
   && r6o211 = r6 /\ r8o211 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o211,r8o211]*[K** 73,K**201])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o211,r8o211]*[K** 73,K**201])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f07bc; PC = 0x591c *)
mov L0x203f07bc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f07c0; PC = 0x5920 *)
mov L0x203f07c0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f07c4; PC = 0x5924 *)
mov L0x203f07c4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f07b8; PC = 0x5928 *)
mov L0x203f07b8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 73 ****************)

cut eqmod L0x203f07b8 (poly X [r5o210,r6o210,r7o210,r8o210]) [Q,X-K** 73]/\
    eqmod L0x203f07bc (poly X [r5o210,r6o210,r7o210,r8o210]) [Q,X-K**329]/\
    eqmod L0x203f07c0 (poly X [r5o210,r6o210,r7o210,r8o210]) [Q,X-K**201]/\
    eqmod L0x203f07c4 (poly X [r5o210,r6o210,r7o210,r8o210]) [Q,X-K**457]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]/\
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]/\
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]/\
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]/\
    [L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8110; Value = 0x00078f83; PC = 0x58b8 *)
mov r12 L0x8110;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8114; Value = 0xffe7628a; PC = 0x58bc *)
mov lr L0x8114;
(* ldr.w	r11, [r1], #12                            #! EA = L0x810c; Value = 0xffc1b072; PC = 0x58c0 *)
mov r11 L0x810c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07c8; Value = 0xff5e4884; PC = 0x58c4 *)
mov r5 L0x203f07c8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f07cc; Value = 0x005ce333; PC = 0x58c8 *)
mov r6 L0x203f07cc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f07d0; Value = 0x004077d2; PC = 0x58cc *)
mov r7 L0x203f07d0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f07d4; Value = 0xffdbe53d; PC = 0x58d0 *)
mov r8 L0x203f07d4;

ghost r5o212@int32, r6o212@int32, r7o212@int32, r8o212@int32:
      r5o212 = r5 /\ r6o212 = r6 /\ r7o212 = r7 /\ r8o212 = r8
   && r5o212 = r5 /\ r6o212 = r6 /\ r7o212 = r7 /\ r8o212 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o212,r8o212]*[K** 82,K** 82])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o212,r8o212]*[K** 82,K** 82])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o213@int32, r8o213@int32:
      r6o213 = r6 /\ r8o213 = r8
   && r6o213 = r6 /\ r8o213 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o213,r8o213]*[K** 41,K**169])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o213,r8o213]*[K** 41,K**169])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f07cc; PC = 0x591c *)
mov L0x203f07cc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f07d0; PC = 0x5920 *)
mov L0x203f07d0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f07d4; PC = 0x5924 *)
mov L0x203f07d4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f07c8; PC = 0x5928 *)
mov L0x203f07c8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 74 ****************)

cut eqmod L0x203f07c8 (poly X [r5o212,r6o212,r7o212,r8o212]) [Q,X-K** 41]/\
    eqmod L0x203f07cc (poly X [r5o212,r6o212,r7o212,r8o212]) [Q,X-K**297]/\
    eqmod L0x203f07d0 (poly X [r5o212,r6o212,r7o212,r8o212]) [Q,X-K**169]/\
    eqmod L0x203f07d4 (poly X [r5o212,r6o212,r7o212,r8o212]) [Q,X-K**425]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]/\
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]/\
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]/\
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]/\
    [L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x811c; Value = 0xffff5704; PC = 0x58b8 *)
mov r12 L0x811c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8120; Value = 0xfff806fc; PC = 0x58bc *)
mov lr L0x8120;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8118; Value = 0xfff0bcf6; PC = 0x58c0 *)
mov r11 L0x8118;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07d8; Value = 0xff169ad8; PC = 0x58c4 *)
mov r5 L0x203f07d8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f07dc; Value = 0x00a813d5; PC = 0x58c8 *)
mov r6 L0x203f07dc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f07e0; Value = 0x00550bd6; PC = 0x58cc *)
mov r7 L0x203f07e0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f07e4; Value = 0x001975fb; PC = 0x58d0 *)
mov r8 L0x203f07e4;

ghost r5o214@int32, r6o214@int32, r7o214@int32, r8o214@int32:
      r5o214 = r5 /\ r6o214 = r6 /\ r7o214 = r7 /\ r8o214 = r8
   && r5o214 = r5 /\ r6o214 = r6 /\ r7o214 = r7 /\ r8o214 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o214,r8o214]*[K**210,K**210])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o214,r8o214]*[K**210,K**210])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o215@int32, r8o215@int32:
      r6o215 = r6 /\ r8o215 = r8
   && r6o215 = r6 /\ r8o215 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o215,r8o215]*[K**105,K**233])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o215,r8o215]*[K**105,K**233])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f07dc; PC = 0x591c *)
mov L0x203f07dc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f07e0; PC = 0x5920 *)
mov L0x203f07e0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f07e4; PC = 0x5924 *)
mov L0x203f07e4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f07d8; PC = 0x5928 *)
mov L0x203f07d8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 75 ****************)

cut eqmod L0x203f07d8 (poly X [r5o214,r6o214,r7o214,r8o214]) [Q,X-K**105]/\
    eqmod L0x203f07dc (poly X [r5o214,r6o214,r7o214,r8o214]) [Q,X-K**361]/\
    eqmod L0x203f07e0 (poly X [r5o214,r6o214,r7o214,r8o214]) [Q,X-K**233]/\
    eqmod L0x203f07e4 (poly X [r5o214,r6o214,r7o214,r8o214]) [Q,X-K**489]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]/\
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]/\
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]/\
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]/\
    [L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8128; Value = 0xfff60021; PC = 0x58b8 *)
mov r12 L0x8128;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x812c; Value = 0xffd05af6; PC = 0x58bc *)
mov lr L0x812c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8124; Value = 0xffcf5280; PC = 0x58c0 *)
mov r11 L0x8124;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07e8; Value = 0xffe69376; PC = 0x58c4 *)
mov r5 L0x203f07e8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f07ec; Value = 0x003e100b; PC = 0x58c8 *)
mov r6 L0x203f07ec;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f07f0; Value = 0xff577707; PC = 0x58cc *)
mov r7 L0x203f07f0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f07f4; Value = 0x000a5c25; PC = 0x58d0 *)
mov r8 L0x203f07f4;

ghost r5o216@int32, r6o216@int32, r7o216@int32, r8o216@int32:
      r5o216 = r5 /\ r6o216 = r6 /\ r7o216 = r7 /\ r8o216 = r8
   && r5o216 = r5 /\ r6o216 = r6 /\ r7o216 = r7 /\ r8o216 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o216,r8o216]*[K** 50,K** 50])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o216,r8o216]*[K** 50,K** 50])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o217@int32, r8o217@int32:
      r6o217 = r6 /\ r8o217 = r8
   && r6o217 = r6 /\ r8o217 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o217,r8o217]*[K** 25,K**153])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o217,r8o217]*[K** 25,K**153])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f07ec; PC = 0x591c *)
mov L0x203f07ec r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f07f0; PC = 0x5920 *)
mov L0x203f07f0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f07f4; PC = 0x5924 *)
mov L0x203f07f4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f07e8; PC = 0x5928 *)
mov L0x203f07e8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 76 ****************)

cut eqmod L0x203f07e8 (poly X [r5o216,r6o216,r7o216,r8o216]) [Q,X-K** 25]/\
    eqmod L0x203f07ec (poly X [r5o216,r6o216,r7o216,r8o216]) [Q,X-K**281]/\
    eqmod L0x203f07f0 (poly X [r5o216,r6o216,r7o216,r8o216]) [Q,X-K**153]/\
    eqmod L0x203f07f4 (poly X [r5o216,r6o216,r7o216,r8o216]) [Q,X-K**409]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]/\
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]/\
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]/\
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]/\
    [L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8134; Value = 0x001f0084; PC = 0x58b8 *)
mov r12 L0x8134;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8138; Value = 0x0030ef86; PC = 0x58bc *)
mov lr L0x8138;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8130; Value = 0xffcfd2ae; PC = 0x58c0 *)
mov r11 L0x8130;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f07f8; Value = 0xffd8648c; PC = 0x58c4 *)
mov r5 L0x203f07f8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f07fc; Value = 0x00277ba9; PC = 0x58c8 *)
mov r6 L0x203f07fc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0800; Value = 0xffa3366f; PC = 0x58cc *)
mov r7 L0x203f0800;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0804; Value = 0xffb2aaff; PC = 0x58d0 *)
mov r8 L0x203f0804;

ghost r5o218@int32, r6o218@int32, r7o218@int32, r8o218@int32:
      r5o218 = r5 /\ r6o218 = r6 /\ r7o218 = r7 /\ r8o218 = r8
   && r5o218 = r5 /\ r6o218 = r6 /\ r7o218 = r7 /\ r8o218 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o218,r8o218]*[K**178,K**178])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o218,r8o218]*[K**178,K**178])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o219@int32, r8o219@int32:
      r6o219 = r6 /\ r8o219 = r8
   && r6o219 = r6 /\ r8o219 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o219,r8o219]*[K** 89,K**217])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o219,r8o219]*[K** 89,K**217])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f07fc; PC = 0x591c *)
mov L0x203f07fc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0800; PC = 0x5920 *)
mov L0x203f0800 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0804; PC = 0x5924 *)
mov L0x203f0804 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f07f8; PC = 0x5928 *)
mov L0x203f07f8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 77 ****************)

cut eqmod L0x203f07f8 (poly X [r5o218,r6o218,r7o218,r8o218]) [Q,X-K** 89]/\
    eqmod L0x203f07fc (poly X [r5o218,r6o218,r7o218,r8o218]) [Q,X-K**345]/\
    eqmod L0x203f0800 (poly X [r5o218,r6o218,r7o218,r8o218]) [Q,X-K**217]/\
    eqmod L0x203f0804 (poly X [r5o218,r6o218,r7o218,r8o218]) [Q,X-K**473]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]/\
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]/\
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]/\
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]/\
    [L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8140; Value = 0xffc9b97d; PC = 0x58b8 *)
mov r12 L0x8140;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8144; Value = 0xfff7fcd6; PC = 0x58bc *)
mov lr L0x8144;
(* ldr.w	r11, [r1], #12                            #! EA = L0x813c; Value = 0xffc890e0; PC = 0x58c0 *)
mov r11 L0x813c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0808; Value = 0x000383f5; PC = 0x58c4 *)
mov r5 L0x203f0808;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f080c; Value = 0x00542947; PC = 0x58c8 *)
mov r6 L0x203f080c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0810; Value = 0xffefccd9; PC = 0x58cc *)
mov r7 L0x203f0810;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0814; Value = 0x00284a3d; PC = 0x58d0 *)
mov r8 L0x203f0814;

ghost r5o220@int32, r6o220@int32, r7o220@int32, r8o220@int32:
      r5o220 = r5 /\ r6o220 = r6 /\ r7o220 = r7 /\ r8o220 = r8
   && r5o220 = r5 /\ r6o220 = r6 /\ r7o220 = r7 /\ r8o220 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o220,r8o220]*[K**114,K**114])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o220,r8o220]*[K**114,K**114])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o221@int32, r8o221@int32:
      r6o221 = r6 /\ r8o221 = r8
   && r6o221 = r6 /\ r8o221 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o221,r8o221]*[K** 57,K**185])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o221,r8o221]*[K** 57,K**185])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f080c; PC = 0x591c *)
mov L0x203f080c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0810; PC = 0x5920 *)
mov L0x203f0810 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0814; PC = 0x5924 *)
mov L0x203f0814 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0808; PC = 0x5928 *)
mov L0x203f0808 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 78 ****************)

cut eqmod L0x203f0808 (poly X [r5o220,r6o220,r7o220,r8o220]) [Q,X-K** 57]/\
    eqmod L0x203f080c (poly X [r5o220,r6o220,r7o220,r8o220]) [Q,X-K**313]/\
    eqmod L0x203f0810 (poly X [r5o220,r6o220,r7o220,r8o220]) [Q,X-K**185]/\
    eqmod L0x203f0814 (poly X [r5o220,r6o220,r7o220,r8o220]) [Q,X-K**441]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]/\
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]/\
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]/\
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]/\
    [L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x814c; Value = 0xfff44592; PC = 0x58b8 *)
mov r12 L0x814c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8150; Value = 0xffc921c2; PC = 0x58bc *)
mov lr L0x8150;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8148; Value = 0x0001efca; PC = 0x58c0 *)
mov r11 L0x8148;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0818; Value = 0xffb1fe71; PC = 0x58c4 *)
mov r5 L0x203f0818;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f081c; Value = 0x0035da85; PC = 0x58c8 *)
mov r6 L0x203f081c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0820; Value = 0xfffa0c39; PC = 0x58cc *)
mov r7 L0x203f0820;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0824; Value = 0xfffccfc3; PC = 0x58d0 *)
mov r8 L0x203f0824;

ghost r5o222@int32, r6o222@int32, r7o222@int32, r8o222@int32:
      r5o222 = r5 /\ r6o222 = r6 /\ r7o222 = r7 /\ r8o222 = r8
   && r5o222 = r5 /\ r6o222 = r6 /\ r7o222 = r7 /\ r8o222 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o222,r8o222]*[K**242,K**242])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o222,r8o222]*[K**242,K**242])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o223@int32, r8o223@int32:
      r6o223 = r6 /\ r8o223 = r8
   && r6o223 = r6 /\ r8o223 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o223,r8o223]*[K**121,K**249])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o223,r8o223]*[K**121,K**249])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f081c; PC = 0x591c *)
mov L0x203f081c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0820; PC = 0x5920 *)
mov L0x203f0820 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0824; PC = 0x5924 *)
mov L0x203f0824 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0818; PC = 0x5928 *)
mov L0x203f0818 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 79 ****************)

cut eqmod L0x203f0818 (poly X [r5o222,r6o222,r7o222,r8o222]) [Q,X-K**121]/\
    eqmod L0x203f081c (poly X [r5o222,r6o222,r7o222,r8o222]) [Q,X-K**377]/\
    eqmod L0x203f0820 (poly X [r5o222,r6o222,r7o222,r8o222]) [Q,X-K**249]/\
    eqmod L0x203f0824 (poly X [r5o222,r6o222,r7o222,r8o222]) [Q,X-K**505]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]/\
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]/\
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]/\
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]/\
    [L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [36,37,38,39]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8158; Value = 0x00053919; PC = 0x58b8 *)
mov r12 L0x8158;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x815c; Value = 0x0004610c; PC = 0x58bc *)
mov lr L0x815c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8154; Value = 0x003410f2; PC = 0x58c0 *)
mov r11 L0x8154;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0828; Value = 0x00395955; PC = 0x58c4 *)
mov r5 L0x203f0828;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f082c; Value = 0x00006348; PC = 0x58c8 *)
mov r6 L0x203f082c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0830; Value = 0xffb46b80; PC = 0x58cc *)
mov r7 L0x203f0830;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0834; Value = 0xffec13fc; PC = 0x58d0 *)
mov r8 L0x203f0834;

ghost r5o224@int32, r6o224@int32, r7o224@int32, r8o224@int32:
      r5o224 = r5 /\ r6o224 = r6 /\ r7o224 = r7 /\ r8o224 = r8
   && r5o224 = r5 /\ r6o224 = r6 /\ r7o224 = r7 /\ r8o224 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o224,r8o224]*[K** 10,K** 10])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o224,r8o224]*[K** 10,K** 10])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o225@int32, r8o225@int32:
      r6o225 = r6 /\ r8o225 = r8
   && r6o225 = r6 /\ r8o225 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o225,r8o225]*[K**  5,K**133])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o225,r8o225]*[K**  5,K**133])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f082c; PC = 0x591c *)
mov L0x203f082c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0830; PC = 0x5920 *)
mov L0x203f0830 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0834; PC = 0x5924 *)
mov L0x203f0834 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0828; PC = 0x5928 *)
mov L0x203f0828 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 80 ****************)

cut eqmod L0x203f0828 (poly X [r5o224,r6o224,r7o224,r8o224]) [Q,X-K**  5]/\
    eqmod L0x203f082c (poly X [r5o224,r6o224,r7o224,r8o224]) [Q,X-K**261]/\
    eqmod L0x203f0830 (poly X [r5o224,r6o224,r7o224,r8o224]) [Q,X-K**133]/\
    eqmod L0x203f0834 (poly X [r5o224,r6o224,r7o224,r8o224]) [Q,X-K**389]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]/\
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]/\
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]/\
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]/\
    [L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8164; Value = 0xffdacd41; PC = 0x58b8 *)
mov r12 L0x8164;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8168; Value = 0x003eb01b; PC = 0x58bc *)
mov lr L0x8168;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8160; Value = 0xfff0fe85; PC = 0x58c0 *)
mov r11 L0x8160;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0838; Value = 0xfff9ff3b; PC = 0x58c4 *)
mov r5 L0x203f0838;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f083c; Value = 0xffdf2ea0; PC = 0x58c8 *)
mov r6 L0x203f083c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0840; Value = 0x0031e4f0; PC = 0x58cc *)
mov r7 L0x203f0840;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0844; Value = 0xfff5669a; PC = 0x58d0 *)
mov r8 L0x203f0844;

ghost r5o226@int32, r6o226@int32, r7o226@int32, r8o226@int32:
      r5o226 = r5 /\ r6o226 = r6 /\ r7o226 = r7 /\ r8o226 = r8
   && r5o226 = r5 /\ r6o226 = r6 /\ r7o226 = r7 /\ r8o226 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o226,r8o226]*[K**138,K**138])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o226,r8o226]*[K**138,K**138])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o227@int32, r8o227@int32:
      r6o227 = r6 /\ r8o227 = r8
   && r6o227 = r6 /\ r8o227 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o227,r8o227]*[K** 69,K**197])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o227,r8o227]*[K** 69,K**197])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f083c; PC = 0x591c *)
mov L0x203f083c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0840; PC = 0x5920 *)
mov L0x203f0840 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0844; PC = 0x5924 *)
mov L0x203f0844 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0838; PC = 0x5928 *)
mov L0x203f0838 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 81 ****************)

cut eqmod L0x203f0838 (poly X [r5o226,r6o226,r7o226,r8o226]) [Q,X-K** 69]/\
    eqmod L0x203f083c (poly X [r5o226,r6o226,r7o226,r8o226]) [Q,X-K**325]/\
    eqmod L0x203f0840 (poly X [r5o226,r6o226,r7o226,r8o226]) [Q,X-K**197]/\
    eqmod L0x203f0844 (poly X [r5o226,r6o226,r7o226,r8o226]) [Q,X-K**453]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]/\
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]/\
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]/\
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]/\
    [L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8170; Value = 0x003472e7; PC = 0x58b8 *)
mov r12 L0x8170;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8174; Value = 0xffcd003b; PC = 0x58bc *)
mov lr L0x8174;
(* ldr.w	r11, [r1], #12                            #! EA = L0x816c; Value = 0x0020c638; PC = 0x58c0 *)
mov r11 L0x816c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0848; Value = 0xff8c9f1b; PC = 0x58c4 *)
mov r5 L0x203f0848;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f084c; Value = 0x0075856b; PC = 0x58c8 *)
mov r6 L0x203f084c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0850; Value = 0x0022c963; PC = 0x58cc *)
mov r7 L0x203f0850;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0854; Value = 0x0001126f; PC = 0x58d0 *)
mov r8 L0x203f0854;

ghost r5o228@int32, r6o228@int32, r7o228@int32, r8o228@int32:
      r5o228 = r5 /\ r6o228 = r6 /\ r7o228 = r7 /\ r8o228 = r8
   && r5o228 = r5 /\ r6o228 = r6 /\ r7o228 = r7 /\ r8o228 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o228,r8o228]*[K** 74,K** 74])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o228,r8o228]*[K** 74,K** 74])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o229@int32, r8o229@int32:
      r6o229 = r6 /\ r8o229 = r8
   && r6o229 = r6 /\ r8o229 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o229,r8o229]*[K** 37,K**165])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o229,r8o229]*[K** 37,K**165])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f084c; PC = 0x591c *)
mov L0x203f084c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0850; PC = 0x5920 *)
mov L0x203f0850 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0854; PC = 0x5924 *)
mov L0x203f0854 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0848; PC = 0x5928 *)
mov L0x203f0848 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 82 ****************)

cut eqmod L0x203f0848 (poly X [r5o228,r6o228,r7o228,r8o228]) [Q,X-K** 37]/\
    eqmod L0x203f084c (poly X [r5o228,r6o228,r7o228,r8o228]) [Q,X-K**293]/\
    eqmod L0x203f0850 (poly X [r5o228,r6o228,r7o228,r8o228]) [Q,X-K**165]/\
    eqmod L0x203f0854 (poly X [r5o228,r6o228,r7o228,r8o228]) [Q,X-K**421]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]/\
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]/\
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]/\
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]/\
    [L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x817c; Value = 0x001a7cc7; PC = 0x58b8 *)
mov r12 L0x817c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8180; Value = 0x00031924; PC = 0x58bc *)
mov lr L0x8180;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8178; Value = 0x00296e9f; PC = 0x58c0 *)
mov r11 L0x8178;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0858; Value = 0xffc7e921; PC = 0x58c4 *)
mov r5 L0x203f0858;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f085c; Value = 0xfffdf125; PC = 0x58c8 *)
mov r6 L0x203f085c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0860; Value = 0xffd1342d; PC = 0x58cc *)
mov r7 L0x203f0860;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0864; Value = 0xffb96a0b; PC = 0x58d0 *)
mov r8 L0x203f0864;

ghost r5o230@int32, r6o230@int32, r7o230@int32, r8o230@int32:
      r5o230 = r5 /\ r6o230 = r6 /\ r7o230 = r7 /\ r8o230 = r8
   && r5o230 = r5 /\ r6o230 = r6 /\ r7o230 = r7 /\ r8o230 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o230,r8o230]*[K**202,K**202])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o230,r8o230]*[K**202,K**202])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o231@int32, r8o231@int32:
      r6o231 = r6 /\ r8o231 = r8
   && r6o231 = r6 /\ r8o231 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o231,r8o231]*[K**101,K**229])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o231,r8o231]*[K**101,K**229])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f085c; PC = 0x591c *)
mov L0x203f085c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0860; PC = 0x5920 *)
mov L0x203f0860 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0864; PC = 0x5924 *)
mov L0x203f0864 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0858; PC = 0x5928 *)
mov L0x203f0858 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 83 ****************)

cut eqmod L0x203f0858 (poly X [r5o230,r6o230,r7o230,r8o230]) [Q,X-K**101]/\
    eqmod L0x203f085c (poly X [r5o230,r6o230,r7o230,r8o230]) [Q,X-K**357]/\
    eqmod L0x203f0860 (poly X [r5o230,r6o230,r7o230,r8o230]) [Q,X-K**229]/\
    eqmod L0x203f0864 (poly X [r5o230,r6o230,r7o230,r8o230]) [Q,X-K**485]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]/\
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]/\
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]/\
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]/\
    [L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8188; Value = 0x002b5ee5; PC = 0x58b8 *)
mov r12 L0x8188;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x818c; Value = 0x00291199; PC = 0x58bc *)
mov lr L0x818c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8184; Value = 0xffd2b7a3; PC = 0x58c0 *)
mov r11 L0x8184;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0868; Value = 0xfff58a2f; PC = 0x58c4 *)
mov r5 L0x203f0868;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f086c; Value = 0xff5c2e34; PC = 0x58c8 *)
mov r6 L0x203f086c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0870; Value = 0x006fd103; PC = 0x58cc *)
mov r7 L0x203f0870;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0874; Value = 0xff798b83; PC = 0x58d0 *)
mov r8 L0x203f0874;

ghost r5o232@int32, r6o232@int32, r7o232@int32, r8o232@int32:
      r5o232 = r5 /\ r6o232 = r6 /\ r7o232 = r7 /\ r8o232 = r8
   && r5o232 = r5 /\ r6o232 = r6 /\ r7o232 = r7 /\ r8o232 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o232,r8o232]*[K** 42,K** 42])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o232,r8o232]*[K** 42,K** 42])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o233@int32, r8o233@int32:
      r6o233 = r6 /\ r8o233 = r8
   && r6o233 = r6 /\ r8o233 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o233,r8o233]*[K** 21,K**149])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o233,r8o233]*[K** 21,K**149])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f086c; PC = 0x591c *)
mov L0x203f086c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0870; PC = 0x5920 *)
mov L0x203f0870 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0874; PC = 0x5924 *)
mov L0x203f0874 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0868; PC = 0x5928 *)
mov L0x203f0868 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 84 ****************)

cut eqmod L0x203f0868 (poly X [r5o232,r6o232,r7o232,r8o232]) [Q,X-K** 21]/\
    eqmod L0x203f086c (poly X [r5o232,r6o232,r7o232,r8o232]) [Q,X-K**277]/\
    eqmod L0x203f0870 (poly X [r5o232,r6o232,r7o232,r8o232]) [Q,X-K**149]/\
    eqmod L0x203f0874 (poly X [r5o232,r6o232,r7o232,r8o232]) [Q,X-K**405]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]/\
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]/\
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]/\
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]/\
    [L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8194; Value = 0xffd87a3a; PC = 0x58b8 *)
mov r12 L0x8194;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8198; Value = 0x00134d71; PC = 0x58bc *)
mov lr L0x8198;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8190; Value = 0xffc7a44b; PC = 0x58c0 *)
mov r11 L0x8190;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0878; Value = 0x001e7677; PC = 0x58c4 *)
mov r5 L0x203f0878;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f087c; Value = 0xffc81b48; PC = 0x58c8 *)
mov r6 L0x203f087c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0880; Value = 0x008f279b; PC = 0x58cc *)
mov r7 L0x203f0880;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0884; Value = 0xff770d7f; PC = 0x58d0 *)
mov r8 L0x203f0884;

ghost r5o234@int32, r6o234@int32, r7o234@int32, r8o234@int32:
      r5o234 = r5 /\ r6o234 = r6 /\ r7o234 = r7 /\ r8o234 = r8
   && r5o234 = r5 /\ r6o234 = r6 /\ r7o234 = r7 /\ r8o234 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o234,r8o234]*[K**170,K**170])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o234,r8o234]*[K**170,K**170])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o235@int32, r8o235@int32:
      r6o235 = r6 /\ r8o235 = r8
   && r6o235 = r6 /\ r8o235 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o235,r8o235]*[K** 85,K**213])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o235,r8o235]*[K** 85,K**213])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f087c; PC = 0x591c *)
mov L0x203f087c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0880; PC = 0x5920 *)
mov L0x203f0880 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0884; PC = 0x5924 *)
mov L0x203f0884 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0878; PC = 0x5928 *)
mov L0x203f0878 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 85 ****************)

cut eqmod L0x203f0878 (poly X [r5o234,r6o234,r7o234,r8o234]) [Q,X-K** 85]/\
    eqmod L0x203f087c (poly X [r5o234,r6o234,r7o234,r8o234]) [Q,X-K**341]/\
    eqmod L0x203f0880 (poly X [r5o234,r6o234,r7o234,r8o234]) [Q,X-K**213]/\
    eqmod L0x203f0884 (poly X [r5o234,r6o234,r7o234,r8o234]) [Q,X-K**469]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]/\
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]/\
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]/\
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]/\
    [L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81a0; Value = 0x003de11c; PC = 0x58b8 *)
mov r12 L0x81a0;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81a4; Value = 0x00130984; PC = 0x58bc *)
mov lr L0x81a4;
(* ldr.w	r11, [r1], #12                            #! EA = L0x819c; Value = 0xfff9ba6d; PC = 0x58c0 *)
mov r11 L0x819c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0888; Value = 0xffe3a90e; PC = 0x58c4 *)
mov r5 L0x203f0888;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f088c; Value = 0xffbba4e7; PC = 0x58c8 *)
mov r6 L0x203f088c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0890; Value = 0x00222817; PC = 0x58cc *)
mov r7 L0x203f0890;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0894; Value = 0xff88bbd7; PC = 0x58d0 *)
mov r8 L0x203f0894;

ghost r5o236@int32, r6o236@int32, r7o236@int32, r8o236@int32:
      r5o236 = r5 /\ r6o236 = r6 /\ r7o236 = r7 /\ r8o236 = r8
   && r5o236 = r5 /\ r6o236 = r6 /\ r7o236 = r7 /\ r8o236 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o236,r8o236]*[K**106,K**106])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o236,r8o236]*[K**106,K**106])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o237@int32, r8o237@int32:
      r6o237 = r6 /\ r8o237 = r8
   && r6o237 = r6 /\ r8o237 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o237,r8o237]*[K** 53,K**181])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o237,r8o237]*[K** 53,K**181])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f088c; PC = 0x591c *)
mov L0x203f088c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0890; PC = 0x5920 *)
mov L0x203f0890 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0894; PC = 0x5924 *)
mov L0x203f0894 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0888; PC = 0x5928 *)
mov L0x203f0888 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 86 ****************)

cut eqmod L0x203f0888 (poly X [r5o236,r6o236,r7o236,r8o236]) [Q,X-K** 53]/\
    eqmod L0x203f088c (poly X [r5o236,r6o236,r7o236,r8o236]) [Q,X-K**309]/\
    eqmod L0x203f0890 (poly X [r5o236,r6o236,r7o236,r8o236]) [Q,X-K**181]/\
    eqmod L0x203f0894 (poly X [r5o236,r6o236,r7o236,r8o236]) [Q,X-K**437]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]/\
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]/\
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]/\
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]/\
    [L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81ac; Value = 0x0025f051; PC = 0x58b8 *)
mov r12 L0x81ac;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81b0; Value = 0x00185a46; PC = 0x58bc *)
mov lr L0x81b0;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81a8; Value = 0xffda3409; PC = 0x58c0 *)
mov r11 L0x81a8;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0898; Value = 0xff8b6540; PC = 0x58c4 *)
mov r5 L0x203f0898;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f089c; Value = 0x0014405d; PC = 0x58c8 *)
mov r6 L0x203f089c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f08a0; Value = 0x0062e143; PC = 0x58cc *)
mov r7 L0x203f08a0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f08a4; Value = 0xffd4ad47; PC = 0x58d0 *)
mov r8 L0x203f08a4;

ghost r5o238@int32, r6o238@int32, r7o238@int32, r8o238@int32:
      r5o238 = r5 /\ r6o238 = r6 /\ r7o238 = r7 /\ r8o238 = r8
   && r5o238 = r5 /\ r6o238 = r6 /\ r7o238 = r7 /\ r8o238 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o238,r8o238]*[K**234,K**234])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o238,r8o238]*[K**234,K**234])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o239@int32, r8o239@int32:
      r6o239 = r6 /\ r8o239 = r8
   && r6o239 = r6 /\ r8o239 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o239,r8o239]*[K**117,K**245])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o239,r8o239]*[K**117,K**245])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f089c; PC = 0x591c *)
mov L0x203f089c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f08a0; PC = 0x5920 *)
mov L0x203f08a0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f08a4; PC = 0x5924 *)
mov L0x203f08a4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0898; PC = 0x5928 *)
mov L0x203f0898 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 87 ****************)

cut eqmod L0x203f0898 (poly X [r5o238,r6o238,r7o238,r8o238]) [Q,X-K**117]/\
    eqmod L0x203f089c (poly X [r5o238,r6o238,r7o238,r8o238]) [Q,X-K**373]/\
    eqmod L0x203f08a0 (poly X [r5o238,r6o238,r7o238,r8o238]) [Q,X-K**245]/\
    eqmod L0x203f08a4 (poly X [r5o238,r6o238,r7o238,r8o238]) [Q,X-K**501]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]/\
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]/\
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]/\
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]/\
    [L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [40,41,42,43]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81b8; Value = 0xffc68518; PC = 0x58b8 *)
mov r12 L0x81b8;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81bc; Value = 0x001314be; PC = 0x58bc *)
mov lr L0x81bc;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81b4; Value = 0xfff5c282; PC = 0x58c0 *)
mov r11 L0x81b4;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08a8; Value = 0x006cfb13; PC = 0x58c4 *)
mov r5 L0x203f08a8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f08ac; Value = 0xff96a82b; PC = 0x58c8 *)
mov r6 L0x203f08ac;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f08b0; Value = 0x002dffbb; PC = 0x58cc *)
mov r7 L0x203f08b0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f08b4; Value = 0xffc295fd; PC = 0x58d0 *)
mov r8 L0x203f08b4;

ghost r5o240@int32, r6o240@int32, r7o240@int32, r8o240@int32:
      r5o240 = r5 /\ r6o240 = r6 /\ r7o240 = r7 /\ r8o240 = r8
   && r5o240 = r5 /\ r6o240 = r6 /\ r7o240 = r7 /\ r8o240 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o240,r8o240]*[K** 26,K** 26])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o240,r8o240]*[K** 26,K** 26])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o241@int32, r8o241@int32:
      r6o241 = r6 /\ r8o241 = r8
   && r6o241 = r6 /\ r8o241 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o241,r8o241]*[K** 13,K**141])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o241,r8o241]*[K** 13,K**141])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f08ac; PC = 0x591c *)
mov L0x203f08ac r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f08b0; PC = 0x5920 *)
mov L0x203f08b0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f08b4; PC = 0x5924 *)
mov L0x203f08b4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f08a8; PC = 0x5928 *)
mov L0x203f08a8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 88 ****************)

cut eqmod L0x203f08a8 (poly X [r5o240,r6o240,r7o240,r8o240]) [Q,X-K** 13]/\
    eqmod L0x203f08ac (poly X [r5o240,r6o240,r7o240,r8o240]) [Q,X-K**269]/\
    eqmod L0x203f08b0 (poly X [r5o240,r6o240,r7o240,r8o240]) [Q,X-K**141]/\
    eqmod L0x203f08b4 (poly X [r5o240,r6o240,r7o240,r8o240]) [Q,X-K**397]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]/\
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]/\
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]/\
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]/\
    [L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81c4; Value = 0x00283891; PC = 0x58b8 *)
mov r12 L0x81c4;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81c8; Value = 0xffc9db90; PC = 0x58bc *)
mov lr L0x81c8;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81c0; Value = 0xffed4113; PC = 0x58c0 *)
mov r11 L0x81c0;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08b8; Value = 0x0051e333; PC = 0x58c4 *)
mov r5 L0x203f08b8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f08bc; Value = 0xffb4d487; PC = 0x58c8 *)
mov r6 L0x203f08bc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f08c0; Value = 0xffe90dd9; PC = 0x58cc *)
mov r7 L0x203f08c0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f08c4; Value = 0x000e45ef; PC = 0x58d0 *)
mov r8 L0x203f08c4;

ghost r5o242@int32, r6o242@int32, r7o242@int32, r8o242@int32:
      r5o242 = r5 /\ r6o242 = r6 /\ r7o242 = r7 /\ r8o242 = r8
   && r5o242 = r5 /\ r6o242 = r6 /\ r7o242 = r7 /\ r8o242 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o242,r8o242]*[K**154,K**154])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o242,r8o242]*[K**154,K**154])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o243@int32, r8o243@int32:
      r6o243 = r6 /\ r8o243 = r8
   && r6o243 = r6 /\ r8o243 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o243,r8o243]*[K** 77,K**205])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o243,r8o243]*[K** 77,K**205])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f08bc; PC = 0x591c *)
mov L0x203f08bc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f08c0; PC = 0x5920 *)
mov L0x203f08c0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f08c4; PC = 0x5924 *)
mov L0x203f08c4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f08b8; PC = 0x5928 *)
mov L0x203f08b8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 89 ****************)

cut eqmod L0x203f08b8 (poly X [r5o242,r6o242,r7o242,r8o242]) [Q,X-K** 77]/\
    eqmod L0x203f08bc (poly X [r5o242,r6o242,r7o242,r8o242]) [Q,X-K**333]/\
    eqmod L0x203f08c0 (poly X [r5o242,r6o242,r7o242,r8o242]) [Q,X-K**205]/\
    eqmod L0x203f08c4 (poly X [r5o242,r6o242,r7o242,r8o242]) [Q,X-K**461]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]/\
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]/\
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]/\
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]/\
    [L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81d0; Value = 0xffd25089; PC = 0x58b8 *)
mov r12 L0x81d0;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81d4; Value = 0x001c853f; PC = 0x58bc *)
mov lr L0x81d4;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81cc; Value = 0xffffa63b; PC = 0x58c0 *)
mov r11 L0x81cc;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08c8; Value = 0x00807af6; PC = 0x58c4 *)
mov r5 L0x203f08c8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f08cc; Value = 0xff71ae7b; PC = 0x58c8 *)
mov r6 L0x203f08cc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f08d0; Value = 0x00355da0; PC = 0x58cc *)
mov r7 L0x203f08d0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f08d4; Value = 0xffed6183; PC = 0x58d0 *)
mov r8 L0x203f08d4;

ghost r5o244@int32, r6o244@int32, r7o244@int32, r8o244@int32:
      r5o244 = r5 /\ r6o244 = r6 /\ r7o244 = r7 /\ r8o244 = r8
   && r5o244 = r5 /\ r6o244 = r6 /\ r7o244 = r7 /\ r8o244 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o244,r8o244]*[K** 90,K** 90])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o244,r8o244]*[K** 90,K** 90])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o245@int32, r8o245@int32:
      r6o245 = r6 /\ r8o245 = r8
   && r6o245 = r6 /\ r8o245 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o245,r8o245]*[K** 45,K**173])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o245,r8o245]*[K** 45,K**173])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f08cc; PC = 0x591c *)
mov L0x203f08cc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f08d0; PC = 0x5920 *)
mov L0x203f08d0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f08d4; PC = 0x5924 *)
mov L0x203f08d4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f08c8; PC = 0x5928 *)
mov L0x203f08c8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 90 ****************)

cut eqmod L0x203f08c8 (poly X [r5o244,r6o244,r7o244,r8o244]) [Q,X-K** 45]/\
    eqmod L0x203f08cc (poly X [r5o244,r6o244,r7o244,r8o244]) [Q,X-K**301]/\
    eqmod L0x203f08d0 (poly X [r5o244,r6o244,r7o244,r8o244]) [Q,X-K**173]/\
    eqmod L0x203f08d4 (poly X [r5o244,r6o244,r7o244,r8o244]) [Q,X-K**429]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]/\
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]/\
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]/\
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]/\
    [L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81dc; Value = 0x001d0b4b; PC = 0x58b8 *)
mov r12 L0x81dc;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81e0; Value = 0xffeff6a6; PC = 0x58bc *)
mov lr L0x81e0;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81d8; Value = 0xffec09f7; PC = 0x58c0 *)
mov r11 L0x81d8;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08d8; Value = 0x0010197c; PC = 0x58c4 *)
mov r5 L0x203f08d8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f08dc; Value = 0xff54dfdf; PC = 0x58c8 *)
mov r6 L0x203f08dc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f08e0; Value = 0x00968aa0; PC = 0x58cc *)
mov r7 L0x203f08e0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f08e4; Value = 0xffc17a55; PC = 0x58d0 *)
mov r8 L0x203f08e4;

ghost r5o246@int32, r6o246@int32, r7o246@int32, r8o246@int32:
      r5o246 = r5 /\ r6o246 = r6 /\ r7o246 = r7 /\ r8o246 = r8
   && r5o246 = r5 /\ r6o246 = r6 /\ r7o246 = r7 /\ r8o246 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o246,r8o246]*[K**218,K**218])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o246,r8o246]*[K**218,K**218])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o247@int32, r8o247@int32:
      r6o247 = r6 /\ r8o247 = r8
   && r6o247 = r6 /\ r8o247 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o247,r8o247]*[K**109,K**237])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o247,r8o247]*[K**109,K**237])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f08dc; PC = 0x591c *)
mov L0x203f08dc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f08e0; PC = 0x5920 *)
mov L0x203f08e0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f08e4; PC = 0x5924 *)
mov L0x203f08e4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f08d8; PC = 0x5928 *)
mov L0x203f08d8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 91 ****************)

cut eqmod L0x203f08d8 (poly X [r5o246,r6o246,r7o246,r8o246]) [Q,X-K**109]/\
    eqmod L0x203f08dc (poly X [r5o246,r6o246,r7o246,r8o246]) [Q,X-K**365]/\
    eqmod L0x203f08e0 (poly X [r5o246,r6o246,r7o246,r8o246]) [Q,X-K**237]/\
    eqmod L0x203f08e4 (poly X [r5o246,r6o246,r7o246,r8o246]) [Q,X-K**493]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]/\
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]/\
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]/\
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]/\
    [L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81e8; Value = 0xffeba8be; PC = 0x58b8 *)
mov r12 L0x81e8;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81ec; Value = 0x0012e11b; PC = 0x58bc *)
mov lr L0x81ec;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81e4; Value = 0xfffa2bdd; PC = 0x58c0 *)
mov r11 L0x81e4;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08e8; Value = 0x000b7a2d; PC = 0x58c4 *)
mov r5 L0x203f08e8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f08ec; Value = 0xff9999f1; PC = 0x58c8 *)
mov r6 L0x203f08ec;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f08f0; Value = 0x00cf20be; PC = 0x58cc *)
mov r7 L0x203f08f0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f08f4; Value = 0xff9a944d; PC = 0x58d0 *)
mov r8 L0x203f08f4;

ghost r5o248@int32, r6o248@int32, r7o248@int32, r8o248@int32:
      r5o248 = r5 /\ r6o248 = r6 /\ r7o248 = r7 /\ r8o248 = r8
   && r5o248 = r5 /\ r6o248 = r6 /\ r7o248 = r7 /\ r8o248 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o248,r8o248]*[K** 58,K** 58])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o248,r8o248]*[K** 58,K** 58])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o249@int32, r8o249@int32:
      r6o249 = r6 /\ r8o249 = r8
   && r6o249 = r6 /\ r8o249 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o249,r8o249]*[K** 29,K**157])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o249,r8o249]*[K** 29,K**157])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f08ec; PC = 0x591c *)
mov L0x203f08ec r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f08f0; PC = 0x5920 *)
mov L0x203f08f0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f08f4; PC = 0x5924 *)
mov L0x203f08f4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f08e8; PC = 0x5928 *)
mov L0x203f08e8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 92 ****************)

cut eqmod L0x203f08e8 (poly X [r5o248,r6o248,r7o248,r8o248]) [Q,X-K** 29]/\
    eqmod L0x203f08ec (poly X [r5o248,r6o248,r7o248,r8o248]) [Q,X-K**285]/\
    eqmod L0x203f08f0 (poly X [r5o248,r6o248,r7o248,r8o248]) [Q,X-K**157]/\
    eqmod L0x203f08f4 (poly X [r5o248,r6o248,r7o248,r8o248]) [Q,X-K**413]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]/\
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]/\
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]/\
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]/\
    [L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x81f4; Value = 0xffcd5e3e; PC = 0x58b8 *)
mov r12 L0x81f4;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x81f8; Value = 0xffea2d2f; PC = 0x58bc *)
mov lr L0x81f8;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81f0; Value = 0x001495d4; PC = 0x58c0 *)
mov r11 L0x81f0;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f08f8; Value = 0x003665af; PC = 0x58c4 *)
mov r5 L0x203f08f8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f08fc; Value = 0xffa9d9ab; PC = 0x58c8 *)
mov r6 L0x203f08fc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0900; Value = 0x00c26208; PC = 0x58cc *)
mov r7 L0x203f0900;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0904; Value = 0xffdcb7f7; PC = 0x58d0 *)
mov r8 L0x203f0904;

ghost r5o250@int32, r6o250@int32, r7o250@int32, r8o250@int32:
      r5o250 = r5 /\ r6o250 = r6 /\ r7o250 = r7 /\ r8o250 = r8
   && r5o250 = r5 /\ r6o250 = r6 /\ r7o250 = r7 /\ r8o250 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o250,r8o250]*[K**186,K**186])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o250,r8o250]*[K**186,K**186])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o251@int32, r8o251@int32:
      r6o251 = r6 /\ r8o251 = r8
   && r6o251 = r6 /\ r8o251 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o251,r8o251]*[K** 93,K**221])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o251,r8o251]*[K** 93,K**221])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f08fc; PC = 0x591c *)
mov L0x203f08fc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0900; PC = 0x5920 *)
mov L0x203f0900 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0904; PC = 0x5924 *)
mov L0x203f0904 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f08f8; PC = 0x5928 *)
mov L0x203f08f8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 93 ****************)

cut eqmod L0x203f08f8 (poly X [r5o250,r6o250,r7o250,r8o250]) [Q,X-K** 93]/\
    eqmod L0x203f08fc (poly X [r5o250,r6o250,r7o250,r8o250]) [Q,X-K**349]/\
    eqmod L0x203f0900 (poly X [r5o250,r6o250,r7o250,r8o250]) [Q,X-K**221]/\
    eqmod L0x203f0904 (poly X [r5o250,r6o250,r7o250,r8o250]) [Q,X-K**477]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]/\
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]/\
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]/\
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]/\
    [L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8200; Value = 0xfff91de4; PC = 0x58b8 *)
mov r12 L0x8200;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8204; Value = 0x001406c7; PC = 0x58bc *)
mov lr L0x8204;
(* ldr.w	r11, [r1], #12                            #! EA = L0x81fc; Value = 0x001c4563; PC = 0x58c0 *)
mov r11 L0x81fc;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0908; Value = 0xffdd29d6; PC = 0x58c4 *)
mov r5 L0x203f0908;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f090c; Value = 0xffe521c1; PC = 0x58c8 *)
mov r6 L0x203f090c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0910; Value = 0x00dce622; PC = 0x58cc *)
mov r7 L0x203f0910;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0914; Value = 0xff74223b; PC = 0x58d0 *)
mov r8 L0x203f0914;

ghost r5o252@int32, r6o252@int32, r7o252@int32, r8o252@int32:
      r5o252 = r5 /\ r6o252 = r6 /\ r7o252 = r7 /\ r8o252 = r8
   && r5o252 = r5 /\ r6o252 = r6 /\ r7o252 = r7 /\ r8o252 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o252,r8o252]*[K**122,K**122])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o252,r8o252]*[K**122,K**122])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o253@int32, r8o253@int32:
      r6o253 = r6 /\ r8o253 = r8
   && r6o253 = r6 /\ r8o253 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o253,r8o253]*[K** 61,K**189])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o253,r8o253]*[K** 61,K**189])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f090c; PC = 0x591c *)
mov L0x203f090c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0910; PC = 0x5920 *)
mov L0x203f0910 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0914; PC = 0x5924 *)
mov L0x203f0914 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0908; PC = 0x5928 *)
mov L0x203f0908 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 94 ****************)

cut eqmod L0x203f0908 (poly X [r5o252,r6o252,r7o252,r8o252]) [Q,X-K** 61]/\
    eqmod L0x203f090c (poly X [r5o252,r6o252,r7o252,r8o252]) [Q,X-K**317]/\
    eqmod L0x203f0910 (poly X [r5o252,r6o252,r7o252,r8o252]) [Q,X-K**189]/\
    eqmod L0x203f0914 (poly X [r5o252,r6o252,r7o252,r8o252]) [Q,X-K**445]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]/\
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]/\
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]/\
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]/\
    [L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x820c; Value = 0x00327283; PC = 0x58b8 *)
mov r12 L0x820c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8210; Value = 0xffe20d6e; PC = 0x58bc *)
mov lr L0x8210;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8208; Value = 0xffea2c62; PC = 0x58c0 *)
mov r11 L0x8208;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0918; Value = 0xff7f30a6; PC = 0x58c4 *)
mov r5 L0x203f0918;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f091c; Value = 0xffe9d17f; PC = 0x58c8 *)
mov r6 L0x203f091c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0920; Value = 0x0071d51c; PC = 0x58cc *)
mov r7 L0x203f0920;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0924; Value = 0xffafb9cd; PC = 0x58d0 *)
mov r8 L0x203f0924;

ghost r5o254@int32, r6o254@int32, r7o254@int32, r8o254@int32:
      r5o254 = r5 /\ r6o254 = r6 /\ r7o254 = r7 /\ r8o254 = r8
   && r5o254 = r5 /\ r6o254 = r6 /\ r7o254 = r7 /\ r8o254 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8]
              ([r7o254,r8o254]*[K**250,K**250])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8]
             ([r7o254,r8o254]*[K**250,K**250])
              [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o255@int32, r8o255@int32:
      r6o255 = r6 /\ r8o255 = r8
   && r6o255 = r6 /\ r8o255 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8]
              ([r6o255,r8o255]*[K**125,K**253])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8]
             ([r6o255,r8o255]*[K**125,K**253])
              [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f091c; PC = 0x591c *)
mov L0x203f091c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0920; PC = 0x5920 *)
mov L0x203f0920 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0924; PC = 0x5924 *)
mov L0x203f0924 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0918; PC = 0x5928 *)
mov L0x203f0918 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 95 ****************)

cut eqmod L0x203f0918 (poly X [r5o254,r6o254,r7o254,r8o254]) [Q,X-K**125]/\
    eqmod L0x203f091c (poly X [r5o254,r6o254,r7o254,r8o254]) [Q,X-K**381]/\
    eqmod L0x203f0920 (poly X [r5o254,r6o254,r7o254,r8o254]) [Q,X-K**253]/\
    eqmod L0x203f0924 (poly X [r5o254,r6o254,r7o254,r8o254]) [Q,X-K**509]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]/\
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]/\
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]/\
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]/\
    [L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [44,45,46,47]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8218; Value = 0xffec7953; PC = 0x58b8 *)
mov r12 L0x8218;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x821c; Value = 0x001d4099; PC = 0x58bc *)
mov lr L0x821c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8214; Value = 0xffccfbe9; PC = 0x58c0 *)
mov r11 L0x8214;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0928; Value = 0xffbe27c5; PC = 0x58c4 *)
mov r5 L0x203f0928;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f092c; Value = 0x0074f453; PC = 0x58c8 *)
mov r6 L0x203f092c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0930; Value = 0xffac88e8; PC = 0x58cc *)
mov r7 L0x203f0930;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0934; Value = 0x004d1102; PC = 0x58d0 *)
mov r8 L0x203f0934;

ghost r5o256@int32, r6o256@int32, r7o256@int32, r8o256@int32:
      r5o256 = r5 /\ r6o256 = r6 /\ r7o256 = r7 /\ r8o256 = r8
   && r5o256 = r5 /\ r6o256 = r6 /\ r7o256 = r7 /\ r8o256 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o256,r8o256]*[K**  6,K**  6])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o256,r8o256]*[K**  6,K**  6]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o257@int32, r8o257@int32:
      r6o257 = r6 /\ r8o257 = r8 && r6o257 = r6 /\ r8o257 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o257,r8o257]*[K**  3,K**131])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o257,r8o257]*[K**  3,K**131]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f092c; PC = 0x591c *)
mov L0x203f092c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0930; PC = 0x5920 *)
mov L0x203f0930 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0934; PC = 0x5924 *)
mov L0x203f0934 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0928; PC = 0x5928 *)
mov L0x203f0928 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 96 ****************)

cut eqmod L0x203f0928 (poly X [r5o256,r6o256,r7o256,r8o256]) [Q,X-K**  3]/\
    eqmod L0x203f092c (poly X [r5o256,r6o256,r7o256,r8o256]) [Q,X-K**259]/\
    eqmod L0x203f0930 (poly X [r5o256,r6o256,r7o256,r8o256]) [Q,X-K**131]/\
    eqmod L0x203f0934 (poly X [r5o256,r6o256,r7o256,r8o256]) [Q,X-K**387]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]/\
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]/\
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]/\
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]/\
    [L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8224; Value = 0xffd92578; PC = 0x58b8 *)
mov r12 L0x8224;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8228; Value = 0xffeb05ad; PC = 0x58bc *)
mov lr L0x8228;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8220; Value = 0x00040af0; PC = 0x58c0 *)
mov r11 L0x8220;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0938; Value = 0xffe25fd7; PC = 0x58c4 *)
mov r5 L0x203f0938;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f093c; Value = 0x004adac5; PC = 0x58c8 *)
mov r6 L0x203f093c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0940; Value = 0xffc90608; PC = 0x58cc *)
mov r7 L0x203f0940;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0944; Value = 0x006755ac; PC = 0x58d0 *)
mov r8 L0x203f0944;

ghost r5o258@int32, r6o258@int32, r7o258@int32, r8o258@int32:
      r5o258 = r5 /\ r6o258 = r6 /\ r7o258 = r7 /\ r8o258 = r8
   && r5o258 = r5 /\ r6o258 = r6 /\ r7o258 = r7 /\ r8o258 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o258,r8o258]*[K**134,K**134])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o258,r8o258]*[K**134,K**134]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o259@int32, r8o259@int32:
      r6o259 = r6 /\ r8o259 = r8 && r6o259 = r6 /\ r8o259 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o259,r8o259]*[K** 67,K**195])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o259,r8o259]*[K** 67,K**195]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f093c; PC = 0x591c *)
mov L0x203f093c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0940; PC = 0x5920 *)
mov L0x203f0940 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0944; PC = 0x5924 *)
mov L0x203f0944 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0938; PC = 0x5928 *)
mov L0x203f0938 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 97 ****************)

cut eqmod L0x203f0938 (poly X [r5o258,r6o258,r7o258,r8o258]) [Q,X-K** 67]/\
    eqmod L0x203f093c (poly X [r5o258,r6o258,r7o258,r8o258]) [Q,X-K**323]/\
    eqmod L0x203f0940 (poly X [r5o258,r6o258,r7o258,r8o258]) [Q,X-K**195]/\
    eqmod L0x203f0944 (poly X [r5o258,r6o258,r7o258,r8o258]) [Q,X-K**451]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]/\
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]/\
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]/\
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]/\
    [L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8230; Value = 0x0016e405; PC = 0x58b8 *)
mov r12 L0x8230;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8234; Value = 0x000bdbe7; PC = 0x58bc *)
mov lr L0x8234;
(* ldr.w	r11, [r1], #12                            #! EA = L0x822c; Value = 0x0007c417; PC = 0x58c0 *)
mov r11 L0x822c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0948; Value = 0xffe052f3; PC = 0x58c4 *)
mov r5 L0x203f0948;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f094c; Value = 0xffc5f35e; PC = 0x58c8 *)
mov r6 L0x203f094c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0950; Value = 0xff5b2a56; PC = 0x58cc *)
mov r7 L0x203f0950;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0954; Value = 0xffc580a1; PC = 0x58d0 *)
mov r8 L0x203f0954;

ghost r5o260@int32, r6o260@int32, r7o260@int32, r8o260@int32:
      r5o260 = r5 /\ r6o260 = r6 /\ r7o260 = r7 /\ r8o260 = r8
   && r5o260 = r5 /\ r6o260 = r6 /\ r7o260 = r7 /\ r8o260 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o260,r8o260]*[K** 70,K** 70])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o260,r8o260]*[K** 70,K** 70]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o261@int32, r8o261@int32:
      r6o261 = r6 /\ r8o261 = r8 && r6o261 = r6 /\ r8o261 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o261,r8o261]*[K** 35,K**163])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o261,r8o261]*[K** 35,K**163]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f094c; PC = 0x591c *)
mov L0x203f094c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0950; PC = 0x5920 *)
mov L0x203f0950 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0954; PC = 0x5924 *)
mov L0x203f0954 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0948; PC = 0x5928 *)
mov L0x203f0948 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 98 ****************)

cut eqmod L0x203f0948 (poly X [r5o260,r6o260,r7o260,r8o260]) [Q,X-K** 35]/\
    eqmod L0x203f094c (poly X [r5o260,r6o260,r7o260,r8o260]) [Q,X-K**291]/\
    eqmod L0x203f0950 (poly X [r5o260,r6o260,r7o260,r8o260]) [Q,X-K**163]/\
    eqmod L0x203f0954 (poly X [r5o260,r6o260,r7o260,r8o260]) [Q,X-K**419]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]/\
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]/\
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]/\
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]/\
    [L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x823c; Value = 0x00221de8; PC = 0x58b8 *)
mov r12 L0x823c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8240; Value = 0x0033f8cf; PC = 0x58bc *)
mov lr L0x8240;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8238; Value = 0x002f4588; PC = 0x58c0 *)
mov r11 L0x8238;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0958; Value = 0xffb52765; PC = 0x58c4 *)
mov r5 L0x203f0958;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f095c; Value = 0xfffd1156; PC = 0x58c8 *)
mov r6 L0x203f095c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0960; Value = 0xffbbbaf6; PC = 0x58cc *)
mov r7 L0x203f0960;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0964; Value = 0x0035a349; PC = 0x58d0 *)
mov r8 L0x203f0964;

ghost r5o262@int32, r6o262@int32, r7o262@int32, r8o262@int32:
      r5o262 = r5 /\ r6o262 = r6 /\ r7o262 = r7 /\ r8o262 = r8
   && r5o262 = r5 /\ r6o262 = r6 /\ r7o262 = r7 /\ r8o262 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o262,r8o262]*[K**198,K**198])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o262,r8o262]*[K**198,K**198]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o263@int32, r8o263@int32:
      r6o263 = r6 /\ r8o263 = r8 && r6o263 = r6 /\ r8o263 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o263,r8o263]*[K** 99,K**227])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o263,r8o263]*[K** 99,K**227]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f095c; PC = 0x591c *)
mov L0x203f095c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0960; PC = 0x5920 *)
mov L0x203f0960 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0964; PC = 0x5924 *)
mov L0x203f0964 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0958; PC = 0x5928 *)
mov L0x203f0958 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 99 ****************)

cut eqmod L0x203f0958 (poly X [r5o262,r6o262,r7o262,r8o262]) [Q,X-K** 99]/\
    eqmod L0x203f095c (poly X [r5o262,r6o262,r7o262,r8o262]) [Q,X-K**355]/\
    eqmod L0x203f0960 (poly X [r5o262,r6o262,r7o262,r8o262]) [Q,X-K**227]/\
    eqmod L0x203f0964 (poly X [r5o262,r6o262,r7o262,r8o262]) [Q,X-K**483]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]/\
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]/\
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]/\
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]/\
    [L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8248; Value = 0xfff7b934; PC = 0x58b8 *)
mov r12 L0x8248;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x824c; Value = 0xffd4ca0c; PC = 0x58bc *)
mov lr L0x824c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8244; Value = 0x0000ad00; PC = 0x58c0 *)
mov r11 L0x8244;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0968; Value = 0xffffd0cb; PC = 0x58c4 *)
mov r5 L0x203f0968;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f096c; Value = 0x008919b6; PC = 0x58c8 *)
mov r6 L0x203f096c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0970; Value = 0xff081c3d; PC = 0x58cc *)
mov r7 L0x203f0970;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0974; Value = 0x00b5f556; PC = 0x58d0 *)
mov r8 L0x203f0974;

ghost r5o264@int32, r6o264@int32, r7o264@int32, r8o264@int32:
      r5o264 = r5 /\ r6o264 = r6 /\ r7o264 = r7 /\ r8o264 = r8
   && r5o264 = r5 /\ r6o264 = r6 /\ r7o264 = r7 /\ r8o264 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o264,r8o264]*[K** 38,K** 38])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o264,r8o264]*[K** 38,K** 38]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o265@int32, r8o265@int32:
      r6o265 = r6 /\ r8o265 = r8 && r6o265 = r6 /\ r8o265 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o265,r8o265]*[K** 19,K**147])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o265,r8o265]*[K** 19,K**147]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f096c; PC = 0x591c *)
mov L0x203f096c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0970; PC = 0x5920 *)
mov L0x203f0970 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0974; PC = 0x5924 *)
mov L0x203f0974 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0968; PC = 0x5928 *)
mov L0x203f0968 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 100 ****************)

cut eqmod L0x203f0968 (poly X [r5o264,r6o264,r7o264,r8o264]) [Q,X-K** 19]/\
    eqmod L0x203f096c (poly X [r5o264,r6o264,r7o264,r8o264]) [Q,X-K**275]/\
    eqmod L0x203f0970 (poly X [r5o264,r6o264,r7o264,r8o264]) [Q,X-K**147]/\
    eqmod L0x203f0974 (poly X [r5o264,r6o264,r7o264,r8o264]) [Q,X-K**403]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]/\
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]/\
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]/\
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]/\
    [L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8254; Value = 0xffe67ff8; PC = 0x58b8 *)
mov r12 L0x8254;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8258; Value = 0xffe3d157; PC = 0x58bc *)
mov lr L0x8258;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8250; Value = 0xffef36be; PC = 0x58c0 *)
mov r11 L0x8250;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0978; Value = 0xff972f21; PC = 0x58c4 *)
mov r5 L0x203f0978;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f097c; Value = 0x002dab9c; PC = 0x58c8 *)
mov r6 L0x203f097c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0980; Value = 0xff643a21; PC = 0x58cc *)
mov r7 L0x203f0980;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0984; Value = 0x0060f032; PC = 0x58d0 *)
mov r8 L0x203f0984;

ghost r5o266@int32, r6o266@int32, r7o266@int32, r8o266@int32:
      r5o266 = r5 /\ r6o266 = r6 /\ r7o266 = r7 /\ r8o266 = r8
   && r5o266 = r5 /\ r6o266 = r6 /\ r7o266 = r7 /\ r8o266 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o266,r8o266]*[K**166,K**166])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o266,r8o266]*[K**166,K**166]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o267@int32, r8o267@int32:
      r6o267 = r6 /\ r8o267 = r8 && r6o267 = r6 /\ r8o267 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o267,r8o267]*[K** 83,K**211])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o267,r8o267]*[K** 83,K**211]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f097c; PC = 0x591c *)
mov L0x203f097c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0980; PC = 0x5920 *)
mov L0x203f0980 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0984; PC = 0x5924 *)
mov L0x203f0984 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0978; PC = 0x5928 *)
mov L0x203f0978 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 101 ****************)

cut eqmod L0x203f0978 (poly X [r5o266,r6o266,r7o266,r8o266]) [Q,X-K** 83]/\
    eqmod L0x203f097c (poly X [r5o266,r6o266,r7o266,r8o266]) [Q,X-K**339]/\
    eqmod L0x203f0980 (poly X [r5o266,r6o266,r7o266,r8o266]) [Q,X-K**211]/\
    eqmod L0x203f0984 (poly X [r5o266,r6o266,r7o266,r8o266]) [Q,X-K**467]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]/\
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]/\
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]/\
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]/\
    [L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8260; Value = 0xffd8911b; PC = 0x58b8 *)
mov r12 L0x8260;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8264; Value = 0xffc72c12; PC = 0x58bc *)
mov lr L0x8264;
(* ldr.w	r11, [r1], #12                            #! EA = L0x825c; Value = 0x000dcd44; PC = 0x58c0 *)
mov r11 L0x825c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0988; Value = 0x0031d95a; PC = 0x58c4 *)
mov r5 L0x203f0988;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f098c; Value = 0x009e8890; PC = 0x58c8 *)
mov r6 L0x203f098c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0990; Value = 0xffc41528; PC = 0x58cc *)
mov r7 L0x203f0990;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0994; Value = 0x0000c5c0; PC = 0x58d0 *)
mov r8 L0x203f0994;

ghost r5o268@int32, r6o268@int32, r7o268@int32, r8o268@int32:
      r5o268 = r5 /\ r6o268 = r6 /\ r7o268 = r7 /\ r8o268 = r8
   && r5o268 = r5 /\ r6o268 = r6 /\ r7o268 = r7 /\ r8o268 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o268,r8o268]*[K**102,K**102])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o268,r8o268]*[K**102,K**102]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o269@int32, r8o269@int32:
      r6o269 = r6 /\ r8o269 = r8 && r6o269 = r6 /\ r8o269 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o269,r8o269]*[K** 51,K**179])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o269,r8o269]*[K** 51,K**179]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f098c; PC = 0x591c *)
mov L0x203f098c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0990; PC = 0x5920 *)
mov L0x203f0990 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0994; PC = 0x5924 *)
mov L0x203f0994 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0988; PC = 0x5928 *)
mov L0x203f0988 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 102 ****************)

cut eqmod L0x203f0988 (poly X [r5o268,r6o268,r7o268,r8o268]) [Q,X-K** 51]/\
    eqmod L0x203f098c (poly X [r5o268,r6o268,r7o268,r8o268]) [Q,X-K**307]/\
    eqmod L0x203f0990 (poly X [r5o268,r6o268,r7o268,r8o268]) [Q,X-K**179]/\
    eqmod L0x203f0994 (poly X [r5o268,r6o268,r7o268,r8o268]) [Q,X-K**435]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]/\
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]/\
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]/\
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]/\
    [L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x826c; Value = 0x000910d8; PC = 0x58b8 *)
mov r12 L0x826c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8270; Value = 0xffc65e1f; PC = 0x58bc *)
mov lr L0x8270;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8268; Value = 0x003c675a; PC = 0x58c0 *)
mov r11 L0x8268;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0998; Value = 0x0013eb66; PC = 0x58c4 *)
mov r5 L0x203f0998;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f099c; Value = 0x00c5f00a; PC = 0x58c8 *)
mov r6 L0x203f099c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f09a0; Value = 0xff5f7e66; PC = 0x58cc *)
mov r7 L0x203f09a0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f09a4; Value = 0x001ee7d0; PC = 0x58d0 *)
mov r8 L0x203f09a4;

ghost r5o270@int32, r6o270@int32, r7o270@int32, r8o270@int32:
      r5o270 = r5 /\ r6o270 = r6 /\ r7o270 = r7 /\ r8o270 = r8
   && r5o270 = r5 /\ r6o270 = r6 /\ r7o270 = r7 /\ r8o270 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o270,r8o270]*[K**230,K**230])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o270,r8o270]*[K**230,K**230]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o271@int32, r8o271@int32:
      r6o271 = r6 /\ r8o271 = r8 && r6o271 = r6 /\ r8o271 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o271,r8o271]*[K**115,K**243])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o271,r8o271]*[K**115,K**243]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f099c; PC = 0x591c *)
mov L0x203f099c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f09a0; PC = 0x5920 *)
mov L0x203f09a0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f09a4; PC = 0x5924 *)
mov L0x203f09a4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0998; PC = 0x5928 *)
mov L0x203f0998 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 103 ****************)

cut eqmod L0x203f0998 (poly X [r5o270,r6o270,r7o270,r8o270]) [Q,X-K**115]/\
    eqmod L0x203f099c (poly X [r5o270,r6o270,r7o270,r8o270]) [Q,X-K**371]/\
    eqmod L0x203f09a0 (poly X [r5o270,r6o270,r7o270,r8o270]) [Q,X-K**243]/\
    eqmod L0x203f09a4 (poly X [r5o270,r6o270,r7o270,r8o270]) [Q,X-K**499]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]/\
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]/\
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]/\
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]/\
    [L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [48,49,50,51]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8278; Value = 0xffe14658; PC = 0x58b8 *)
mov r12 L0x8278;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x827c; Value = 0x00251d8b; PC = 0x58bc *)
mov lr L0x827c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8274; Value = 0xffc72bca; PC = 0x58c0 *)
mov r11 L0x8274;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09a8; Value = 0x004158f1; PC = 0x58c4 *)
mov r5 L0x203f09a8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f09ac; Value = 0xffe9fa95; PC = 0x58c8 *)
mov r6 L0x203f09ac;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f09b0; Value = 0x0053a904; PC = 0x58cc *)
mov r7 L0x203f09b0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f09b4; Value = 0x006d7963; PC = 0x58d0 *)
mov r8 L0x203f09b4;

ghost r5o272@int32, r6o272@int32, r7o272@int32, r8o272@int32:
      r5o272 = r5 /\ r6o272 = r6 /\ r7o272 = r7 /\ r8o272 = r8
   && r5o272 = r5 /\ r6o272 = r6 /\ r7o272 = r7 /\ r8o272 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o272,r8o272]*[K** 22,K** 22])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o272,r8o272]*[K** 22,K** 22]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o273@int32, r8o273@int32:
      r6o273 = r6 /\ r8o273 = r8 && r6o273 = r6 /\ r8o273 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o273,r8o273]*[K** 11,K**139])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o273,r8o273]*[K** 11,K**139]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f09ac; PC = 0x591c *)
mov L0x203f09ac r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f09b0; PC = 0x5920 *)
mov L0x203f09b0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f09b4; PC = 0x5924 *)
mov L0x203f09b4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f09a8; PC = 0x5928 *)
mov L0x203f09a8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 104 ****************)

cut eqmod L0x203f09a8 (poly X [r5o272,r6o272,r7o272,r8o272]) [Q,X-K** 11]/\
    eqmod L0x203f09ac (poly X [r5o272,r6o272,r7o272,r8o272]) [Q,X-K**267]/\
    eqmod L0x203f09b0 (poly X [r5o272,r6o272,r7o272,r8o272]) [Q,X-K**139]/\
    eqmod L0x203f09b4 (poly X [r5o272,r6o272,r7o272,r8o272]) [Q,X-K**395]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]/\
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]/\
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]/\
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]/\
    [L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8284; Value = 0x002573b7; PC = 0x58b8 *)
mov r12 L0x8284;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8288; Value = 0xfffd7c8f; PC = 0x58bc *)
mov lr L0x8288;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8280; Value = 0xffffde7e; PC = 0x58c0 *)
mov r11 L0x8280;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09b8; Value = 0x0021a2db; PC = 0x58c4 *)
mov r5 L0x203f09b8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f09bc; Value = 0x00132503; PC = 0x58c8 *)
mov r6 L0x203f09bc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f09c0; Value = 0xfff14616; PC = 0x58cc *)
mov r7 L0x203f09c0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f09c4; Value = 0x001f1f4b; PC = 0x58d0 *)
mov r8 L0x203f09c4;

ghost r5o274@int32, r6o274@int32, r7o274@int32, r8o274@int32:
      r5o274 = r5 /\ r6o274 = r6 /\ r7o274 = r7 /\ r8o274 = r8
   && r5o274 = r5 /\ r6o274 = r6 /\ r7o274 = r7 /\ r8o274 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o274,r8o274]*[K**150,K**150])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o274,r8o274]*[K**150,K**150]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o275@int32, r8o275@int32:
      r6o275 = r6 /\ r8o275 = r8 && r6o275 = r6 /\ r8o275 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o275,r8o275]*[K** 75,K**203])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o275,r8o275]*[K** 75,K**203]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f09bc; PC = 0x591c *)
mov L0x203f09bc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f09c0; PC = 0x5920 *)
mov L0x203f09c0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f09c4; PC = 0x5924 *)
mov L0x203f09c4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f09b8; PC = 0x5928 *)
mov L0x203f09b8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 105 ****************)

cut eqmod L0x203f09b8 (poly X [r5o274,r6o274,r7o274,r8o274]) [Q,X-K** 75]/\
    eqmod L0x203f09bc (poly X [r5o274,r6o274,r7o274,r8o274]) [Q,X-K**331]/\
    eqmod L0x203f09c0 (poly X [r5o274,r6o274,r7o274,r8o274]) [Q,X-K**203]/\
    eqmod L0x203f09c4 (poly X [r5o274,r6o274,r7o274,r8o274]) [Q,X-K**459]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]/\
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]/\
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]/\
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]/\
    [L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8290; Value = 0x001ddd98; PC = 0x58b8 *)
mov r12 L0x8290;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8294; Value = 0x00336898; PC = 0x58bc *)
mov lr L0x8294;
(* ldr.w	r11, [r1], #12                            #! EA = L0x828c; Value = 0x00193948; PC = 0x58c0 *)
mov r11 L0x828c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09c8; Value = 0x001c9db9; PC = 0x58c4 *)
mov r5 L0x203f09c8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f09cc; Value = 0x00233cc8; PC = 0x58c8 *)
mov r6 L0x203f09cc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f09d0; Value = 0x0004fa44; PC = 0x58cc *)
mov r7 L0x203f09d0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f09d4; Value = 0x009331f8; PC = 0x58d0 *)
mov r8 L0x203f09d4;

ghost r5o276@int32, r6o276@int32, r7o276@int32, r8o276@int32:
      r5o276 = r5 /\ r6o276 = r6 /\ r7o276 = r7 /\ r8o276 = r8
   && r5o276 = r5 /\ r6o276 = r6 /\ r7o276 = r7 /\ r8o276 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o276,r8o276]*[K** 86,K** 86])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o276,r8o276]*[K** 86,K** 86]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o277@int32, r8o277@int32:
      r6o277 = r6 /\ r8o277 = r8 && r6o277 = r6 /\ r8o277 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o277,r8o277]*[K** 43,K**171])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o277,r8o277]*[K** 43,K**171]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f09cc; PC = 0x591c *)
mov L0x203f09cc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f09d0; PC = 0x5920 *)
mov L0x203f09d0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f09d4; PC = 0x5924 *)
mov L0x203f09d4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f09c8; PC = 0x5928 *)
mov L0x203f09c8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 106 ****************)

cut eqmod L0x203f09c8 (poly X [r5o276,r6o276,r7o276,r8o276]) [Q,X-K** 43]/\
    eqmod L0x203f09cc (poly X [r5o276,r6o276,r7o276,r8o276]) [Q,X-K**299]/\
    eqmod L0x203f09d0 (poly X [r5o276,r6o276,r7o276,r8o276]) [Q,X-K**171]/\
    eqmod L0x203f09d4 (poly X [r5o276,r6o276,r7o276,r8o276]) [Q,X-K**427]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]/\
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]/\
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]/\
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]/\
    [L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x829c; Value = 0x0002d4bb; PC = 0x58b8 *)
mov r12 L0x829c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82a0; Value = 0xffed93a7; PC = 0x58bc *)
mov lr L0x82a0;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8298; Value = 0xffce69c0; PC = 0x58c0 *)
mov r11 L0x8298;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09d8; Value = 0x00049dc7; PC = 0x58c4 *)
mov r5 L0x203f09d8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f09dc; Value = 0xffbe0054; PC = 0x58c8 *)
mov r6 L0x203f09dc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f09e0; Value = 0xffdca626; PC = 0x58cc *)
mov r7 L0x203f09e0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f09e4; Value = 0x00515ea6; PC = 0x58d0 *)
mov r8 L0x203f09e4;

ghost r5o278@int32, r6o278@int32, r7o278@int32, r8o278@int32:
      r5o278 = r5 /\ r6o278 = r6 /\ r7o278 = r7 /\ r8o278 = r8
   && r5o278 = r5 /\ r6o278 = r6 /\ r7o278 = r7 /\ r8o278 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o278,r8o278]*[K**214,K**214])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o278,r8o278]*[K**214,K**214]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o279@int32, r8o279@int32:
      r6o279 = r6 /\ r8o279 = r8 && r6o279 = r6 /\ r8o279 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o279,r8o279]*[K**107,K**235])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o279,r8o279]*[K**107,K**235]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f09dc; PC = 0x591c *)
mov L0x203f09dc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f09e0; PC = 0x5920 *)
mov L0x203f09e0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f09e4; PC = 0x5924 *)
mov L0x203f09e4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f09d8; PC = 0x5928 *)
mov L0x203f09d8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 107 ****************)

cut eqmod L0x203f09d8 (poly X [r5o278,r6o278,r7o278,r8o278]) [Q,X-K**107]/\
    eqmod L0x203f09dc (poly X [r5o278,r6o278,r7o278,r8o278]) [Q,X-K**363]/\
    eqmod L0x203f09e0 (poly X [r5o278,r6o278,r7o278,r8o278]) [Q,X-K**235]/\
    eqmod L0x203f09e4 (poly X [r5o278,r6o278,r7o278,r8o278]) [Q,X-K**491]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]/\
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]/\
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]/\
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]/\
    [L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82a8; Value = 0xffcf6cbe; PC = 0x58b8 *)
mov r12 L0x82a8;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82ac; Value = 0x00027c1c; PC = 0x58bc *)
mov lr L0x82ac;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82a4; Value = 0x0024756c; PC = 0x58c0 *)
mov r11 L0x82a4;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09e8; Value = 0x000f6d0b; PC = 0x58c4 *)
mov r5 L0x203f09e8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f09ec; Value = 0x00275802; PC = 0x58c8 *)
mov r6 L0x203f09ec;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f09f0; Value = 0xff72d3a5; PC = 0x58cc *)
mov r7 L0x203f09f0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f09f4; Value = 0x0041792f; PC = 0x58d0 *)
mov r8 L0x203f09f4;

ghost r5o280@int32, r6o280@int32, r7o280@int32, r8o280@int32:
      r5o280 = r5 /\ r6o280 = r6 /\ r7o280 = r7 /\ r8o280 = r8
   && r5o280 = r5 /\ r6o280 = r6 /\ r7o280 = r7 /\ r8o280 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o280,r8o280]*[K** 54,K** 54])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o280,r8o280]*[K** 54,K** 54]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o281@int32, r8o281@int32:
      r6o281 = r6 /\ r8o281 = r8 && r6o281 = r6 /\ r8o281 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o281,r8o281]*[K** 27,K**155])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o281,r8o281]*[K** 27,K**155]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f09ec; PC = 0x591c *)
mov L0x203f09ec r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f09f0; PC = 0x5920 *)
mov L0x203f09f0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f09f4; PC = 0x5924 *)
mov L0x203f09f4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f09e8; PC = 0x5928 *)
mov L0x203f09e8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 108 ****************)

cut eqmod L0x203f09e8 (poly X [r5o280,r6o280,r7o280,r8o280]) [Q,X-K** 27]/\
    eqmod L0x203f09ec (poly X [r5o280,r6o280,r7o280,r8o280]) [Q,X-K**283]/\
    eqmod L0x203f09f0 (poly X [r5o280,r6o280,r7o280,r8o280]) [Q,X-K**155]/\
    eqmod L0x203f09f4 (poly X [r5o280,r6o280,r7o280,r8o280]) [Q,X-K**411]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]/\
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]/\
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]/\
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]/\
    [L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82b4; Value = 0x0018aa08; PC = 0x58b8 *)
mov r12 L0x82b4;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82b8; Value = 0x002dfd71; PC = 0x58bc *)
mov lr L0x82b8;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82b0; Value = 0xfffcc7df; PC = 0x58c0 *)
mov r11 L0x82b0;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f09f8; Value = 0xffc3b0bf; PC = 0x58c4 *)
mov r5 L0x203f09f8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f09fc; Value = 0x003b0ec0; PC = 0x58c8 *)
mov r6 L0x203f09fc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a00; Value = 0xffe32fc9; PC = 0x58cc *)
mov r7 L0x203f0a00;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a04; Value = 0x0063c773; PC = 0x58d0 *)
mov r8 L0x203f0a04;

ghost r5o282@int32, r6o282@int32, r7o282@int32, r8o282@int32:
      r5o282 = r5 /\ r6o282 = r6 /\ r7o282 = r7 /\ r8o282 = r8
   && r5o282 = r5 /\ r6o282 = r6 /\ r7o282 = r7 /\ r8o282 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o282,r8o282]*[K**182,K**182])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o282,r8o282]*[K**182,K**182]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o283@int32, r8o283@int32:
      r6o283 = r6 /\ r8o283 = r8 && r6o283 = r6 /\ r8o283 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o283,r8o283]*[K** 91,K**219])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o283,r8o283]*[K** 91,K**219]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f09fc; PC = 0x591c *)
mov L0x203f09fc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a00; PC = 0x5920 *)
mov L0x203f0a00 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a04; PC = 0x5924 *)
mov L0x203f0a04 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f09f8; PC = 0x5928 *)
mov L0x203f09f8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 109 ****************)

cut eqmod L0x203f09f8 (poly X [r5o282,r6o282,r7o282,r8o282]) [Q,X-K** 91]/\
    eqmod L0x203f09fc (poly X [r5o282,r6o282,r7o282,r8o282]) [Q,X-K**347]/\
    eqmod L0x203f0a00 (poly X [r5o282,r6o282,r7o282,r8o282]) [Q,X-K**219]/\
    eqmod L0x203f0a04 (poly X [r5o282,r6o282,r7o282,r8o282]) [Q,X-K**475]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]/\
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]/\
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]/\
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]/\
    [L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82c0; Value = 0x000c5ca5; PC = 0x58b8 *)
mov r12 L0x82c0;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82c4; Value = 0x0019379a; PC = 0x58bc *)
mov lr L0x82c4;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82bc; Value = 0x000b98a1; PC = 0x58c0 *)
mov r11 L0x82bc;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a08; Value = 0x004b6652; PC = 0x58c4 *)
mov r5 L0x203f0a08;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a0c; Value = 0x0028ddb8; PC = 0x58c8 *)
mov r6 L0x203f0a0c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a10; Value = 0xff639a93; PC = 0x58cc *)
mov r7 L0x203f0a10;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a14; Value = 0x00078585; PC = 0x58d0 *)
mov r8 L0x203f0a14;

ghost r5o284@int32, r6o284@int32, r7o284@int32, r8o284@int32:
      r5o284 = r5 /\ r6o284 = r6 /\ r7o284 = r7 /\ r8o284 = r8
   && r5o284 = r5 /\ r6o284 = r6 /\ r7o284 = r7 /\ r8o284 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o284,r8o284]*[K**118,K**118])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o284,r8o284]*[K**118,K**118]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o285@int32, r8o285@int32:
      r6o285 = r6 /\ r8o285 = r8 && r6o285 = r6 /\ r8o285 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o285,r8o285]*[K** 59,K**187])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o285,r8o285]*[K** 59,K**187]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a0c; PC = 0x591c *)
mov L0x203f0a0c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a10; PC = 0x5920 *)
mov L0x203f0a10 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a14; PC = 0x5924 *)
mov L0x203f0a14 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a08; PC = 0x5928 *)
mov L0x203f0a08 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 110 ****************)

cut eqmod L0x203f0a08 (poly X [r5o284,r6o284,r7o284,r8o284]) [Q,X-K** 59]/\
    eqmod L0x203f0a0c (poly X [r5o284,r6o284,r7o284,r8o284]) [Q,X-K**315]/\
    eqmod L0x203f0a10 (poly X [r5o284,r6o284,r7o284,r8o284]) [Q,X-K**187]/\
    eqmod L0x203f0a14 (poly X [r5o284,r6o284,r7o284,r8o284]) [Q,X-K**443]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]/\
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]/\
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]/\
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]/\
    [L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82cc; Value = 0xffc7a167; PC = 0x58b8 *)
mov r12 L0x82cc;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82d0; Value = 0xffe48c3d; PC = 0x58bc *)
mov lr L0x82d0;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82c8; Value = 0xffebe808; PC = 0x58c0 *)
mov r11 L0x82c8;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a18; Value = 0x0052e088; PC = 0x58c4 *)
mov r5 L0x203f0a18;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a1c; Value = 0x0091a33a; PC = 0x58c8 *)
mov r6 L0x203f0a1c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a20; Value = 0xffe0f083; PC = 0x58cc *)
mov r7 L0x203f0a20;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a24; Value = 0xfff9191d; PC = 0x58d0 *)
mov r8 L0x203f0a24;

ghost r5o286@int32, r6o286@int32, r7o286@int32, r8o286@int32:
      r5o286 = r5 /\ r6o286 = r6 /\ r7o286 = r7 /\ r8o286 = r8
   && r5o286 = r5 /\ r6o286 = r6 /\ r7o286 = r7 /\ r8o286 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o286,r8o286]*[K**246,K**246])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o286,r8o286]*[K**246,K**246]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o287@int32, r8o287@int32:
      r6o287 = r6 /\ r8o287 = r8 && r6o287 = r6 /\ r8o287 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o287,r8o287]*[K**123,K**251])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o287,r8o287]*[K**123,K**251]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a1c; PC = 0x591c *)
mov L0x203f0a1c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a20; PC = 0x5920 *)
mov L0x203f0a20 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a24; PC = 0x5924 *)
mov L0x203f0a24 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a18; PC = 0x5928 *)
mov L0x203f0a18 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 111 ****************)

cut eqmod L0x203f0a18 (poly X [r5o286,r6o286,r7o286,r8o286]) [Q,X-K**123]/\
    eqmod L0x203f0a1c (poly X [r5o286,r6o286,r7o286,r8o286]) [Q,X-K**379]/\
    eqmod L0x203f0a20 (poly X [r5o286,r6o286,r7o286,r8o286]) [Q,X-K**251]/\
    eqmod L0x203f0a24 (poly X [r5o286,r6o286,r7o286,r8o286]) [Q,X-K**507]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]/\
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]/\
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]/\
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]/\
    [L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [52,53,54,55]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82d8; Value = 0xffd1a13c; PC = 0x58b8 *)
mov r12 L0x82d8;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82dc; Value = 0x0035c539; PC = 0x58bc *)
mov lr L0x82dc;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82d4; Value = 0x0002e46c; PC = 0x58c0 *)
mov r11 L0x82d4;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a28; Value = 0x004f72a4; PC = 0x58c4 *)
mov r5 L0x203f0a28;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a2c; Value = 0xff821ffc; PC = 0x58c8 *)
mov r6 L0x203f0a2c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a30; Value = 0x0057f139; PC = 0x58cc *)
mov r7 L0x203f0a30;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a34; Value = 0x00486cfe; PC = 0x58d0 *)
mov r8 L0x203f0a34;

ghost r5o288@int32, r6o288@int32, r7o288@int32, r8o288@int32:
      r5o288 = r5 /\ r6o288 = r6 /\ r7o288 = r7 /\ r8o288 = r8
   && r5o288 = r5 /\ r6o288 = r6 /\ r7o288 = r7 /\ r8o288 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o288,r8o288]*[K** 14,K** 14])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o288,r8o288]*[K** 14,K** 14]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o289@int32, r8o289@int32:
      r6o289 = r6 /\ r8o289 = r8 && r6o289 = r6 /\ r8o289 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o289,r8o289]*[K**  7,K**135])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o289,r8o289]*[K**  7,K**135]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a2c; PC = 0x591c *)
mov L0x203f0a2c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a30; PC = 0x5920 *)
mov L0x203f0a30 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a34; PC = 0x5924 *)
mov L0x203f0a34 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a28; PC = 0x5928 *)
mov L0x203f0a28 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 112 ****************)

cut eqmod L0x203f0a28 (poly X [r5o288,r6o288,r7o288,r8o288]) [Q,X-K**  7]/\
    eqmod L0x203f0a2c (poly X [r5o288,r6o288,r7o288,r8o288]) [Q,X-K**263]/\
    eqmod L0x203f0a30 (poly X [r5o288,r6o288,r7o288,r8o288]) [Q,X-K**135]/\
    eqmod L0x203f0a34 (poly X [r5o288,r6o288,r7o288,r8o288]) [Q,X-K**391]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]/\
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]/\
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]/\
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]/\
    [L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82e4; Value = 0x003b0115; PC = 0x58b8 *)
mov r12 L0x82e4;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82e8; Value = 0x00041dc0; PC = 0x58bc *)
mov lr L0x82e8;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82e0; Value = 0xffc9c808; PC = 0x58c0 *)
mov r11 L0x82e0;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a38; Value = 0x00177af0; PC = 0x58c4 *)
mov r5 L0x203f0a38;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a3c; Value = 0xffeace96; PC = 0x58c8 *)
mov r6 L0x203f0a3c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a40; Value = 0xffe77cfd; PC = 0x58cc *)
mov r7 L0x203f0a40;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a44; Value = 0xfff340a0; PC = 0x58d0 *)
mov r8 L0x203f0a44;

ghost r5o290@int32, r6o290@int32, r7o290@int32, r8o290@int32:
      r5o290 = r5 /\ r6o290 = r6 /\ r7o290 = r7 /\ r8o290 = r8
   && r5o290 = r5 /\ r6o290 = r6 /\ r7o290 = r7 /\ r8o290 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o290,r8o290]*[K**142,K**142])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o290,r8o290]*[K**142,K**142]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o291@int32, r8o291@int32:
      r6o291 = r6 /\ r8o291 = r8 && r6o291 = r6 /\ r8o291 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o291,r8o291]*[K** 71,K**199])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o291,r8o291]*[K** 71,K**199]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a3c; PC = 0x591c *)
mov L0x203f0a3c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a40; PC = 0x5920 *)
mov L0x203f0a40 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a44; PC = 0x5924 *)
mov L0x203f0a44 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a38; PC = 0x5928 *)
mov L0x203f0a38 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 113 ****************)

cut eqmod L0x203f0a38 (poly X [r5o290,r6o290,r7o290,r8o290]) [Q,X-K** 71]/\
    eqmod L0x203f0a3c (poly X [r5o290,r6o290,r7o290,r8o290]) [Q,X-K**327]/\
    eqmod L0x203f0a40 (poly X [r5o290,r6o290,r7o290,r8o290]) [Q,X-K**199]/\
    eqmod L0x203f0a44 (poly X [r5o290,r6o290,r7o290,r8o290]) [Q,X-K**455]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]/\
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]/\
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]/\
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]/\
    [L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82f0; Value = 0x0021c4f7; PC = 0x58b8 *)
mov r12 L0x82f0;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x82f4; Value = 0xfff11bf4; PC = 0x58bc *)
mov lr L0x82f4;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82ec; Value = 0x003036c2; PC = 0x58c0 *)
mov r11 L0x82ec;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a48; Value = 0xffe22bb5; PC = 0x58c4 *)
mov r5 L0x203f0a48;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a4c; Value = 0xffbb2850; PC = 0x58c8 *)
mov r6 L0x203f0a4c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a50; Value = 0x004abba5; PC = 0x58cc *)
mov r7 L0x203f0a50;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a54; Value = 0x006098c8; PC = 0x58d0 *)
mov r8 L0x203f0a54;

ghost r5o292@int32, r6o292@int32, r7o292@int32, r8o292@int32:
      r5o292 = r5 /\ r6o292 = r6 /\ r7o292 = r7 /\ r8o292 = r8
   && r5o292 = r5 /\ r6o292 = r6 /\ r7o292 = r7 /\ r8o292 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o292,r8o292]*[K** 78,K** 78])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o292,r8o292]*[K** 78,K** 78]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o293@int32, r8o293@int32:
      r6o293 = r6 /\ r8o293 = r8 && r6o293 = r6 /\ r8o293 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o293,r8o293]*[K** 39,K**167])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o293,r8o293]*[K** 39,K**167]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a4c; PC = 0x591c *)
mov L0x203f0a4c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a50; PC = 0x5920 *)
mov L0x203f0a50 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a54; PC = 0x5924 *)
mov L0x203f0a54 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a48; PC = 0x5928 *)
mov L0x203f0a48 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 114 ****************)

cut eqmod L0x203f0a48 (poly X [r5o292,r6o292,r7o292,r8o292]) [Q,X-K** 39]/\
    eqmod L0x203f0a4c (poly X [r5o292,r6o292,r7o292,r8o292]) [Q,X-K**295]/\
    eqmod L0x203f0a50 (poly X [r5o292,r6o292,r7o292,r8o292]) [Q,X-K**167]/\
    eqmod L0x203f0a54 (poly X [r5o292,r6o292,r7o292,r8o292]) [Q,X-K**423]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]/\
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]/\
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]/\
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]/\
    [L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x82fc; Value = 0x001a35e7; PC = 0x58b8 *)
mov r12 L0x82fc;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8300; Value = 0x0007340e; PC = 0x58bc *)
mov lr L0x8300;
(* ldr.w	r11, [r1], #12                            #! EA = L0x82f8; Value = 0xffe3bff6; PC = 0x58c0 *)
mov r11 L0x82f8;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a58; Value = 0x000c18b7; PC = 0x58c4 *)
mov r5 L0x203f0a58;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a5c; Value = 0xff5a13ba; PC = 0x58c8 *)
mov r6 L0x203f0a5c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a60; Value = 0x00559a21; PC = 0x58cc *)
mov r7 L0x203f0a60;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a64; Value = 0x0002e80a; PC = 0x58d0 *)
mov r8 L0x203f0a64;

ghost r5o294@int32, r6o294@int32, r7o294@int32, r8o294@int32:
      r5o294 = r5 /\ r6o294 = r6 /\ r7o294 = r7 /\ r8o294 = r8
   && r5o294 = r5 /\ r6o294 = r6 /\ r7o294 = r7 /\ r8o294 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o294,r8o294]*[K**206,K**206])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o294,r8o294]*[K**206,K**206]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o295@int32, r8o295@int32:
      r6o295 = r6 /\ r8o295 = r8 && r6o295 = r6 /\ r8o295 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o295,r8o295]*[K**103,K**231])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o295,r8o295]*[K**103,K**231]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a5c; PC = 0x591c *)
mov L0x203f0a5c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a60; PC = 0x5920 *)
mov L0x203f0a60 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a64; PC = 0x5924 *)
mov L0x203f0a64 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a58; PC = 0x5928 *)
mov L0x203f0a58 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 115 ****************)

cut eqmod L0x203f0a58 (poly X [r5o294,r6o294,r7o294,r8o294]) [Q,X-K**103]/\
    eqmod L0x203f0a5c (poly X [r5o294,r6o294,r7o294,r8o294]) [Q,X-K**359]/\
    eqmod L0x203f0a60 (poly X [r5o294,r6o294,r7o294,r8o294]) [Q,X-K**231]/\
    eqmod L0x203f0a64 (poly X [r5o294,r6o294,r7o294,r8o294]) [Q,X-K**487]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]/\
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]/\
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]/\
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]/\
    [L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8308; Value = 0xfff97d45; PC = 0x58b8 *)
mov r12 L0x8308;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x830c; Value = 0x001a4cd0; PC = 0x58bc *)
mov lr L0x830c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8304; Value = 0xffdb3c93; PC = 0x58c0 *)
mov r11 L0x8304;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a68; Value = 0x0020e9d0; PC = 0x58c4 *)
mov r5 L0x203f0a68;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a6c; Value = 0xff6178ea; PC = 0x58c8 *)
mov r6 L0x203f0a6c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a70; Value = 0x00078609; PC = 0x58cc *)
mov r7 L0x203f0a70;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a74; Value = 0x0006ab82; PC = 0x58d0 *)
mov r8 L0x203f0a74;

ghost r5o296@int32, r6o296@int32, r7o296@int32, r8o296@int32:
      r5o296 = r5 /\ r6o296 = r6 /\ r7o296 = r7 /\ r8o296 = r8
   && r5o296 = r5 /\ r6o296 = r6 /\ r7o296 = r7 /\ r8o296 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o296,r8o296]*[K** 46,K** 46])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o296,r8o296]*[K** 46,K** 46]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o297@int32, r8o297@int32:
      r6o297 = r6 /\ r8o297 = r8 && r6o297 = r6 /\ r8o297 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o297,r8o297]*[K** 23,K**151])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o297,r8o297]*[K** 23,K**151]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a6c; PC = 0x591c *)
mov L0x203f0a6c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a70; PC = 0x5920 *)
mov L0x203f0a70 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a74; PC = 0x5924 *)
mov L0x203f0a74 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a68; PC = 0x5928 *)
mov L0x203f0a68 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 116 ****************)

cut eqmod L0x203f0a68 (poly X [r5o296,r6o296,r7o296,r8o296]) [Q,X-K** 23]/\
    eqmod L0x203f0a6c (poly X [r5o296,r6o296,r7o296,r8o296]) [Q,X-K**279]/\
    eqmod L0x203f0a70 (poly X [r5o296,r6o296,r7o296,r8o296]) [Q,X-K**151]/\
    eqmod L0x203f0a74 (poly X [r5o296,r6o296,r7o296,r8o296]) [Q,X-K**407]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]/\
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]/\
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]/\
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]/\
    [L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8314; Value = 0xffe47cae; PC = 0x58b8 *)
mov r12 L0x8314;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8318; Value = 0x001d2668; PC = 0x58bc *)
mov lr L0x8318;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8310; Value = 0xfffd4ae0; PC = 0x58c0 *)
mov r11 L0x8310;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a78; Value = 0x008f53b0; PC = 0x58c4 *)
mov r5 L0x203f0a78;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a7c; Value = 0xffdab7bc; PC = 0x58c8 *)
mov r6 L0x203f0a7c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a80; Value = 0xffb10eeb; PC = 0x58cc *)
mov r7 L0x203f0a80;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a84; Value = 0x00146386; PC = 0x58d0 *)
mov r8 L0x203f0a84;

ghost r5o298@int32, r6o298@int32, r7o298@int32, r8o298@int32:
      r5o298 = r5 /\ r6o298 = r6 /\ r7o298 = r7 /\ r8o298 = r8
   && r5o298 = r5 /\ r6o298 = r6 /\ r7o298 = r7 /\ r8o298 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o298,r8o298]*[K**174,K**174])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o298,r8o298]*[K**174,K**174]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o299@int32, r8o299@int32:
      r6o299 = r6 /\ r8o299 = r8 && r6o299 = r6 /\ r8o299 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o299,r8o299]*[K** 87,K**215])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o299,r8o299]*[K** 87,K**215]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a7c; PC = 0x591c *)
mov L0x203f0a7c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a80; PC = 0x5920 *)
mov L0x203f0a80 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a84; PC = 0x5924 *)
mov L0x203f0a84 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a78; PC = 0x5928 *)
mov L0x203f0a78 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 117 ****************)

cut eqmod L0x203f0a78 (poly X [r5o298,r6o298,r7o298,r8o298]) [Q,X-K** 87]/\
    eqmod L0x203f0a7c (poly X [r5o298,r6o298,r7o298,r8o298]) [Q,X-K**343]/\
    eqmod L0x203f0a80 (poly X [r5o298,r6o298,r7o298,r8o298]) [Q,X-K**215]/\
    eqmod L0x203f0a84 (poly X [r5o298,r6o298,r7o298,r8o298]) [Q,X-K**471]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]/\
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]/\
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]/\
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]/\
    [L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8320; Value = 0xffe68e98; PC = 0x58b8 *)
mov r12 L0x8320;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8324; Value = 0xffef2633; PC = 0x58bc *)
mov lr L0x8324;
(* ldr.w	r11, [r1], #12                            #! EA = L0x831c; Value = 0x00141305; PC = 0x58c0 *)
mov r11 L0x831c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a88; Value = 0x003d57a5; PC = 0x58c4 *)
mov r5 L0x203f0a88;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a8c; Value = 0xff9c8980; PC = 0x58c8 *)
mov r6 L0x203f0a8c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0a90; Value = 0x00549302; PC = 0x58cc *)
mov r7 L0x203f0a90;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0a94; Value = 0xfff4c108; PC = 0x58d0 *)
mov r8 L0x203f0a94;

ghost r5o300@int32, r6o300@int32, r7o300@int32, r8o300@int32:
      r5o300 = r5 /\ r6o300 = r6 /\ r7o300 = r7 /\ r8o300 = r8
   && r5o300 = r5 /\ r6o300 = r6 /\ r7o300 = r7 /\ r8o300 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o300,r8o300]*[K**110,K**110])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o300,r8o300]*[K**110,K**110]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o301@int32, r8o301@int32:
      r6o301 = r6 /\ r8o301 = r8 && r6o301 = r6 /\ r8o301 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o301,r8o301]*[K** 55,K**183])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o301,r8o301]*[K** 55,K**183]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a8c; PC = 0x591c *)
mov L0x203f0a8c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0a90; PC = 0x5920 *)
mov L0x203f0a90 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0a94; PC = 0x5924 *)
mov L0x203f0a94 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a88; PC = 0x5928 *)
mov L0x203f0a88 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 118 ****************)

cut eqmod L0x203f0a88 (poly X [r5o300,r6o300,r7o300,r8o300]) [Q,X-K** 55]/\
    eqmod L0x203f0a8c (poly X [r5o300,r6o300,r7o300,r8o300]) [Q,X-K**311]/\
    eqmod L0x203f0a90 (poly X [r5o300,r6o300,r7o300,r8o300]) [Q,X-K**183]/\
    eqmod L0x203f0a94 (poly X [r5o300,r6o300,r7o300,r8o300]) [Q,X-K**439]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]/\
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]/\
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]/\
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]/\
    [L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x832c; Value = 0xfffc05da; PC = 0x58b8 *)
mov r12 L0x832c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8330; Value = 0xffc57fdb; PC = 0x58bc *)
mov lr L0x8330;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8328; Value = 0x00147792; PC = 0x58c0 *)
mov r11 L0x8328;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0a98; Value = 0x00a5d6ab; PC = 0x58c4 *)
mov r5 L0x203f0a98;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0a9c; Value = 0xff7980f6; PC = 0x58c8 *)
mov r6 L0x203f0a9c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0aa0; Value = 0x003258a6; PC = 0x58cc *)
mov r7 L0x203f0aa0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0aa4; Value = 0xffb58880; PC = 0x58d0 *)
mov r8 L0x203f0aa4;

ghost r5o302@int32, r6o302@int32, r7o302@int32, r8o302@int32:
      r5o302 = r5 /\ r6o302 = r6 /\ r7o302 = r7 /\ r8o302 = r8
   && r5o302 = r5 /\ r6o302 = r6 /\ r7o302 = r7 /\ r8o302 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o302,r8o302]*[K**238,K**238])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o302,r8o302]*[K**238,K**238]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o303@int32, r8o303@int32:
      r6o303 = r6 /\ r8o303 = r8 && r6o303 = r6 /\ r8o303 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o303,r8o303]*[K**119,K**247])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o303,r8o303]*[K**119,K**247]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0a9c; PC = 0x591c *)
mov L0x203f0a9c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0aa0; PC = 0x5920 *)
mov L0x203f0aa0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0aa4; PC = 0x5924 *)
mov L0x203f0aa4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0a98; PC = 0x5928 *)
mov L0x203f0a98 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 119 ****************)

cut eqmod L0x203f0a98 (poly X [r5o302,r6o302,r7o302,r8o302]) [Q,X-K**119]/\
    eqmod L0x203f0a9c (poly X [r5o302,r6o302,r7o302,r8o302]) [Q,X-K**375]/\
    eqmod L0x203f0aa0 (poly X [r5o302,r6o302,r7o302,r8o302]) [Q,X-K**247]/\
    eqmod L0x203f0aa4 (poly X [r5o302,r6o302,r7o302,r8o302]) [Q,X-K**503]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]/\
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]/\
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]/\
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]/\
    [L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [56,57,58,59]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8338; Value = 0xffd32764; PC = 0x58b8 *)
mov r12 L0x8338;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x833c; Value = 0xffdde1af; PC = 0x58bc *)
mov lr L0x833c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8334; Value = 0x00139e25; PC = 0x58c0 *)
mov r11 L0x8334;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0aa8; Value = 0xffc1b530; PC = 0x58c4 *)
mov r5 L0x203f0aa8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0aac; Value = 0x0041aff7; PC = 0x58c8 *)
mov r6 L0x203f0aac;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0ab0; Value = 0xfffbd6a6; PC = 0x58cc *)
mov r7 L0x203f0ab0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0ab4; Value = 0xffdfe3e2; PC = 0x58d0 *)
mov r8 L0x203f0ab4;

ghost r5o304@int32, r6o304@int32, r7o304@int32, r8o304@int32:
      r5o304 = r5 /\ r6o304 = r6 /\ r7o304 = r7 /\ r8o304 = r8
   && r5o304 = r5 /\ r6o304 = r6 /\ r7o304 = r7 /\ r8o304 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o304,r8o304]*[K** 30,K** 30])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o304,r8o304]*[K** 30,K** 30]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o305@int32, r8o305@int32:
      r6o305 = r6 /\ r8o305 = r8 && r6o305 = r6 /\ r8o305 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o305,r8o305]*[K** 15,K**143])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o305,r8o305]*[K** 15,K**143]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0aac; PC = 0x591c *)
mov L0x203f0aac r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0ab0; PC = 0x5920 *)
mov L0x203f0ab0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0ab4; PC = 0x5924 *)
mov L0x203f0ab4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0aa8; PC = 0x5928 *)
mov L0x203f0aa8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 120 ****************)

cut eqmod L0x203f0aa8 (poly X [r5o304,r6o304,r7o304,r8o304]) [Q,X-K** 15]/\
    eqmod L0x203f0aac (poly X [r5o304,r6o304,r7o304,r8o304]) [Q,X-K**271]/\
    eqmod L0x203f0ab0 (poly X [r5o304,r6o304,r7o304,r8o304]) [Q,X-K**143]/\
    eqmod L0x203f0ab4 (poly X [r5o304,r6o304,r7o304,r8o304]) [Q,X-K**399]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]/\
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]/\
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]/\
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]/\
    [L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8344; Value = 0xfff993dd; PC = 0x58b8 *)
mov r12 L0x8344;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8348; Value = 0xffdd1d09; PC = 0x58bc *)
mov lr L0x8348;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8340; Value = 0xffe7d0e0; PC = 0x58c0 *)
mov r11 L0x8340;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0ab8; Value = 0xffe95738; PC = 0x58c4 *)
mov r5 L0x203f0ab8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0abc; Value = 0x0049aeff; PC = 0x58c8 *)
mov r6 L0x203f0abc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0ac0; Value = 0xff931768; PC = 0x58cc *)
mov r7 L0x203f0ac0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0ac4; Value = 0xfff99bc2; PC = 0x58d0 *)
mov r8 L0x203f0ac4;

ghost r5o306@int32, r6o306@int32, r7o306@int32, r8o306@int32:
      r5o306 = r5 /\ r6o306 = r6 /\ r7o306 = r7 /\ r8o306 = r8
   && r5o306 = r5 /\ r6o306 = r6 /\ r7o306 = r7 /\ r8o306 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o306,r8o306]*[K**158,K**158])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o306,r8o306]*[K**158,K**158]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o307@int32, r8o307@int32:
      r6o307 = r6 /\ r8o307 = r8 && r6o307 = r6 /\ r8o307 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o307,r8o307]*[K** 79,K**207])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o307,r8o307]*[K** 79,K**207]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0abc; PC = 0x591c *)
mov L0x203f0abc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0ac0; PC = 0x5920 *)
mov L0x203f0ac0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0ac4; PC = 0x5924 *)
mov L0x203f0ac4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0ab8; PC = 0x5928 *)
mov L0x203f0ab8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 121 ****************)

cut eqmod L0x203f0ab8 (poly X [r5o306,r6o306,r7o306,r8o306]) [Q,X-K** 79]/\
    eqmod L0x203f0abc (poly X [r5o306,r6o306,r7o306,r8o306]) [Q,X-K**335]/\
    eqmod L0x203f0ac0 (poly X [r5o306,r6o306,r7o306,r8o306]) [Q,X-K**207]/\
    eqmod L0x203f0ac4 (poly X [r5o306,r6o306,r7o306,r8o306]) [Q,X-K**463]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]/\
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]/\
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]/\
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]/\
    [L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8350; Value = 0x0002cc93; PC = 0x58b8 *)
mov r12 L0x8350;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8354; Value = 0xfff11805; PC = 0x58bc *)
mov lr L0x8354;
(* ldr.w	r11, [r1], #12                            #! EA = L0x834c; Value = 0xfff39944; PC = 0x58c0 *)
mov r11 L0x834c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0ac8; Value = 0x003be363; PC = 0x58c4 *)
mov r5 L0x203f0ac8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0acc; Value = 0xffd178d1; PC = 0x58c8 *)
mov r6 L0x203f0acc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0ad0; Value = 0x00302ca8; PC = 0x58cc *)
mov r7 L0x203f0ad0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0ad4; Value = 0x001155c8; PC = 0x58d0 *)
mov r8 L0x203f0ad4;

ghost r5o308@int32, r6o308@int32, r7o308@int32, r8o308@int32:
      r5o308 = r5 /\ r6o308 = r6 /\ r7o308 = r7 /\ r8o308 = r8
   && r5o308 = r5 /\ r6o308 = r6 /\ r7o308 = r7 /\ r8o308 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o308,r8o308]*[K** 94,K** 94])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o308,r8o308]*[K** 94,K** 94]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o309@int32, r8o309@int32:
      r6o309 = r6 /\ r8o309 = r8 && r6o309 = r6 /\ r8o309 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o309,r8o309]*[K** 47,K**175])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o309,r8o309]*[K** 47,K**175]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0acc; PC = 0x591c *)
mov L0x203f0acc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0ad0; PC = 0x5920 *)
mov L0x203f0ad0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0ad4; PC = 0x5924 *)
mov L0x203f0ad4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0ac8; PC = 0x5928 *)
mov L0x203f0ac8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 122 ****************)

cut eqmod L0x203f0ac8 (poly X [r5o308,r6o308,r7o308,r8o308]) [Q,X-K** 47]/\
    eqmod L0x203f0acc (poly X [r5o308,r6o308,r7o308,r8o308]) [Q,X-K**303]/\
    eqmod L0x203f0ad0 (poly X [r5o308,r6o308,r7o308,r8o308]) [Q,X-K**175]/\
    eqmod L0x203f0ad4 (poly X [r5o308,r6o308,r7o308,r8o308]) [Q,X-K**431]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]/\
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]/\
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]/\
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]/\
    [L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x835c; Value = 0x00189c2a; PC = 0x58b8 *)
mov r12 L0x835c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8360; Value = 0xffc9e5a9; PC = 0x58bc *)
mov lr L0x8360;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8358; Value = 0xffea0802; PC = 0x58c0 *)
mov r11 L0x8358;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0ad8; Value = 0xffd7b35d; PC = 0x58c4 *)
mov r5 L0x203f0ad8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0adc; Value = 0x001cd2c5; PC = 0x58c8 *)
mov r6 L0x203f0adc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0ae0; Value = 0x005b9cd6; PC = 0x58cc *)
mov r7 L0x203f0ae0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0ae4; Value = 0xffd13098; PC = 0x58d0 *)
mov r8 L0x203f0ae4;

ghost r5o310@int32, r6o310@int32, r7o310@int32, r8o310@int32:
      r5o310 = r5 /\ r6o310 = r6 /\ r7o310 = r7 /\ r8o310 = r8
   && r5o310 = r5 /\ r6o310 = r6 /\ r7o310 = r7 /\ r8o310 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o310,r8o310]*[K**222,K**222])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o310,r8o310]*[K**222,K**222]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o311@int32, r8o311@int32:
      r6o311 = r6 /\ r8o311 = r8 && r6o311 = r6 /\ r8o311 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o311,r8o311]*[K**111,K**239])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o311,r8o311]*[K**111,K**239]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0adc; PC = 0x591c *)
mov L0x203f0adc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0ae0; PC = 0x5920 *)
mov L0x203f0ae0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0ae4; PC = 0x5924 *)
mov L0x203f0ae4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0ad8; PC = 0x5928 *)
mov L0x203f0ad8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 123 ****************)

cut eqmod L0x203f0ad8 (poly X [r5o310,r6o310,r7o310,r8o310]) [Q,X-K**111]/\
    eqmod L0x203f0adc (poly X [r5o310,r6o310,r7o310,r8o310]) [Q,X-K**367]/\
    eqmod L0x203f0ae0 (poly X [r5o310,r6o310,r7o310,r8o310]) [Q,X-K**239]/\
    eqmod L0x203f0ae4 (poly X [r5o310,r6o310,r7o310,r8o310]) [Q,X-K**495]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]/\
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]/\
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]/\
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]/\
    [L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8368; Value = 0xfff78a50; PC = 0x58b8 *)
mov r12 L0x8368;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x836c; Value = 0x003bcf2c; PC = 0x58bc *)
mov lr L0x836c;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8364; Value = 0xffd1eea2; PC = 0x58c0 *)
mov r11 L0x8364;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0ae8; Value = 0x001d10ff; PC = 0x58c4 *)
mov r5 L0x203f0ae8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0aec; Value = 0xffe915c8; PC = 0x58c8 *)
mov r6 L0x203f0aec;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0af0; Value = 0xffd4d87f; PC = 0x58cc *)
mov r7 L0x203f0af0;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0af4; Value = 0x003a1726; PC = 0x58d0 *)
mov r8 L0x203f0af4;

ghost r5o312@int32, r6o312@int32, r7o312@int32, r8o312@int32:
      r5o312 = r5 /\ r6o312 = r6 /\ r7o312 = r7 /\ r8o312 = r8
   && r5o312 = r5 /\ r6o312 = r6 /\ r7o312 = r7 /\ r8o312 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o312,r8o312]*[K** 62,K** 62])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o312,r8o312]*[K** 62,K** 62]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o313@int32, r8o313@int32:
      r6o313 = r6 /\ r8o313 = r8 && r6o313 = r6 /\ r8o313 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o313,r8o313]*[K** 31,K**159])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o313,r8o313]*[K** 31,K**159]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0aec; PC = 0x591c *)
mov L0x203f0aec r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0af0; PC = 0x5920 *)
mov L0x203f0af0 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0af4; PC = 0x5924 *)
mov L0x203f0af4 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0ae8; PC = 0x5928 *)
mov L0x203f0ae8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 124 ****************)

cut eqmod L0x203f0ae8 (poly X [r5o312,r6o312,r7o312,r8o312]) [Q,X-K** 31]/\
    eqmod L0x203f0aec (poly X [r5o312,r6o312,r7o312,r8o312]) [Q,X-K**287]/\
    eqmod L0x203f0af0 (poly X [r5o312,r6o312,r7o312,r8o312]) [Q,X-K**159]/\
    eqmod L0x203f0af4 (poly X [r5o312,r6o312,r7o312,r8o312]) [Q,X-K**415]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]/\
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]/\
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]/\
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]/\
    [L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8374; Value = 0xffff434e; PC = 0x58b8 *)
mov r12 L0x8374;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8378; Value = 0xffeb36df; PC = 0x58bc *)
mov lr L0x8378;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8370; Value = 0xffc4c79c; PC = 0x58c0 *)
mov r11 L0x8370;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0af8; Value = 0x007fbd6d; PC = 0x58c4 *)
mov r5 L0x203f0af8;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0afc; Value = 0xfff1bb8c; PC = 0x58c8 *)
mov r6 L0x203f0afc;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0b00; Value = 0x001ab265; PC = 0x58cc *)
mov r7 L0x203f0b00;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0b04; Value = 0x001bc0a6; PC = 0x58d0 *)
mov r8 L0x203f0b04;

ghost r5o314@int32, r6o314@int32, r7o314@int32, r8o314@int32:
      r5o314 = r5 /\ r6o314 = r6 /\ r7o314 = r7 /\ r8o314 = r8
   && r5o314 = r5 /\ r6o314 = r6 /\ r7o314 = r7 /\ r8o314 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o314,r8o314]*[K**190,K**190])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o314,r8o314]*[K**190,K**190]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o315@int32, r8o315@int32:
      r6o315 = r6 /\ r8o315 = r8 && r6o315 = r6 /\ r8o315 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o315,r8o315]*[K** 95,K**223])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o315,r8o315]*[K** 95,K**223]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0afc; PC = 0x591c *)
mov L0x203f0afc r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0b00; PC = 0x5920 *)
mov L0x203f0b00 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0b04; PC = 0x5924 *)
mov L0x203f0b04 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0af8; PC = 0x5928 *)
mov L0x203f0af8 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 125 ****************)

cut eqmod L0x203f0af8 (poly X [r5o314,r6o314,r7o314,r8o314]) [Q,X-K** 95]/\
    eqmod L0x203f0afc (poly X [r5o314,r6o314,r7o314,r8o314]) [Q,X-K**351]/\
    eqmod L0x203f0b00 (poly X [r5o314,r6o314,r7o314,r8o314]) [Q,X-K**223]/\
    eqmod L0x203f0b04 (poly X [r5o314,r6o314,r7o314,r8o314]) [Q,X-K**479]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]/\
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]/\
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]/\
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]/\
    [L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x8380; Value = 0x003c15ca; PC = 0x58b8 *)
mov r12 L0x8380;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8384; Value = 0x00155e68; PC = 0x58bc *)
mov lr L0x8384;
(* ldr.w	r11, [r1], #12                            #! EA = L0x837c; Value = 0xffc8a057; PC = 0x58c0 *)
mov r11 L0x837c;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0b08; Value = 0xffdc676d; PC = 0x58c4 *)
mov r5 L0x203f0b08;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0b0c; Value = 0xffaab579; PC = 0x58c8 *)
mov r6 L0x203f0b0c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0b10; Value = 0xff80e6ff; PC = 0x58cc *)
mov r7 L0x203f0b10;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0b14; Value = 0x000badf4; PC = 0x58d0 *)
mov r8 L0x203f0b14;

ghost r5o316@int32, r6o316@int32, r7o316@int32, r8o316@int32:
      r5o316 = r5 /\ r6o316 = r6 /\ r7o316 = r7 /\ r8o316 = r8
   && r5o316 = r5 /\ r6o316 = r6 /\ r7o316 = r7 /\ r8o316 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o316,r8o316]*[K**126,K**126])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o316,r8o316]*[K**126,K**126]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o317@int32, r8o317@int32:
      r6o317 = r6 /\ r8o317 = r8 && r6o317 = r6 /\ r8o317 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o317,r8o317]*[K** 63,K**191])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o317,r8o317]*[K** 63,K**191]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0b0c; PC = 0x591c *)
mov L0x203f0b0c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0b10; PC = 0x5920 *)
mov L0x203f0b10 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0b14; PC = 0x5924 *)
mov L0x203f0b14 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0b08; PC = 0x5928 *)
mov L0x203f0b08 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 126 ****************)

cut eqmod L0x203f0b08 (poly X [r5o316,r6o316,r7o316,r8o316]) [Q,X-K** 63]/\
    eqmod L0x203f0b0c (poly X [r5o316,r6o316,r7o316,r8o316]) [Q,X-K**319]/\
    eqmod L0x203f0b10 (poly X [r5o316,r6o316,r7o316,r8o316]) [Q,X-K**191]/\
    eqmod L0x203f0b14 (poly X [r5o316,r6o316,r7o316,r8o316]) [Q,X-K**447]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]/\
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]/\
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]/\
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]/\
    [L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* ldr.w	r12, [r1, #4]                             #! EA = L0x838c; Value = 0xfff316b6; PC = 0x58b8 *)
mov r12 L0x838c;
(* ldr.w	lr, [r1, #8]                              #! EA = L0x8390; Value = 0x001e29ce; PC = 0x58bc *)
mov lr L0x8390;
(* ldr.w	r11, [r1], #12                            #! EA = L0x8388; Value = 0x003a97d9; PC = 0x58c0 *)
mov r11 L0x8388;
(* ldr.w	r5, [r0]                                  #! EA = L0x203f0b18; Value = 0x0032a67f; PC = 0x58c4 *)
mov r5 L0x203f0b18;
(* ldr.w	r6, [r0, #4]                              #! EA = L0x203f0b1c; Value = 0xff9312af; PC = 0x58c8 *)
mov r6 L0x203f0b1c;
(* ldr.w	r7, [r0, #8]                              #! EA = L0x203f0b20; Value = 0xffc114e9; PC = 0x58cc *)
mov r7 L0x203f0b20;
(* ldr.w	r8, [r0, #12]                             #! EA = L0x203f0b24; Value = 0x0037c77c; PC = 0x58d0 *)
mov r8 L0x203f0b24;

ghost r5o318@int32, r6o318@int32, r7o318@int32, r8o318@int32:
      r5o318 = r5 /\ r6o318 = r6 /\ r7o318 = r7 /\ r8o318 = r8
   && r5o318 = r5 /\ r6o318 = r6 /\ r7o318 = r7 /\ r8o318 = r8;

(* smull	r9, r7, r7, r11                           #! PC = 0x58d4 *)
smull r7 r9 r7 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58d8 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r7, r10, r3                           #! PC = 0x58dc *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r7 r7 smlH smlc;
(* smull	r9, r8, r8, r11                           #! PC = 0x58e0 *)
smull r8 r9 r8 r11; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58e4 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x58e8 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r7,r8] ([r7o318,r8o318]*[K**254,K**254])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r7,r8] ([r7o318,r8o318]*[K**254,K**254]) [Q, Q] && true;

(* add	r5, r7                                      #! PC = 0x58ec *)
add r5 r5 r7;
(* add	r6, r8                                      #! PC = 0x58ee *)
add r6 r6 r8;
(* sub.w	r7, r5, r7, lsl #1                        #! PC = 0x58f0 *)
shl slsl r7 1@int32; sub r7 r5 slsl;
(* sub.w	r8, r6, r8, lsl #1                        #! PC = 0x58f4 *)
shl slsl r8 1@int32; sub r8 r6 slsl;

ghost r6o319@int32, r8o319@int32:
      r6o319 = r6 /\ r8o319 = r8 && r6o319 = r6 /\ r8o319 = r8;

(* smull	r9, r6, r6, r12                           #! PC = 0x58f8 *)
smull r6 r9 r6 r12; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x58fc *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r6, r10, r3                           #! PC = 0x5900 *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r6 r6 smlH smlc;
(* smull	r9, r8, r8, lr                            #! PC = 0x5904 *)
smull r8 r9 r8 lr; cast r9@int32 r9;
(* mul.w	r10, r9, r2                               #! PC = 0x5908 *)
mull mdc r10 r9 r2; cast r10@int32 r10;
(* smlal	r9, r8, r10, r3                           #! PC = 0x590c *)
smull smlH smlL r10 r3; cast r9@uint32 r9; adds smlc r9 r9 smlL;
cast r9@int32 r9; adc r8 r8 smlH smlc;

eassert eqmod [r6,r8] ([r6o319,r8o319]*[K**127,K**255])
              [Q, Q] prove with [algebra solver isl, precondition];
assume eqmod [r6,r8] ([r6o319,r8o319]*[K**127,K**255]) [Q, Q] && true;

(* add	r5, r6                                      #! PC = 0x5910 *)
add r5 r5 r6;
(* add	r7, r8                                      #! PC = 0x5912 *)
add r7 r7 r8;
(* sub.w	r6, r5, r6, lsl #1                        #! PC = 0x5914 *)
shl slsl r6 1@int32; sub r6 r5 slsl;
(* sub.w	r8, r7, r8, lsl #1                        #! PC = 0x5918 *)
shl slsl r8 1@int32; sub r8 r7 slsl;
(* str.w	r6, [r0, #4]                              #! EA = L0x203f0b1c; PC = 0x591c *)
mov L0x203f0b1c r6;
(* str.w	r7, [r0, #8]                              #! EA = L0x203f0b20; PC = 0x5920 *)
mov L0x203f0b20 r7;
(* str.w	r8, [r0, #12]                             #! EA = L0x203f0b24; PC = 0x5924 *)
mov L0x203f0b24 r8;
(* str.w	r5, [r0], #16                             #! EA = L0x203f0b18; PC = 0x5928 *)
mov L0x203f0b18 r5;
(* cmp.w	r4, r0                                    #! PC = 0x592c *)
(* cmp.w r4, r0 *)
nop;

(**************** CUT 127 ****************)

cut eqmod L0x203f0b18 (poly X [r5o318,r6o318,r7o318,r8o318]) [Q,X-K**127]/\
    eqmod L0x203f0b1c (poly X [r5o318,r6o318,r7o318,r8o318]) [Q,X-K**383]/\
    eqmod L0x203f0b20 (poly X [r5o318,r6o318,r7o318,r8o318]) [Q,X-K**255]/\
    eqmod L0x203f0b24 (poly X [r5o318,r6o318,r7o318,r8o318]) [Q,X-K**511]
    prove with [precondition]
 && [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]/\
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]/\
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]/\
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]/\
    [13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2]<=s
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]/\
    [L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24]<=s
    [13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
    prove with [precondition, cuts [60,61,62,63]];

(* #bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! PC = 0x5930 *)
#bne.w	0x58b8 <pqcrystals_dilithium_ntt+1348>   #! 0x5930 = 0x5930;
(* #ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}#! EA = L0x203ef224; Value = 0x203f0b28; PC = 0x5934 *)
#ldmia.w	sp!, {%%r4, %%r5, %%r6, %%r7, %%r8, %%r9, %%r10, %%r11, pc}#! L0x203ef224 = L0x203ef224; 0x203f0b28 = 0x203f0b28; 0x5934 = 0x5934;
(* cmp	r4, r5                                      #! PC = 0x445a *)
(* cmp r4, r5 *)
nop;
(* #bne.n	0x4450 <pqcrystals_dilithium_polyvecl_ntt+8>#! PC = 0x445c *)
#bne.n	0x4450 <pqcrystals_dilithium_polyvecl_ntt+8>#! 0x445c = 0x445c;
(* mov	r0, r4                                      #! PC = 0x4450 *)
mov r0 r4;
(* #add.w	r4, r4, #1024	@ 0x400                     #! PC = 0x4452 *)
#add.w	%%r4, %%r4, #1024	@ 0x400                     #! 0x4452 = 0x4452;
(* #bl	0x3c94 <pqcrystals_dilithium_poly_ntt>      #! PC = 0x4456 *)
#bl	0x3c94 <pqcrystals_dilithium_poly_ntt>      #! 0x4456 = 0x4456;
(* #! -> SP = 0x203ef248 *)
#! 0x203ef248 = 0x203ef248;


{
(**************** postcondition ****************)

eqmod (F**2) L0x203f0728 [Q,X-K**  1]/\eqmod (F**2) L0x203f072c [Q,X-K**257]/\
eqmod (F**2) L0x203f0730 [Q,X-K**129]/\eqmod (F**2) L0x203f0734 [Q,X-K**385]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 64]],
eqmod (F**2) L0x203f0738 [Q,X-K** 65]/\eqmod (F**2) L0x203f073c [Q,X-K**321]/\
eqmod (F**2) L0x203f0740 [Q,X-K**193]/\eqmod (F**2) L0x203f0744 [Q,X-K**449]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 65]],
eqmod (F**2) L0x203f0748 [Q,X-K** 33]/\eqmod (F**2) L0x203f074c [Q,X-K**289]/\
eqmod (F**2) L0x203f0750 [Q,X-K**161]/\eqmod (F**2) L0x203f0754 [Q,X-K**417]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 66]],
eqmod (F**2) L0x203f0758 [Q,X-K** 97]/\eqmod (F**2) L0x203f075c [Q,X-K**353]/\
eqmod (F**2) L0x203f0760 [Q,X-K**225]/\eqmod (F**2) L0x203f0764 [Q,X-K**481]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 67]],
eqmod (F**2) L0x203f0768 [Q,X-K** 17]/\eqmod (F**2) L0x203f076c [Q,X-K**273]/\
eqmod (F**2) L0x203f0770 [Q,X-K**145]/\eqmod (F**2) L0x203f0774 [Q,X-K**401]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 68]],
eqmod (F**2) L0x203f0778 [Q,X-K** 81]/\eqmod (F**2) L0x203f077c [Q,X-K**337]/\
eqmod (F**2) L0x203f0780 [Q,X-K**209]/\eqmod (F**2) L0x203f0784 [Q,X-K**465]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 69]],
eqmod (F**2) L0x203f0788 [Q,X-K** 49]/\eqmod (F**2) L0x203f078c [Q,X-K**305]/\
eqmod (F**2) L0x203f0790 [Q,X-K**177]/\eqmod (F**2) L0x203f0794 [Q,X-K**433]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 70]],
eqmod (F**2) L0x203f0798 [Q,X-K**113]/\eqmod (F**2) L0x203f079c [Q,X-K**369]/\
eqmod (F**2) L0x203f07a0 [Q,X-K**241]/\eqmod (F**2) L0x203f07a4 [Q,X-K**497]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35, 71]],
eqmod (F**2) L0x203f07a8 [Q,X-K**  9]/\eqmod (F**2) L0x203f07ac [Q,X-K**265]/\
eqmod (F**2) L0x203f07b0 [Q,X-K**137]/\eqmod (F**2) L0x203f07b4 [Q,X-K**393]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 72]],
eqmod (F**2) L0x203f07b8 [Q,X-K** 73]/\eqmod (F**2) L0x203f07bc [Q,X-K**329]/\
eqmod (F**2) L0x203f07c0 [Q,X-K**201]/\eqmod (F**2) L0x203f07c4 [Q,X-K**457]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 73]],
eqmod (F**2) L0x203f07c8 [Q,X-K** 41]/\eqmod (F**2) L0x203f07cc [Q,X-K**297]/\
eqmod (F**2) L0x203f07d0 [Q,X-K**169]/\eqmod (F**2) L0x203f07d4 [Q,X-K**425]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 74]],
eqmod (F**2) L0x203f07d8 [Q,X-K**105]/\eqmod (F**2) L0x203f07dc [Q,X-K**361]/\
eqmod (F**2) L0x203f07e0 [Q,X-K**233]/\eqmod (F**2) L0x203f07e4 [Q,X-K**489]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 75]],
eqmod (F**2) L0x203f07e8 [Q,X-K** 25]/\eqmod (F**2) L0x203f07ec [Q,X-K**281]/\
eqmod (F**2) L0x203f07f0 [Q,X-K**153]/\eqmod (F**2) L0x203f07f4 [Q,X-K**409]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 76]],
eqmod (F**2) L0x203f07f8 [Q,X-K** 89]/\eqmod (F**2) L0x203f07fc [Q,X-K**345]/\
eqmod (F**2) L0x203f0800 [Q,X-K**217]/\eqmod (F**2) L0x203f0804 [Q,X-K**473]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 77]],
eqmod (F**2) L0x203f0808 [Q,X-K** 57]/\eqmod (F**2) L0x203f080c [Q,X-K**313]/\
eqmod (F**2) L0x203f0810 [Q,X-K**185]/\eqmod (F**2) L0x203f0814 [Q,X-K**441]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 78]],
eqmod (F**2) L0x203f0818 [Q,X-K**121]/\eqmod (F**2) L0x203f081c [Q,X-K**377]/\
eqmod (F**2) L0x203f0820 [Q,X-K**249]/\eqmod (F**2) L0x203f0824 [Q,X-K**505]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39, 79]],
eqmod (F**2) L0x203f0828 [Q,X-K**  5]/\eqmod (F**2) L0x203f082c [Q,X-K**261]/\
eqmod (F**2) L0x203f0830 [Q,X-K**133]/\eqmod (F**2) L0x203f0834 [Q,X-K**389]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 80]],
eqmod (F**2) L0x203f0838 [Q,X-K** 69]/\eqmod (F**2) L0x203f083c [Q,X-K**325]/\
eqmod (F**2) L0x203f0840 [Q,X-K**197]/\eqmod (F**2) L0x203f0844 [Q,X-K**453]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 81]],
eqmod (F**2) L0x203f0848 [Q,X-K** 37]/\eqmod (F**2) L0x203f084c [Q,X-K**293]/\
eqmod (F**2) L0x203f0850 [Q,X-K**165]/\eqmod (F**2) L0x203f0854 [Q,X-K**421]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 82]],
eqmod (F**2) L0x203f0858 [Q,X-K**101]/\eqmod (F**2) L0x203f085c [Q,X-K**357]/\
eqmod (F**2) L0x203f0860 [Q,X-K**229]/\eqmod (F**2) L0x203f0864 [Q,X-K**485]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 83]],
eqmod (F**2) L0x203f0868 [Q,X-K** 21]/\eqmod (F**2) L0x203f086c [Q,X-K**277]/\
eqmod (F**2) L0x203f0870 [Q,X-K**149]/\eqmod (F**2) L0x203f0874 [Q,X-K**405]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 84]],
eqmod (F**2) L0x203f0878 [Q,X-K** 85]/\eqmod (F**2) L0x203f087c [Q,X-K**341]/\
eqmod (F**2) L0x203f0880 [Q,X-K**213]/\eqmod (F**2) L0x203f0884 [Q,X-K**469]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 85]],
eqmod (F**2) L0x203f0888 [Q,X-K** 53]/\eqmod (F**2) L0x203f088c [Q,X-K**309]/\
eqmod (F**2) L0x203f0890 [Q,X-K**181]/\eqmod (F**2) L0x203f0894 [Q,X-K**437]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 86]],
eqmod (F**2) L0x203f0898 [Q,X-K**117]/\eqmod (F**2) L0x203f089c [Q,X-K**373]/\
eqmod (F**2) L0x203f08a0 [Q,X-K**245]/\eqmod (F**2) L0x203f08a4 [Q,X-K**501]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,40,41,42,43, 87]],
eqmod (F**2) L0x203f08a8 [Q,X-K** 13]/\eqmod (F**2) L0x203f08ac [Q,X-K**269]/\
eqmod (F**2) L0x203f08b0 [Q,X-K**141]/\eqmod (F**2) L0x203f08b4 [Q,X-K**397]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 88]],
eqmod (F**2) L0x203f08b8 [Q,X-K** 77]/\eqmod (F**2) L0x203f08bc [Q,X-K**333]/\
eqmod (F**2) L0x203f08c0 [Q,X-K**205]/\eqmod (F**2) L0x203f08c4 [Q,X-K**461]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 89]],
eqmod (F**2) L0x203f08c8 [Q,X-K** 45]/\eqmod (F**2) L0x203f08cc [Q,X-K**301]/\
eqmod (F**2) L0x203f08d0 [Q,X-K**173]/\eqmod (F**2) L0x203f08d4 [Q,X-K**429]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 90]],
eqmod (F**2) L0x203f08d8 [Q,X-K**109]/\eqmod (F**2) L0x203f08dc [Q,X-K**365]/\
eqmod (F**2) L0x203f08e0 [Q,X-K**237]/\eqmod (F**2) L0x203f08e4 [Q,X-K**493]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 91]],
eqmod (F**2) L0x203f08e8 [Q,X-K** 29]/\eqmod (F**2) L0x203f08ec [Q,X-K**285]/\
eqmod (F**2) L0x203f08f0 [Q,X-K**157]/\eqmod (F**2) L0x203f08f4 [Q,X-K**413]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 92]],
eqmod (F**2) L0x203f08f8 [Q,X-K** 93]/\eqmod (F**2) L0x203f08fc [Q,X-K**349]/\
eqmod (F**2) L0x203f0900 [Q,X-K**221]/\eqmod (F**2) L0x203f0904 [Q,X-K**477]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 93]],
eqmod (F**2) L0x203f0908 [Q,X-K** 61]/\eqmod (F**2) L0x203f090c [Q,X-K**317]/\
eqmod (F**2) L0x203f0910 [Q,X-K**189]/\eqmod (F**2) L0x203f0914 [Q,X-K**445]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 94]],
eqmod (F**2) L0x203f0918 [Q,X-K**125]/\eqmod (F**2) L0x203f091c [Q,X-K**381]/\
eqmod (F**2) L0x203f0920 [Q,X-K**253]/\eqmod (F**2) L0x203f0924 [Q,X-K**509]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,44,45,46,47, 95]],
eqmod (F**2) L0x203f0928 [Q,X-K**  3]/\eqmod (F**2) L0x203f092c [Q,X-K**259]/\
eqmod (F**2) L0x203f0930 [Q,X-K**131]/\eqmod (F**2) L0x203f0934 [Q,X-K**387]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51, 96]],
eqmod (F**2) L0x203f0938 [Q,X-K** 67]/\eqmod (F**2) L0x203f093c [Q,X-K**323]/\
eqmod (F**2) L0x203f0940 [Q,X-K**195]/\eqmod (F**2) L0x203f0944 [Q,X-K**451]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51, 97]],
eqmod (F**2) L0x203f0948 [Q,X-K** 35]/\eqmod (F**2) L0x203f094c [Q,X-K**291]/\
eqmod (F**2) L0x203f0950 [Q,X-K**163]/\eqmod (F**2) L0x203f0954 [Q,X-K**419]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51, 98]],
eqmod (F**2) L0x203f0958 [Q,X-K** 99]/\eqmod (F**2) L0x203f095c [Q,X-K**355]/\
eqmod (F**2) L0x203f0960 [Q,X-K**227]/\eqmod (F**2) L0x203f0964 [Q,X-K**483]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51, 99]],
eqmod (F**2) L0x203f0968 [Q,X-K** 19]/\eqmod (F**2) L0x203f096c [Q,X-K**275]/\
eqmod (F**2) L0x203f0970 [Q,X-K**147]/\eqmod (F**2) L0x203f0974 [Q,X-K**403]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51,100]],
eqmod (F**2) L0x203f0978 [Q,X-K** 83]/\eqmod (F**2) L0x203f097c [Q,X-K**339]/\
eqmod (F**2) L0x203f0980 [Q,X-K**211]/\eqmod (F**2) L0x203f0984 [Q,X-K**467]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51,101]],
eqmod (F**2) L0x203f0988 [Q,X-K** 51]/\eqmod (F**2) L0x203f098c [Q,X-K**307]/\
eqmod (F**2) L0x203f0990 [Q,X-K**179]/\eqmod (F**2) L0x203f0994 [Q,X-K**435]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51,102]],
eqmod (F**2) L0x203f0998 [Q,X-K**115]/\eqmod (F**2) L0x203f099c [Q,X-K**371]/\
eqmod (F**2) L0x203f09a0 [Q,X-K**243]/\eqmod (F**2) L0x203f09a4 [Q,X-K**499]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,48,49,50,51,103]],
eqmod (F**2) L0x203f09a8 [Q,X-K** 11]/\eqmod (F**2) L0x203f09ac [Q,X-K**267]/\
eqmod (F**2) L0x203f09b0 [Q,X-K**139]/\eqmod (F**2) L0x203f09b4 [Q,X-K**395]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,104]],
eqmod (F**2) L0x203f09b8 [Q,X-K** 75]/\eqmod (F**2) L0x203f09bc [Q,X-K**331]/\
eqmod (F**2) L0x203f09c0 [Q,X-K**203]/\eqmod (F**2) L0x203f09c4 [Q,X-K**459]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,105]],
eqmod (F**2) L0x203f09c8 [Q,X-K** 43]/\eqmod (F**2) L0x203f09cc [Q,X-K**299]/\
eqmod (F**2) L0x203f09d0 [Q,X-K**171]/\eqmod (F**2) L0x203f09d4 [Q,X-K**427]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,106]],
eqmod (F**2) L0x203f09d8 [Q,X-K**107]/\eqmod (F**2) L0x203f09dc [Q,X-K**363]/\
eqmod (F**2) L0x203f09e0 [Q,X-K**235]/\eqmod (F**2) L0x203f09e4 [Q,X-K**491]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,107]],
eqmod (F**2) L0x203f09e8 [Q,X-K** 27]/\eqmod (F**2) L0x203f09ec [Q,X-K**283]/\
eqmod (F**2) L0x203f09f0 [Q,X-K**155]/\eqmod (F**2) L0x203f09f4 [Q,X-K**411]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,108]],
eqmod (F**2) L0x203f09f8 [Q,X-K** 91]/\eqmod (F**2) L0x203f09fc [Q,X-K**347]/\
eqmod (F**2) L0x203f0a00 [Q,X-K**219]/\eqmod (F**2) L0x203f0a04 [Q,X-K**475]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,109]],
eqmod (F**2) L0x203f0a08 [Q,X-K** 59]/\eqmod (F**2) L0x203f0a0c [Q,X-K**315]/\
eqmod (F**2) L0x203f0a10 [Q,X-K**187]/\eqmod (F**2) L0x203f0a14 [Q,X-K**443]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,110]],
eqmod (F**2) L0x203f0a18 [Q,X-K**123]/\eqmod (F**2) L0x203f0a1c [Q,X-K**379]/\
eqmod (F**2) L0x203f0a20 [Q,X-K**251]/\eqmod (F**2) L0x203f0a24 [Q,X-K**507]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,52,53,54,55,111]],
eqmod (F**2) L0x203f0a28 [Q,X-K**  7]/\eqmod (F**2) L0x203f0a2c [Q,X-K**263]/\
eqmod (F**2) L0x203f0a30 [Q,X-K**135]/\eqmod (F**2) L0x203f0a34 [Q,X-K**391]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,112]],
eqmod (F**2) L0x203f0a38 [Q,X-K** 71]/\eqmod (F**2) L0x203f0a3c [Q,X-K**327]/\
eqmod (F**2) L0x203f0a40 [Q,X-K**199]/\eqmod (F**2) L0x203f0a44 [Q,X-K**455]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,113]],
eqmod (F**2) L0x203f0a48 [Q,X-K** 39]/\eqmod (F**2) L0x203f0a4c [Q,X-K**295]/\
eqmod (F**2) L0x203f0a50 [Q,X-K**167]/\eqmod (F**2) L0x203f0a54 [Q,X-K**423]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,114]],
eqmod (F**2) L0x203f0a58 [Q,X-K**103]/\eqmod (F**2) L0x203f0a5c [Q,X-K**359]/\
eqmod (F**2) L0x203f0a60 [Q,X-K**231]/\eqmod (F**2) L0x203f0a64 [Q,X-K**487]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,115]],
eqmod (F**2) L0x203f0a68 [Q,X-K** 23]/\eqmod (F**2) L0x203f0a6c [Q,X-K**279]/\
eqmod (F**2) L0x203f0a70 [Q,X-K**151]/\eqmod (F**2) L0x203f0a74 [Q,X-K**407]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,116]],
eqmod (F**2) L0x203f0a78 [Q,X-K** 87]/\eqmod (F**2) L0x203f0a7c [Q,X-K**343]/\
eqmod (F**2) L0x203f0a80 [Q,X-K**215]/\eqmod (F**2) L0x203f0a84 [Q,X-K**471]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,117]],
eqmod (F**2) L0x203f0a88 [Q,X-K** 55]/\eqmod (F**2) L0x203f0a8c [Q,X-K**311]/\
eqmod (F**2) L0x203f0a90 [Q,X-K**183]/\eqmod (F**2) L0x203f0a94 [Q,X-K**439]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,118]],
eqmod (F**2) L0x203f0a98 [Q,X-K**119]/\eqmod (F**2) L0x203f0a9c [Q,X-K**375]/\
eqmod (F**2) L0x203f0aa0 [Q,X-K**247]/\eqmod (F**2) L0x203f0aa4 [Q,X-K**503]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,56,57,58,59,119]],
eqmod (F**2) L0x203f0aa8 [Q,X-K** 15]/\eqmod (F**2) L0x203f0aac [Q,X-K**271]/\
eqmod (F**2) L0x203f0ab0 [Q,X-K**143]/\eqmod (F**2) L0x203f0ab4 [Q,X-K**399]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,120]],
eqmod (F**2) L0x203f0ab8 [Q,X-K** 79]/\eqmod (F**2) L0x203f0abc [Q,X-K**335]/\
eqmod (F**2) L0x203f0ac0 [Q,X-K**207]/\eqmod (F**2) L0x203f0ac4 [Q,X-K**463]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,121]],
eqmod (F**2) L0x203f0ac8 [Q,X-K** 47]/\eqmod (F**2) L0x203f0acc [Q,X-K**303]/\
eqmod (F**2) L0x203f0ad0 [Q,X-K**175]/\eqmod (F**2) L0x203f0ad4 [Q,X-K**431]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,122]],
eqmod (F**2) L0x203f0ad8 [Q,X-K**111]/\eqmod (F**2) L0x203f0adc [Q,X-K**367]/\
eqmod (F**2) L0x203f0ae0 [Q,X-K**239]/\eqmod (F**2) L0x203f0ae4 [Q,X-K**495]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,123]],
eqmod (F**2) L0x203f0ae8 [Q,X-K** 31]/\eqmod (F**2) L0x203f0aec [Q,X-K**287]/\
eqmod (F**2) L0x203f0af0 [Q,X-K**159]/\eqmod (F**2) L0x203f0af4 [Q,X-K**415]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,124]],
eqmod (F**2) L0x203f0af8 [Q,X-K** 95]/\eqmod (F**2) L0x203f0afc [Q,X-K**351]/\
eqmod (F**2) L0x203f0b00 [Q,X-K**223]/\eqmod (F**2) L0x203f0b04 [Q,X-K**479]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,125]],
eqmod (F**2) L0x203f0b08 [Q,X-K** 63]/\eqmod (F**2) L0x203f0b0c [Q,X-K**319]/\
eqmod (F**2) L0x203f0b10 [Q,X-K**191]/\eqmod (F**2) L0x203f0b14 [Q,X-K**447]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,126]],
eqmod (F**2) L0x203f0b18 [Q,X-K**127]/\eqmod (F**2) L0x203f0b1c [Q,X-K**383]/\
eqmod (F**2) L0x203f0b20 [Q,X-K**255]/\eqmod (F**2) L0x203f0b24 [Q,X-K**511]
prove with [precondition, all ghosts,
cuts [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,
      20,21,22,23,24,25,26,27,28,29,30,31,60,61,62,63,127]]
 &&
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734,
 L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744] /\
[L0x203f0728,L0x203f072c,L0x203f0730,L0x203f0734,
 L0x203f0738,L0x203f073c,L0x203f0740,L0x203f0744] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754,
 L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764] /\
[L0x203f0748,L0x203f074c,L0x203f0750,L0x203f0754,
 L0x203f0758,L0x203f075c,L0x203f0760,L0x203f0764] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774,
 L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784] /\
[L0x203f0768,L0x203f076c,L0x203f0770,L0x203f0774,
 L0x203f0778,L0x203f077c,L0x203f0780,L0x203f0784] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794,
 L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4] /\
[L0x203f0788,L0x203f078c,L0x203f0790,L0x203f0794,
 L0x203f0798,L0x203f079c,L0x203f07a0,L0x203f07a4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4,
 L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4] /\
[L0x203f07a8,L0x203f07ac,L0x203f07b0,L0x203f07b4,
 L0x203f07b8,L0x203f07bc,L0x203f07c0,L0x203f07c4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4,
 L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4] /\
[L0x203f07c8,L0x203f07cc,L0x203f07d0,L0x203f07d4,
 L0x203f07d8,L0x203f07dc,L0x203f07e0,L0x203f07e4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4,
 L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804] /\
[L0x203f07e8,L0x203f07ec,L0x203f07f0,L0x203f07f4,
 L0x203f07f8,L0x203f07fc,L0x203f0800,L0x203f0804] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814,
 L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824] /\
[L0x203f0808,L0x203f080c,L0x203f0810,L0x203f0814,
 L0x203f0818,L0x203f081c,L0x203f0820,L0x203f0824] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834,
 L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844] /\
[L0x203f0828,L0x203f082c,L0x203f0830,L0x203f0834,
 L0x203f0838,L0x203f083c,L0x203f0840,L0x203f0844] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854,
 L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864] /\
[L0x203f0848,L0x203f084c,L0x203f0850,L0x203f0854,
 L0x203f0858,L0x203f085c,L0x203f0860,L0x203f0864] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874,
 L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884] /\
[L0x203f0868,L0x203f086c,L0x203f0870,L0x203f0874,
 L0x203f0878,L0x203f087c,L0x203f0880,L0x203f0884] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894,
 L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4] /\
[L0x203f0888,L0x203f088c,L0x203f0890,L0x203f0894,
 L0x203f0898,L0x203f089c,L0x203f08a0,L0x203f08a4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4,
 L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4] /\
[L0x203f08a8,L0x203f08ac,L0x203f08b0,L0x203f08b4,
 L0x203f08b8,L0x203f08bc,L0x203f08c0,L0x203f08c4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4,
 L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4] /\
[L0x203f08c8,L0x203f08cc,L0x203f08d0,L0x203f08d4,
 L0x203f08d8,L0x203f08dc,L0x203f08e0,L0x203f08e4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4,
 L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904] /\
[L0x203f08e8,L0x203f08ec,L0x203f08f0,L0x203f08f4,
 L0x203f08f8,L0x203f08fc,L0x203f0900,L0x203f0904] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914,
 L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924] /\
[L0x203f0908,L0x203f090c,L0x203f0910,L0x203f0914,
 L0x203f0918,L0x203f091c,L0x203f0920,L0x203f0924] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934,
 L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944] /\
[L0x203f0928,L0x203f092c,L0x203f0930,L0x203f0934,
 L0x203f0938,L0x203f093c,L0x203f0940,L0x203f0944] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954,
 L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964] /\
[L0x203f0948,L0x203f094c,L0x203f0950,L0x203f0954,
 L0x203f0958,L0x203f095c,L0x203f0960,L0x203f0964] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974,
 L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984] /\
[L0x203f0968,L0x203f096c,L0x203f0970,L0x203f0974,
 L0x203f0978,L0x203f097c,L0x203f0980,L0x203f0984] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994,
 L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4] /\
[L0x203f0988,L0x203f098c,L0x203f0990,L0x203f0994,
 L0x203f0998,L0x203f099c,L0x203f09a0,L0x203f09a4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4,
 L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4] /\
[L0x203f09a8,L0x203f09ac,L0x203f09b0,L0x203f09b4,
 L0x203f09b8,L0x203f09bc,L0x203f09c0,L0x203f09c4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4,
 L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4] /\
[L0x203f09c8,L0x203f09cc,L0x203f09d0,L0x203f09d4,
 L0x203f09d8,L0x203f09dc,L0x203f09e0,L0x203f09e4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4,
 L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04] /\
[L0x203f09e8,L0x203f09ec,L0x203f09f0,L0x203f09f4,
 L0x203f09f8,L0x203f09fc,L0x203f0a00,L0x203f0a04] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14,
 L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24] /\
[L0x203f0a08,L0x203f0a0c,L0x203f0a10,L0x203f0a14,
 L0x203f0a18,L0x203f0a1c,L0x203f0a20,L0x203f0a24] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34,
 L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44] /\
[L0x203f0a28,L0x203f0a2c,L0x203f0a30,L0x203f0a34,
 L0x203f0a38,L0x203f0a3c,L0x203f0a40,L0x203f0a44] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54,
 L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64] /\
[L0x203f0a48,L0x203f0a4c,L0x203f0a50,L0x203f0a54,
 L0x203f0a58,L0x203f0a5c,L0x203f0a60,L0x203f0a64] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74,
 L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84] /\
[L0x203f0a68,L0x203f0a6c,L0x203f0a70,L0x203f0a74,
 L0x203f0a78,L0x203f0a7c,L0x203f0a80,L0x203f0a84] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94,
 L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4] /\
[L0x203f0a88,L0x203f0a8c,L0x203f0a90,L0x203f0a94,
 L0x203f0a98,L0x203f0a9c,L0x203f0aa0,L0x203f0aa4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4,
 L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4] /\
[L0x203f0aa8,L0x203f0aac,L0x203f0ab0,L0x203f0ab4,
 L0x203f0ab8,L0x203f0abc,L0x203f0ac0,L0x203f0ac4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4,
 L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4] /\
[L0x203f0ac8,L0x203f0acc,L0x203f0ad0,L0x203f0ad4,
 L0x203f0ad8,L0x203f0adc,L0x203f0ae0,L0x203f0ae4] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4,
 L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04] /\
[L0x203f0ae8,L0x203f0aec,L0x203f0af0,L0x203f0af4,
 L0x203f0af8,L0x203f0afc,L0x203f0b00,L0x203f0b04] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2] /\
[13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2,
 13@32*NQ2,13@32*NQ2,13@32*NQ2,13@32*NQ2] <=s
[L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14,
 L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24] /\
[L0x203f0b08,L0x203f0b0c,L0x203f0b10,L0x203f0b14,
 L0x203f0b18,L0x203f0b1c,L0x203f0b20,L0x203f0b24] <=s
[13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2,13@32*Q2]
prove with [all cuts]
}

