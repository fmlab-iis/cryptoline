
# from ssse3/gf16_tabs.c
gf256_mulbase = [
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07, 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f, 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0,
0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e, 0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e, 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb,
0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c, 0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c, 0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed,
0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38, 0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78, 0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1,
0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0, 0x00,0x1b,0x36,0x2d,0x6c,0x77,0x5a,0x41, 0xd8,0xc3,0xee,0xf5,0xb4,0xaf,0x82,0x99,
0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb, 0x00,0x36,0x6c,0x5a,0xd8,0xee,0xb4,0x82, 0xab,0x9d,0xc7,0xf1,0x73,0x45,0x1f,0x29,
0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed, 0x00,0x6c,0xd8,0xb4,0xab,0xc7,0x73,0x1f, 0x4d,0x21,0x95,0xf9,0xe6,0x8a,0x3e,0x52,
0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1, 0x00,0xd8,0xab,0x73,0x4d,0x95,0xe6,0x3e, 0x9a,0x42,0x31,0xe9,0xd7,0x0f,0x7c,0xa4
]    


def print_inputs () :
    for i in range(0, 64, 4) :
        print ("  {0} {1}{2:02x}, {0} {1}{3:02x}, {0} {1}{4:02x}, {0} {1}{5:02x},".
               format("uint8", "acc", i, i+1, i+2, i+3))
    for i in range(0, 64, 4) :
        print ("  {0} {1}{2:02x}, {0} {1}{3:02x}, {0} {1}{4:02x}, {0} {1}{5:02x},".
               format("uint8", "a", i, i+1, i+2, i+3))
    print ("  uint8 b")


def initialize_mem (base, var) :
    print ("(* initialize with {0}'s *)".format(var))
    for i in range(0, 64, 2) :
        print ("join L0x{1:x} {0}{2:02x} {0}{3:02x};".
               format(var, base+i, i+1, i),
               end = '  ' if i % 4 == 0 else '\n')


def print_initialization () :
    initialize_mem (acc_base, "acc")
    initialize_mem (a_base, "a")
    print ()
    print ("vpc rdx@uint64 b;")
    print ()
    print ("nondet L0x7fffffffc8c8@uint64;")
    print ("nondet rcx@uint64;  nondet rdi@uint64;")
    print ("nondet rsi@uint64;  nondet rsp@uint64;")

        
def initialize_mulbase (base) :
    print ("(* mulbase *)")
    for i in range (0, len(gf256_mulbase) - 1, 4) :
        print ("mov L0x{0:x} 0x{1:04x}@uint16;  mov L0x{2:x} 0x{3:04x}@uint16;".
               format(base+i, gf256_mulbase[i]+(gf256_mulbase[i+1]<<8),
                      base+i+2, gf256_mulbase[i+2]+(gf256_mulbase[i+3]<<8)))

        
def initialize_mask (base, const) :
    print ("(* mask with const {0} (0x{0:04x}) *)".format(const))
    for i in range (16) :
        print ("mov L0x{0:x} 0x{1:04x}@uint16;".format(base+2*i, const),
               end = '  ' if i % 2 == 0 else '\n')
        

def print_constants () :
    initialize_mulbase (mulbase_base)
    initialize_mask (mask_1_base, 1)
    initialize_mask (mask_4_base, 4)
    initialize_mask (mask_16_base, 16)
    initialize_mask (mask_64_base, 64)
    initialize_mask (mask_f_base, 0x0f0f)


def print_outputs (base, var) :
    for i in range(0, 64, 2) :
        print ("spl {0}{3:02x} {0}{2:02x} L0x{1:x} 8;".
               format(var, base+i, i, i+1),
               end = '  ' if i % 4 == 0 else '\n')
        

acc_base = 0x7fffffffc980
a_base = 0x7fffffffc920
mulbase_base = 0x555555571140
mask_1_base = 0x55555556f040
mask_4_base = 0x55555556f060
mask_16_base = 0x55555556f080
mask_64_base = 0x55555556f0a0
mask_f_base = 0x55555556f0c0


print ("\n(* ========== inputs ========== *)\n")
print_inputs ()

print ("\n(* ========== initialization ========== *)\n")
print_initialization ()

print ("\n(* ========== constants ========== *)\n")
print_constants ()

print ("\n(* ========== outputs ========== *)\n")
print_outputs (acc_base, "r")

