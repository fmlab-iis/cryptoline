(* quine: -v -isafety -jobs 10 -no_carry_constraint -btor -slicing -o cryptoline-fp12.log mul_fp12-armv8.cl
Parsing Cryptoline file:                [OK]            0.289496 seconds
Checking well-formedness:               [OK]            0.062814 seconds
Transforming to SSA form:               [OK]            0.066328 seconds
Rewriting assignments:                  [OK]            160.463947 seconds
Verifying program safety:               [OK]            151.082927 seconds
Verifying range assertions:             [OK]            747.586185 seconds
Verifying range specification:          [OK]            3326.624817 seconds
Rewriting value-preserved casting:      [OK]            0.001490 seconds
Verifying algebraic assertions:         [OK]            18.131136 seconds
Verifying algebraic specification:      [OK]            543.195423 seconds
Verification result:                    [OK]            4946.715298 seconds
*)

proc mul_fp6x2 (uint64 ret00, uint64 ret01, uint64 ret02,
                uint64 ret03, uint64 ret04, uint64 ret05,
                uint64 ret06, uint64 ret07, uint64 ret08,
                uint64 ret09, uint64 ret0a, uint64 ret0b,
                uint64 ret10, uint64 ret11, uint64 ret12,
                uint64 ret13, uint64 ret14, uint64 ret15,
                uint64 ret16, uint64 ret17, uint64 ret18,
                uint64 ret19, uint64 ret1a, uint64 ret1b,
                uint64 ret20, uint64 ret21, uint64 ret22,
                uint64 ret23, uint64 ret24, uint64 ret25,
                uint64 ret26, uint64 ret27, uint64 ret28,
                uint64 ret29, uint64 ret2a, uint64 ret2b,
                uint64 ret30, uint64 ret31, uint64 ret32,
                uint64 ret33, uint64 ret34, uint64 ret35,
                uint64 ret36, uint64 ret37, uint64 ret38,
                uint64 ret39, uint64 ret3a, uint64 ret3b,
                uint64 ret40, uint64 ret41, uint64 ret42,
                uint64 ret43, uint64 ret44, uint64 ret45,
                uint64 ret46, uint64 ret47, uint64 ret48,
                uint64 ret49, uint64 ret4a, uint64 ret4b,
                uint64 ret50, uint64 ret51, uint64 ret52,
                uint64 ret53, uint64 ret54, uint64 ret55,
                uint64 ret56, uint64 ret57, uint64 ret58,
                uint64 ret59, uint64 ret5a, uint64 ret5b,

                uint64 a00, uint64 a01, uint64 a02,
                uint64 a03, uint64 a04, uint64 a05,
                uint64 a10, uint64 a11, uint64 a12,
                uint64 a13, uint64 a14, uint64 a15,
                uint64 a20, uint64 a21, uint64 a22,
                uint64 a23, uint64 a24, uint64 a25,
                uint64 a30, uint64 a31, uint64 a32,
                uint64 a33, uint64 a34, uint64 a35,
                uint64 a40, uint64 a41, uint64 a42,
                uint64 a43, uint64 a44, uint64 a45,
                uint64 a50, uint64 a51, uint64 a52,
                uint64 a53, uint64 a54, uint64 a55,

                uint64 b00, uint64 b01, uint64 b02,
                uint64 b03, uint64 b04, uint64 b05,
                uint64 b10, uint64 b11, uint64 b12,
                uint64 b13, uint64 b14, uint64 b15,
                uint64 b20, uint64 b21, uint64 b22,
                uint64 b23, uint64 b24, uint64 b25,
                uint64 b30, uint64 b31, uint64 b32,
                uint64 b33, uint64 b34, uint64 b35,
                uint64 b40, uint64 b41, uint64 b42,
                uint64 b43, uint64 b44, uint64 b45,
                uint64 b50, uint64 b51, uint64 b52,
                uint64 b53, uint64 b54, uint64 b55,

                uint64  m0, uint64  m1, uint64  m2,
                uint64  m3, uint64  m4, uint64  m5,

                uint64  mp,
                uint64  x0,  uint64 x1,  uint64 x2,
                uint64 x19, uint64 x20, uint64 x21, uint64 x22, uint64 x23,
                uint64 x24, uint64 x25, uint64 x26, uint64 x27, uint64 x28,
                uint64 x29, uint64 x30,
                uint64 sp,

                uint64   U, uint64   V, uint64  W) =
{
  true
&&
  true
}

cut and [m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
    prove with precondition
 && and [m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         limbs 64 [a00,a01,a02,a03,a04,a05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a10,a11,a12,a13,a14,a15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a20,a21,a22,a23,a24,a25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a30,a31,a32,a33,a34,a35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a40,a41,a42,a43,a44,a45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a50,a51,a52,a53,a54,a55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b00,b01,b02,b03,b04,b05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b10,b11,b12,b13,b14,b15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b20,b21,b22,b23,b24,b25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b30,b31,b32,b33,b34,b35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b40,b41,b42,b43,b44,b45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b50,b51,b52,b53,b54,b55] <u limbs 64 [m0,m1,m2,m3,m4,m5]]
    prove with precondition, all cuts;

(* NOTE: save old values *)
mov x19o x19; mov x20o x20; mov x21o x21; mov x22o x22; mov x23o x23;
mov x24o x24; mov x25o x25; mov x26o x26; mov x27o x27; mov x28o x28;
mov x29o x29; mov x30o x30;

mov LL0x4000029fb0 0x000000400085d6d0@uint64;
mov LL0x400085d6d0 0xb9a8639ce44cac00@uint64;
mov LL0x4000029fd8 0x0000004000016928@uint64;
mov x0 0x4000829d98@uint64;
mov x1 0x400082a048@uint64;
mov x2 0x400082a168@uint64;

mov LL0x400082a048 a00; mov LL0x400082a050 a01; mov LL0x400082a058 a02;
mov LL0x400082a060 a03; mov LL0x400082a068 a04; mov LL0x400082a070 a05;

mov LL0x400082a078 a10; mov LL0x400082a080 a11; mov LL0x400082a088 a12;
mov LL0x400082a090 a13; mov LL0x400082a098 a14; mov LL0x400082a0a0 a15;

mov LL0x400082a0a8 a20; mov LL0x400082a0b0 a21; mov LL0x400082a0b8 a22;
mov LL0x400082a0c0 a23; mov LL0x400082a0c8 a24; mov LL0x400082a0d0 a25;

mov LL0x400082a0d8 a30; mov LL0x400082a0e0 a31; mov LL0x400082a0e8 a32;
mov LL0x400082a0f0 a33; mov LL0x400082a0f8 a34; mov LL0x400082a100 a35;

mov LL0x400082a108 a40; mov LL0x400082a110 a41; mov LL0x400082a118 a42;
mov LL0x400082a120 a43; mov LL0x400082a128 a44; mov LL0x400082a130 a45;

mov LL0x400082a138 a50; mov LL0x400082a140 a51; mov LL0x400082a148 a52;
mov LL0x400082a150 a53; mov LL0x400082a158 a54; mov LL0x400082a160 a55;

mov LL0x400082a168 b00; mov LL0x400082a170 b01; mov LL0x400082a178 b02;
mov LL0x400082a180 b03; mov LL0x400082a188 b04; mov LL0x400082a190 b05;

mov LL0x400082a198 b10; mov LL0x400082a1a0 b11; mov LL0x400082a1a8 b12;
mov LL0x400082a1b0 b13; mov LL0x400082a1b8 b14; mov LL0x400082a1c0 b15;

mov LL0x400082a1c8 b20; mov LL0x400082a1d0 b21; mov LL0x400082a1d8 b22;
mov LL0x400082a1e0 b23; mov LL0x400082a1e8 b24; mov LL0x400082a1f0 b25;

mov LL0x400082a1f8 b30; mov LL0x400082a200 b31; mov LL0x400082a208 b32;
mov LL0x400082a210 b33; mov LL0x400082a218 b34; mov LL0x400082a220 b35;

mov LL0x400082a228 b40; mov LL0x400082a230 b41; mov LL0x400082a238 b42;
mov LL0x400082a240 b43; mov LL0x400082a248 b44; mov LL0x400082a250 b45;

mov LL0x400082a258 b50; mov LL0x400082a260 b51; mov LL0x400082a268 b52;
mov LL0x400082a270 b53; mov LL0x400082a278 b54; mov LL0x400082a280 b55;

mov LL0x4000016928 m0; mov LL0x4000016930 m1; mov LL0x4000016938 m2;
mov LL0x4000016940 m3; mov LL0x4000016948 m4; mov LL0x4000016950 m5;

(* #sub	sp, sp, #0x3c0                              #! PC = 0x274877950136 *)
#sub	%%sp, %%sp, #0x3c0                              #! 0x274877950136 = 0x274877950136;
(* stp	x29, x30, [sp]                              #! EA = L0x4000829990; PC = 0x274877950140 *)
mov LL0x4000829990 x29;
mov LL0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877950144 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877950148 *)
mov LL0x40008299a0 x19;
mov LL0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877950152 *)
mov LL0x40008299b0 x21;
mov LL0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877950156 *)
mov LL0x40008299c0 x23;
mov LL0x40008299c8 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x40008299d0; PC = 0x274877950160 *)
mov LL0x40008299d0 x25;
mov LL0x40008299d8 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299e0; PC = 0x274877950164 *)
mov LL0x40008299e0 x27;
mov LL0x40008299e8 x28;
(* mov	x20, x0                                     #! PC = 0x274877950168 *)
mov x20 x0;
(* mov	x19, x1                                     #! PC = 0x274877950172 *)
mov x19 x1;
(* mov	x21, x2                                     #! PC = 0x274877950176 *)
mov x21 x2;
(* #adrp	x0, 0x4000029000                           #! PC = 0x274877950180 *)
#adrp	%%x0, 0x4000029000                           #! 0x274877950180 = 0x274877950180;
(* ldr	x0, [x0, #4016]                             #! EA = L0x4000029fb0; Value = 0x000000400085d6d0; PC = 0x274877950184 *)
mov x0 LL0x4000029fb0;
(* str	x0, [sp, #168]                              #! EA = L0x4000829a38; PC = 0x274877950188 *)
mov LL0x4000829a38 x0;
(* ldr	x3, [x0]                                    #! EA = L0x400085d6d0; Value = 0xb9a8639ce44cac00; PC = 0x274877950192 *)
mov x3 LL0x400085d6d0;
(* str	x3, [sp, #952]                              #! EA = L0x4000829d48; PC = 0x274877950196 *)
mov LL0x4000829d48 x3;
(* mov	x3, #0x0                   	// #0           #! PC = 0x274877950200 *)
mov x3 0@uint64;
(* add	x27, sp, #0x178                             #! PC = 0x274877950204 *)
adds dontcare x27 sp 0x178@uint64;
(* mov	x0, x27                                     #! PC = 0x274877950208 *)
mov x0 x27;
(* #bl	0x4000008b3c <mul_fp2x2>                    #! PC = 0x274877950212 *)
#bl	0x4000008b3c <mul_fp2x2>                    #! 0x274877950212 = 0x274877950212;
(* stp	x29, x30, [sp, #-16]!                       #! EA = L0x4000829980; PC = 0x274877942588 *)
mov LL0x4000829980 x29;
mov LL0x4000829988 x30;
(* mov	x29, sp                                     #! PC = 0x274877942592 *)
mov x29 sp;
(* #adrp	x3, 0x4000029000                           #! PC = 0x274877942596 *)
#adrp	%%x3, 0x4000029000                           #! 0x274877942596 = 0x274877942596;
(* ldr	x3, [x3, #4056]                             #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877942600 *)
mov x3 LL0x4000029fd8;
(* #bl	0x40000143c0 <mul_382x>                     #! PC = 0x274877942604 *)
#bl	0x40000143c0 <mul_382x>                     #! 0x274877942604 = 0x274877942604;
(* #paciasp                                         #! PC = 0x274877989824 *)
#paciasp                                         #! 0x274877989824 = 0x274877989824;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829900; PC = 0x274877989828 *)
mov LL0x4000829900 x29;
mov LL0x4000829908 x30;
(* mov	x29, sp                                     #! PC = 0x274877989832 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829910; PC = 0x274877989836 *)
mov LL0x4000829910 x19;
mov LL0x4000829918 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829920; PC = 0x274877989840 *)
mov LL0x4000829920 x21;
mov LL0x4000829928 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829930; PC = 0x274877989844 *)
mov LL0x4000829930 x23;
mov LL0x4000829938 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829940; PC = 0x274877989848 *)
mov LL0x4000829940 x25;
mov LL0x4000829948 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829950; PC = 0x274877989852 *)
mov LL0x4000829950 x27;
mov LL0x4000829958 x28;
(* sub	sp, sp, #0x60                               #! PC = 0x274877989856 *)
subc dontcare sp sp 0x60@uint64;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a048; Value = 0x0000004000841d60; PC = 0x274877989860 *)
mov x11 LL0x400082a048;
mov x12 LL0x400082a050;
(* mov	x26, x0                                     #! PC = 0x274877989864 *)
mov x26 x0;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a078; Value = 0x000000400085de20; PC = 0x274877989868 *)
mov x19 LL0x400082a078;
mov x20 LL0x400082a080;
(* mov	x27, x1                                     #! PC = 0x274877989872 *)
mov x27 x1;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a058; Value = 0x000000400085d6d8; PC = 0x274877989876 *)
mov x13 LL0x400082a058;
mov x14 LL0x400082a060;
(* mov	x28, x2                                     #! PC = 0x274877989880 *)
mov x28 x2;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a088; Value = 0x0000000000000000; PC = 0x274877989884 *)
mov x21 LL0x400082a088;
mov x22 LL0x400082a090;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a068; Value = 0x0000004000000040; PC = 0x274877989888 *)
mov x15 LL0x400082a068;
mov x16 LL0x400082a070;
(* adds	x5, x11, x19                               #! PC = 0x274877989892 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a098; Value = 0x000000400082c000; PC = 0x274877989896 *)
mov x23 LL0x400082a098;
mov x24 LL0x400082a0a0;
(* adcs	x6, x12, x20                               #! PC = 0x274877989900 *)
adcs carry x6 x12 x20 carry;
(* ldp	x11, x12, [x2]                              #! EA = L0x400082a168; Value = 0xb9ff00400083c80b; PC = 0x274877989904 *)
mov x11 LL0x400082a168;
mov x12 LL0x400082a170;
(* adcs	x7, x13, x21                               #! PC = 0x274877989908 *)
adcs carry x7 x13 x21 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a198; Value = 0x000000400085de20; PC = 0x274877989912 *)
mov x19 LL0x400082a198;
mov x20 LL0x400082a1a0;
(* adcs	x8, x14, x22                               #! PC = 0x274877989916 *)
adcs carry x8 x14 x22 carry;
(* ldp	x13, x14, [x2, #16]                         #! EA = L0x400082a178; Value = 0x6730d2e0f738100c; PC = 0x274877989920 *)
mov x13 LL0x400082a178;
mov x14 LL0x400082a180;
(* adcs	x9, x15, x23                               #! PC = 0x274877989924 *)
adcs carry x9 x15 x23 carry;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a1a8; Value = 0x000000800106f748; PC = 0x274877989928 *)
mov x21 LL0x400082a1a8;
mov x22 LL0x400082a1b0;
(* adc	x10, x16, x24                               #! PC = 0x274877989932 *)
adc x10 x16 x24 carry;
(* ldp	x15, x16, [x2, #32]                         #! EA = L0x400082a188; Value = 0x4b1ba7f6434ecfb7; PC = 0x274877989936 *)
mov x15 LL0x400082a188;
mov x16 LL0x400082a190;
(* stp	x5, x6, [sp]                                #! EA = L0x40008298a0; PC = 0x274877989940 *)
mov LL0x40008298a0 x5;
mov LL0x40008298a8 x6;
(* adds	x5, x11, x19                               #! PC = 0x274877989944 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a1b8; Value = 0x000000c0018b3d60; PC = 0x274877989948 *)
mov x23 LL0x400082a1b8;
mov x24 LL0x400082a1c0;
(* adcs	x6, x12, x20                               #! PC = 0x274877989952 *)
adcs carry x6 x12 x20 carry;
(* stp	x7, x8, [sp, #16]                           #! EA = L0x40008298b0; PC = 0x274877989956 *)
mov LL0x40008298b0 x7;
mov LL0x40008298b8 x8;
(* adcs	x7, x13, x21                               #! PC = 0x274877989960 *)
adcs carry x7 x13 x21 carry;
(* adcs	x8, x14, x22                               #! PC = 0x274877989964 *)
adcs carry x8 x14 x22 carry;
(* stp	x9, x10, [sp, #32]                          #! EA = L0x40008298c0; PC = 0x274877989968 *)
mov LL0x40008298c0 x9;
mov LL0x40008298c8 x10;
(* adcs	x9, x15, x23                               #! PC = 0x274877989972 *)
adcs carry x9 x15 x23 carry;
(* stp	x5, x6, [sp, #48]                           #! EA = L0x40008298d0; PC = 0x274877989976 *)
mov LL0x40008298d0 x5;
mov LL0x40008298d8 x6;
(* adc	x10, x16, x24                               #! PC = 0x274877989980 *)
adc x10 x16 x24 carry;
(* stp	x7, x8, [sp, #64]                           #! EA = L0x40008298e0; PC = 0x274877989984 *)
mov LL0x40008298e0 x7;
mov LL0x40008298e8 x8;
(* stp	x9, x10, [sp, #80]                          #! EA = L0x40008298f0; PC = 0x274877989988 *)
mov LL0x40008298f0 x9;
mov LL0x40008298f8 x10;

(*
assert limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                 LL0x40008298b8, LL0x40008298c0, LL0x40008298c8] =
       (limbs 64 [a00, a01, a02, a03, a04, a05] +
        limbs 64 [a10, a11, a12, a13, a14, a15])
    && true;

assert limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                 LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] =
       (limbs 64 [b00, b01, b02, b03, b04, b05] +
        limbs 64 [b10, b11, b12, b13, b14, b15])
    && true;
*)

(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877989992 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877989992 = 0x274877989992;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a048; Value = 0x0000004000841d60; PC = 0x274877989152 *)
mov x11 LL0x400082a048;
mov x12 LL0x400082a050;
(* ldr	x17, [x2]                                   #! EA = L0x400082a168; Value = 0xb9ff00400083c80b; PC = 0x274877989156 *)
mov x17 LL0x400082a168;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a058; Value = 0x000000400085d6d8; PC = 0x274877989160 *)
mov x13 LL0x400082a058;
mov x14 LL0x400082a060;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a068; Value = 0x0000004000000040; PC = 0x274877989164 *)
mov x15 LL0x400082a068;
mov x16 LL0x400082a070;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x400082a170; Value = 0x1eac003eb1d9d667; PC = 0x274877989216 *)
mov x17 LL0x400082a170;
(* str	x19, [x0]                                   #! EA = L0x4000829b08; PC = 0x274877989220 *)
mov LL0x4000829b08 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x400082a178; Value = 0x6730d2e0f738100c; PC = 0x274877989320 *)
mov x17 LL0x400082a178;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829b10; PC = 0x274877989328 *)
mov LL0x4000829b10 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x400082a180; Value = 0x64774bc4f407ecd7; PC = 0x274877989428 *)
mov x17 LL0x400082a180;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829b18; PC = 0x274877989436 *)
mov LL0x4000829b18 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x400082a188; Value = 0x4b1ba7f6434ecfb7; PC = 0x274877989536 *)
mov x17 LL0x400082a188;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829b20; PC = 0x274877989544 *)
mov LL0x4000829b20 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x400082a190; Value = 0x1a0111ea397cdfcb; PC = 0x274877989644 *)
mov x17 LL0x400082a190;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829b28; PC = 0x274877989652 *)
mov LL0x4000829b28 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829b30; PC = 0x274877989756 *)
mov LL0x4000829b30 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829b38; PC = 0x274877989784 *)
mov LL0x4000829b38 x19;
mov LL0x4000829b40 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829b48; PC = 0x274877989788 *)
mov LL0x4000829b48 x21;
mov LL0x4000829b50 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829b58; PC = 0x274877989792 *)
mov LL0x4000829b58 x23;
mov LL0x4000829b60 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;

(* mul_384(ret->re, a->re, b->re) *)

(*
assert limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                 LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                 LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                 LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] =
       ((limbs 64 [a00, a01, a02, a03, a04, a05]) *
        (limbs 64 [b00, b01, b02, b03, b04, b05]))
    && limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                 LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];
*)

(* mov	x1, sp                                      #! PC = 0x274877989996 *)
mov x1 sp;
(* add	x2, sp, #0x30                               #! PC = 0x274877990000 *)
adds dontcare x2 sp 0x30@uint64;
(* add	x0, x26, #0x60                              #! PC = 0x274877990004 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990008 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990008 = 0x274877990008;
(* ldp	x11, x12, [x1]                              #! EA = L0x40008298a0; Value = 0x000000800109fb80; PC = 0x274877989152 *)
mov x11 LL0x40008298a0;
mov x12 LL0x40008298a8;
(* ldr	x17, [x2]                                   #! EA = L0x40008298d0; Value = 0xb9ff00800109a62b; PC = 0x274877989156 *)
mov x17 LL0x40008298d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x40008298b0; Value = 0x000000400085d6d8; PC = 0x274877989160 *)
mov x13 LL0x40008298b0;
mov x14 LL0x40008298b8;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x40008298c0; Value = 0x000000800082c040; PC = 0x274877989164 *)
mov x15 LL0x40008298c0;
mov x16 LL0x40008298c8;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x40008298d8; Value = 0x1eac00beb2df26f8; PC = 0x274877989216 *)
mov x17 LL0x40008298d8;
(* str	x19, [x0]                                   #! EA = L0x4000829b68; PC = 0x274877989220 *)
mov LL0x4000829b68 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x40008298e0; Value = 0x6730d360f83f0754; PC = 0x274877989320 *)
mov x17 LL0x40008298e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829b70; PC = 0x274877989328 *)
mov LL0x4000829b70 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x40008298e8; Value = 0x64774c44f513a40f; PC = 0x274877989428 *)
mov x17 LL0x40008298e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829b78; PC = 0x274877989436 *)
mov LL0x4000829b78 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x40008298f0; Value = 0x4b1ba8b644da0d17; PC = 0x274877989536 *)
mov x17 LL0x40008298f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829b80; PC = 0x274877989544 *)
mov LL0x4000829b80 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x40008298f8; Value = 0x1a01126a3a85ade3; PC = 0x274877989644 *)
mov x17 LL0x40008298f8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829b88; PC = 0x274877989652 *)
mov LL0x4000829b88 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829b90; PC = 0x274877989756 *)
mov LL0x4000829b90 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829b98; PC = 0x274877989784 *)
mov LL0x4000829b98 x19;
mov LL0x4000829ba0 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829ba8; PC = 0x274877989788 *)
mov LL0x4000829ba8 x21;
mov LL0x4000829bb0 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829bb8; PC = 0x274877989792 *)
mov LL0x4000829bb8 x23;
mov LL0x4000829bc0 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;

(*  mul_384(ret->im, t0, t1) *)

(*
assert limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                 LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                 LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                 LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] =
       (((limbs 64 [a00, a01, a02, a03, a04, a05]) +
         (limbs 64 [a10, a11, a12, a13, a14, a15])) *
        ((limbs 64 [b00, b01, b02, b03, b04, b05]) +
         (limbs 64 [b10, b11, b12, b13, b14, b15])))
    && limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                 LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];
*)

(* add	x1, x27, #0x30                              #! PC = 0x274877990012 *)
adds dontcare x1 x27 0x30@uint64;
(* add	x2, x28, #0x30                              #! PC = 0x274877990016 *)
adds dontcare x2 x28 0x30@uint64;
(* mov	x0, sp                                      #! PC = 0x274877990020 *)
mov x0 sp;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990024 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990024 = 0x274877990024;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a078; Value = 0x000000400085de20; PC = 0x274877989152 *)
mov x11 LL0x400082a078;
mov x12 LL0x400082a080;
(* ldr	x17, [x2]                                   #! EA = L0x400082a198; Value = 0x000000400085de20; PC = 0x274877989156 *)
mov x17 LL0x400082a198;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a088; Value = 0x0000000000000000; PC = 0x274877989160 *)
mov x13 LL0x400082a088;
mov x14 LL0x400082a090;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a098; Value = 0x000000400082c000; PC = 0x274877989164 *)
mov x15 LL0x400082a098;
mov x16 LL0x400082a0a0;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x400082a1a0; Value = 0x0000008001055091; PC = 0x274877989216 *)
mov x17 LL0x400082a1a0;
(* str	x19, [x0]                                   #! EA = L0x40008298a0; PC = 0x274877989220 *)
mov LL0x40008298a0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x400082a1a8; Value = 0x000000800106f748; PC = 0x274877989320 *)
mov x17 LL0x400082a1a8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x40008298a8; PC = 0x274877989328 *)
mov LL0x40008298a8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x400082a1b0; Value = 0x00000080010bb738; PC = 0x274877989428 *)
mov x17 LL0x400082a1b0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x40008298b0; PC = 0x274877989436 *)
mov LL0x40008298b0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x400082a1b8; Value = 0x000000c0018b3d60; PC = 0x274877989536 *)
mov x17 LL0x400082a1b8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x40008298b8; PC = 0x274877989544 *)
mov LL0x40008298b8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x400082a1c0; Value = 0x000000800108ce18; PC = 0x274877989644 *)
mov x17 LL0x400082a1c0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x40008298c0; PC = 0x274877989652 *)
mov LL0x40008298c0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x40008298c8; PC = 0x274877989756 *)
mov LL0x40008298c8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x40008298d0; PC = 0x274877989784 *)
mov LL0x40008298d0 x19;
mov LL0x40008298d8 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x40008298e0; PC = 0x274877989788 *)
mov LL0x40008298e0 x21;
mov LL0x40008298e8 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x40008298f0; PC = 0x274877989792 *)
mov LL0x40008298f0 x23;
mov LL0x40008298f8 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;

(*  mul_384(tx, a->im, b->im) *)

(*
assert limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                 LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                 LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                 LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] =
       ((limbs 64 [a10, a11, a12, a13, a14, a15]) *
        (limbs 64 [b10, b11, b12, b13, b14, b15]))
    && limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                 LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];
*)

(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877990028 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877990032 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877990036 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* add	x1, x26, #0x60                              #! PC = 0x274877990040 *)
adds dontcare x1 x26 0x60@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990044 *)
mov x2 sp;
(* add	x0, x26, #0x60                              #! PC = 0x274877990048 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990052 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990052 = 0x274877990052;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                    LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                    LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829b68o LL0x4000829b68; mov LL0x4000829b70o LL0x4000829b70;
mov LL0x4000829b78o LL0x4000829b78; mov LL0x4000829b80o LL0x4000829b80;
mov LL0x4000829b88o LL0x4000829b88; mov LL0x4000829b90o LL0x4000829b90;
mov LL0x4000829b98o LL0x4000829b98; mov LL0x4000829ba0o LL0x4000829ba0;
mov LL0x4000829ba8o LL0x4000829ba8; mov LL0x4000829bb0o LL0x4000829bb0;
mov LL0x4000829bb8o LL0x4000829bb8; mov LL0x4000829bc0o LL0x4000829bc0;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829b68; Value = 0x0e51e981fd423e80; PC = 0x274877984672 *)
mov x11 LL0x4000829b68;
mov x12 LL0x4000829b70;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x42ef56008dfb8400; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829b78; Value = 0xe854a01c05df1f9c; PC = 0x274877984680 *)
mov x13 LL0x4000829b78;
mov x14 LL0x4000829b80;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0x84ad6c02a4bcc991; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829b88; Value = 0x97569c04a6b1e95f; PC = 0x274877984696 *)
mov x15 LL0x4000829b88;
mov x16 LL0x4000829b90;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x095e8b8d0764c338; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829b68; PC = 0x274877984712 *)
mov LL0x4000829b68 x11;
mov LL0x4000829b70 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829b98; Value = 0x0726a73423d05ebc; PC = 0x274877984720 *)
mov x11 LL0x4000829b98;
mov x12 LL0x4000829ba0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0x831e58cecd0f0e19; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829b78; PC = 0x274877984732 *)
mov LL0x4000829b78 x13;
mov LL0x4000829b80 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ba8; Value = 0x5696f712f0f27b01; PC = 0x274877984736 *)
mov x13 LL0x4000829ba8;
mov x14 LL0x4000829bb0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0xc4e021dd98c82000; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829b88; PC = 0x274877984748 *)
mov LL0x4000829b88 x15;
mov LL0x4000829b90 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829bb8; Value = 0xea09a5c90f499a2d; PC = 0x274877984756 *)
mov x15 LL0x4000829bb8;
mov x16 LL0x4000829bc0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x0000000000002000; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829b98; PC = 0x274877984828 *)
mov LL0x4000829b98 x11;
mov LL0x4000829ba0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ba8; PC = 0x274877984836 *)
mov LL0x4000829ba8 x13;
mov LL0x4000829bb0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829bb8; PC = 0x274877984840 *)
mov LL0x4000829bb8 x15;
mov LL0x4000829bc0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                         LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                         LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                         LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829b68o, LL0x4000829b70o, LL0x4000829b78o,
                        LL0x4000829b80o, LL0x4000829b88o, LL0x4000829b90o,
                        LL0x4000829b98o, LL0x4000829ba0o, LL0x4000829ba8o,
                        LL0x4000829bb0o, LL0x4000829bb8o, LL0x4000829bc0o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                         LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                         LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                         LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829b68o, LL0x4000829b70o, LL0x4000829b78o,
                        LL0x4000829b80o, LL0x4000829b88o, LL0x4000829b90o,
                        LL0x4000829b98o, LL0x4000829ba0o, LL0x4000829ba8o,
                        LL0x4000829bb0o, LL0x4000829bb8o, LL0x4000829bc0o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x2, x26, #0x0                               #! PC = 0x274877990056 *)
adds dontcare x2 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990060 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990060 = 0x274877990060;

rcut and [limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                    LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];
                   
(* NOTE: save old values *)
mov LL0x4000829b68p LL0x4000829b68; mov LL0x4000829b70p LL0x4000829b70;
mov LL0x4000829b78p LL0x4000829b78; mov LL0x4000829b80p LL0x4000829b80;
mov LL0x4000829b88p LL0x4000829b88; mov LL0x4000829b90p LL0x4000829b90;
mov LL0x4000829b98p LL0x4000829b98; mov LL0x4000829ba0p LL0x4000829ba0;
mov LL0x4000829ba8p LL0x4000829ba8; mov LL0x4000829bb0p LL0x4000829bb0;
mov LL0x4000829bb8p LL0x4000829bb8; mov LL0x4000829bc0p LL0x4000829bc0;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829b68; Value = 0xcb6293816f46ba80; PC = 0x274877984672 *)
mov x11 LL0x4000829b68;
mov x12 LL0x4000829b70;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b08; Value = 0xe4999ec244c04320; PC = 0x274877984676 *)
mov x19 LL0x4000829b08;
mov x20 LL0x4000829b10;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829b78; Value = 0x63a734196122560b; PC = 0x274877984680 *)
mov x13 LL0x4000829b78;
mov x14 LL0x4000829b80;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b18; Value = 0x6022a7a092e38e24; PC = 0x274877984688 *)
mov x21 LL0x4000829b18;
mov x22 LL0x4000829b20;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829b88; Value = 0x8df810779f4d2626; PC = 0x274877984696 *)
mov x15 LL0x4000829b88;
mov x16 LL0x4000829b90;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b28; Value = 0xbd75406c0ae7d06a; PC = 0x274877984704 *)
mov x23 LL0x4000829b28;
mov x24 LL0x4000829b30;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829b68; PC = 0x274877984712 *)
mov LL0x4000829b68 x11;
mov LL0x4000829b70 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829b98; Value = 0x84084e6556c150a3; PC = 0x274877984720 *)
mov x11 LL0x4000829b98;
mov x12 LL0x4000829ba0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b38; Value = 0xd52e13157bc223ca; PC = 0x274877984728 *)
mov x19 LL0x4000829b38;
mov x20 LL0x4000829b40;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829b78; PC = 0x274877984732 *)
mov LL0x4000829b78 x13;
mov LL0x4000829b80 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ba8; Value = 0x91b6d535582a5b01; PC = 0x274877984736 *)
mov x13 LL0x4000829ba8;
mov x14 LL0x4000829bb0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829b48; Value = 0xce869cf71ac389dc; PC = 0x274877984740 *)
mov x21 LL0x4000829b48;
mov x22 LL0x4000829b50;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829b88; PC = 0x274877984748 *)
mov LL0x4000829b88 x15;
mov LL0x4000829b90 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829bb8; Value = 0xea09a5c90f497a2d; PC = 0x274877984756 *)
mov x15 LL0x4000829bb8;
mov x16 LL0x4000829bc0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829b58; Value = 0xea09a14285a858ba; PC = 0x274877984764 *)
mov x23 LL0x4000829b58;
mov x24 LL0x4000829b60;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829b98; PC = 0x274877984828 *)
mov LL0x4000829b98 x11;
mov LL0x4000829ba0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ba8; PC = 0x274877984836 *)
mov LL0x4000829ba8 x13;
mov LL0x4000829bb0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829bb8; PC = 0x274877984840 *)
mov LL0x4000829bb8 x15;
mov LL0x4000829bc0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                         LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                         LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                         LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]) +
              (limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                         LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                         LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                         LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]))
             (limbs 64 [LL0x4000829b68p, LL0x4000829b70p, LL0x4000829b78p,
                        LL0x4000829b80p, LL0x4000829b88p, LL0x4000829b90p,
                        LL0x4000829b98p, LL0x4000829ba0p, LL0x4000829ba8p,
                        LL0x4000829bb0p, LL0x4000829bb8p, LL0x4000829bc0p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                         LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                         LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                         LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]) +
              (limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                         LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                         LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                         LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]))
             (limbs 64 [LL0x4000829b68p, LL0x4000829b70p, LL0x4000829b78p,
                        LL0x4000829b80p, LL0x4000829b88p, LL0x4000829b90p,
                        LL0x4000829b98p, LL0x4000829ba0p, LL0x4000829ba8p,
                        LL0x4000829bb0p, LL0x4000829bb8p, LL0x4000829bc0p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x1, x26, #0x0                               #! PC = 0x274877990064 *)
adds dontcare x1 x26 0@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990068 *)
mov x2 sp;
(* add	x0, x26, #0x0                               #! PC = 0x274877990072 *)
adds dontcare x0 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990076 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990076 = 0x274877990076;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                    LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                    LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
          limbs 64[a00,a01,a02,a03,a04,a05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a10,a11,a12,a13,a14,a15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a20,a21,a22,a23,a24,a25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a30,a31,a32,a33,a34,a35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a40,a41,a42,a43,a44,a45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a50,a51,a52,a53,a54,a55] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b00,b01,b02,b03,b04,b05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b10,b11,b12,b13,b14,b15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b20,b21,b22,b23,b24,b25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b30,b31,b32,b33,b34,b35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b40,b41,b42,b43,b44,b45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b50,b51,b52,b53,b54,b55] <u limbs 64[m0,m1,m2,m3,m4,m5]
     ] prove with all cuts;

(* NOTE; save old values *)
mov LL0x4000829b08o LL0x4000829b08; mov LL0x4000829b10o LL0x4000829b10;
mov LL0x4000829b18o LL0x4000829b18; mov LL0x4000829b20o LL0x4000829b20;
mov LL0x4000829b28o LL0x4000829b28; mov LL0x4000829b30o LL0x4000829b30;
mov LL0x4000829b38o LL0x4000829b38; mov LL0x4000829b40o LL0x4000829b40;
mov LL0x4000829b48o LL0x4000829b48; mov LL0x4000829b50o LL0x4000829b50;
mov LL0x4000829b58o LL0x4000829b58; mov LL0x4000829b60o LL0x4000829b60;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829b08; Value = 0xe4999ec244c04320; PC = 0x274877984672 *)
mov x11 LL0x4000829b08;
mov x12 LL0x4000829b10;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x42ef56008dfb8400; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829b18; Value = 0x6022a7a092e38e24; PC = 0x274877984680 *)
mov x13 LL0x4000829b18;
mov x14 LL0x4000829b20;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0x84ad6c02a4bcc991; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829b28; Value = 0xbd75406c0ae7d06a; PC = 0x274877984696 *)
mov x15 LL0x4000829b28;
mov x16 LL0x4000829b30;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x095e8b8d0764c338; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829b08; PC = 0x274877984712 *)
mov LL0x4000829b08 x11;
mov LL0x4000829b10 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829b38; Value = 0xd52e13157bc223ca; PC = 0x274877984720 *)
mov x11 LL0x4000829b38;
mov x12 LL0x4000829b40;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0x831e58cecd0f0e19; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829b18; PC = 0x274877984732 *)
mov LL0x4000829b18 x13;
mov LL0x4000829b20 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829b48; Value = 0xce869cf71ac389dc; PC = 0x274877984736 *)
mov x13 LL0x4000829b48;
mov x14 LL0x4000829b50;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0xc4e021dd98c82000; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829b28; PC = 0x274877984748 *)
mov LL0x4000829b28 x15;
mov LL0x4000829b30 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829b58; Value = 0xea09a14285a858ba; PC = 0x274877984756 *)
mov x15 LL0x4000829b58;
mov x16 LL0x4000829b60;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x0000000000002000; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829b38; PC = 0x274877984828 *)
mov LL0x4000829b38 x11;
mov LL0x4000829b40 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829b48; PC = 0x274877984836 *)
mov LL0x4000829b48 x13;
mov LL0x4000829b50 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829b58; PC = 0x274877984840 *)
mov LL0x4000829b58 x15;
mov LL0x4000829b60 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                         LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                         LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                         LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829b08o, LL0x4000829b10o, LL0x4000829b18o,
                        LL0x4000829b20o, LL0x4000829b28o, LL0x4000829b30o,
                        LL0x4000829b38o, LL0x4000829b40o, LL0x4000829b48o,
                        LL0x4000829b50o, LL0x4000829b58o, LL0x4000829b60o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                         LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                         LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                         LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829b08o, LL0x4000829b10o, LL0x4000829b18o,
                        LL0x4000829b20o, LL0x4000829b28o, LL0x4000829b30o,
                        LL0x4000829b38o, LL0x4000829b40o, LL0x4000829b48o,
                        LL0x4000829b50o, LL0x4000829b58o, LL0x4000829b60o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829908; Value = 0x001f004000008b50; PC = 0x274877990080 *)
mov x30 LL0x4000829908;
(* add	sp, sp, #0x60                               #! PC = 0x274877990084 *)
adds dontcare sp sp 0x60@uint64;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829910; Value = 0x000000400082a048; PC = 0x274877990088 *)
mov x19 LL0x4000829910;
mov x20 LL0x4000829918;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829920; Value = 0x000000400082a168; PC = 0x274877990092 *)
mov x21 LL0x4000829920;
mov x22 LL0x4000829928;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829930; Value = 0x000000400085d6d0; PC = 0x274877990096 *)
mov x23 LL0x4000829930;
mov x24 LL0x4000829938;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829940; Value = 0x000000400085d6d0; PC = 0x274877990100 *)
mov x25 LL0x4000829940;
mov x26 LL0x4000829948;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x4000829950; Value = 0x0000004000829b08; PC = 0x274877990104 *)
mov x27 LL0x4000829950;
mov x28 LL0x4000829958;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829900; Value = 0x0000004000829980; PC = 0x274877990108 *)
mov x29 LL0x4000829900;
(* #autiasp                                         #! PC = 0x274877990112 *)
#autiasp                                         #! 0x274877990112 = 0x274877990112;
(* #ret                                            #! PC = 0x274877990116 *)
#ret                                            #! 0x274877990116 = 0x274877990116;

(* mul_382x(t0, a[0], b[0]) *)

(*
assert eqmod ((limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                         LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                         LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                         LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]) +
              (limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                         LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                         LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                         LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]) * U)
             ((limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
    && true;
*)

(* ldp	x29, x30, [sp], #16                         #! EA = L0x4000829980; Value = 0x0000004000829990; PC = 0x274877942608 *)
mov x29 LL0x4000829980;
mov x30 LL0x4000829988;
(* #ret                                            #! PC = 0x274877942612 *)
#ret                                            #! 0x274877942612 = 0x274877942612;
(* add	x22, x19, #0x60                             #! PC = 0x274877950216 *)
adds dontcare x22 x19 0x60@uint64;
(* add	x26, x21, #0x60                             #! PC = 0x274877950220 *)
adds dontcare x26 x21 0x60@uint64;
(* add	x0, sp, #0x238                              #! PC = 0x274877950224 *)
adds dontcare x0 sp 0x238@uint64;
(* mov	x2, x26                                     #! PC = 0x274877950228 *)
mov x2 x26;
(* mov	x1, x22                                     #! PC = 0x274877950232 *)
mov x1 x22;
(* mov	x28, x0                                     #! PC = 0x274877950236 *)
mov x28 x0;
(* #bl	0x4000008b3c <mul_fp2x2>                    #! PC = 0x274877950240 *)
#bl	0x4000008b3c <mul_fp2x2>                    #! 0x274877950240 = 0x274877950240;
(* stp	x29, x30, [sp, #-16]!                       #! EA = L0x4000829980; PC = 0x274877942588 *)
mov LL0x4000829980 x29;
mov LL0x4000829988 x30;
(* mov	x29, sp                                     #! PC = 0x274877942592 *)
mov x29 sp;
(* #adrp	x3, 0x4000029000                           #! PC = 0x274877942596 *)
#adrp	%%x3, 0x4000029000                           #! 0x274877942596 = 0x274877942596;
(* ldr	x3, [x3, #4056]                             #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877942600 *)
mov x3 LL0x4000029fd8;
(* #bl	0x40000143c0 <mul_382x>                     #! PC = 0x274877942604 *)
#bl	0x40000143c0 <mul_382x>                     #! 0x274877942604 = 0x274877942604;
(* #paciasp                                         #! PC = 0x274877989824 *)
#paciasp                                         #! 0x274877989824 = 0x274877989824;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829900; PC = 0x274877989828 *)
mov LL0x4000829900 x29;
mov LL0x4000829908 x30;
(* mov	x29, sp                                     #! PC = 0x274877989832 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829910; PC = 0x274877989836 *)
mov LL0x4000829910 x19;
mov LL0x4000829918 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829920; PC = 0x274877989840 *)
mov LL0x4000829920 x21;
mov LL0x4000829928 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829930; PC = 0x274877989844 *)
mov LL0x4000829930 x23;
mov LL0x4000829938 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829940; PC = 0x274877989848 *)
mov LL0x4000829940 x25;
mov LL0x4000829948 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829950; PC = 0x274877989852 *)
mov LL0x4000829950 x27;
mov LL0x4000829958 x28;
(* sub	sp, sp, #0x60                               #! PC = 0x274877989856 *)
subc dontcare sp sp 0x60@uint64;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0a8; Value = 0x0000000000000000; PC = 0x274877989860 *)
mov x11 LL0x400082a0a8;
mov x12 LL0x400082a0b0;
(* mov	x26, x0                                     #! PC = 0x274877989864 *)
mov x26 x0;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a0d8; Value = 0x000000800085d000; PC = 0x274877989868 *)
mov x19 LL0x400082a0d8;
mov x20 LL0x400082a0e0;
(* mov	x27, x1                                     #! PC = 0x274877989872 *)
mov x27 x1;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0x0000000000000000; PC = 0x274877989876 *)
mov x13 LL0x400082a0b8;
mov x14 LL0x400082a0c0;
(* mov	x28, x2                                     #! PC = 0x274877989880 *)
mov x28 x2;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a0e8; Value = 0x000000800085ead0; PC = 0x274877989884 *)
mov x21 LL0x400082a0e8;
mov x22 LL0x400082a0f0;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x0000008001086c68; PC = 0x274877989888 *)
mov x15 LL0x400082a0c8;
mov x16 LL0x400082a0d0;
(* adds	x5, x11, x19                               #! PC = 0x274877989892 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a0f8; Value = 0x00000080010bb000; PC = 0x274877989896 *)
mov x23 LL0x400082a0f8;
mov x24 LL0x400082a100;
(* adcs	x6, x12, x20                               #! PC = 0x274877989900 *)
adcs carry x6 x12 x20 carry;
(* ldp	x11, x12, [x2]                              #! EA = L0x400082a1c8; Value = 0x0000000000000000; PC = 0x274877989904 *)
mov x11 LL0x400082a1c8;
mov x12 LL0x400082a1d0;
(* adcs	x7, x13, x21                               #! PC = 0x274877989908 *)
adcs carry x7 x13 x21 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a1f8; Value = 0x0000004000000000; PC = 0x274877989912 *)
mov x19 LL0x400082a1f8;
mov x20 LL0x400082a200;
(* adcs	x8, x14, x22                               #! PC = 0x274877989916 *)
adcs carry x8 x14 x22 carry;
(* ldp	x13, x14, [x2, #16]                         #! EA = L0x400082a1d8; Value = 0x0000000000000000; PC = 0x274877989920 *)
mov x13 LL0x400082a1d8;
mov x14 LL0x400082a1e0;
(* adcs	x9, x15, x23                               #! PC = 0x274877989924 *)
adcs carry x9 x15 x23 carry;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a208; Value = 0x000000400085ea90; PC = 0x274877989928 *)
mov x21 LL0x400082a208;
mov x22 LL0x400082a210;
(* adc	x10, x16, x24                               #! PC = 0x274877989932 *)
adc x10 x16 x24 carry;
(* ldp	x15, x16, [x2, #32]                         #! EA = L0x400082a1e8; Value = 0x0000004000845000; PC = 0x274877989936 *)
mov x15 LL0x400082a1e8;
mov x16 LL0x400082a1f0;
(* stp	x5, x6, [sp]                                #! EA = L0x40008298a0; PC = 0x274877989940 *)
mov LL0x40008298a0 x5;
mov LL0x40008298a8 x6;
(* adds	x5, x11, x19                               #! PC = 0x274877989944 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a218; Value = 0x000000400085e000; PC = 0x274877989948 *)
mov x23 LL0x400082a218;
mov x24 LL0x400082a220;
(* adcs	x6, x12, x20                               #! PC = 0x274877989952 *)
adcs carry x6 x12 x20 carry;
(* stp	x7, x8, [sp, #16]                           #! EA = L0x40008298b0; PC = 0x274877989956 *)
mov LL0x40008298b0 x7;
mov LL0x40008298b8 x8;
(* adcs	x7, x13, x21                               #! PC = 0x274877989960 *)
adcs carry x7 x13 x21 carry;
(* adcs	x8, x14, x22                               #! PC = 0x274877989964 *)
adcs carry x8 x14 x22 carry;
(* stp	x9, x10, [sp, #32]                          #! EA = L0x40008298c0; PC = 0x274877989968 *)
mov LL0x40008298c0 x9;
mov LL0x40008298c8 x10;
(* adcs	x9, x15, x23                               #! PC = 0x274877989972 *)
adcs carry x9 x15 x23 carry;
(* stp	x5, x6, [sp, #48]                           #! EA = L0x40008298d0; PC = 0x274877989976 *)
mov LL0x40008298d0 x5;
mov LL0x40008298d8 x6;
(* adc	x10, x16, x24                               #! PC = 0x274877989980 *)
adc x10 x16 x24 carry;
(* stp	x7, x8, [sp, #64]                           #! EA = L0x40008298e0; PC = 0x274877989984 *)
mov LL0x40008298e0 x7;
mov LL0x40008298e8 x8;
(* stp	x9, x10, [sp, #80]                          #! EA = L0x40008298f0; PC = 0x274877989988 *)
mov LL0x40008298f0 x9;
mov LL0x40008298f8 x10;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877989992 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877989992 = 0x274877989992;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0a8; Value = 0x0000000000000000; PC = 0x274877989152 *)
mov x11 LL0x400082a0a8;
mov x12 LL0x400082a0b0;
(* ldr	x17, [x2]                                   #! EA = L0x400082a1c8; Value = 0x0000000000000000; PC = 0x274877989156 *)
mov x17 LL0x400082a1c8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0x0000000000000000; PC = 0x274877989160 *)
mov x13 LL0x400082a0b8;
mov x14 LL0x400082a0c0;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x0000008001086c68; PC = 0x274877989164 *)
mov x15 LL0x400082a0c8;
mov x16 LL0x400082a0d0;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x400082a1d0; Value = 0x0000000000000000; PC = 0x274877989216 *)
mov x17 LL0x400082a1d0;
(* str	x19, [x0]                                   #! EA = L0x4000829bc8; PC = 0x274877989220 *)
mov LL0x4000829bc8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x400082a1d8; Value = 0x0000000000000000; PC = 0x274877989320 *)
mov x17 LL0x400082a1d8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829bd0; PC = 0x274877989328 *)
mov LL0x4000829bd0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x400082a1e0; Value = 0x0000000000000000; PC = 0x274877989428 *)
mov x17 LL0x400082a1e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829bd8; PC = 0x274877989436 *)
mov LL0x4000829bd8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x400082a1e8; Value = 0x0000004000845000; PC = 0x274877989536 *)
mov x17 LL0x400082a1e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829be0; PC = 0x274877989544 *)
mov LL0x4000829be0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x400082a1f0; Value = 0x0000000000000000; PC = 0x274877989644 *)
mov x17 LL0x400082a1f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829be8; PC = 0x274877989652 *)
mov LL0x4000829be8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829bf0; PC = 0x274877989756 *)
mov LL0x4000829bf0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829bf8; PC = 0x274877989784 *)
mov LL0x4000829bf8 x19;
mov LL0x4000829c00 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829c08; PC = 0x274877989788 *)
mov LL0x4000829c08 x21;
mov LL0x4000829c10 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829c18; PC = 0x274877989792 *)
mov LL0x4000829c18 x23;
mov LL0x4000829c20 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* mov	x1, sp                                      #! PC = 0x274877989996 *)
mov x1 sp;
(* add	x2, sp, #0x30                               #! PC = 0x274877990000 *)
adds dontcare x2 sp 0x30@uint64;
(* add	x0, x26, #0x60                              #! PC = 0x274877990004 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990008 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990008 = 0x274877990008;
(* ldp	x11, x12, [x1]                              #! EA = L0x40008298a0; Value = 0x000000800085d000; PC = 0x274877989152 *)
mov x11 LL0x40008298a0;
mov x12 LL0x40008298a8;
(* ldr	x17, [x2]                                   #! EA = L0x40008298d0; Value = 0x0000004000000000; PC = 0x274877989156 *)
mov x17 LL0x40008298d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x40008298b0; Value = 0x000000800085ead0; PC = 0x274877989160 *)
mov x13 LL0x40008298b0;
mov x14 LL0x40008298b8;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x40008298c0; Value = 0x0000010002141c68; PC = 0x274877989164 *)
mov x15 LL0x40008298c0;
mov x16 LL0x40008298c8;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x40008298d8; Value = 0x0000000000000001; PC = 0x274877989216 *)
mov x17 LL0x40008298d8;
(* str	x19, [x0]                                   #! EA = L0x4000829c28; PC = 0x274877989220 *)
mov LL0x4000829c28 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x40008298e0; Value = 0x000000400085ea90; PC = 0x274877989320 *)
mov x17 LL0x40008298e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829c30; PC = 0x274877989328 *)
mov LL0x4000829c30 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x40008298e8; Value = 0x00000040009e2d00; PC = 0x274877989428 *)
mov x17 LL0x40008298e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829c38; PC = 0x274877989436 *)
mov LL0x4000829c38 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x40008298f0; Value = 0x00000080010a3000; PC = 0x274877989536 *)
mov x17 LL0x40008298f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829c40; PC = 0x274877989544 *)
mov LL0x4000829c40 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x40008298f8; Value = 0x0000004000000001; PC = 0x274877989644 *)
mov x17 LL0x40008298f8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829c48; PC = 0x274877989652 *)
mov LL0x4000829c48 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829c50; PC = 0x274877989756 *)
mov LL0x4000829c50 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829c58; PC = 0x274877989784 *)
mov LL0x4000829c58 x19;
mov LL0x4000829c60 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829c68; PC = 0x274877989788 *)
mov LL0x4000829c68 x21;
mov LL0x4000829c70 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829c78; PC = 0x274877989792 *)
mov LL0x4000829c78 x23;
mov LL0x4000829c80 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* add	x1, x27, #0x30                              #! PC = 0x274877990012 *)
adds dontcare x1 x27 0x30@uint64;
(* add	x2, x28, #0x30                              #! PC = 0x274877990016 *)
adds dontcare x2 x28 0x30@uint64;
(* mov	x0, sp                                      #! PC = 0x274877990020 *)
mov x0 sp;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990024 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990024 = 0x274877990024;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0d8; Value = 0x000000800085d000; PC = 0x274877989152 *)
mov x11 LL0x400082a0d8;
mov x12 LL0x400082a0e0;
(* ldr	x17, [x2]                                   #! EA = L0x400082a1f8; Value = 0x0000004000000000; PC = 0x274877989156 *)
mov x17 LL0x400082a1f8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0e8; Value = 0x000000800085ead0; PC = 0x274877989160 *)
mov x13 LL0x400082a0e8;
mov x14 LL0x400082a0f0;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0f8; Value = 0x00000080010bb000; PC = 0x274877989164 *)
mov x15 LL0x400082a0f8;
mov x16 LL0x400082a100;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x400082a200; Value = 0x0000000000000001; PC = 0x274877989216 *)
mov x17 LL0x400082a200;
(* str	x19, [x0]                                   #! EA = L0x40008298a0; PC = 0x274877989220 *)
mov LL0x40008298a0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x400082a208; Value = 0x000000400085ea90; PC = 0x274877989320 *)
mov x17 LL0x400082a208;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x40008298a8; PC = 0x274877989328 *)
mov LL0x40008298a8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x400082a210; Value = 0x00000040009e2d00; PC = 0x274877989428 *)
mov x17 LL0x400082a210;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x40008298b0; PC = 0x274877989436 *)
mov LL0x40008298b0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x400082a218; Value = 0x000000400085e000; PC = 0x274877989536 *)
mov x17 LL0x400082a218;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x40008298b8; PC = 0x274877989544 *)
mov LL0x40008298b8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x400082a220; Value = 0x0000004000000001; PC = 0x274877989644 *)
mov x17 LL0x400082a220;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x40008298c0; PC = 0x274877989652 *)
mov LL0x40008298c0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x40008298c8; PC = 0x274877989756 *)
mov LL0x40008298c8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x40008298d0; PC = 0x274877989784 *)
mov LL0x40008298d0 x19;
mov LL0x40008298d8 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x40008298e0; PC = 0x274877989788 *)
mov LL0x40008298e0 x21;
mov LL0x40008298e8 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x40008298f0; PC = 0x274877989792 *)
mov LL0x40008298f0 x23;
mov LL0x40008298f8 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877990028 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877990032 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877990036 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* add	x1, x26, #0x60                              #! PC = 0x274877990040 *)
adds dontcare x1 x26 0x60@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990044 *)
mov x2 sp;
(* add	x0, x26, #0x60                              #! PC = 0x274877990048 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990052 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990052 = 0x274877990052;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                    LL0x4000829c10, LL0x4000829c18, LL0x4000829c20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                    LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                    LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829c28o LL0x4000829c28; mov LL0x4000829c30o LL0x4000829c30;
mov LL0x4000829c38o LL0x4000829c38; mov LL0x4000829c40o LL0x4000829c40;
mov LL0x4000829c48o LL0x4000829c48; mov LL0x4000829c50o LL0x4000829c50;
mov LL0x4000829c58o LL0x4000829c58; mov LL0x4000829c60o LL0x4000829c60;
mov LL0x4000829c68o LL0x4000829c68; mov LL0x4000829c70o LL0x4000829c70;
mov LL0x4000829c78o LL0x4000829c78; mov LL0x4000829c80o LL0x4000829c80;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c28; Value = 0x2174000000000000; PC = 0x274877984672 *)
mov x11 LL0x4000829c28;
mov x12 LL0x4000829c30;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x2174000000000000; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c38; Value = 0x85e4423fabe7f3a1; PC = 0x274877984680 *)
mov x13 LL0x4000829c38;
mov x14 LL0x4000829c40;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0x85e4423fabe7f3a1; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829c48; Value = 0xf9bc60d06988a719; PC = 0x274877984696 *)
mov x15 LL0x4000829c48;
mov x16 LL0x4000829c50;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x540501675805ef09; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829c28; PC = 0x274877984712 *)
mov LL0x4000829c28 x11;
mov LL0x4000829c30 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829c58; Value = 0x8b06150fb2dce324; PC = 0x274877984720 *)
mov x11 LL0x4000829c58;
mov x12 LL0x4000829c60;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0x5a1c9acb7af4e8a4; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829c38; PC = 0x274877984732 *)
mov LL0x4000829c38 x13;
mov LL0x4000829c40 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829c68; Value = 0x8400e4894bc15f1b; PC = 0x274877984736 *)
mov x13 LL0x4000829c68;
mov x14 LL0x4000829c70;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0xd4f30efcabdae70a; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829c48; PC = 0x274877984748 *)
mov LL0x4000829c48 x15;
mov LL0x4000829c50 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829c78; Value = 0x000000c000006002; PC = 0x274877984756 *)
mov x15 LL0x4000829c78;
mov x16 LL0x4000829c80;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x000000c000003002; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829c58; PC = 0x274877984828 *)
mov LL0x4000829c58 x11;
mov LL0x4000829c60 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829c68; PC = 0x274877984836 *)
mov LL0x4000829c68 x13;
mov LL0x4000829c70 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829c78; PC = 0x274877984840 *)
mov LL0x4000829c78 x15;
mov LL0x4000829c80 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod ((limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                         LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                         LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                         LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829c28o, LL0x4000829c30o, LL0x4000829c38o,
                        LL0x4000829c40o, LL0x4000829c48o, LL0x4000829c50o,
                        LL0x4000829c58o, LL0x4000829c60o, LL0x4000829c68o,
                        LL0x4000829c70o, LL0x4000829c78o, LL0x4000829c80o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                         LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                         LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                         LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829c28o, LL0x4000829c30o, LL0x4000829c38o,
                        LL0x4000829c40o, LL0x4000829c48o, LL0x4000829c50o,
                        LL0x4000829c58o, LL0x4000829c60o, LL0x4000829c68o,
                        LL0x4000829c70o, LL0x4000829c78o, LL0x4000829c80o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

rcut and [limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

(* NOTE: save old values *)
mov LL0x4000829c28p LL0x4000829c28; mov LL0x4000829c30p LL0x4000829c30;
mov LL0x4000829c38p LL0x4000829c38; mov LL0x4000829c40p LL0x4000829c40;
mov LL0x4000829c48p LL0x4000829c48; mov LL0x4000829c50p LL0x4000829c50;
mov LL0x4000829c58p LL0x4000829c58; mov LL0x4000829c60p LL0x4000829c60;
mov LL0x4000829c68p LL0x4000829c68; mov LL0x4000829c70p LL0x4000829c70;
mov LL0x4000829c78p LL0x4000829c78; mov LL0x4000829c80p LL0x4000829c80;

(* add	x2, x26, #0x0                               #! PC = 0x274877990056 *)
adds dontcare x2 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990060 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990060 = 0x274877990060;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c28; Value = 0x0000000000000000; PC = 0x274877984672 *)
mov x11 LL0x4000829c28;
mov x12 LL0x4000829c30;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829bc8; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 LL0x4000829bc8;
mov x20 LL0x4000829bd0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c38; Value = 0x0000000000000000; PC = 0x274877984680 *)
mov x13 LL0x4000829c38;
mov x14 LL0x4000829c40;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829bd8; Value = 0x0000000000000000; PC = 0x274877984688 *)
mov x21 LL0x4000829bd8;
mov x22 LL0x4000829be0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829c48; Value = 0xa5b75f691182b810; PC = 0x274877984696 *)
mov x15 LL0x4000829c48;
mov x16 LL0x4000829c50;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829be8; Value = 0x0000000000000000; PC = 0x274877984704 *)
mov x23 LL0x4000829be8;
mov x24 LL0x4000829bf0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829c28; PC = 0x274877984712 *)
mov LL0x4000829c28 x11;
mov LL0x4000829c30 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829c58; Value = 0x30e97a4437e7fa80; PC = 0x274877984720 *)
mov x11 LL0x4000829c58;
mov x12 LL0x4000829c60;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829bf8; Value = 0x0000000000000000; PC = 0x274877984728 *)
mov x19 LL0x4000829bf8;
mov x20 LL0x4000829c00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829c38; PC = 0x274877984732 *)
mov LL0x4000829c38 x13;
mov LL0x4000829c40 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829c68; Value = 0xaf0dd58c9fe67811; PC = 0x274877984736 *)
mov x13 LL0x4000829c68;
mov x14 LL0x4000829c70;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c08; Value = 0x8443a2aa87809000; PC = 0x274877984740 *)
mov x21 LL0x4000829c08;
mov x22 LL0x4000829c10;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829c48; PC = 0x274877984748 *)
mov LL0x4000829c48 x15;
mov LL0x4000829c50 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829c78; Value = 0x0000000000003000; PC = 0x274877984756 *)
mov x15 LL0x4000829c78;
mov x16 LL0x4000829c80;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c18; Value = 0x0000000000000000; PC = 0x274877984764 *)
mov x23 LL0x4000829c18;
mov x24 LL0x4000829c20;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829c58; PC = 0x274877984828 *)
mov LL0x4000829c58 x11;
mov LL0x4000829c60 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829c68; PC = 0x274877984836 *)
mov LL0x4000829c68 x13;
mov LL0x4000829c70 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829c78; PC = 0x274877984840 *)
mov LL0x4000829c78 x15;
mov LL0x4000829c80 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod ((limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                         LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                         LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                         LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]) +
              (limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                         LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                         LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                         LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]))
             (limbs 64 [LL0x4000829c28p, LL0x4000829c30p, LL0x4000829c38p,
                        LL0x4000829c40p, LL0x4000829c48p, LL0x4000829c50p,
                        LL0x4000829c58p, LL0x4000829c60p, LL0x4000829c68p,
                        LL0x4000829c70p, LL0x4000829c78p, LL0x4000829c80p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                         LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                         LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                         LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]) +
              (limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                         LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                         LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                         LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]))
             (limbs 64 [LL0x4000829c28p, LL0x4000829c30p, LL0x4000829c38p,
                        LL0x4000829c40p, LL0x4000829c48p, LL0x4000829c50p,
                        LL0x4000829c58p, LL0x4000829c60p, LL0x4000829c68p,
                        LL0x4000829c70p, LL0x4000829c78p, LL0x4000829c80p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x1, x26, #0x0                               #! PC = 0x274877990064 *)
adds dontcare x1 x26 0@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990068 *)
mov x2 sp;
(* add	x0, x26, #0x0                               #! PC = 0x274877990072 *)
adds dontcare x0 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990076 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990076 = 0x274877990076;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                    LL0x4000829c10, LL0x4000829c18, LL0x4000829c20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
          
          limbs 64[a00,a01,a02,a03,a04,a05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a10,a11,a12,a13,a14,a15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a20,a21,a22,a23,a24,a25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a30,a31,a32,a33,a34,a35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a40,a41,a42,a43,a44,a45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a50,a51,a52,a53,a54,a55] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b00,b01,b02,b03,b04,b05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b10,b11,b12,b13,b14,b15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b20,b21,b22,b23,b24,b25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b30,b31,b32,b33,b34,b35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b40,b41,b42,b43,b44,b45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b50,b51,b52,b53,b54,b55] <u limbs 64[m0,m1,m2,m3,m4,m5]
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829bc8o LL0x4000829bc8; mov LL0x4000829bd0o LL0x4000829bd0;
mov LL0x4000829bd8o LL0x4000829bd8; mov LL0x4000829be0o LL0x4000829be0;
mov LL0x4000829be8o LL0x4000829be8; mov LL0x4000829bf0o LL0x4000829bf0;
mov LL0x4000829bf8o LL0x4000829bf8; mov LL0x4000829c00o LL0x4000829c00;
mov LL0x4000829c08o LL0x4000829c08; mov LL0x4000829c10o LL0x4000829c10;
mov LL0x4000829c18o LL0x4000829c18; mov LL0x4000829c20o LL0x4000829c20;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829bc8; Value = 0x0000000000000000; PC = 0x274877984672 *)
mov x11 LL0x4000829bc8;
mov x12 LL0x4000829bd0;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x2174000000000000; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829bd8; Value = 0x0000000000000000; PC = 0x274877984680 *)
mov x13 LL0x4000829bd8;
mov x14 LL0x4000829be0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0x85e4423fabe7f3a1; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829be8; Value = 0x0000000000000000; PC = 0x274877984696 *)
mov x15 LL0x4000829be8;
mov x16 LL0x4000829bf0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x540501675805ef09; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829bc8; PC = 0x274877984712 *)
mov LL0x4000829bc8 x11;
mov LL0x4000829bd0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829bf8; Value = 0x0000000000000000; PC = 0x274877984720 *)
mov x11 LL0x4000829bf8;
mov x12 LL0x4000829c00;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0x5a1c9acb7af4e8a4; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829bd8; PC = 0x274877984732 *)
mov LL0x4000829bd8 x13;
mov LL0x4000829be0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829c08; Value = 0x8443a2aa87809000; PC = 0x274877984736 *)
mov x13 LL0x4000829c08;
mov x14 LL0x4000829c10;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0xd4f30efcabdae70a; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829be8; PC = 0x274877984748 *)
mov LL0x4000829be8 x15;
mov LL0x4000829bf0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829c18; Value = 0x0000000000000000; PC = 0x274877984756 *)
mov x15 LL0x4000829c18;
mov x16 LL0x4000829c20;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x000000c000003002; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829bf8; PC = 0x274877984828 *)
mov LL0x4000829bf8 x11;
mov LL0x4000829c00 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829c08; PC = 0x274877984836 *)
mov LL0x4000829c08 x13;
mov LL0x4000829c10 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829c18; PC = 0x274877984840 *)
mov LL0x4000829c18 x15;
mov LL0x4000829c20 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod ((limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                         LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                         LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                         LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829bc8o, LL0x4000829bd0o, LL0x4000829bd8o,
                        LL0x4000829be0o, LL0x4000829be8o, LL0x4000829bf0o,
                        LL0x4000829bf8o, LL0x4000829c00o, LL0x4000829c08o,
                        LL0x4000829c10o, LL0x4000829c18o, LL0x4000829c20o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                         LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                         LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                         LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829bc8o, LL0x4000829bd0o, LL0x4000829bd8o,
                        LL0x4000829be0o, LL0x4000829be8o, LL0x4000829bf0o,
                        LL0x4000829bf8o, LL0x4000829c00o, LL0x4000829c08o,
                        LL0x4000829c10o, LL0x4000829c18o, LL0x4000829c20o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829908; Value = 0x001f004000008b50; PC = 0x274877990080 *)
mov x30 LL0x4000829908;
(* add	sp, sp, #0x60                               #! PC = 0x274877990084 *)
adds dontcare sp sp 0x60@uint64;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829910; Value = 0x000000400082a048; PC = 0x274877990088 *)
mov x19 LL0x4000829910;
mov x20 LL0x4000829918;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829920; Value = 0x000000400082a168; PC = 0x274877990092 *)
mov x21 LL0x4000829920;
mov x22 LL0x4000829928;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829930; Value = 0x000000400085d6d0; PC = 0x274877990096 *)
mov x23 LL0x4000829930;
mov x24 LL0x4000829938;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829940; Value = 0x000000400085d6d0; PC = 0x274877990100 *)
mov x25 LL0x4000829940;
mov x26 LL0x4000829948;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x4000829950; Value = 0x0000004000829b08; PC = 0x274877990104 *)
mov x27 LL0x4000829950;
mov x28 LL0x4000829958;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829900; Value = 0x0000004000829980; PC = 0x274877990108 *)
mov x29 LL0x4000829900;
(* #autiasp                                         #! PC = 0x274877990112 *)
#autiasp                                         #! 0x274877990112 = 0x274877990112;
(* #ret                                            #! PC = 0x274877990116 *)
#ret                                            #! 0x274877990116 = 0x274877990116;

(* mul_382x(t1, a[1], b[1]) *)

(*
assert eqmod ((limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                         LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                         LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                         LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]) +
              (limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                         LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                         LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                         LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]) * U)
             ((limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
              (limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
    && true;
*)

(* ldp	x29, x30, [sp], #16                         #! EA = L0x4000829980; Value = 0x0000004000829990; PC = 0x274877942608 *)
mov x29 LL0x4000829980;
mov x30 LL0x4000829988;
(* #ret                                            #! PC = 0x274877942612 *)
#ret                                            #! 0x274877942612 = 0x274877942612;
(* str	x19, [sp, #104]                             #! EA = L0x40008299f8; PC = 0x274877950244 *)
mov LL0x40008299f8 x19;
(* add	x0, x19, #0xc0                              #! PC = 0x274877950248 *)
adds dontcare x0 x19 0xc0@uint64;
(* mov	x25, x0                                     #! PC = 0x274877950252 *)
mov x25 x0;
(* str	x21, [sp, #112]                             #! EA = L0x4000829a00; PC = 0x274877950256 *)
mov LL0x4000829a00 x21;
(* add	x1, x21, #0xc0                              #! PC = 0x274877950260 *)
adds dontcare x1 x21 0xc0@uint64;
(* mov	x21, x1                                     #! PC = 0x274877950264 *)
mov x21 x1;
(* add	x23, sp, #0x2f8                             #! PC = 0x274877950268 *)
adds dontcare x23 sp 0x2f8@uint64;
(* mov	x2, x1                                      #! PC = 0x274877950272 *)
mov x2 x1;
(* mov	x1, x0                                      #! PC = 0x274877950276 *)
mov x1 x0;
(* mov	x0, x23                                     #! PC = 0x274877950280 *)
mov x0 x23;
(* #bl	0x4000008b3c <mul_fp2x2>                    #! PC = 0x274877950284 *)
#bl	0x4000008b3c <mul_fp2x2>                    #! 0x274877950284 = 0x274877950284;
(* stp	x29, x30, [sp, #-16]!                       #! EA = L0x4000829980; PC = 0x274877942588 *)
mov LL0x4000829980 x29;
mov LL0x4000829988 x30;
(* mov	x29, sp                                     #! PC = 0x274877942592 *)
mov x29 sp;
(* #adrp	x3, 0x4000029000                           #! PC = 0x274877942596 *)
#adrp	%%x3, 0x4000029000                           #! 0x274877942596 = 0x274877942596;
(* ldr	x3, [x3, #4056]                             #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877942600 *)
mov x3 LL0x4000029fd8;
(* #bl	0x40000143c0 <mul_382x>                     #! PC = 0x274877942604 *)
#bl	0x40000143c0 <mul_382x>                     #! 0x274877942604 = 0x274877942604;
(* #paciasp                                         #! PC = 0x274877989824 *)
#paciasp                                         #! 0x274877989824 = 0x274877989824;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829900; PC = 0x274877989828 *)
mov LL0x4000829900 x29;
mov LL0x4000829908 x30;
(* mov	x29, sp                                     #! PC = 0x274877989832 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829910; PC = 0x274877989836 *)
mov LL0x4000829910 x19;
mov LL0x4000829918 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829920; PC = 0x274877989840 *)
mov LL0x4000829920 x21;
mov LL0x4000829928 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829930; PC = 0x274877989844 *)
mov LL0x4000829930 x23;
mov LL0x4000829938 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829940; PC = 0x274877989848 *)
mov LL0x4000829940 x25;
mov LL0x4000829948 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829950; PC = 0x274877989852 *)
mov LL0x4000829950 x27;
mov LL0x4000829958 x28;
(* sub	sp, sp, #0x60                               #! PC = 0x274877989856 *)
subc dontcare sp sp 0x60@uint64;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a108; Value = 0x000000400085ea78; PC = 0x274877989860 *)
mov x11 LL0x400082a108;
mov x12 LL0x400082a110;
(* mov	x26, x0                                     #! PC = 0x274877989864 *)
mov x26 x0;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a138; Value = 0x000000400082ae28; PC = 0x274877989868 *)
mov x19 LL0x400082a138;
mov x20 LL0x400082a140;
(* mov	x27, x1                                     #! PC = 0x274877989872 *)
mov x27 x1;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a118; Value = 0x0000004000841d2c; PC = 0x274877989876 *)
mov x13 LL0x400082a118;
mov x14 LL0x400082a120;
(* mov	x28, x2                                     #! PC = 0x274877989880 *)
mov x28 x2;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a148; Value = 0x000000400082da1c; PC = 0x274877989884 *)
mov x21 LL0x400082a148;
mov x22 LL0x400082a150;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a128; Value = 0x000000400085d000; PC = 0x274877989888 *)
mov x15 LL0x400082a128;
mov x16 LL0x400082a130;
(* adds	x5, x11, x19                               #! PC = 0x274877989892 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a158; Value = 0x000000400082ad60; PC = 0x274877989896 *)
mov x23 LL0x400082a158;
mov x24 LL0x400082a160;
(* adcs	x6, x12, x20                               #! PC = 0x274877989900 *)
adcs carry x6 x12 x20 carry;
(* ldp	x11, x12, [x2]                              #! EA = L0x400082a228; Value = 0x000000400085ea78; PC = 0x274877989904 *)
mov x11 LL0x400082a228;
mov x12 LL0x400082a230;
(* adcs	x7, x13, x21                               #! PC = 0x274877989908 *)
adcs carry x7 x13 x21 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a258; Value = 0x0000008001087e28; PC = 0x274877989912 *)
mov x19 LL0x400082a258;
mov x20 LL0x400082a260;
(* adcs	x8, x14, x22                               #! PC = 0x274877989916 *)
adcs carry x8 x14 x22 carry;
(* ldp	x13, x14, [x2, #16]                         #! EA = L0x400082a238; Value = 0x0000000000000000; PC = 0x274877989920 *)
mov x13 LL0x400082a238;
mov x14 LL0x400082a240;
(* adcs	x9, x15, x23                               #! PC = 0x274877989924 *)
adcs carry x9 x15 x23 carry;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a268; Value = 0x0000004000000040; PC = 0x274877989928 *)
mov x21 LL0x400082a268;
mov x22 LL0x400082a270;
(* adc	x10, x16, x24                               #! PC = 0x274877989932 *)
adc x10 x16 x24 carry;
(* ldp	x15, x16, [x2, #32]                         #! EA = L0x400082a248; Value = 0x0000004000841c68; PC = 0x274877989936 *)
mov x15 LL0x400082a248;
mov x16 LL0x400082a250;
(* stp	x5, x6, [sp]                                #! EA = L0x40008298a0; PC = 0x274877989940 *)
mov LL0x40008298a0 x5;
mov LL0x40008298a8 x6;
(* adds	x5, x11, x19                               #! PC = 0x274877989944 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a278; Value = 0x000000400085d000; PC = 0x274877989948 *)
mov x23 LL0x400082a278;
mov x24 LL0x400082a280;
(* adcs	x6, x12, x20                               #! PC = 0x274877989952 *)
adcs carry x6 x12 x20 carry;
(* stp	x7, x8, [sp, #16]                           #! EA = L0x40008298b0; PC = 0x274877989956 *)
mov LL0x40008298b0 x7;
mov LL0x40008298b8 x8;
(* adcs	x7, x13, x21                               #! PC = 0x274877989960 *)
adcs carry x7 x13 x21 carry;
(* adcs	x8, x14, x22                               #! PC = 0x274877989964 *)
adcs carry x8 x14 x22 carry;
(* stp	x9, x10, [sp, #32]                          #! EA = L0x40008298c0; PC = 0x274877989968 *)
mov LL0x40008298c0 x9;
mov LL0x40008298c8 x10;
(* adcs	x9, x15, x23                               #! PC = 0x274877989972 *)
adcs carry x9 x15 x23 carry;
(* stp	x5, x6, [sp, #48]                           #! EA = L0x40008298d0; PC = 0x274877989976 *)
mov LL0x40008298d0 x5;
mov LL0x40008298d8 x6;
(* adc	x10, x16, x24                               #! PC = 0x274877989980 *)
adc x10 x16 x24 carry;
(* stp	x7, x8, [sp, #64]                           #! EA = L0x40008298e0; PC = 0x274877989984 *)
mov LL0x40008298e0 x7;
mov LL0x40008298e8 x8;
(* stp	x9, x10, [sp, #80]                          #! EA = L0x40008298f0; PC = 0x274877989988 *)
mov LL0x40008298f0 x9;
mov LL0x40008298f8 x10;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877989992 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877989992 = 0x274877989992;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a108; Value = 0x000000400085ea78; PC = 0x274877989152 *)
mov x11 LL0x400082a108;
mov x12 LL0x400082a110;
(* ldr	x17, [x2]                                   #! EA = L0x400082a228; Value = 0x000000400085ea78; PC = 0x274877989156 *)
mov x17 LL0x400082a228;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a118; Value = 0x0000004000841d2c; PC = 0x274877989160 *)
mov x13 LL0x400082a118;
mov x14 LL0x400082a120;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a128; Value = 0x000000400085d000; PC = 0x274877989164 *)
mov x15 LL0x400082a128;
mov x16 LL0x400082a130;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x400082a230; Value = 0x0000000000000000; PC = 0x274877989216 *)
mov x17 LL0x400082a230;
(* str	x19, [x0]                                   #! EA = L0x4000829c88; PC = 0x274877989220 *)
mov LL0x4000829c88 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x400082a238; Value = 0x0000000000000000; PC = 0x274877989320 *)
mov x17 LL0x400082a238;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829c90; PC = 0x274877989328 *)
mov LL0x4000829c90 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x400082a240; Value = 0x000000400082a810; PC = 0x274877989428 *)
mov x17 LL0x400082a240;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829c98; PC = 0x274877989436 *)
mov LL0x4000829c98 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x400082a248; Value = 0x0000004000841c68; PC = 0x274877989536 *)
mov x17 LL0x400082a248;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829ca0; PC = 0x274877989544 *)
mov LL0x4000829ca0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x400082a250; Value = 0x0000000000000000; PC = 0x274877989644 *)
mov x17 LL0x400082a250;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829ca8; PC = 0x274877989652 *)
mov LL0x4000829ca8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829cb0; PC = 0x274877989756 *)
mov LL0x4000829cb0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829cb8; PC = 0x274877989784 *)
mov LL0x4000829cb8 x19;
mov LL0x4000829cc0 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829cc8; PC = 0x274877989788 *)
mov LL0x4000829cc8 x21;
mov LL0x4000829cd0 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829cd8; PC = 0x274877989792 *)
mov LL0x4000829cd8 x23;
mov LL0x4000829ce0 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* mov	x1, sp                                      #! PC = 0x274877989996 *)
mov x1 sp;
(* add	x2, sp, #0x30                               #! PC = 0x274877990000 *)
adds dontcare x2 sp 0x30@uint64;
(* add	x0, x26, #0x60                              #! PC = 0x274877990004 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990008 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990008 = 0x274877990008;
(* ldp	x11, x12, [x1]                              #! EA = L0x40008298a0; Value = 0x00000080010898a0; PC = 0x274877989152 *)
mov x11 LL0x40008298a0;
mov x12 LL0x40008298a8;
(* ldr	x17, [x2]                                   #! EA = L0x40008298d0; Value = 0x000000c0018e68a0; PC = 0x274877989156 *)
mov x17 LL0x40008298d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x40008298b0; Value = 0x000000800106f748; PC = 0x274877989160 *)
mov x13 LL0x40008298b0;
mov x14 LL0x40008298b8;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x40008298c0; Value = 0x0000008001087d60; PC = 0x274877989164 *)
mov x15 LL0x40008298c0;
mov x16 LL0x40008298c8;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x40008298d8; Value = 0x000000400082e3a0; PC = 0x274877989216 *)
mov x17 LL0x40008298d8;
(* str	x19, [x0]                                   #! EA = L0x4000829ce8; PC = 0x274877989220 *)
mov LL0x4000829ce8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x40008298e0; Value = 0x0000004000000040; PC = 0x274877989320 *)
mov x17 LL0x40008298e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829cf0; PC = 0x274877989328 *)
mov LL0x4000829cf0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x40008298e8; Value = 0x000000400082a81a; PC = 0x274877989428 *)
mov x17 LL0x40008298e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829cf8; PC = 0x274877989436 *)
mov LL0x4000829cf8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x40008298f0; Value = 0x000000800109ec68; PC = 0x274877989536 *)
mov x17 LL0x40008298f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829d00; PC = 0x274877989544 *)
mov LL0x4000829d00 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x40008298f8; Value = 0x0000000000000001; PC = 0x274877989644 *)
mov x17 LL0x40008298f8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829d08; PC = 0x274877989652 *)
mov LL0x4000829d08 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829d10; PC = 0x274877989756 *)
mov LL0x4000829d10 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829d18; PC = 0x274877989784 *)
mov LL0x4000829d18 x19;
mov LL0x4000829d20 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829d28; PC = 0x274877989788 *)
mov LL0x4000829d28 x21;
mov LL0x4000829d30 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829d38; PC = 0x274877989792 *)
mov LL0x4000829d38 x23;
mov LL0x4000829d40 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* add	x1, x27, #0x30                              #! PC = 0x274877990012 *)
adds dontcare x1 x27 0x30@uint64;
(* add	x2, x28, #0x30                              #! PC = 0x274877990016 *)
adds dontcare x2 x28 0x30@uint64;
(* mov	x0, sp                                      #! PC = 0x274877990020 *)
mov x0 sp;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990024 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990024 = 0x274877990024;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a138; Value = 0x000000400082ae28; PC = 0x274877989152 *)
mov x11 LL0x400082a138;
mov x12 LL0x400082a140;
(* ldr	x17, [x2]                                   #! EA = L0x400082a258; Value = 0x0000008001087e28; PC = 0x274877989156 *)
mov x17 LL0x400082a258;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a148; Value = 0x000000400082da1c; PC = 0x274877989160 *)
mov x13 LL0x400082a148;
mov x14 LL0x400082a150;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a158; Value = 0x000000400082ad60; PC = 0x274877989164 *)
mov x15 LL0x400082a158;
mov x16 LL0x400082a160;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x400082a260; Value = 0x000000400082e3a0; PC = 0x274877989216 *)
mov x17 LL0x400082a260;
(* str	x19, [x0]                                   #! EA = L0x40008298a0; PC = 0x274877989220 *)
mov LL0x40008298a0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x400082a268; Value = 0x0000004000000040; PC = 0x274877989320 *)
mov x17 LL0x400082a268;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x40008298a8; PC = 0x274877989328 *)
mov LL0x40008298a8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x400082a270; Value = 0x000000000000000a; PC = 0x274877989428 *)
mov x17 LL0x400082a270;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x40008298b0; PC = 0x274877989436 *)
mov LL0x40008298b0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x400082a278; Value = 0x000000400085d000; PC = 0x274877989536 *)
mov x17 LL0x400082a278;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x40008298b8; PC = 0x274877989544 *)
mov LL0x40008298b8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x400082a280; Value = 0x0000000000000001; PC = 0x274877989644 *)
mov x17 LL0x400082a280;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x40008298c0; PC = 0x274877989652 *)
mov LL0x40008298c0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x40008298c8; PC = 0x274877989756 *)
mov LL0x40008298c8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x40008298d0; PC = 0x274877989784 *)
mov LL0x40008298d0 x19;
mov LL0x40008298d8 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x40008298e0; PC = 0x274877989788 *)
mov LL0x40008298e0 x21;
mov LL0x40008298e8 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x40008298f0; PC = 0x274877989792 *)
mov LL0x40008298f0 x23;
mov LL0x40008298f8 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877990028 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877990032 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877990036 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* add	x1, x26, #0x60                              #! PC = 0x274877990040 *)
adds dontcare x1 x26 0x60@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990044 *)
mov x2 sp;
(* add	x0, x26, #0x60                              #! PC = 0x274877990048 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990052 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990052 = 0x274877990052;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                    LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                    LL0x4000829c10, LL0x4000829c18, LL0x4000829c20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829ce8o LL0x4000829ce8; mov LL0x4000829cf0o LL0x4000829cf0;
mov LL0x4000829cf8o LL0x4000829cf8; mov LL0x4000829d00o LL0x4000829d00;
mov LL0x4000829d08o LL0x4000829d08; mov LL0x4000829d10o LL0x4000829d10;
mov LL0x4000829d18o LL0x4000829d18; mov LL0x4000829d20o LL0x4000829d20;
mov LL0x4000829d28o LL0x4000829d28; mov LL0x4000829d30o LL0x4000829d30;
mov LL0x4000829d38o LL0x4000829d38; mov LL0x4000829d40o LL0x4000829d40;


(* ldp	x11, x12, [x1]                              #! EA = L0x4000829ce8; Value = 0x8da863c96c206400; PC = 0x274877984672 *)
mov x11 LL0x4000829ce8;
mov x12 LL0x4000829cf0;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x83772503ff62e640; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829cf8; Value = 0x515c20db6fc87f02; PC = 0x274877984680 *)
mov x13 LL0x4000829cf8;
mov x14 LL0x4000829d00;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xe59c03ff476a6660; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829d08; Value = 0xdf9e59f931522c42; PC = 0x274877984696 *)
mov x15 LL0x4000829d08;
mov x16 LL0x4000829d10;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x287e6d84f9be72a0; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829ce8; PC = 0x274877984712 *)
mov LL0x4000829ce8 x11;
mov LL0x4000829cf0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829d18; Value = 0x527aa2f00648989d; PC = 0x274877984720 *)
mov x11 LL0x4000829d18;
mov x12 LL0x4000829d20;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0xa50a009debb6c74b; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829cf8; PC = 0x274877984732 *)
mov LL0x4000829cf8 x13;
mov LL0x4000829d00 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829d28; Value = 0x8cbe116492c854aa; PC = 0x274877984736 *)
mov x13 LL0x4000829d28;
mov x14 LL0x4000829d30;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x421f9f0e457f2911; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829d08; PC = 0x274877984748 *)
mov LL0x4000829d08 x15;
mov LL0x4000829d10 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829d38; Value = 0x0000008001090e19; PC = 0x274877984756 *)
mov x15 LL0x4000829d38;
mov x16 LL0x4000829d40;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x000000400085fa78; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829d18; PC = 0x274877984828 *)
mov LL0x4000829d18 x11;
mov LL0x4000829d20 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829d28; PC = 0x274877984836 *)
mov LL0x4000829d28 x13;
mov LL0x4000829d30 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829d38; PC = 0x274877984840 *)
mov LL0x4000829d38 x15;
mov LL0x4000829d40 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod ((limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                         LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                         LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                         LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829ce8o, LL0x4000829cf0o, LL0x4000829cf8o,
                        LL0x4000829d00o, LL0x4000829d08o, LL0x4000829d10o,
                        LL0x4000829d18o, LL0x4000829d20o, LL0x4000829d28o,
                        LL0x4000829d30o, LL0x4000829d38o, LL0x4000829d40o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                         LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                         LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                         LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829ce8o, LL0x4000829cf0o, LL0x4000829cf8o,
                        LL0x4000829d00o, LL0x4000829d08o, LL0x4000829d10o,
                        LL0x4000829d18o, LL0x4000829d20o, LL0x4000829d28o,
                        LL0x4000829d30o, LL0x4000829d38o, LL0x4000829d40o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x2, x26, #0x0                               #! PC = 0x274877990056 *)
adds dontcare x2 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990060 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990060 = 0x274877990060;

rcut and [limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

(* NOTE: save old values *)
mov LL0x4000829ce8p LL0x4000829ce8; mov LL0x4000829cf0p LL0x4000829cf0;
mov LL0x4000829cf8p LL0x4000829cf8; mov LL0x4000829d00p LL0x4000829d00;
mov LL0x4000829d08p LL0x4000829d08; mov LL0x4000829d10p LL0x4000829d10;
mov LL0x4000829d18p LL0x4000829d18; mov LL0x4000829d20p LL0x4000829d20;
mov LL0x4000829d28p LL0x4000829d28; mov LL0x4000829d30p LL0x4000829d30;
mov LL0x4000829d38p LL0x4000829d38; mov LL0x4000829d40p LL0x4000829d40;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829ce8; Value = 0x0a313ec56cbd7dc0; PC = 0x274877984672 *)
mov x11 LL0x4000829ce8;
mov x12 LL0x4000829cf0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c88; Value = 0x42f5820d776f9840; PC = 0x274877984676 *)
mov x19 LL0x4000829c88;
mov x20 LL0x4000829c90;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829cf8; Value = 0x6bc01cdc285e18a1; PC = 0x274877984680 *)
mov x13 LL0x4000829cf8;
mov x14 LL0x4000829d00;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c98; Value = 0x42822e1c2873f4a0; PC = 0x274877984688 *)
mov x21 LL0x4000829c98;
mov x22 LL0x4000829ca0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829d08; Value = 0xb71fec743793b9a1; PC = 0x274877984696 *)
mov x15 LL0x4000829d08;
mov x16 LL0x4000829d10;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829ca8; Value = 0xc6c52bca7f5b01c0; PC = 0x274877984704 *)
mov x23 LL0x4000829ca8;
mov x24 LL0x4000829cb0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829ce8; PC = 0x274877984712 *)
mov LL0x4000829ce8 x11;
mov LL0x4000829cf0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829d18; Value = 0xad70a2521a91d152; PC = 0x274877984720 *)
mov x11 LL0x4000829d18;
mov x12 LL0x4000829d20;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829cb8; Value = 0x842ea77caa980760; PC = 0x274877984728 *)
mov x19 LL0x4000829cb8;
mov x20 LL0x4000829cc0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829cf8; PC = 0x274877984732 *)
mov LL0x4000829cf8 x13;
mov LL0x4000829d00 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829d28; Value = 0x4a9e72564d492b99; PC = 0x274877984736 *)
mov x13 LL0x4000829d28;
mov x14 LL0x4000829d30;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829cc8; Value = 0x83de8ddb9debda00; PC = 0x274877984740 *)
mov x21 LL0x4000829cc8;
mov x22 LL0x4000829cd0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829d08; PC = 0x274877984748 *)
mov LL0x4000829d08 x15;
mov LL0x4000829d10 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829d38; Value = 0x00000040008313a0; PC = 0x274877984756 *)
mov x15 LL0x4000829d38;
mov x16 LL0x4000829d40;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829cd8; Value = 0x0000000000001000; PC = 0x274877984764 *)
mov x23 LL0x4000829cd8;
mov x24 LL0x4000829ce0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829d18; PC = 0x274877984828 *)
mov LL0x4000829d18 x11;
mov LL0x4000829d20 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829d28; PC = 0x274877984836 *)
mov LL0x4000829d28 x13;
mov LL0x4000829d30 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829d38; PC = 0x274877984840 *)
mov LL0x4000829d38 x15;
mov LL0x4000829d40 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod ((limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                         LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                         LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                         LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]) +
              (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                         LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                         LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                         LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]))
             (limbs 64 [LL0x4000829ce8p, LL0x4000829cf0p, LL0x4000829cf8p,
                        LL0x4000829d00p, LL0x4000829d08p, LL0x4000829d10p,
                        LL0x4000829d18p, LL0x4000829d20p, LL0x4000829d28p,
                        LL0x4000829d30p, LL0x4000829d38p, LL0x4000829d40p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                         LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                         LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                         LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]) +
              (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                         LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                         LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                         LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]))
             (limbs 64 [LL0x4000829ce8p, LL0x4000829cf0p, LL0x4000829cf8p,
                        LL0x4000829d00p, LL0x4000829d08p, LL0x4000829d10p,
                        LL0x4000829d18p, LL0x4000829d20p, LL0x4000829d28p,
                        LL0x4000829d30p, LL0x4000829d38p, LL0x4000829d40p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x1, x26, #0x0                               #! PC = 0x274877990064 *)
adds dontcare x1 x26 0@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990068 *)
mov x2 sp;
(* add	x0, x26, #0x0                               #! PC = 0x274877990072 *)
adds dontcare x0 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990076 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990076 = 0x274877990076;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                    LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829c88o LL0x4000829c88; mov LL0x4000829c90o LL0x4000829c90;
mov LL0x4000829c98o LL0x4000829c98; mov LL0x4000829ca0o LL0x4000829ca0;
mov LL0x4000829ca8o LL0x4000829ca8; mov LL0x4000829cb0o LL0x4000829cb0;
mov LL0x4000829cb8o LL0x4000829cb8; mov LL0x4000829cc0o LL0x4000829cc0;
mov LL0x4000829cc8o LL0x4000829cc8; mov LL0x4000829cd0o LL0x4000829cd0;
mov LL0x4000829cd8o LL0x4000829cd8; mov LL0x4000829ce0o LL0x4000829ce0;


(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c88; Value = 0x42f5820d776f9840; PC = 0x274877984672 *)
mov x11 LL0x4000829c88;
mov x12 LL0x4000829c90;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x83772503ff62e640; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c98; Value = 0x42822e1c2873f4a0; PC = 0x274877984680 *)
mov x13 LL0x4000829c98;
mov x14 LL0x4000829ca0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xe59c03ff476a6660; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ca8; Value = 0xc6c52bca7f5b01c0; PC = 0x274877984696 *)
mov x15 LL0x4000829ca8;
mov x16 LL0x4000829cb0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x287e6d84f9be72a0; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829c88; PC = 0x274877984712 *)
mov LL0x4000829c88 x11;
mov LL0x4000829c90 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829cb8; Value = 0x842ea77caa980760; PC = 0x274877984720 *)
mov x11 LL0x4000829cb8;
mov x12 LL0x4000829cc0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0xa50a009debb6c74b; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829c98; PC = 0x274877984732 *)
mov LL0x4000829c98 x13;
mov LL0x4000829ca0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829cc8; Value = 0x83de8ddb9debda00; PC = 0x274877984736 *)
mov x13 LL0x4000829cc8;
mov x14 LL0x4000829cd0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x421f9f0e457f2911; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ca8; PC = 0x274877984748 *)
mov LL0x4000829ca8 x15;
mov LL0x4000829cb0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829cd8; Value = 0x0000000000001000; PC = 0x274877984756 *)
mov x15 LL0x4000829cd8;
mov x16 LL0x4000829ce0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x000000400085fa78; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829cb8; PC = 0x274877984828 *)
mov LL0x4000829cb8 x11;
mov LL0x4000829cc0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829cc8; PC = 0x274877984836 *)
mov LL0x4000829cc8 x13;
mov LL0x4000829cd0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829cd8; PC = 0x274877984840 *)
mov LL0x4000829cd8 x15;
mov LL0x4000829ce0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod ((limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                         LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                         LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                         LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829c88o, LL0x4000829c90o, LL0x4000829c98o,
                        LL0x4000829ca0o, LL0x4000829ca8o, LL0x4000829cb0o,
                        LL0x4000829cb8o, LL0x4000829cc0o, LL0x4000829cc8o,
                        LL0x4000829cd0o, LL0x4000829cd8o, LL0x4000829ce0o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                         LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                         LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                         LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]) +
              (limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                         LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                         LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                         LL0x40008298e8, LL0x40008298f0, LL0x40008298f8]))
             (limbs 64 [LL0x4000829c88o, LL0x4000829c90o, LL0x4000829c98o,
                        LL0x4000829ca0o, LL0x4000829ca8o, LL0x4000829cb0o,
                        LL0x4000829cb8o, LL0x4000829cc0o, LL0x4000829cc8o,
                        LL0x4000829cd0o, LL0x4000829cd8o, LL0x4000829ce0o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829908; Value = 0x001f004000008b50; PC = 0x274877990080 *)
mov x30 LL0x4000829908;
(* add	sp, sp, #0x60                               #! PC = 0x274877990084 *)
adds dontcare sp sp 0x60@uint64;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829910; Value = 0x000000400082a048; PC = 0x274877990088 *)
mov x19 LL0x4000829910;
mov x20 LL0x4000829918;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829920; Value = 0x000000400082a228; PC = 0x274877990092 *)
mov x21 LL0x4000829920;
mov x22 LL0x4000829928;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829930; Value = 0x0000004000829c88; PC = 0x274877990096 *)
mov x23 LL0x4000829930;
mov x24 LL0x4000829938;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829940; Value = 0x000000400082a108; PC = 0x274877990100 *)
mov x25 LL0x4000829940;
mov x26 LL0x4000829948;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x4000829950; Value = 0x0000004000829b08; PC = 0x274877990104 *)
mov x27 LL0x4000829950;
mov x28 LL0x4000829958;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829900; Value = 0x0000004000829980; PC = 0x274877990108 *)
mov x29 LL0x4000829900;
(* #autiasp                                         #! PC = 0x274877990112 *)
#autiasp                                         #! 0x274877990112 = 0x274877990112;
(* #ret                                            #! PC = 0x274877990116 *)
#ret                                            #! 0x274877990116 = 0x274877990116;
(* ldp	x29, x30, [sp], #16                         #! EA = L0x4000829980; Value = 0x0000004000829990; PC = 0x274877942608 *)
mov x29 LL0x4000829980;
mov x30 LL0x4000829988;
(* #ret                                            #! PC = 0x274877942612 *)
#ret                                            #! 0x274877942612 = 0x274877942612;

(* mul_382x(t2, a[2], b[2]) *)

(*
assert eqmod ((limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                         LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                         LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                         LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]) +
              (limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                         LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                         LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                         LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]) * U)
             ((limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
    && true;
*)

(* #adrp	x19, 0x4000029000                          #! PC = 0x274877950288 *)
#adrp	%%x19, 0x4000029000                          #! 0x274877950288 = 0x274877950288;
(* ldr	x19, [x19, #4056]                           #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877950292 *)
mov x19 LL0x4000029fd8;
(* add	x24, sp, #0xb8                              #! PC = 0x274877950296 *)
adds dontcare x24 sp 0xb8@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950300 *)
mov x3 x19;
(* str	x25, [sp, #152]                             #! EA = L0x4000829a28; PC = 0x274877950304 *)
mov LL0x4000829a28 x25;
(* mov	x2, x25                                     #! PC = 0x274877950308 *)
mov x2 x25;
(* str	x22, [sp, #136]                             #! EA = L0x4000829a18; PC = 0x274877950312 *)
mov LL0x4000829a18 x22;

rcut and [limbs 64 [LL0x400082a0a8, LL0x400082a0b0, LL0x400082a0b8,
                    LL0x400082a0c0, LL0x400082a0c8, LL0x400082a0d0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a0d8, LL0x400082a0e0, LL0x400082a0e8,
                    LL0x400082a0f0, LL0x400082a0f8, LL0x400082a100] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a108, LL0x400082a110, LL0x400082a118,
                    LL0x400082a120, LL0x400082a128, LL0x400082a130] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a138, LL0x400082a140, LL0x400082a148,
                    LL0x400082a150, LL0x400082a158, LL0x400082a160] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a1c8, LL0x400082a1d0, LL0x400082a1d8,
                    LL0x400082a1e0, LL0x400082a1e8, LL0x400082a1f0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a1f8, LL0x400082a200, LL0x400082a208,
                    LL0x400082a210, LL0x400082a218, LL0x400082a220] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a228, LL0x400082a230, LL0x400082a238,
                    LL0x400082a240, LL0x400082a248, LL0x400082a250] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x400082a258, LL0x400082a260, LL0x400082a268,
                    LL0x400082a270, LL0x400082a278, LL0x400082a280] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                    LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* mov	x1, x22                                     #! PC = 0x274877950316 *)
mov x1 x22;
(* mov	x0, x24                                     #! PC = 0x274877950320 *)
mov x0 x24;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877950324 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877950324 = 0x274877950324;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829960; PC = 0x274877979620 *)
mov LL0x4000829960 x29;
mov LL0x4000829968 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829970; PC = 0x274877979628 *)
mov LL0x4000829970 x19;
mov LL0x4000829978 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829980; PC = 0x274877979632 *)
mov LL0x4000829980 x21;
mov LL0x4000829988 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 LL0x4000016928;
mov x5 LL0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 LL0x4000016938;
mov x7 LL0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 LL0x4000016948;
mov x9 LL0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a0a8; Value = 0x0000000000000000; PC = 0x274877979488 *)
mov x10 LL0x400082a0a8;
mov x11 LL0x400082a0b0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a108; Value = 0x000000400085ea78; PC = 0x274877979492 *)
mov x16 LL0x400082a108;
mov x17 LL0x400082a110;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 LL0x400082a0b8;
mov x13 LL0x400082a0c0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a118; Value = 0x0000004000841d2c; PC = 0x274877979500 *)
mov x19 LL0x400082a118;
mov x20 LL0x400082a120;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x0000008001086c68; PC = 0x274877979504 *)
mov x14 LL0x400082a0c8;
mov x15 LL0x400082a0d0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a128; Value = 0x000000400085d000; PC = 0x274877979508 *)
mov x21 LL0x400082a128;
mov x22 LL0x400082a130;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829a48; PC = 0x274877979652 *)
mov LL0x4000829a48 x10;
mov LL0x4000829a50 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829a58; PC = 0x274877979660 *)
mov LL0x4000829a58 x12;
mov LL0x4000829a60 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829a68; PC = 0x274877979668 *)
mov LL0x4000829a68 x14;
mov LL0x4000829a70 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a0d8; Value = 0x000000800085d000; PC = 0x274877979488 *)
mov x10 LL0x400082a0d8;
mov x11 LL0x400082a0e0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a138; Value = 0x000000400082ae28; PC = 0x274877979492 *)
mov x16 LL0x400082a138;
mov x17 LL0x400082a140;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a0e8; Value = 0x000000800085ead0; PC = 0x274877979496 *)
mov x12 LL0x400082a0e8;
mov x13 LL0x400082a0f0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a148; Value = 0x000000400082da1c; PC = 0x274877979500 *)
mov x19 LL0x400082a148;
mov x20 LL0x400082a150;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a0f8; Value = 0x00000080010bb000; PC = 0x274877979504 *)
mov x14 LL0x400082a0f8;
mov x15 LL0x400082a100;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a158; Value = 0x000000400082ad60; PC = 0x274877979508 *)
mov x21 LL0x400082a158;
mov x22 LL0x400082a160;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829968; Value = 0x007300400000a978; PC = 0x274877979676 *)
mov x30 LL0x4000829968;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829a78; PC = 0x274877979680 *)
mov LL0x4000829a78 x10;
mov LL0x4000829a80 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829a88; PC = 0x274877979684 *)
mov LL0x4000829a88 x12;
mov LL0x4000829a90 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829a98; PC = 0x274877979688 *)
mov LL0x4000829a98 x14;
mov LL0x4000829aa0 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829970; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 LL0x4000829970;
mov x20 LL0x4000829978;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829980; Value = 0x000000400082a228; PC = 0x274877979696 *)
mov x21 LL0x4000829980;
mov x22 LL0x4000829988;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829960; Value = 0x0000004000829990; PC = 0x274877979700 *)
mov x29 LL0x4000829960;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;

(* add_fp2(aa, a[1], a[2]) *)

assert true
    && eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                        LL0x4000829a60, LL0x4000829a68, LL0x4000829a70])
             (limbs 64 [a20, a21, a22, a23, a24, a25] +
              limbs 64 [a40, a41, a42, a43, a44, a45])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                        LL0x4000829a60, LL0x4000829a68, LL0x4000829a70])
             (limbs 64 [a20, a21, a22, a23, a24, a25] +
              limbs 64 [a40, a41, a42, a43, a44, a45])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                        LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0])
             (limbs 64 [a30, a31, a32, a33, a34, a35] +
              limbs 64 [a50, a51, a52, a53, a54, a55])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                        LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0])
             (limbs 64 [a30, a31, a32, a33, a34, a35] +
              limbs 64 [a50, a51, a52, a53, a54, a55])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* add	x25, sp, #0x118                             #! PC = 0x274877950328 *)
adds dontcare x25 sp 0x118@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950332 *)
mov x3 x19;
(* str	x21, [sp, #160]                             #! EA = L0x4000829a30; PC = 0x274877950336 *)
mov LL0x4000829a30 x21;
(* mov	x2, x21                                     #! PC = 0x274877950340 *)
mov x2 x21;
(* str	x26, [sp, #144]                             #! EA = L0x4000829a20; PC = 0x274877950344 *)
mov LL0x4000829a20 x26;
(* mov	x1, x26                                     #! PC = 0x274877950348 *)
mov x1 x26;
(* mov	x0, x25                                     #! PC = 0x274877950352 *)
mov x0 x25;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877950356 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877950356 = 0x274877950356;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829960; PC = 0x274877979620 *)
mov LL0x4000829960 x29;
mov LL0x4000829968 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829970; PC = 0x274877979628 *)
mov LL0x4000829970 x19;
mov LL0x4000829978 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829980; PC = 0x274877979632 *)
mov LL0x4000829980 x21;
mov LL0x4000829988 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 LL0x4000016928;
mov x5 LL0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 LL0x4000016938;
mov x7 LL0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 LL0x4000016948;
mov x9 LL0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a1c8; Value = 0x0000000000000000; PC = 0x274877979488 *)
mov x10 LL0x400082a1c8;
mov x11 LL0x400082a1d0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a228; Value = 0x000000400085ea78; PC = 0x274877979492 *)
mov x16 LL0x400082a228;
mov x17 LL0x400082a230;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a1d8; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 LL0x400082a1d8;
mov x13 LL0x400082a1e0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a238; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 LL0x400082a238;
mov x20 LL0x400082a240;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a1e8; Value = 0x0000004000845000; PC = 0x274877979504 *)
mov x14 LL0x400082a1e8;
mov x15 LL0x400082a1f0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a248; Value = 0x0000004000841c68; PC = 0x274877979508 *)
mov x21 LL0x400082a248;
mov x22 LL0x400082a250;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829aa8; PC = 0x274877979652 *)
mov LL0x4000829aa8 x10;
mov LL0x4000829ab0 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829ab8; PC = 0x274877979660 *)
mov LL0x4000829ab8 x12;
mov LL0x4000829ac0 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829ac8; PC = 0x274877979668 *)
mov LL0x4000829ac8 x14;
mov LL0x4000829ad0 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a1f8; Value = 0x0000004000000000; PC = 0x274877979488 *)
mov x10 LL0x400082a1f8;
mov x11 LL0x400082a200;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a258; Value = 0x0000008001087e28; PC = 0x274877979492 *)
mov x16 LL0x400082a258;
mov x17 LL0x400082a260;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a208; Value = 0x000000400085ea90; PC = 0x274877979496 *)
mov x12 LL0x400082a208;
mov x13 LL0x400082a210;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a268; Value = 0x0000004000000040; PC = 0x274877979500 *)
mov x19 LL0x400082a268;
mov x20 LL0x400082a270;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a218; Value = 0x000000400085e000; PC = 0x274877979504 *)
mov x14 LL0x400082a218;
mov x15 LL0x400082a220;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a278; Value = 0x000000400085d000; PC = 0x274877979508 *)
mov x21 LL0x400082a278;
mov x22 LL0x400082a280;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829968; Value = 0x000d00400000a998; PC = 0x274877979676 *)
mov x30 LL0x4000829968;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829ad8; PC = 0x274877979680 *)
mov LL0x4000829ad8 x10;
mov LL0x4000829ae0 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829ae8; PC = 0x274877979684 *)
mov LL0x4000829ae8 x12;
mov LL0x4000829af0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829af8; PC = 0x274877979688 *)
mov LL0x4000829af8 x14;
mov LL0x4000829b00 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829970; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 LL0x4000829970;
mov x20 LL0x4000829978;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829980; Value = 0x000000400082a228; PC = 0x274877979696 *)
mov x21 LL0x4000829980;
mov x22 LL0x4000829988;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829960; Value = 0x0000004000829990; PC = 0x274877979700 *)
mov x29 LL0x4000829960;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;

(* add_fp2(bb, b[1], b[2]) *)

assert true
    && eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                        LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0])
             (limbs 64 [b20, b21, b22, b23, b24, b25] +
              limbs 64 [b40, b41, b42, b43, b44, b45])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                        LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0])
             (limbs 64 [b20, b21, b22, b23, b24, b25] +
              limbs 64 [b40, b41, b42, b43, b44, b45])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                        LL0x4000829af0, LL0x4000829af8, LL0x4000829b00])
             (limbs 64 [b30, b31, b32, b33, b34, b35] +
              limbs 64 [b50, b51, b52, b53, b54, b55])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                        LL0x4000829af0, LL0x4000829af8, LL0x4000829b00])
             (limbs 64 [b30, b31, b32, b33, b34, b35] +
              limbs 64 [b50, b51, b52, b53, b54, b55])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* add_fp2(aa, a[1], a[2]) *)
(*
assert eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                        LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
              limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                        LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U)
             ((limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;
*)
(* add_fp2(bb, b[1], b[2]) *)
(*
assert eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                        LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
              limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                        LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U)
             ((limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;
*)

(* NOTE: save old values *)
mov LL0x4000829a48r0 LL0x4000829a48; mov LL0x4000829a50r0 LL0x4000829a50;
mov LL0x4000829a58r0 LL0x4000829a58; mov LL0x4000829a60r0 LL0x4000829a60;
mov LL0x4000829a68r0 LL0x4000829a68; mov LL0x4000829a70r0 LL0x4000829a70;
mov LL0x4000829a78r0 LL0x4000829a78; mov LL0x4000829a80r0 LL0x4000829a80;
mov LL0x4000829a88r0 LL0x4000829a88; mov LL0x4000829a90r0 LL0x4000829a90;
mov LL0x4000829a98r0 LL0x4000829a98; mov LL0x4000829aa0r0 LL0x4000829aa0;
mov LL0x4000829aa8r0 LL0x4000829aa8; mov LL0x4000829ab0r0 LL0x4000829ab0;
mov LL0x4000829ab8r0 LL0x4000829ab8; mov LL0x4000829ac0r0 LL0x4000829ac0;
mov LL0x4000829ac8r0 LL0x4000829ac8; mov LL0x4000829ad0r0 LL0x4000829ad0;
mov LL0x4000829ad8r0 LL0x4000829ad8; mov LL0x4000829ae0r0 LL0x4000829ae0;
mov LL0x4000829ae8r0 LL0x4000829ae8; mov LL0x4000829af0r0 LL0x4000829af0;
mov LL0x4000829af8r0 LL0x4000829af8; mov LL0x4000829b00r0 LL0x4000829b00;

(* mov	x2, x25                                     #! PC = 0x274877950360 *)
mov x2 x25;
(* mov	x1, x24                                     #! PC = 0x274877950364 *)
mov x1 x24;
(* mov	x0, x20                                     #! PC = 0x274877950368 *)
mov x0 x20;
(* #bl	0x4000008b3c <mul_fp2x2>                    #! PC = 0x274877950372 *)
#bl	0x4000008b3c <mul_fp2x2>                    #! 0x274877950372 = 0x274877950372;
(* stp	x29, x30, [sp, #-16]!                       #! EA = L0x4000829980; PC = 0x274877942588 *)
mov LL0x4000829980 x29;
mov LL0x4000829988 x30;
(* mov	x29, sp                                     #! PC = 0x274877942592 *)
mov x29 sp;
(* #adrp	x3, 0x4000029000                           #! PC = 0x274877942596 *)
#adrp	%%x3, 0x4000029000                           #! 0x274877942596 = 0x274877942596;
(* ldr	x3, [x3, #4056]                             #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877942600 *)
mov x3 LL0x4000029fd8;
(* #bl	0x40000143c0 <mul_382x>                     #! PC = 0x274877942604 *)
#bl	0x40000143c0 <mul_382x>                     #! 0x274877942604 = 0x274877942604;

rcut and [limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                    LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                    LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                    LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                    LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* #paciasp                                         #! PC = 0x274877989824 *)
#paciasp                                         #! 0x274877989824 = 0x274877989824;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829900; PC = 0x274877989828 *)
mov LL0x4000829900 x29;
mov LL0x4000829908 x30;
(* mov	x29, sp                                     #! PC = 0x274877989832 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829910; PC = 0x274877989836 *)
mov LL0x4000829910 x19;
mov LL0x4000829918 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829920; PC = 0x274877989840 *)
mov LL0x4000829920 x21;
mov LL0x4000829928 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829930; PC = 0x274877989844 *)
mov LL0x4000829930 x23;
mov LL0x4000829938 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829940; PC = 0x274877989848 *)
mov LL0x4000829940 x25;
mov LL0x4000829948 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829950; PC = 0x274877989852 *)
mov LL0x4000829950 x27;
mov LL0x4000829958 x28;
(* sub	sp, sp, #0x60                               #! PC = 0x274877989856 *)
subc dontcare sp sp 0x60@uint64;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a48; Value = 0x000000400085ea78; PC = 0x274877989860 *)
mov x11 LL0x4000829a48;
mov x12 LL0x4000829a50;
(* mov	x26, x0                                     #! PC = 0x274877989864 *)
mov x26 x0;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x4000829a78; Value = 0x000000c001087e28; PC = 0x274877989868 *)
mov x19 LL0x4000829a78;
mov x20 LL0x4000829a80;
(* mov	x27, x1                                     #! PC = 0x274877989872 *)
mov x27 x1;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a58; Value = 0x0000004000841d2c; PC = 0x274877989876 *)
mov x13 LL0x4000829a58;
mov x14 LL0x4000829a60;
(* mov	x28, x2                                     #! PC = 0x274877989880 *)
mov x28 x2;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x4000829a88; Value = 0x000000c00108c4ec; PC = 0x274877989884 *)
mov x21 LL0x4000829a88;
mov x22 LL0x4000829a90;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a68; Value = 0x000000c0018e3c68; PC = 0x274877989888 *)
mov x15 LL0x4000829a68;
mov x16 LL0x4000829a70;
(* adds	x5, x11, x19                               #! PC = 0x274877989892 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x4000829a98; Value = 0x000000c0018e5d60; PC = 0x274877989896 *)
mov x23 LL0x4000829a98;
mov x24 LL0x4000829aa0;
(* adcs	x6, x12, x20                               #! PC = 0x274877989900 *)
adcs carry x6 x12 x20 carry;
(* ldp	x11, x12, [x2]                              #! EA = L0x4000829aa8; Value = 0x000000400085ea78; PC = 0x274877989904 *)
mov x11 LL0x4000829aa8;
mov x12 LL0x4000829ab0;
(* adcs	x7, x13, x21                               #! PC = 0x274877989908 *)
adcs carry x7 x13 x21 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829ad8; Value = 0x000000c001087e28; PC = 0x274877989912 *)
mov x19 LL0x4000829ad8;
mov x20 LL0x4000829ae0;
(* adcs	x8, x14, x22                               #! PC = 0x274877989916 *)
adcs carry x8 x14 x22 carry;
(* ldp	x13, x14, [x2, #16]                         #! EA = L0x4000829ab8; Value = 0x0000000000000000; PC = 0x274877989920 *)
mov x13 LL0x4000829ab8;
mov x14 LL0x4000829ac0;
(* adcs	x9, x15, x23                               #! PC = 0x274877989924 *)
adcs carry x9 x15 x23 carry;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ae8; Value = 0x000000800085ead0; PC = 0x274877989928 *)
mov x21 LL0x4000829ae8;
mov x22 LL0x4000829af0;
(* adc	x10, x16, x24                               #! PC = 0x274877989932 *)
adc x10 x16 x24 carry;
(* ldp	x15, x16, [x2, #32]                         #! EA = L0x4000829ac8; Value = 0x0000008001086c68; PC = 0x274877989936 *)
mov x15 LL0x4000829ac8;
mov x16 LL0x4000829ad0;
(* stp	x5, x6, [sp]                                #! EA = L0x40008298a0; PC = 0x274877989940 *)
mov LL0x40008298a0 x5;
mov LL0x40008298a8 x6;
(* adds	x5, x11, x19                               #! PC = 0x274877989944 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829af8; Value = 0x00000080010bb000; PC = 0x274877989948 *)
mov x23 LL0x4000829af8;
mov x24 LL0x4000829b00;
(* adcs	x6, x12, x20                               #! PC = 0x274877989952 *)
adcs carry x6 x12 x20 carry;
(* stp	x7, x8, [sp, #16]                           #! EA = L0x40008298b0; PC = 0x274877989956 *)
mov LL0x40008298b0 x7;
mov LL0x40008298b8 x8;
(* adcs	x7, x13, x21                               #! PC = 0x274877989960 *)
adcs carry x7 x13 x21 carry;
(* adcs	x8, x14, x22                               #! PC = 0x274877989964 *)
adcs carry x8 x14 x22 carry;
(* stp	x9, x10, [sp, #32]                          #! EA = L0x40008298c0; PC = 0x274877989968 *)
mov LL0x40008298c0 x9;
mov LL0x40008298c8 x10;
(* adcs	x9, x15, x23                               #! PC = 0x274877989972 *)
adcs carry x9 x15 x23 carry;
(* stp	x5, x6, [sp, #48]                           #! EA = L0x40008298d0; PC = 0x274877989976 *)
mov LL0x40008298d0 x5;
mov LL0x40008298d8 x6;
(* adc	x10, x16, x24                               #! PC = 0x274877989980 *)
adc x10 x16 x24 carry;
(* stp	x7, x8, [sp, #64]                           #! EA = L0x40008298e0; PC = 0x274877989984 *)
mov LL0x40008298e0 x7;
mov LL0x40008298e8 x8;
(* stp	x9, x10, [sp, #80]                          #! EA = L0x40008298f0; PC = 0x274877989988 *)
mov LL0x40008298f0 x9;
mov LL0x40008298f8 x10;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877989992 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877989992 = 0x274877989992;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a48; Value = 0x000000400085ea78; PC = 0x274877989152 *)
mov x11 LL0x4000829a48;
mov x12 LL0x4000829a50;
(* ldr	x17, [x2]                                   #! EA = L0x4000829aa8; Value = 0x000000400085ea78; PC = 0x274877989156 *)
mov x17 LL0x4000829aa8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a58; Value = 0x0000004000841d2c; PC = 0x274877989160 *)
mov x13 LL0x4000829a58;
mov x14 LL0x4000829a60;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a68; Value = 0x000000c0018e3c68; PC = 0x274877989164 *)
mov x15 LL0x4000829a68;
mov x16 LL0x4000829a70;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x4000829ab0; Value = 0x0000000000000000; PC = 0x274877989216 *)
mov x17 LL0x4000829ab0;
(* str	x19, [x0]                                   #! EA = L0x4000829d98; PC = 0x274877989220 *)
mov LL0x4000829d98 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x4000829ab8; Value = 0x0000000000000000; PC = 0x274877989320 *)
mov x17 LL0x4000829ab8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829da0; PC = 0x274877989328 *)
mov LL0x4000829da0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x4000829ac0; Value = 0x000000400082a810; PC = 0x274877989428 *)
mov x17 LL0x4000829ac0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829da8; PC = 0x274877989436 *)
mov LL0x4000829da8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x4000829ac8; Value = 0x0000008001086c68; PC = 0x274877989536 *)
mov x17 LL0x4000829ac8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829db0; PC = 0x274877989544 *)
mov LL0x4000829db0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x4000829ad0; Value = 0x0000000000000000; PC = 0x274877989644 *)
mov x17 LL0x4000829ad0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829db8; PC = 0x274877989652 *)
mov LL0x4000829db8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829dc0; PC = 0x274877989756 *)
mov LL0x4000829dc0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829dc8; PC = 0x274877989784 *)
mov LL0x4000829dc8 x19;
mov LL0x4000829dd0 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829dd8; PC = 0x274877989788 *)
mov LL0x4000829dd8 x21;
mov LL0x4000829de0 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829de8; PC = 0x274877989792 *)
mov LL0x4000829de8 x23;
mov LL0x4000829df0 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* mov	x1, sp                                      #! PC = 0x274877989996 *)
mov x1 sp;
(* add	x2, sp, #0x30                               #! PC = 0x274877990000 *)
adds dontcare x2 sp 0x30@uint64;
(* add	x0, x26, #0x60                              #! PC = 0x274877990004 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990008 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990008 = 0x274877990008;
(* ldp	x11, x12, [x1]                              #! EA = L0x40008298a0; Value = 0x00000100018e68a0; PC = 0x274877989152 *)
mov x11 LL0x40008298a0;
mov x12 LL0x40008298a8;
(* ldr	x17, [x2]                                   #! EA = L0x40008298d0; Value = 0x00000100018e68a0; PC = 0x274877989156 *)
mov x17 LL0x40008298d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x40008298b0; Value = 0x00000100018ce218; PC = 0x274877989160 *)
mov x13 LL0x40008298b0;
mov x14 LL0x40008298b8;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x40008298c0; Value = 0x00000180031c99c8; PC = 0x274877989164 *)
mov x15 LL0x40008298c0;
mov x16 LL0x40008298c8;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x40008298d8; Value = 0x000000400082e3a1; PC = 0x274877989216 *)
mov x17 LL0x40008298d8;
(* str	x19, [x0]                                   #! EA = L0x4000829df8; PC = 0x274877989220 *)
mov LL0x4000829df8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x40008298e0; Value = 0x000000800085ead0; PC = 0x274877989320 *)
mov x17 LL0x40008298e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829e00; PC = 0x274877989328 *)
mov LL0x4000829e00 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x40008298e8; Value = 0x000000800120d51a; PC = 0x274877989428 *)
mov x17 LL0x40008298e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829e08; PC = 0x274877989436 *)
mov LL0x4000829e08 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x40008298f0; Value = 0x0000010002141c68; PC = 0x274877989536 *)
mov x17 LL0x40008298f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829e10; PC = 0x274877989544 *)
mov LL0x4000829e10 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x40008298f8; Value = 0x0000004000000002; PC = 0x274877989644 *)
mov x17 LL0x40008298f8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829e18; PC = 0x274877989652 *)
mov LL0x4000829e18 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829e20; PC = 0x274877989756 *)
mov LL0x4000829e20 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829e28; PC = 0x274877989784 *)
mov LL0x4000829e28 x19;
mov LL0x4000829e30 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829e38; PC = 0x274877989788 *)
mov LL0x4000829e38 x21;
mov LL0x4000829e40 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829e48; PC = 0x274877989792 *)
mov LL0x4000829e48 x23;
mov LL0x4000829e50 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* add	x1, x27, #0x30                              #! PC = 0x274877990012 *)
adds dontcare x1 x27 0x30@uint64;
(* add	x2, x28, #0x30                              #! PC = 0x274877990016 *)
adds dontcare x2 x28 0x30@uint64;
(* mov	x0, sp                                      #! PC = 0x274877990020 *)
mov x0 sp;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990024 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990024 = 0x274877990024;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a78; Value = 0x000000c001087e28; PC = 0x274877989152 *)
mov x11 LL0x4000829a78;
mov x12 LL0x4000829a80;
(* ldr	x17, [x2]                                   #! EA = L0x4000829ad8; Value = 0x000000c001087e28; PC = 0x274877989156 *)
mov x17 LL0x4000829ad8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a88; Value = 0x000000c00108c4ec; PC = 0x274877989160 *)
mov x13 LL0x4000829a88;
mov x14 LL0x4000829a90;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a98; Value = 0x000000c0018e5d60; PC = 0x274877989164 *)
mov x15 LL0x4000829a98;
mov x16 LL0x4000829aa0;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x4000829ae0; Value = 0x000000400082e3a1; PC = 0x274877989216 *)
mov x17 LL0x4000829ae0;
(* str	x19, [x0]                                   #! EA = L0x40008298a0; PC = 0x274877989220 *)
mov LL0x40008298a0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x4000829ae8; Value = 0x000000800085ead0; PC = 0x274877989320 *)
mov x17 LL0x4000829ae8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x40008298a8; PC = 0x274877989328 *)
mov LL0x40008298a8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x4000829af0; Value = 0x00000040009e2d0a; PC = 0x274877989428 *)
mov x17 LL0x4000829af0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x40008298b0; PC = 0x274877989436 *)
mov LL0x40008298b0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x4000829af8; Value = 0x00000080010bb000; PC = 0x274877989536 *)
mov x17 LL0x4000829af8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x40008298b8; PC = 0x274877989544 *)
mov LL0x40008298b8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x4000829b00; Value = 0x0000004000000002; PC = 0x274877989644 *)
mov x17 LL0x4000829b00;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x40008298c0; PC = 0x274877989652 *)
mov LL0x40008298c0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x40008298c8; PC = 0x274877989756 *)
mov LL0x40008298c8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x40008298d0; PC = 0x274877989784 *)
mov LL0x40008298d0 x19;
mov LL0x40008298d8 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x40008298e0; PC = 0x274877989788 *)
mov LL0x40008298e0 x21;
mov LL0x40008298e8 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x40008298f0; PC = 0x274877989792 *)
mov LL0x40008298f0 x23;
mov LL0x40008298f8 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877990028 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877990032 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877990036 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* add	x1, x26, #0x60                              #! PC = 0x274877990040 *)
adds dontcare x1 x26 0x60@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990044 *)
mov x2 sp;
(* add	x0, x26, #0x60                              #! PC = 0x274877990048 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990052 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990052 = 0x274877990052;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                    LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                    LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

(* NOTE: save old values *)
mov LL0x4000829df8o LL0x4000829df8; mov LL0x4000829e00o LL0x4000829e00;
mov LL0x4000829e08o LL0x4000829e08; mov LL0x4000829e10o LL0x4000829e10;
mov LL0x4000829e18o LL0x4000829e18; mov LL0x4000829e20o LL0x4000829e20;
mov LL0x4000829e28o LL0x4000829e28; mov LL0x4000829e30o LL0x4000829e30;
mov LL0x4000829e38o LL0x4000829e38; mov LL0x4000829e40o LL0x4000829e40;
mov LL0x4000829e48o LL0x4000829e48; mov LL0x4000829e50o LL0x4000829e50;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829df8; Value = 0x1cd3ac097c426400; PC = 0x274877984672 *)
mov x11 LL0x4000829df8;
mov x12 LL0x4000829e00;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x8cbe4d4470ab6640; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e08; Value = 0x2ca59f9abd8196d4; PC = 0x274877984680 *)
mov x13 LL0x4000829e08;
mov x14 LL0x4000829e10;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xf87879636b2af122; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e18; Value = 0x0be3f80719282913; PC = 0x274877984696 *)
mov x15 LL0x4000829e18;
mov x16 LL0x4000829e20;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x41ed75d42f00c2b7; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829df8; PC = 0x274877984712 *)
mov LL0x4000829df8 x11;
mov LL0x4000829e00 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e28; Value = 0x35ba00f9bba4eb5a; PC = 0x274877984720 *)
mov x11 LL0x4000829e28;
mov x12 LL0x4000829e30;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0xb53177eb21bf3324; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e08; PC = 0x274877984732 *)
mov LL0x4000829e08 x13;
mov LL0x4000829e10 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e38; Value = 0x22f5fd8c480c6290; PC = 0x274877984736 *)
mov x13 LL0x4000829e38;
mov x14 LL0x4000829e40;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x4989224b8c59959a; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e18; PC = 0x274877984748 *)
mov LL0x4000829e18 x15;
mov LL0x4000829e20 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829e48; Value = 0x423388000212bc37; PC = 0x274877984756 *)
mov x15 LL0x4000829e48;
mov x16 LL0x4000829e50;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x217a9f80010c44f5; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e28; PC = 0x274877984828 *)
mov LL0x4000829e28 x11;
mov LL0x4000829e30 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e38; PC = 0x274877984836 *)
mov LL0x4000829e38 x13;
mov LL0x4000829e40 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829e48; PC = 0x274877984840 *)
mov LL0x4000829e48 x15;
mov LL0x4000829e50 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                        LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                        LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                        LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829df8o, LL0x4000829e00o, LL0x4000829e08o,
                        LL0x4000829e10o, LL0x4000829e18o, LL0x4000829e20o,
                        LL0x4000829e28o, LL0x4000829e30o, LL0x4000829e38o,
                        LL0x4000829e40o, LL0x4000829e48o, LL0x4000829e50o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                        LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                        LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                        LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829df8o, LL0x4000829e00o, LL0x4000829e08o,
                        LL0x4000829e10o, LL0x4000829e18o, LL0x4000829e20o,
                        LL0x4000829e28o, LL0x4000829e30o, LL0x4000829e38o,
                        LL0x4000829e40o, LL0x4000829e48o, LL0x4000829e50o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x2, x26, #0x0                               #! PC = 0x274877990056 *)
adds dontcare x2 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990060 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990060 = 0x274877990060;

rcut and [limbs 64 [LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                    LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

(* NOTE: save old values *)
mov LL0x4000829df8p LL0x4000829df8; mov LL0x4000829e00p LL0x4000829e00;
mov LL0x4000829e08p LL0x4000829e08; mov LL0x4000829e10p LL0x4000829e10;
mov LL0x4000829e18p LL0x4000829e18; mov LL0x4000829e20p LL0x4000829e20;
mov LL0x4000829e28p LL0x4000829e28; mov LL0x4000829e30p LL0x4000829e30;
mov LL0x4000829e38p LL0x4000829e38; mov LL0x4000829e40p LL0x4000829e40;
mov LL0x4000829e48p LL0x4000829e48; mov LL0x4000829e50p LL0x4000829e50;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829df8; Value = 0x90155ec50b96fdc0; PC = 0x274877984672 *)
mov x11 LL0x4000829df8;
mov x12 LL0x4000829e00;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829d98; Value = 0x42f5820d776f9840; PC = 0x274877984676 *)
mov x19 LL0x4000829d98;
mov x20 LL0x4000829da0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e08; Value = 0x342d26375256a5b1; PC = 0x274877984680 *)
mov x13 LL0x4000829e08;
mov x14 LL0x4000829e10;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829da8; Value = 0x42822e1c2873f4a0; PC = 0x274877984688 *)
mov x21 LL0x4000829da8;
mov x22 LL0x4000829db0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e18; Value = 0xc9f68232ea27665c; PC = 0x274877984696 *)
mov x15 LL0x4000829e18;
mov x16 LL0x4000829e20;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829db8; Value = 0x8e64ef53bf927280; PC = 0x274877984704 *)
mov x23 LL0x4000829db8;
mov x24 LL0x4000829dc0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829df8; PC = 0x274877984712 *)
mov LL0x4000829df8 x11;
mov LL0x4000829e00 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e28; Value = 0x8088890e99e5b836; PC = 0x274877984720 *)
mov x11 LL0x4000829e28;
mov x12 LL0x4000829e30;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829dc8; Value = 0x079e81741cfad861; PC = 0x274877984728 *)
mov x19 LL0x4000829dc8;
mov x20 LL0x4000829dd0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e08; PC = 0x274877984732 *)
mov LL0x4000829e08 x13;
mov LL0x4000829e10 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e38; Value = 0xd96cdb40bbb2ccf6; PC = 0x274877984736 *)
mov x13 LL0x4000829e38;
mov x14 LL0x4000829e40;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829dd8; Value = 0xced44c2473541441; PC = 0x274877984740 *)
mov x21 LL0x4000829dd8;
mov x22 LL0x4000829de0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e18; PC = 0x274877984748 *)
mov LL0x4000829e18 x15;
mov LL0x4000829e20 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829e48; Value = 0x20b8e88001067742; PC = 0x274877984756 *)
mov x15 LL0x4000829e48;
mov x16 LL0x4000829e50;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829de8; Value = 0x0000000000002000; PC = 0x274877984764 *)
mov x23 LL0x4000829de8;
mov x24 LL0x4000829df0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e28; PC = 0x274877984828 *)
mov LL0x4000829e28 x11;
mov LL0x4000829e30 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e38; PC = 0x274877984836 *)
mov LL0x4000829e38 x13;
mov LL0x4000829e40 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829e48; PC = 0x274877984840 *)
mov LL0x4000829e48 x15;
mov LL0x4000829e50 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                        LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                        LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                        LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] +
              limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                        LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                        LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                        LL0x4000829de0, LL0x4000829de8, LL0x4000829df0])
             (limbs 64 [LL0x4000829df8p, LL0x4000829e00p, LL0x4000829e08p,
                        LL0x4000829e10p, LL0x4000829e18p, LL0x4000829e20p,
                        LL0x4000829e28p, LL0x4000829e30p, LL0x4000829e38p,
                        LL0x4000829e40p, LL0x4000829e48p, LL0x4000829e50p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                        LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                        LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                        LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] +
              limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                        LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                        LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                        LL0x4000829de0, LL0x4000829de8, LL0x4000829df0])
             (limbs 64 [LL0x4000829df8p, LL0x4000829e00p, LL0x4000829e08p,
                        LL0x4000829e10p, LL0x4000829e18p, LL0x4000829e20p,
                        LL0x4000829e28p, LL0x4000829e30p, LL0x4000829e38p,
                        LL0x4000829e40p, LL0x4000829e48p, LL0x4000829e50p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x1, x26, #0x0                               #! PC = 0x274877990064 *)
adds dontcare x1 x26 0@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990068 *)
mov x2 sp;
(* add	x0, x26, #0x0                               #! PC = 0x274877990072 *)
adds dontcare x0 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990076 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990076 = 0x274877990076;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                    LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                    LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829d98o LL0x4000829d98; mov LL0x4000829da0o LL0x4000829da0;
mov LL0x4000829da8o LL0x4000829da8; mov LL0x4000829db0o LL0x4000829db0;
mov LL0x4000829db8o LL0x4000829db8; mov LL0x4000829dc0o LL0x4000829dc0;
mov LL0x4000829dc8o LL0x4000829dc8; mov LL0x4000829dd0o LL0x4000829dd0;
mov LL0x4000829dd8o LL0x4000829dd8; mov LL0x4000829de0o LL0x4000829de0;
mov LL0x4000829de8o LL0x4000829de8; mov LL0x4000829df0o LL0x4000829df0;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829d98; Value = 0x42f5820d776f9840; PC = 0x274877984672 *)
mov x11 LL0x4000829d98;
mov x12 LL0x4000829da0;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x8cbe4d4470ab6640; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829da8; Value = 0x42822e1c2873f4a0; PC = 0x274877984680 *)
mov x13 LL0x4000829da8;
mov x14 LL0x4000829db0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xf87879636b2af122; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829db8; Value = 0x8e64ef53bf927280; PC = 0x274877984696 *)
mov x15 LL0x4000829db8;
mov x16 LL0x4000829dc0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x41ed75d42f00c2b7; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829d98; PC = 0x274877984712 *)
mov LL0x4000829d98 x11;
mov LL0x4000829da0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829dc8; Value = 0x079e81741cfad861; PC = 0x274877984720 *)
mov x11 LL0x4000829dc8;
mov x12 LL0x4000829dd0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0xb53177eb21bf3324; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829da8; PC = 0x274877984732 *)
mov LL0x4000829da8 x13;
mov LL0x4000829db0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829dd8; Value = 0xced44c2473541441; PC = 0x274877984736 *)
mov x13 LL0x4000829dd8;
mov x14 LL0x4000829de0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x4989224b8c59959a; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829db8; PC = 0x274877984748 *)
mov LL0x4000829db8 x15;
mov LL0x4000829dc0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829de8; Value = 0x0000000000002000; PC = 0x274877984756 *)
mov x15 LL0x4000829de8;
mov x16 LL0x4000829df0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x217a9f80010c44f5; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829dc8; PC = 0x274877984828 *)
mov LL0x4000829dc8 x11;
mov LL0x4000829dd0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829dd8; PC = 0x274877984836 *)
mov LL0x4000829dd8 x13;
mov LL0x4000829de0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829de8; PC = 0x274877984840 *)
mov LL0x4000829de8 x15;
mov LL0x4000829df0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                        LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                        LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                        LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829d98o, LL0x4000829da0o, LL0x4000829da8o,
                        LL0x4000829db0o, LL0x4000829db8o, LL0x4000829dc0o,
                        LL0x4000829dc8o, LL0x4000829dd0o, LL0x4000829dd8o,
                        LL0x4000829de0o, LL0x4000829de8o, LL0x4000829df0o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                        LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                        LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                        LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829d98o, LL0x4000829da0o, LL0x4000829da8o,
                        LL0x4000829db0o, LL0x4000829db8o, LL0x4000829dc0o,
                        LL0x4000829dc8o, LL0x4000829dd0o, LL0x4000829dd8o,
                        LL0x4000829de0o, LL0x4000829de8o, LL0x4000829df0o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829908; Value = 0x001f004000008b50; PC = 0x274877990080 *)
mov x30 LL0x4000829908;
(* add	sp, sp, #0x60                               #! PC = 0x274877990084 *)
adds dontcare sp sp 0x60@uint64;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829910; Value = 0x0000004000016928; PC = 0x274877990088 *)
mov x19 LL0x4000829910;
mov x20 LL0x4000829918;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829920; Value = 0x000000400082a228; PC = 0x274877990092 *)
mov x21 LL0x4000829920;
mov x22 LL0x4000829928;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829930; Value = 0x0000004000829c88; PC = 0x274877990096 *)
mov x23 LL0x4000829930;
mov x24 LL0x4000829938;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829940; Value = 0x0000004000829aa8; PC = 0x274877990100 *)
mov x25 LL0x4000829940;
mov x26 LL0x4000829948;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x4000829950; Value = 0x0000004000829b08; PC = 0x274877990104 *)
mov x27 LL0x4000829950;
mov x28 LL0x4000829958;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829900; Value = 0x0000004000829980; PC = 0x274877990108 *)
mov x29 LL0x4000829900;
(* #autiasp                                         #! PC = 0x274877990112 *)
#autiasp                                         #! 0x274877990112 = 0x274877990112;
(* #ret                                            #! PC = 0x274877990116 *)
#ret                                            #! 0x274877990116 = 0x274877990116;
(* ldp	x29, x30, [sp], #16                         #! EA = L0x4000829980; Value = 0x0000004000829990; PC = 0x274877942608 *)
mov x29 LL0x4000829980;
mov x30 LL0x4000829988;
(* #ret                                            #! PC = 0x274877942612 *)
#ret                                            #! 0x274877942612 = 0x274877942612;

(* mul_382x(ret[0], aa, bb) *)

(*
assert and [eqmod (limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                             LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                             LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                             LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] +
                   limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                             LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                             LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                             LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] * U)
                  ((limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                              LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
                    limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                              LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U) *
                   (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                              LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
                    limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                              LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                             U * U + 1],
            eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
                   limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U)
                  (limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a30, a31, a32, a33, a34, a35] * U +
                   limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [a50, a51, a52, a53, a54, a55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
                   limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U)
                  (limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b30, b31, b32, b33, b34, b35] * U +
                   limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [b50, b51, b52, b53, b54, b55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]]
    && true;
*)

(* mov	x3, x19                                     #! PC = 0x274877950376 *)
mov x3 x19;
(* mov	x2, x28                                     #! PC = 0x274877950380 *)
mov x2 x28;
(* mov	x1, x20                                     #! PC = 0x274877950384 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877950388 *)
mov x0 x20;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950392 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950392 = 0x274877950392;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;

rcut and [limbs 64 [LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                    LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                    LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                    LL0x4000829c10, LL0x4000829c18, LL0x4000829c20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829d98q LL0x4000829d98; mov LL0x4000829da0q LL0x4000829da0;
mov LL0x4000829da8q LL0x4000829da8; mov LL0x4000829db0q LL0x4000829db0;
mov LL0x4000829db8q LL0x4000829db8; mov LL0x4000829dc0q LL0x4000829dc0;
mov LL0x4000829dc8q LL0x4000829dc8; mov LL0x4000829dd0q LL0x4000829dd0;
mov LL0x4000829dd8q LL0x4000829dd8; mov LL0x4000829de0q LL0x4000829de0;
mov LL0x4000829de8q LL0x4000829de8; mov LL0x4000829df0q LL0x4000829df0;
mov LL0x4000829df8q LL0x4000829df8; mov LL0x4000829e00q LL0x4000829e00;
mov LL0x4000829e08q LL0x4000829e08; mov LL0x4000829e10q LL0x4000829e10;
mov LL0x4000829e18q LL0x4000829e18; mov LL0x4000829e20q LL0x4000829e20;
mov LL0x4000829e28q LL0x4000829e28; mov LL0x4000829e30q LL0x4000829e30;
mov LL0x4000829e38q LL0x4000829e38; mov LL0x4000829e40q LL0x4000829e40;
mov LL0x4000829e48q LL0x4000829e48; mov LL0x4000829e50q LL0x4000829e50;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829d98; Value = 0xb63734c906c43200; PC = 0x274877984672 *)
mov x11 LL0x4000829d98;
mov x12 LL0x4000829da0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829bc8; Value = 0xde8c000000000000; PC = 0x274877984676 *)
mov x19 LL0x4000829bc8;
mov x20 LL0x4000829bd0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829da8; Value = 0x4a09b4b8bd49037d; PC = 0x274877984680 *)
mov x13 LL0x4000829da8;
mov x14 LL0x4000829db0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829bd8; Value = 0x7a1bbdc054180c5e; PC = 0x274877984688 *)
mov x21 LL0x4000829bd8;
mov x22 LL0x4000829be0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829db8; Value = 0x4c77797f9091afc9; PC = 0x274877984696 *)
mov x15 LL0x4000829db8;
mov x16 LL0x4000829dc0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829be8; Value = 0xabfafe98a7fa10f6; PC = 0x274877984704 *)
mov x23 LL0x4000829be8;
mov x24 LL0x4000829bf0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829d98; PC = 0x274877984712 *)
mov LL0x4000829d98 x11;
mov LL0x4000829da0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829dc8; Value = 0x0c6c0988fb3b4fe7; PC = 0x274877984720 *)
mov x11 LL0x4000829dc8;
mov x12 LL0x4000829dd0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829bf8; Value = 0x5fe26534850ac206; PC = 0x274877984728 *)
mov x19 LL0x4000829bf8;
mov x20 LL0x4000829c00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829da8; PC = 0x274877984732 *)
mov LL0x4000829da8 x13;
mov LL0x4000829db0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829dd8; Value = 0xec7bfc79ddab74cb; PC = 0x274877984736 *)
mov x13 LL0x4000829dd8;
mov x14 LL0x4000829de0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c08; Value = 0x1681664ed2569f1a; PC = 0x274877984740 *)
mov x21 LL0x4000829c08;
mov x22 LL0x4000829c10;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829db8; PC = 0x274877984748 *)
mov LL0x4000829db8 x15;
mov LL0x4000829dc0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829de8; Value = 0x29a10836423f87e2; PC = 0x274877984756 *)
mov x15 LL0x4000829de8;
mov x16 LL0x4000829df0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c18; Value = 0x4b1ba6f6434b7cd5; PC = 0x274877984764 *)
mov x23 LL0x4000829c18;
mov x24 LL0x4000829c20;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829dc8; PC = 0x274877984828 *)
mov LL0x4000829dc8 x11;
mov LL0x4000829dd0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829dd8; PC = 0x274877984836 *)
mov LL0x4000829dd8 x13;
mov LL0x4000829de0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829de8; PC = 0x274877984840 *)
mov LL0x4000829de8 x15;
mov LL0x4000829df0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x005a00400000a9bc; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x21, x20, #0x60                             #! PC = 0x274877950396 *)
adds dontcare x21 x20 0x60@uint64;
(* add	x0, x28, #0x60                              #! PC = 0x274877950400 *)
adds dontcare x0 x28 0x60@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950404 *)
mov x3 x19;
(* str	x0, [sp, #120]                              #! EA = L0x4000829a08; PC = 0x274877950408 *)
mov LL0x4000829a08 x0;
(* mov	x2, x0                                      #! PC = 0x274877950412 *)
mov x2 x0;
(* mov	x1, x21                                     #! PC = 0x274877950416 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877950420 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950424 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950424 = 0x274877950424;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829df8; Value = 0x4d1fdcb794276580; PC = 0x274877984672 *)
mov x11 LL0x4000829df8;
mov x12 LL0x4000829e00;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c28; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 LL0x4000829c28;
mov x20 LL0x4000829c30;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e08; Value = 0xf1aaf81b29e2b111; PC = 0x274877984680 *)
mov x13 LL0x4000829e08;
mov x14 LL0x4000829e10;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c38; Value = 0x0000000000000000; PC = 0x274877984688 *)
mov x21 LL0x4000829c38;
mov x22 LL0x4000829c40;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e18; Value = 0x3b9192df2a94f3db; PC = 0x274877984696 *)
mov x15 LL0x4000829e18;
mov x16 LL0x4000829e20;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829c48; Value = 0xa5b75f691182b810; PC = 0x274877984704 *)
mov x23 LL0x4000829c48;
mov x24 LL0x4000829c50;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829df8; PC = 0x274877984712 *)
mov LL0x4000829df8 x11;
mov LL0x4000829e00 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e28; Value = 0x78ea079a7ceadfd5; PC = 0x274877984720 *)
mov x11 LL0x4000829e28;
mov x12 LL0x4000829e30;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829c58; Value = 0x30e97a4437e7fa80; PC = 0x274877984728 *)
mov x19 LL0x4000829c58;
mov x20 LL0x4000829c60;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e08; PC = 0x274877984732 *)
mov LL0x4000829e08 x13;
mov LL0x4000829e10 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e38; Value = 0x0a988f1c485eb8b4; PC = 0x274877984736 *)
mov x13 LL0x4000829e38;
mov x14 LL0x4000829e40;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c68; Value = 0x2aca32e21865e811; PC = 0x274877984740 *)
mov x21 LL0x4000829c68;
mov x22 LL0x4000829c70;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e18; PC = 0x274877984748 *)
mov LL0x4000829e18 x15;
mov LL0x4000829e20 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829e48; Value = 0x20b8e88001065741; PC = 0x274877984756 *)
mov x15 LL0x4000829e48;
mov x16 LL0x4000829e50;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c78; Value = 0x0000000000003000; PC = 0x274877984764 *)
mov x23 LL0x4000829c78;
mov x24 LL0x4000829c80;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e28; PC = 0x274877984828 *)
mov LL0x4000829e28 x11;
mov LL0x4000829e30 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e38; PC = 0x274877984836 *)
mov LL0x4000829e38 x13;
mov LL0x4000829e40 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829e48; PC = 0x274877984840 *)
mov LL0x4000829e48 x15;
mov LL0x4000829e50 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;


(* sub_fp2x2(ret[0], ret[0], t1) *)
          
assert true
    && and [eqmod ((limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                              LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                              LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                              LL0x4000829de0, LL0x4000829de8, LL0x4000829df0]) +
                   (limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                              LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                              LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                              LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]))
                   (limbs 64 [LL0x4000829d98q, LL0x4000829da0q, LL0x4000829da8q,
                              LL0x4000829db0q, LL0x4000829db8q, LL0x4000829dc0q,
                              LL0x4000829dc8q, LL0x4000829dd0q, LL0x4000829dd8q,
                              LL0x4000829de0q, LL0x4000829de8q, LL0x4000829df0q])
                   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]) +
                   (limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                              LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                              LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                              LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]))
                   (limbs 64 [LL0x4000829df8q, LL0x4000829e00q, LL0x4000829e08q,
                              LL0x4000829e10q, LL0x4000829e18q, LL0x4000829e20q,
                              LL0x4000829e28q, LL0x4000829e30q, LL0x4000829e38q,
                              LL0x4000829e40q, LL0x4000829e48q, LL0x4000829e50q])
                   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                              LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                              LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                              LL0x4000829de0, LL0x4000829de8, LL0x4000829df0]) +
                   (limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                              LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                              LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                              LL0x4000829c10, LL0x4000829c18, LL0x4000829c20]))
                   (limbs 64 [LL0x4000829d98q, LL0x4000829da0q, LL0x4000829da8q,
                              LL0x4000829db0q, LL0x4000829db8q, LL0x4000829dc0q,
                              LL0x4000829dc8q, LL0x4000829dd0q, LL0x4000829dd8q,
                              LL0x4000829de0q, LL0x4000829de8q, LL0x4000829df0q])
                   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]) +
                   (limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                              LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                              LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                              LL0x4000829c70, LL0x4000829c78, LL0x4000829c80]))
                   (limbs 64 [LL0x4000829df8q, LL0x4000829e00q, LL0x4000829e08q,
                              LL0x4000829e10q, LL0x4000829e18q, LL0x4000829e20q,
                              LL0x4000829e28q, LL0x4000829e30q, LL0x4000829e38q,
                              LL0x4000829e40q, LL0x4000829e48q, LL0x4000829e50q])
                   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x001f00400000a9dc; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

rcut and [limbs 64 [LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                    LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                    LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                    LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829d98r LL0x4000829d98; mov LL0x4000829da0r LL0x4000829da0;
mov LL0x4000829da8r LL0x4000829da8; mov LL0x4000829db0r LL0x4000829db0;
mov LL0x4000829db8r LL0x4000829db8; mov LL0x4000829dc0r LL0x4000829dc0;
mov LL0x4000829dc8r LL0x4000829dc8; mov LL0x4000829dd0r LL0x4000829dd0;
mov LL0x4000829dd8r LL0x4000829dd8; mov LL0x4000829de0r LL0x4000829de0;
mov LL0x4000829de8r LL0x4000829de8; mov LL0x4000829df0r LL0x4000829df0;
mov LL0x4000829df8r LL0x4000829df8; mov LL0x4000829e00r LL0x4000829e00;
mov LL0x4000829e08r LL0x4000829e08; mov LL0x4000829e10r LL0x4000829e10;
mov LL0x4000829e18r LL0x4000829e18; mov LL0x4000829e20r LL0x4000829e20;
mov LL0x4000829e28r LL0x4000829e28; mov LL0x4000829e30r LL0x4000829e30;
mov LL0x4000829e38r LL0x4000829e38; mov LL0x4000829e40r LL0x4000829e40;
mov LL0x4000829e48r LL0x4000829e48; mov LL0x4000829e50r LL0x4000829e50;

(* mov	x3, x19                                     #! PC = 0x274877950428 *)
mov x3 x19;
(* mov	x2, x23                                     #! PC = 0x274877950432 *)
mov x2 x23;
(* mov	x1, x20                                     #! PC = 0x274877950436 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877950440 *)
mov x0 x20;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950444 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950444 = 0x274877950444;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829d98; Value = 0xd7ab34c906c43200; PC = 0x274877984672 *)
mov x11 LL0x4000829d98;
mov x12 LL0x4000829da0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c88; Value = 0xbf7e5d09780cb200; PC = 0x274877984676 *)
mov x19 LL0x4000829c88;
mov x20 LL0x4000829c90;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829da8; Value = 0xcfedf6f86930f71e; PC = 0x274877984680 *)
mov x13 LL0x4000829da8;
mov x14 LL0x4000829db0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c98; Value = 0x5ce62a1ce1098e3f; PC = 0x274877984688 *)
mov x21 LL0x4000829c98;
mov x22 LL0x4000829ca0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829db8; Value = 0xa07c7ae6e8979ed3; PC = 0x274877984696 *)
mov x15 LL0x4000829db8;
mov x16 LL0x4000829dc0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829ca8; Value = 0x9e46be45859c8f1f; PC = 0x274877984704 *)
mov x23 LL0x4000829ca8;
mov x24 LL0x4000829cb0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829d98; PC = 0x274877984712 *)
mov LL0x4000829d98 x11;
mov LL0x4000829da0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829dc8; Value = 0x6688a4547630388b; PC = 0x274877984720 *)
mov x11 LL0x4000829dc8;
mov x12 LL0x4000829dd0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829cb8; Value = 0x9923a6debee0eac0; PC = 0x274877984728 *)
mov x19 LL0x4000829cb8;
mov x20 LL0x4000829cc0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829da8; PC = 0x274877984732 *)
mov LL0x4000829da8 x13;
mov LL0x4000829db0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829dd8; Value = 0x3d2b68cc0205cbd5; PC = 0x274877984736 *)
mov x13 LL0x4000829dd8;
mov x14 LL0x4000829de0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829cc8; Value = 0xa8efc16e4f1da713; PC = 0x274877984740 *)
mov x21 LL0x4000829cc8;
mov x22 LL0x4000829cd0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829db8; PC = 0x274877984748 *)
mov LL0x4000829db8 x15;
mov LL0x4000829dc0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829de8; Value = 0x29a108f6423fb7e5; PC = 0x274877984756 *)
mov x15 LL0x4000829de8;
mov x16 LL0x4000829df0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829cd8; Value = 0x4b1ba77642c5c25f; PC = 0x274877984764 *)
mov x23 LL0x4000829cd8;
mov x24 LL0x4000829ce0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829dc8; PC = 0x274877984828 *)
mov LL0x4000829dc8 x11;
mov LL0x4000829dd0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829dd8; PC = 0x274877984836 *)
mov LL0x4000829dd8 x13;
mov LL0x4000829de0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829de8; PC = 0x274877984840 *)
mov LL0x4000829de8 x15;
mov LL0x4000829df0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x006800400000a9f0; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x0, x23, #0x60                              #! PC = 0x274877950448 *)
adds dontcare x0 x23 0x60@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950452 *)
mov x3 x19;
(* str	x0, [sp, #96]                               #! EA = L0x40008299f0; PC = 0x274877950456 *)
mov LL0x40008299f0 x0;
(* mov	x2, x0                                      #! PC = 0x274877950460 *)
mov x2 x0;
(* mov	x1, x21                                     #! PC = 0x274877950464 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877950468 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950472 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950472 = 0x274877950472;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829df8; Value = 0x4d1fdcb794276580; PC = 0x274877984672 *)
mov x11 LL0x4000829df8;
mov x12 LL0x4000829e00;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ce8; Value = 0xc73bbcb7f54de580; PC = 0x274877984676 *)
mov x19 LL0x4000829ce8;
mov x20 LL0x4000829cf0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e08; Value = 0xf1aaf81b29e2b111; PC = 0x274877984680 *)
mov x13 LL0x4000829e08;
mov x14 LL0x4000829e10;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829cf8; Value = 0x293deebfffea2401; PC = 0x274877984688 *)
mov x21 LL0x4000829cf8;
mov x22 LL0x4000829d00;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e18; Value = 0x95da337619123bcb; PC = 0x274877984696 *)
mov x15 LL0x4000829e18;
mov x16 LL0x4000829e20;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829d08; Value = 0xf05ac0a9b838b7e1; PC = 0x274877984704 *)
mov x23 LL0x4000829d08;
mov x24 LL0x4000829d10;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829df8; PC = 0x274877984712 *)
mov LL0x4000829df8 x11;
mov LL0x4000829e00 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e28; Value = 0x48008d564502e554; PC = 0x274877984720 *)
mov x11 LL0x4000829e28;
mov x12 LL0x4000829e30;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829d18; Value = 0x2941fad56ff9c9f1; PC = 0x274877984728 *)
mov x19 LL0x4000829d18;
mov x20 LL0x4000829d20;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e08; PC = 0x274877984732 *)
mov LL0x4000829e08 x13;
mov LL0x4000829e10 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e38; Value = 0xdfce5c3a2ff8d0a3; PC = 0x274877984736 *)
mov x13 LL0x4000829e38;
mov x14 LL0x4000829e40;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829d28; Value = 0xc6bfe47aaf5d5198; PC = 0x274877984740 *)
mov x21 LL0x4000829d28;
mov x22 LL0x4000829d30;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e18; PC = 0x274877984748 *)
mov LL0x4000829e18 x15;
mov LL0x4000829e20 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829e48; Value = 0x20b8e88001062741; PC = 0x274877984756 *)
mov x15 LL0x4000829e48;
mov x16 LL0x4000829e50;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829d38; Value = 0x00000040008303a0; PC = 0x274877984764 *)
mov x23 LL0x4000829d38;
mov x24 LL0x4000829d40;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e28; PC = 0x274877984828 *)
mov LL0x4000829e28 x11;
mov LL0x4000829e30 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e38; PC = 0x274877984836 *)
mov LL0x4000829e38 x13;
mov LL0x4000829e40 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829e48; PC = 0x274877984840 *)
mov LL0x4000829e48 x15;
mov LL0x4000829e50 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x007e00400000aa0c; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x22, x20, #0xc0                             #! PC = 0x274877950476 *)
adds dontcare x22 x20 0xc0@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950480 *)
mov x3 x19;
(* mov	x2, x21                                     #! PC = 0x274877950484 *)
mov x2 x21;
(* mov	x1, x20                                     #! PC = 0x274877950488 *)
mov x1 x20;
(* mov	x0, x22                                     #! PC = 0x274877950492 *)
mov x0 x22;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950496 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950496 = 0x274877950496;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

(* sub_fp2x2(ret[0], ret[0], t2) *)

assert true
    && and [eqmod ((limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                              LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                              LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                              LL0x4000829de0, LL0x4000829de8, LL0x4000829df0]) +
                   (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                              LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                              LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                              LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]))
                  (limbs 64 [LL0x4000829d98r, LL0x4000829da0r, LL0x4000829da8r,
                             LL0x4000829db0r, LL0x4000829db8r, LL0x4000829dc0r,
                             LL0x4000829dc8r, LL0x4000829dd0r, LL0x4000829dd8r,
                             LL0x4000829de0r, LL0x4000829de8r, LL0x4000829df0r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]) +
                   (limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                              LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                              LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                              LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]))
                  (limbs 64 [LL0x4000829df8r, LL0x4000829e00r, LL0x4000829e08r,
                             LL0x4000829e10r, LL0x4000829e18r, LL0x4000829e20r,
                             LL0x4000829e28r, LL0x4000829e30r, LL0x4000829e38r,
                             LL0x4000829e40r, LL0x4000829e48r, LL0x4000829e50r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                              LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                              LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                              LL0x4000829de0, LL0x4000829de8, LL0x4000829df0]) +
                   (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                              LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                              LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                              LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0]))
                  (limbs 64 [LL0x4000829d98r, LL0x4000829da0r, LL0x4000829da8r,
                             LL0x4000829db0r, LL0x4000829db8r, LL0x4000829dc0r,
                             LL0x4000829dc8r, LL0x4000829dd0r, LL0x4000829dd8r,
                             LL0x4000829de0r, LL0x4000829de8r, LL0x4000829df0r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]) +
                   (limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                              LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                              LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                              LL0x4000829d30, LL0x4000829d38, LL0x4000829d40]))
                  (limbs 64 [LL0x4000829df8r, LL0x4000829e00r, LL0x4000829e08r,
                             LL0x4000829e10r, LL0x4000829e18r, LL0x4000829e20r,
                             LL0x4000829e28r, LL0x4000829e30r, LL0x4000829e38r,
                             LL0x4000829e40r, LL0x4000829e48r, LL0x4000829e50r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* NOTE: summarize ret[0] = ret[0] - t1 - t2 *)
(*
assert eqmod (limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                        LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                        LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                        LL0x4000829de0, LL0x4000829de8, LL0x4000829df0] +
              limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                        LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                        LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                        LL0x4000829e40, LL0x4000829e48, LL0x4000829e50] * U +
              (limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
              (limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             (limbs 64 [LL0x4000829d98q, LL0x4000829da0q, LL0x4000829da8q,
                        LL0x4000829db0q, LL0x4000829db8q, LL0x4000829dc0q,
                        LL0x4000829dc8q, LL0x4000829dd0q, LL0x4000829dd8q,
                        LL0x4000829de0q, LL0x4000829de8q, LL0x4000829df0q] +
              limbs 64 [LL0x4000829df8q, LL0x4000829e00q, LL0x4000829e08q,
                        LL0x4000829e10q, LL0x4000829e18q, LL0x4000829e20q,
                        LL0x4000829e28q, LL0x4000829e30q, LL0x4000829e38q,
                        LL0x4000829e40q, LL0x4000829e48q, LL0x4000829e50q] * U)
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;
*)

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829d98; Value = 0x182cd7bf8eb78000; PC = 0x274877984672 *)
mov x11 LL0x4000829d98;
mov x12 LL0x4000829da0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829df8; Value = 0x85e41fff9ed98000; PC = 0x274877984676 *)
mov x19 LL0x4000829df8;
mov x20 LL0x4000829e00;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829da8; Value = 0x7307ccdb882768de; PC = 0x274877984680 *)
mov x13 LL0x4000829da8;
mov x14 LL0x4000829db0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e08; Value = 0xc86d095b29f88d10; PC = 0x274877984688 *)
mov x21 LL0x4000829e08;
mov x22 LL0x4000829e10;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829db8; Value = 0x0235bca162fb0fb3; PC = 0x274877984696 *)
mov x15 LL0x4000829db8;
mov x16 LL0x4000829dc0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e18; Value = 0xa57f72cc60d983e9; PC = 0x274877984704 *)
mov x23 LL0x4000829e18;
mov x24 LL0x4000829e20;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829e58; PC = 0x274877984712 *)
mov LL0x4000829e58 x11;
mov LL0x4000829e60 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829dc8; Value = 0x8763fd75b74ef876; PC = 0x274877984720 *)
mov x11 LL0x4000829dc8;
mov x12 LL0x4000829dd0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e28; Value = 0x1ebe9280d5091b62; PC = 0x274877984728 *)
mov x19 LL0x4000829e28;
mov x20 LL0x4000829e30;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e68; PC = 0x274877984732 *)
mov LL0x4000829e68 x13;
mov LL0x4000829e70 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829dd8; Value = 0xfb6c79fea9991ae5; PC = 0x274877984736 *)
mov x13 LL0x4000829dd8;
mov x14 LL0x4000829de0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829e38; Value = 0x190e77bf809b7f0a; PC = 0x274877984740 *)
mov x21 LL0x4000829e38;
mov x22 LL0x4000829e40;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e78; PC = 0x274877984748 *)
mov LL0x4000829e78 x15;
mov LL0x4000829e80 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829de8; Value = 0x29a1093642c5a25d; PC = 0x274877984756 *)
mov x15 LL0x4000829de8;
mov x16 LL0x4000829df0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829e48; Value = 0x20b8e840008323a0; PC = 0x274877984764 *)
mov x23 LL0x4000829e48;
mov x24 LL0x4000829e50;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e88; PC = 0x274877984828 *)
mov LL0x4000829e88 x11;
mov LL0x4000829e90 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e98; PC = 0x274877984836 *)
mov LL0x4000829e98 x13;
mov LL0x4000829ea0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829ea8; PC = 0x274877984840 *)
mov LL0x4000829ea8 x15;
mov LL0x4000829eb0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x001d00400000aa24; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x26, x20, #0x120                            #! PC = 0x274877950500 *)
adds dontcare x26 x20 0x120@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950504 *)
mov x3 x19;
(* mov	x2, x21                                     #! PC = 0x274877950508 *)
mov x2 x21;
(* mov	x1, x20                                     #! PC = 0x274877950512 *)
mov x1 x20;
(* mov	x0, x26                                     #! PC = 0x274877950516 *)
mov x0 x26;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950520 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950520 = 0x274877950520;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829d98; Value = 0x182cd7bf8eb78000; PC = 0x274877984384 *)
mov x11 LL0x4000829d98;
mov x12 LL0x4000829da0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829df8; Value = 0x85e41fff9ed98000; PC = 0x274877984388 *)
mov x19 LL0x4000829df8;
mov x20 LL0x4000829e00;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829da8; Value = 0x7307ccdb882768de; PC = 0x274877984392 *)
mov x13 LL0x4000829da8;
mov x14 LL0x4000829db0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e08; Value = 0xc86d095b29f88d10; PC = 0x274877984400 *)
mov x21 LL0x4000829e08;
mov x22 LL0x4000829e10;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829db8; Value = 0x0235bca162fb0fb3; PC = 0x274877984408 *)
mov x15 LL0x4000829db8;
mov x16 LL0x4000829dc0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e18; Value = 0xa57f72cc60d983e9; PC = 0x274877984416 *)
mov x23 LL0x4000829e18;
mov x24 LL0x4000829e20;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829eb8; PC = 0x274877984424 *)
mov LL0x4000829eb8 x11;
mov LL0x4000829ec0 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829dc8; Value = 0x8763fd75b74ef876; PC = 0x274877984432 *)
mov x11 LL0x4000829dc8;
mov x12 LL0x4000829dd0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e28; Value = 0x1ebe9280d5091b62; PC = 0x274877984440 *)
mov x19 LL0x4000829e28;
mov x20 LL0x4000829e30;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829ec8; PC = 0x274877984444 *)
mov LL0x4000829ec8 x13;
mov LL0x4000829ed0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829dd8; Value = 0xfb6c79fea9991ae5; PC = 0x274877984448 *)
mov x13 LL0x4000829dd8;
mov x14 LL0x4000829de0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829e38; Value = 0x190e77bf809b7f0a; PC = 0x274877984452 *)
mov x21 LL0x4000829e38;
mov x22 LL0x4000829e40;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ed8; PC = 0x274877984460 *)
mov LL0x4000829ed8 x15;
mov LL0x4000829ee0 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829de8; Value = 0x29a1093642c5a25d; PC = 0x274877984468 *)
mov x15 LL0x4000829de8;
mov x16 LL0x4000829df0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829e48; Value = 0x20b8e840008323a0; PC = 0x274877984476 *)
mov x23 LL0x4000829e48;
mov x24 LL0x4000829e50;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877984540 *)
mov LL0x4000829ee8 x11;
mov LL0x4000829ef0 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877984548 *)
mov LL0x4000829ef8 x13;
mov LL0x4000829f00 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877984556 *)
mov LL0x4000829f08 x15;
mov LL0x4000829f10 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000e00400000aa3c; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* mov	x3, x19                                     #! PC = 0x274877950524 *)
mov x3 x19;
(* mov	x2, x27                                     #! PC = 0x274877950528 *)
mov x2 x27;
(* mov	x1, x22                                     #! PC = 0x274877950532 *)
mov x1 x22;
(* mov	x0, x20                                     #! PC = 0x274877950536 *)
mov x0 x20;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950540 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950540 = 0x274877950540;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;

(* mul_by_u_plus_1_fp2x2(ret[1], ret[0]) *)

assert true
    && and [eqmod ((limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                              LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                              LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                              LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0]) +
                   (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]))
                  (limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                             LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                             LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                             LL0x4000829de0, LL0x4000829de8, LL0x4000829df0])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10])
                  ((limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                              LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                              LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                              LL0x4000829de0, LL0x4000829de8, LL0x4000829df0]) +
                   (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]))
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                              LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                              LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                              LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0]) +
                   (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]))
                  (limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                             LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                             LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                             LL0x4000829de0, LL0x4000829de8, LL0x4000829df0])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10])
                  ((limbs 64 [LL0x4000829d98, LL0x4000829da0, LL0x4000829da8,
                              LL0x4000829db0, LL0x4000829db8, LL0x4000829dc0,
                              LL0x4000829dc8, LL0x4000829dd0, LL0x4000829dd8,
                              LL0x4000829de0, LL0x4000829de8, LL0x4000829df0]) +
                   (limbs 64 [LL0x4000829df8, LL0x4000829e00, LL0x4000829e08,
                              LL0x4000829e10, LL0x4000829e18, LL0x4000829e20,
                              LL0x4000829e28, LL0x4000829e30, LL0x4000829e38,
                              LL0x4000829e40, LL0x4000829e48, LL0x4000829e50]))
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                    LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                    LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829e58; Value = 0x9248b7bfefde0000; PC = 0x274877984384 *)
mov x11 LL0x4000829e58;
mov x12 LL0x4000829e60;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b08; Value = 0xa1aa48c1b6c4bf20; PC = 0x274877984388 *)
mov x19 LL0x4000829b08;
mov x20 LL0x4000829b10;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e68; Value = 0xaa9ac3805e2edbce; PC = 0x274877984392 *)
mov x13 LL0x4000829e68;
mov x14 LL0x4000829e70;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b18; Value = 0xdb753b9dee26c493; PC = 0x274877984400 *)
mov x21 LL0x4000829b18;
mov x22 LL0x4000829b20;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e78; Value = 0x5cb649d502218bc9; PC = 0x274877984408 *)
mov x15 LL0x4000829e78;
mov x16 LL0x4000829e80;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b28; Value = 0xb416b4df03830d31; PC = 0x274877984416 *)
mov x23 LL0x4000829b28;
mov x24 LL0x4000829b30;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829d98; PC = 0x274877984424 *)
mov ret00 x11;
mov ret01 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e88; Value = 0x68a56af4e245dd13; PC = 0x274877984432 *)
mov x11 LL0x4000829e88;
mov x12 LL0x4000829e90;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b38; Value = 0x520fba46aeb315b1; PC = 0x274877984440 *)
mov x19 LL0x4000829b38;
mov x20 LL0x4000829b40;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829da8; PC = 0x274877984444 *)
mov ret02 x13;
mov ret03 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e98; Value = 0xe25e023f28fd9bdb; PC = 0x274877984448 *)
mov x13 LL0x4000829e98;
mov x14 LL0x4000829ea0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829b48; Value = 0x09a67b1981fb69dc; PC = 0x274877984452 *)
mov x21 LL0x4000829b48;
mov x22 LL0x4000829b50;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829db8; PC = 0x274877984460 *)
mov ret04 x15;
mov ret05 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829ea8; Value = 0x08e820f642427ebc; PC = 0x274877984468 *)
mov x15 LL0x4000829ea8;
mov x16 LL0x4000829eb0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829b58; Value = 0xea09a14285a838b9; PC = 0x274877984476 *)
mov x23 LL0x4000829b58;
mov x24 LL0x4000829b60;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829dc8; PC = 0x274877984540 *)
mov ret06 x11;
mov ret07 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829dd8; PC = 0x274877984548 *)
mov ret08 x13;
mov ret09 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829de8; PC = 0x274877984556 *)
mov ret0a x15;
mov ret0b x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000600400000aa50; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* add	x3, x27, #0x60                              #! PC = 0x274877950544 *)
adds dontcare x3 x27 0x60@uint64;
(* mov	x4, x3                                      #! PC = 0x274877950548 *)
mov x4 x3;
(* mov	x3, x19                                     #! PC = 0x274877950552 *)
mov x3 x19;
(* str	x4, [sp, #128]                              #! EA = L0x4000829a10; PC = 0x274877950556 *)
mov LL0x4000829a10 x4;
(* mov	x2, x4                                      #! PC = 0x274877950560 *)
mov x2 x4;
(* mov	x1, x26                                     #! PC = 0x274877950564 *)
mov x1 x26;
(* mov	x0, x21                                     #! PC = 0x274877950568 *)
mov x0 x21;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950572 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950572 = 0x274877950572;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829eb8; Value = 0x9e10f7bf2d910000; PC = 0x274877984384 *)
mov x11 LL0x4000829eb8;
mov x12 LL0x4000829ec0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b68; Value = 0xe6c8f4bf2a867760; PC = 0x274877984388 *)
mov x19 LL0x4000829b68;
mov x20 LL0x4000829b70;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829ec8; Value = 0x3b74d636b21ff5ef; PC = 0x274877984392 *)
mov x13 LL0x4000829ec8;
mov x14 LL0x4000829ed0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b78; Value = 0x03848c78ce3ec7e6; PC = 0x274877984400 *)
mov x21 LL0x4000829b78;
mov x22 LL0x4000829b80;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ed8; Value = 0xa7b52f6dc3d4939d; PC = 0x274877984408 *)
mov x15 LL0x4000829ed8;
mov x16 LL0x4000829ee0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b88; Value = 0xd082d00b946555bc; PC = 0x274877984416 *)
mov x23 LL0x4000829b88;
mov x24 LL0x4000829b90;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829df8; PC = 0x274877984424 *)
mov ret10 x11;
mov ret11 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829ee8; Value = 0xa6228ff68c5813d8; PC = 0x274877984432 *)
mov x11 LL0x4000829ee8;
mov x12 LL0x4000829ef0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b98; Value = 0xaeda3b4fdaff2cd9; PC = 0x274877984440 *)
mov x19 LL0x4000829b98;
mov x20 LL0x4000829ba0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e08; PC = 0x274877984444 *)
mov ret12 x13;
mov ret13 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ef8; Value = 0x147af1be2a3499f0; PC = 0x274877984448 *)
mov x13 LL0x4000829ef8;
mov x14 LL0x4000829f00;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ba8; Value = 0xc330383e3d66d124; PC = 0x274877984452 *)
mov x21 LL0x4000829ba8;
mov x22 LL0x4000829bb0;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e18; PC = 0x274877984460 *)
mov ret14 x15;
mov ret15 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f08; Value = 0x4a59f1764348c5fd; PC = 0x274877984468 *)
mov x15 LL0x4000829f08;
mov x16 LL0x4000829f10;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829bb8; Value = 0x0000048689a12172; PC = 0x274877984476 *)
mov x23 LL0x4000829bb8;
mov x24 LL0x4000829bc0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e28; PC = 0x274877984540 *)
mov ret16 x11;
mov ret17 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e38; PC = 0x274877984548 *)
mov ret18 x13;
mov ret19 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829e48; PC = 0x274877984556 *)
mov ret1a x15;
mov ret1b x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x001500400000aa70; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

assert true
    && and[eqmod (limbs 64 [ret00, ret01, ret02, ret03, ret04, ret05,
                            ret06, ret07, ret08, ret09, ret0a, ret0b])
                 ((limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0]) +
                  (limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                             LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                             LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                             LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]))
                 (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                              m0,   m1,   m2,   m3,   m4,   m5]),
           eqmod (limbs 64 [ret10, ret11, ret12, ret13, ret14, ret15,
                            ret16, ret17, ret18, ret19, ret1a, ret1b])
                 ((limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10]) +
                  (limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                             LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                             LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                             LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]))
                 (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                              m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and[eqmod (limbs 64 [ret00, ret01, ret02, ret03, ret04, ret05,
                            ret06, ret07, ret08, ret09, ret0a, ret0b])
                 ((limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0]) +
                  (limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                             LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                             LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                             LL0x4000829b50, LL0x4000829b58, LL0x4000829b60]))
                 (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
           eqmod (limbs 64 [ret10, ret11, ret12, ret13, ret14, ret15,
                            ret16, ret17, ret18, ret19, ret1a, ret1b])
                 ((limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10]) +
                  (limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                             LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                             LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                             LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0]))
                 (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* ret[0] = ((a1 + a2)*(b1 + b2) - a1*b1 - a2*b2)*(u+1) + a0*b0
          = (a1*b2 + a2*b1)*(u+1) + a0*b0 *)
(*
ecut and [eqmod (limbs 64 [LL0x4000829a48r0, LL0x4000829a50r0, LL0x4000829a58r0,
                           LL0x4000829a60r0, LL0x4000829a68r0, LL0x4000829a70r0] +
                 limbs 64 [LL0x4000829a78r0, LL0x4000829a80r0, LL0x4000829a88r0,
                           LL0x4000829a90r0, LL0x4000829a98r0, LL0x4000829aa0r0] * U)
                ((limbs 64 [a20, a21, a22, a23, a24, a25] +
                  limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
                 (limbs 64 [a40, a41, a42, a43, a44, a45] +
                  limbs 64 [a50, a51, a52, a53, a54, a55] * U))
                [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
          eqmod (limbs 64 [LL0x4000829aa8r0, LL0x4000829ab0r0, LL0x4000829ab8r0,
                           LL0x4000829ac0r0, LL0x4000829ac8r0, LL0x4000829ad0r0] +
                 limbs 64 [LL0x4000829ad8r0, LL0x4000829ae0r0, LL0x4000829ae8r0,
                           LL0x4000829af0r0, LL0x4000829af8r0, LL0x4000829b00r0] * U)
                ((limbs 64 [b20, b21, b22, b23, b24, b25] +
                  limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
                 (limbs 64 [b40, b41, b42, b43, b44, b45] +
                  limbs 64 [b50, b51, b52, b53, b54, b55] * U))
                [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
          eqmod (limbs 64 [ret00, ret01, ret02, ret03, ret04, ret05,
                           ret06, ret07, ret08, ret09, ret0a, ret0b] +
                 limbs 64 [ret10, ret11, ret12, ret13, ret14, ret15,
                           ret16, ret17, ret18, ret19, ret1a, ret1b] * U)
                (((limbs 64 [LL0x4000829a48r0, LL0x4000829a50r0, LL0x4000829a58r0,
                             LL0x4000829a60r0, LL0x4000829a68r0, LL0x4000829a70r0] +
                   limbs 64 [LL0x4000829a78r0, LL0x4000829a80r0, LL0x4000829a88r0,
                             LL0x4000829a90r0, LL0x4000829a98r0, LL0x4000829aa0r0] * U) *
                  (limbs 64 [LL0x4000829aa8r0, LL0x4000829ab0r0, LL0x4000829ab8r0,
                             LL0x4000829ac0r0, LL0x4000829ac8r0, LL0x4000829ad0r0] +
                   limbs 64 [LL0x4000829ad8r0, LL0x4000829ae0r0, LL0x4000829ae8r0,
                             LL0x4000829af0r0, LL0x4000829af8r0, LL0x4000829b00r0] * U) -
                  (limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                  (limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b30, b31, b32, b33, b34, b35] * U) -
                  (limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                  (limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [b50, b51, b52, b53, b54, b55] * U)) *
                 (U + 1) +
                 (limbs 64 [a00, a01, a02, a03, a04, a05] +
                  limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                 (limbs 64 [b00, b01, b02, b03, b04, b05] +
                  limbs 64 [b10, b11, b12, b13, b14, b15] * U))
                [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                 U * U + 1]] prove with precondition;
*)

(* mov	x3, x19                                     #! PC = 0x274877950576 *)
mov x3 x19;
(* ldr	x2, [sp, #136]                              #! EA = L0x4000829a18; Value = 0x000000400082a0a8; PC = 0x274877950580 *)
mov x2 LL0x4000829a18;
(* ldr	x1, [sp, #104]                              #! EA = L0x40008299f8; Value = 0x000000400082a048; PC = 0x274877950584 *)
mov x1 LL0x40008299f8;
(* mov	x0, x24                                     #! PC = 0x274877950588 *)
mov x0 x24;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877950592 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877950592 = 0x274877950592;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;

rcut and [limbs 64 [ret06, ret07, ret08, ret09, ret0a, ret0b] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [ret16, ret17, ret18, ret19, ret1a, ret1b] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [a00, a01, a02, a03, a04, a05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a10, a11, a12, a13, a14, a15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a20, a21, a22, a23, a24, a25] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a30, a31, a32, a33, a34, a35] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b00, b01, b02, b03, b04, b05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b10, b11, b12, b13, b14, b15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b20, b21, b22, b23, b24, b25] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b30, b31, b32, b33, b34, b35] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829960; PC = 0x274877979620 *)
mov LL0x4000829960 x29;
mov LL0x4000829968 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829970; PC = 0x274877979628 *)
mov LL0x4000829970 x19;
mov LL0x4000829978 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829980; PC = 0x274877979632 *)
mov LL0x4000829980 x21;
mov LL0x4000829988 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 LL0x4000016928;
mov x5 LL0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 LL0x4000016938;
mov x7 LL0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 LL0x4000016948;
mov x9 LL0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a048; Value = 0x0000004000841d60; PC = 0x274877979488 *)
mov x10 LL0x400082a048;
mov x11 LL0x400082a050;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a0a8; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 LL0x400082a0a8;
mov x17 LL0x400082a0b0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a058; Value = 0x000000400085d6d8; PC = 0x274877979496 *)
mov x12 LL0x400082a058;
mov x13 LL0x400082a060;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a0b8; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 LL0x400082a0b8;
mov x20 LL0x400082a0c0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a068; Value = 0x0000004000000040; PC = 0x274877979504 *)
mov x14 LL0x400082a068;
mov x15 LL0x400082a070;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a0c8; Value = 0x0000008001086c68; PC = 0x274877979508 *)
mov x21 LL0x400082a0c8;
mov x22 LL0x400082a0d0;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829a48; PC = 0x274877979652 *)
mov LL0x4000829a48 x10;
mov LL0x4000829a50 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829a58; PC = 0x274877979660 *)
mov LL0x4000829a58 x12;
mov LL0x4000829a60 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829a68; PC = 0x274877979668 *)
mov LL0x4000829a68 x14;
mov LL0x4000829a70 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a078; Value = 0x000000400085de20; PC = 0x274877979488 *)
mov x10 LL0x400082a078;
mov x11 LL0x400082a080;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a0d8; Value = 0x000000800085d000; PC = 0x274877979492 *)
mov x16 LL0x400082a0d8;
mov x17 LL0x400082a0e0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a088; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 LL0x400082a088;
mov x13 LL0x400082a090;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a0e8; Value = 0x000000800085ead0; PC = 0x274877979500 *)
mov x19 LL0x400082a0e8;
mov x20 LL0x400082a0f0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a098; Value = 0x000000400082c000; PC = 0x274877979504 *)
mov x14 LL0x400082a098;
mov x15 LL0x400082a0a0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a0f8; Value = 0x00000080010bb000; PC = 0x274877979508 *)
mov x21 LL0x400082a0f8;
mov x22 LL0x400082a100;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829968; Value = 0x005b00400000aa84; PC = 0x274877979676 *)
mov x30 LL0x4000829968;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829a78; PC = 0x274877979680 *)
mov LL0x4000829a78 x10;
mov LL0x4000829a80 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829a88; PC = 0x274877979684 *)
mov LL0x4000829a88 x12;
mov LL0x4000829a90 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829a98; PC = 0x274877979688 *)
mov LL0x4000829a98 x14;
mov LL0x4000829aa0 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829970; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 LL0x4000829970;
mov x20 LL0x4000829978;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829980; Value = 0x0000004000829df8; PC = 0x274877979696 *)
mov x21 LL0x4000829980;
mov x22 LL0x4000829988;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829960; Value = 0x0000004000829990; PC = 0x274877979700 *)
mov x29 LL0x4000829960;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* mov	x3, x19                                     #! PC = 0x274877950596 *)
mov x3 x19;
(* ldr	x2, [sp, #144]                              #! EA = L0x4000829a20; Value = 0x000000400082a1c8; PC = 0x274877950600 *)
mov x2 LL0x4000829a20;
(* ldr	x1, [sp, #112]                              #! EA = L0x4000829a00; Value = 0x000000400082a168; PC = 0x274877950604 *)
mov x1 LL0x4000829a00;
(* mov	x0, x25                                     #! PC = 0x274877950608 *)
mov x0 x25;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877950612 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877950612 = 0x274877950612;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829960; PC = 0x274877979620 *)
mov LL0x4000829960 x29;
mov LL0x4000829968 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829970; PC = 0x274877979628 *)
mov LL0x4000829970 x19;
mov LL0x4000829978 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829980; PC = 0x274877979632 *)
mov LL0x4000829980 x21;
mov LL0x4000829988 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 LL0x4000016928;
mov x5 LL0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 LL0x4000016938;
mov x7 LL0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 LL0x4000016948;
mov x9 LL0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a168; Value = 0xb9ff00400083c80b; PC = 0x274877979488 *)
mov x10 LL0x400082a168;
mov x11 LL0x400082a170;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a1c8; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 LL0x400082a1c8;
mov x17 LL0x400082a1d0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a178; Value = 0x6730d2e0f738100c; PC = 0x274877979496 *)
mov x12 LL0x400082a178;
mov x13 LL0x400082a180;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a1d8; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 LL0x400082a1d8;
mov x20 LL0x400082a1e0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a188; Value = 0x4b1ba7f6434ecfb7; PC = 0x274877979504 *)
mov x14 LL0x400082a188;
mov x15 LL0x400082a190;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a1e8; Value = 0x0000004000845000; PC = 0x274877979508 *)
mov x21 LL0x400082a1e8;
mov x22 LL0x400082a1f0;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829aa8; PC = 0x274877979652 *)
mov LL0x4000829aa8 x10;
mov LL0x4000829ab0 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829ab8; PC = 0x274877979660 *)
mov LL0x4000829ab8 x12;
mov LL0x4000829ac0 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829ac8; PC = 0x274877979668 *)
mov LL0x4000829ac8 x14;
mov LL0x4000829ad0 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a198; Value = 0x000000400085de20; PC = 0x274877979488 *)
mov x10 LL0x400082a198;
mov x11 LL0x400082a1a0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a1f8; Value = 0x0000004000000000; PC = 0x274877979492 *)
mov x16 LL0x400082a1f8;
mov x17 LL0x400082a200;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a1a8; Value = 0x000000800106f748; PC = 0x274877979496 *)
mov x12 LL0x400082a1a8;
mov x13 LL0x400082a1b0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a208; Value = 0x000000400085ea90; PC = 0x274877979500 *)
mov x19 LL0x400082a208;
mov x20 LL0x400082a210;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a1b8; Value = 0x000000c0018b3d60; PC = 0x274877979504 *)
mov x14 LL0x400082a1b8;
mov x15 LL0x400082a1c0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a218; Value = 0x000000400085e000; PC = 0x274877979508 *)
mov x21 LL0x400082a218;
mov x22 LL0x400082a220;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829968; Value = 0x005e00400000aa98; PC = 0x274877979676 *)
mov x30 LL0x4000829968;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829ad8; PC = 0x274877979680 *)
mov LL0x4000829ad8 x10;
mov LL0x4000829ae0 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829ae8; PC = 0x274877979684 *)
mov LL0x4000829ae8 x12;
mov LL0x4000829af0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829af8; PC = 0x274877979688 *)
mov LL0x4000829af8 x14;
mov LL0x4000829b00 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829970; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 LL0x4000829970;
mov x20 LL0x4000829978;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829980; Value = 0x0000004000829df8; PC = 0x274877979696 *)
mov x21 LL0x4000829980;
mov x22 LL0x4000829988;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829960; Value = 0x0000004000829990; PC = 0x274877979700 *)
mov x29 LL0x4000829960;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;

(* add_fp2(aa, a[0], a[1]) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70])
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a20, a21, a22, a23, a24, a25])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0])
                  (limbs 64 [a10, a11, a12, a13, a14, a15] +
                   limbs 64 [a30, a31, a32, a33, a34, a35])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])
       ];

assume and [eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70])
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a20, a21, a22, a23, a24, a25])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0])
                  (limbs 64 [a10, a11, a12, a13, a14, a15] +
                   limbs 64 [a30, a31, a32, a33, a34, a35])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])
       ]
    && true;

(*
assert eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                        LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
              limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                        LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U)
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a10, a11, a12, a13, a14, a15] * U +
              limbs 64 [a20, a21, a22, a23, a24, a25] +
              limbs 64 [a30, a31, a32, a33, a34, a35] * U)
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;
*)

(* add_fp2(bb, b[0], b[1]) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0])
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b20, b21, b22, b23, b24, b25])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00])
                  (limbs 64 [b10, b11, b12, b13, b14, b15] +
                   limbs 64 [b30, b31, b32, b33, b34, b35])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])
       ];

assume and [eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0])
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b20, b21, b22, b23, b24, b25])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00])
                  (limbs 64 [b10, b11, b12, b13, b14, b15] +
                   limbs 64 [b30, b31, b32, b33, b34, b35])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])
       ]
    && true;
(*
assert eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                        LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
              limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                        LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U)
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b10, b11, b12, b13, b14, b15] * U +
              limbs 64 [b20, b21, b22, b23, b24, b25] +
              limbs 64 [b30, b31, b32, b33, b34, b35] * U)
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;
*)

(* NOTE: save old values *)
mov LL0x4000829a48r1 LL0x4000829a48; mov LL0x4000829a50r1 LL0x4000829a50;
mov LL0x4000829a58r1 LL0x4000829a58; mov LL0x4000829a60r1 LL0x4000829a60;
mov LL0x4000829a68r1 LL0x4000829a68; mov LL0x4000829a70r1 LL0x4000829a70;
mov LL0x4000829a78r1 LL0x4000829a78; mov LL0x4000829a80r1 LL0x4000829a80;
mov LL0x4000829a88r1 LL0x4000829a88; mov LL0x4000829a90r1 LL0x4000829a90;
mov LL0x4000829a98r1 LL0x4000829a98; mov LL0x4000829aa0r1 LL0x4000829aa0;
mov LL0x4000829aa8r1 LL0x4000829aa8; mov LL0x4000829ab0r1 LL0x4000829ab0;
mov LL0x4000829ab8r1 LL0x4000829ab8; mov LL0x4000829ac0r1 LL0x4000829ac0;
mov LL0x4000829ac8r1 LL0x4000829ac8; mov LL0x4000829ad0r1 LL0x4000829ad0;
mov LL0x4000829ad8r1 LL0x4000829ad8; mov LL0x4000829ae0r1 LL0x4000829ae0;
mov LL0x4000829ae8r1 LL0x4000829ae8; mov LL0x4000829af0r1 LL0x4000829af0;
mov LL0x4000829af8r1 LL0x4000829af8; mov LL0x4000829b00r1 LL0x4000829b00;

(* mov	x2, x25                                     #! PC = 0x274877950616 *)
mov x2 x25;
(* mov	x1, x24                                     #! PC = 0x274877950620 *)
mov x1 x24;
(* mov	x0, x22                                     #! PC = 0x274877950624 *)
mov x0 x22;
(* #bl	0x4000008b3c <mul_fp2x2>                    #! PC = 0x274877950628 *)
#bl	0x4000008b3c <mul_fp2x2>                    #! 0x274877950628 = 0x274877950628;
(* stp	x29, x30, [sp, #-16]!                       #! EA = L0x4000829980; PC = 0x274877942588 *)
mov LL0x4000829980 x29;
mov LL0x4000829988 x30;
(* mov	x29, sp                                     #! PC = 0x274877942592 *)
mov x29 sp;
(* #adrp	x3, 0x4000029000                           #! PC = 0x274877942596 *)
#adrp	%%x3, 0x4000029000                           #! 0x274877942596 = 0x274877942596;
(* ldr	x3, [x3, #4056]                             #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877942600 *)
mov x3 LL0x4000029fd8;
(* #bl	0x40000143c0 <mul_382x>                     #! PC = 0x274877942604 *)
#bl	0x40000143c0 <mul_382x>                     #! 0x274877942604 = 0x274877942604;
(* #paciasp                                         #! PC = 0x274877989824 *)
#paciasp                                         #! 0x274877989824 = 0x274877989824;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829900; PC = 0x274877989828 *)
mov LL0x4000829900 x29;
mov LL0x4000829908 x30;
(* mov	x29, sp                                     #! PC = 0x274877989832 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829910; PC = 0x274877989836 *)
mov LL0x4000829910 x19;
mov LL0x4000829918 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829920; PC = 0x274877989840 *)
mov LL0x4000829920 x21;
mov LL0x4000829928 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829930; PC = 0x274877989844 *)
mov LL0x4000829930 x23;
mov LL0x4000829938 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829940; PC = 0x274877989848 *)
mov LL0x4000829940 x25;
mov LL0x4000829948 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829950; PC = 0x274877989852 *)
mov LL0x4000829950 x27;
mov LL0x4000829958 x28;
(* sub	sp, sp, #0x60                               #! PC = 0x274877989856 *)
subc dontcare sp sp 0x60@uint64;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a48; Value = 0x0000004000841d60; PC = 0x274877989860 *)
mov x11 LL0x4000829a48;
mov x12 LL0x4000829a50;
(* mov	x26, x0                                     #! PC = 0x274877989864 *)
mov x26 x0;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x4000829a78; Value = 0x000000c0010bae20; PC = 0x274877989868 *)
mov x19 LL0x4000829a78;
mov x20 LL0x4000829a80;
(* mov	x27, x1                                     #! PC = 0x274877989872 *)
mov x27 x1;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a58; Value = 0x000000400085d6d8; PC = 0x274877989876 *)
mov x13 LL0x4000829a58;
mov x14 LL0x4000829a60;
(* mov	x28, x2                                     #! PC = 0x274877989880 *)
mov x28 x2;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x4000829a88; Value = 0x000000800085ead0; PC = 0x274877989884 *)
mov x21 LL0x4000829a88;
mov x22 LL0x4000829a90;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a68; Value = 0x000000c001086ca8; PC = 0x274877989888 *)
mov x15 LL0x4000829a68;
mov x16 LL0x4000829a70;
(* adds	x5, x11, x19                               #! PC = 0x274877989892 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x4000829a98; Value = 0x000000c0018e7000; PC = 0x274877989896 *)
mov x23 LL0x4000829a98;
mov x24 LL0x4000829aa0;
(* adcs	x6, x12, x20                               #! PC = 0x274877989900 *)
adcs carry x6 x12 x20 carry;
(* ldp	x11, x12, [x2]                              #! EA = L0x4000829aa8; Value = 0xb9ff00400083c80b; PC = 0x274877989904 *)
mov x11 LL0x4000829aa8;
mov x12 LL0x4000829ab0;
(* adcs	x7, x13, x21                               #! PC = 0x274877989908 *)
adcs carry x7 x13 x21 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829ad8; Value = 0x000000800085de20; PC = 0x274877989912 *)
mov x19 LL0x4000829ad8;
mov x20 LL0x4000829ae0;
(* adcs	x8, x14, x22                               #! PC = 0x274877989916 *)
adcs carry x8 x14 x22 carry;
(* ldp	x13, x14, [x2, #16]                         #! EA = L0x4000829ab8; Value = 0x6730d2e0f738100c; PC = 0x274877989920 *)
mov x13 LL0x4000829ab8;
mov x14 LL0x4000829ac0;
(* adcs	x9, x15, x23                               #! PC = 0x274877989924 *)
adcs carry x9 x15 x23 carry;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ae8; Value = 0x000000c0018ce1d8; PC = 0x274877989928 *)
mov x21 LL0x4000829ae8;
mov x22 LL0x4000829af0;
(* adc	x10, x16, x24                               #! PC = 0x274877989932 *)
adc x10 x16 x24 carry;
(* ldp	x15, x16, [x2, #32]                         #! EA = L0x4000829ac8; Value = 0x4b1ba83643d31fb7; PC = 0x274877989936 *)
mov x15 LL0x4000829ac8;
mov x16 LL0x4000829ad0;
(* stp	x5, x6, [sp]                                #! EA = L0x40008298a0; PC = 0x274877989940 *)
mov LL0x40008298a0 x5;
mov LL0x40008298a8 x6;
(* adds	x5, x11, x19                               #! PC = 0x274877989944 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829af8; Value = 0x0000010002111d60; PC = 0x274877989948 *)
mov x23 LL0x4000829af8;
mov x24 LL0x4000829b00;
(* adcs	x6, x12, x20                               #! PC = 0x274877989952 *)
adcs carry x6 x12 x20 carry;
(* stp	x7, x8, [sp, #16]                           #! EA = L0x40008298b0; PC = 0x274877989956 *)
mov LL0x40008298b0 x7;
mov LL0x40008298b8 x8;
(* adcs	x7, x13, x21                               #! PC = 0x274877989960 *)
adcs carry x7 x13 x21 carry;
(* adcs	x8, x14, x22                               #! PC = 0x274877989964 *)
adcs carry x8 x14 x22 carry;
(* stp	x9, x10, [sp, #32]                          #! EA = L0x40008298c0; PC = 0x274877989968 *)
mov LL0x40008298c0 x9;
mov LL0x40008298c8 x10;
(* adcs	x9, x15, x23                               #! PC = 0x274877989972 *)
adcs carry x9 x15 x23 carry;
(* stp	x5, x6, [sp, #48]                           #! EA = L0x40008298d0; PC = 0x274877989976 *)
mov LL0x40008298d0 x5;
mov LL0x40008298d8 x6;
(* adc	x10, x16, x24                               #! PC = 0x274877989980 *)
adc x10 x16 x24 carry;
(* stp	x7, x8, [sp, #64]                           #! EA = L0x40008298e0; PC = 0x274877989984 *)
mov LL0x40008298e0 x7;
mov LL0x40008298e8 x8;
(* stp	x9, x10, [sp, #80]                          #! EA = L0x40008298f0; PC = 0x274877989988 *)
mov LL0x40008298f0 x9;
mov LL0x40008298f8 x10;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877989992 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877989992 = 0x274877989992;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a48; Value = 0x0000004000841d60; PC = 0x274877989152 *)
mov x11 LL0x4000829a48;
mov x12 LL0x4000829a50;
(* ldr	x17, [x2]                                   #! EA = L0x4000829aa8; Value = 0xb9ff00400083c80b; PC = 0x274877989156 *)
mov x17 LL0x4000829aa8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a58; Value = 0x000000400085d6d8; PC = 0x274877989160 *)
mov x13 LL0x4000829a58;
mov x14 LL0x4000829a60;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a68; Value = 0x000000c001086ca8; PC = 0x274877989164 *)
mov x15 LL0x4000829a68;
mov x16 LL0x4000829a70;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x4000829ab0; Value = 0x1eac003eb1d9d667; PC = 0x274877989216 *)
mov x17 LL0x4000829ab0;
(* str	x19, [x0]                                   #! EA = L0x4000829e58; PC = 0x274877989220 *)
mov LL0x4000829e58 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x4000829ab8; Value = 0x6730d2e0f738100c; PC = 0x274877989320 *)
mov x17 LL0x4000829ab8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829e60; PC = 0x274877989328 *)
mov LL0x4000829e60 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x4000829ac0; Value = 0x64774bc4f407ecd7; PC = 0x274877989428 *)
mov x17 LL0x4000829ac0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829e68; PC = 0x274877989436 *)
mov LL0x4000829e68 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x4000829ac8; Value = 0x4b1ba83643d31fb7; PC = 0x274877989536 *)
mov x17 LL0x4000829ac8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829e70; PC = 0x274877989544 *)
mov LL0x4000829e70 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x4000829ad0; Value = 0x1a0111ea397cdfcb; PC = 0x274877989644 *)
mov x17 LL0x4000829ad0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829e78; PC = 0x274877989652 *)
mov LL0x4000829e78 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829e80; PC = 0x274877989756 *)
mov LL0x4000829e80 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829e88; PC = 0x274877989784 *)
mov LL0x4000829e88 x19;
mov LL0x4000829e90 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829e98; PC = 0x274877989788 *)
mov LL0x4000829e98 x21;
mov LL0x4000829ea0 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829ea8; PC = 0x274877989792 *)
mov LL0x4000829ea8 x23;
mov LL0x4000829eb0 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* mov	x1, sp                                      #! PC = 0x274877989996 *)
mov x1 sp;
(* add	x2, sp, #0x30                               #! PC = 0x274877990000 *)
adds dontcare x2 sp 0x30@uint64;
(* add	x0, x26, #0x60                              #! PC = 0x274877990004 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990008 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990008 = 0x274877990008;
(* ldp	x11, x12, [x1]                              #! EA = L0x40008298a0; Value = 0x00000100018fcb80; PC = 0x274877989152 *)
mov x11 LL0x40008298a0;
mov x12 LL0x40008298a8;
(* ldr	x17, [x2]                                   #! EA = L0x40008298d0; Value = 0xb9ff00c00109a62b; PC = 0x274877989156 *)
mov x17 LL0x40008298d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x40008298b0; Value = 0x000000c0010bc1a8; PC = 0x274877989160 *)
mov x13 LL0x40008298b0;
mov x14 LL0x40008298b8;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x40008298c0; Value = 0x000001800296dca8; PC = 0x274877989164 *)
mov x15 LL0x40008298c0;
mov x16 LL0x40008298c8;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x40008298d8; Value = 0x1eac00beb2df26f9; PC = 0x274877989216 *)
mov x17 LL0x40008298d8;
(* str	x19, [x0]                                   #! EA = L0x4000829eb8; PC = 0x274877989220 *)
mov LL0x4000829eb8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x40008298e0; Value = 0x6730d3a0f8c4f1e4; PC = 0x274877989320 *)
mov x17 LL0x40008298e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829ec0; PC = 0x274877989328 *)
mov LL0x4000829ec0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x40008298e8; Value = 0x64774c84f5b1d10f; PC = 0x274877989428 *)
mov x17 LL0x40008298e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829ec8; PC = 0x274877989436 *)
mov LL0x4000829ec8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x40008298f0; Value = 0x4b1ba93645e43d17; PC = 0x274877989536 *)
mov x17 LL0x40008298f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829ed0; PC = 0x274877989544 *)
mov LL0x4000829ed0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x40008298f8; Value = 0x1a0112aa3a85ade4; PC = 0x274877989644 *)
mov x17 LL0x40008298f8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829ed8; PC = 0x274877989652 *)
mov LL0x4000829ed8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829ee0; PC = 0x274877989756 *)
mov LL0x4000829ee0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877989784 *)
mov LL0x4000829ee8 x19;
mov LL0x4000829ef0 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877989788 *)
mov LL0x4000829ef8 x21;
mov LL0x4000829f00 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877989792 *)
mov LL0x4000829f08 x23;
mov LL0x4000829f10 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* add	x1, x27, #0x30                              #! PC = 0x274877990012 *)
adds dontcare x1 x27 0x30@uint64;
(* add	x2, x28, #0x30                              #! PC = 0x274877990016 *)
adds dontcare x2 x28 0x30@uint64;
(* mov	x0, sp                                      #! PC = 0x274877990020 *)
mov x0 sp;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990024 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990024 = 0x274877990024;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a78; Value = 0x000000c0010bae20; PC = 0x274877989152 *)
mov x11 LL0x4000829a78;
mov x12 LL0x4000829a80;
(* ldr	x17, [x2]                                   #! EA = L0x4000829ad8; Value = 0x000000800085de20; PC = 0x274877989156 *)
mov x17 LL0x4000829ad8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a88; Value = 0x000000800085ead0; PC = 0x274877989160 *)
mov x13 LL0x4000829a88;
mov x14 LL0x4000829a90;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a98; Value = 0x000000c0018e7000; PC = 0x274877989164 *)
mov x15 LL0x4000829a98;
mov x16 LL0x4000829aa0;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x4000829ae0; Value = 0x0000008001055092; PC = 0x274877989216 *)
mov x17 LL0x4000829ae0;
(* str	x19, [x0]                                   #! EA = L0x40008298a0; PC = 0x274877989220 *)
mov LL0x40008298a0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x4000829ae8; Value = 0x000000c0018ce1d8; PC = 0x274877989320 *)
mov x17 LL0x4000829ae8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x40008298a8; PC = 0x274877989328 *)
mov LL0x40008298a8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x4000829af0; Value = 0x000000c001a9e438; PC = 0x274877989428 *)
mov x17 LL0x4000829af0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x40008298b0; PC = 0x274877989436 *)
mov LL0x40008298b0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x4000829af8; Value = 0x0000010002111d60; PC = 0x274877989536 *)
mov x17 LL0x4000829af8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x40008298b8; PC = 0x274877989544 *)
mov LL0x40008298b8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x4000829b00; Value = 0x000000c00108ce19; PC = 0x274877989644 *)
mov x17 LL0x4000829b00;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x40008298c0; PC = 0x274877989652 *)
mov LL0x40008298c0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x40008298c8; PC = 0x274877989756 *)
mov LL0x40008298c8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x40008298d0; PC = 0x274877989784 *)
mov LL0x40008298d0 x19;
mov LL0x40008298d8 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x40008298e0; PC = 0x274877989788 *)
mov LL0x40008298e0 x21;
mov LL0x40008298e8 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x40008298f0; PC = 0x274877989792 *)
mov LL0x40008298f0 x23;
mov LL0x40008298f8 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877990028 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877990032 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877990036 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* add	x1, x26, #0x60                              #! PC = 0x274877990040 *)
adds dontcare x1 x26 0x60@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990044 *)
mov x2 sp;
(* add	x0, x26, #0x60                              #! PC = 0x274877990048 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990052 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990052 = 0x274877990052;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829eb8o LL0x4000829eb8; mov LL0x4000829ec0o LL0x4000829ec0;
mov LL0x4000829ec8o LL0x4000829ec8; mov LL0x4000829ed0o LL0x4000829ed0;
mov LL0x4000829ed8o LL0x4000829ed8; mov LL0x4000829ee0o LL0x4000829ee0;
mov LL0x4000829ee8o LL0x4000829ee8; mov LL0x4000829ef0o LL0x4000829ef0;
mov LL0x4000829ef8o LL0x4000829ef8; mov LL0x4000829f00o LL0x4000829f00;
mov LL0x4000829f08o LL0x4000829f08; mov LL0x4000829f10o LL0x4000829f10;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829eb8; Value = 0x6a0069dd289c2e80; PC = 0x274877984672 *)
mov x11 LL0x4000829eb8;
mov x12 LL0x4000829ec0;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0xea3e33f9b9158400; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829ec8; Value = 0x9635e4c211fc0d80; PC = 0x274877984680 *)
mov x13 LL0x4000829ec8;
mov x14 LL0x4000829ed0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xfb18d21ff5c5b765; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ed8; Value = 0x1ecac891b9602a66; PC = 0x274877984696 *)
mov x15 LL0x4000829ed8;
mov x16 LL0x4000829ee0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x4c177cef160e8e16; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829eb8; PC = 0x274877984712 *)
mov LL0x4000829eb8 x11;
mov LL0x4000829ec0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829ee8; Value = 0xb6ed786e0a35d169; PC = 0x274877984720 *)
mov x11 LL0x4000829ee8;
mov x12 LL0x4000829ef0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0xa9c929083df813f4; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829ec8; PC = 0x274877984732 *)
mov LL0x4000829ec8 x13;
mov LL0x4000829ed0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ef8; Value = 0x36eba7b6dc7772ef; PC = 0x274877984736 *)
mov x13 LL0x4000829ef8;
mov x14 LL0x4000829f00;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x3e983fa0f466cc55; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ed8; PC = 0x274877984748 *)
mov LL0x4000829ed8 x15;
mov LL0x4000829ee0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f08; Value = 0xbf77468a4c881ae8; PC = 0x274877984756 *)
mov x15 LL0x4000829f08;
mov x16 LL0x4000829f10;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x423387c002126c34; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877984828 *)
mov LL0x4000829ee8 x11;
mov LL0x4000829ef0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877984836 *)
mov LL0x4000829ef8 x13;
mov LL0x4000829f00 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877984840 *)
mov LL0x4000829f08 x15;
mov LL0x4000829f10 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                        LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                        LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                        LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829eb8o, LL0x4000829ec0o, LL0x4000829ec8o,
                        LL0x4000829ed0o, LL0x4000829ed8o, LL0x4000829ee0o,
                        LL0x4000829ee8o, LL0x4000829ef0o, LL0x4000829ef8o,
                        LL0x4000829f00o, LL0x4000829f08o, LL0x4000829f10o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                        LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                        LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                        LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829eb8o, LL0x4000829ec0o, LL0x4000829ec8o,
                        LL0x4000829ed0o, LL0x4000829ed8o, LL0x4000829ee0o,
                        LL0x4000829ee8o, LL0x4000829ef0o, LL0x4000829ef8o,
                        LL0x4000829f00o, LL0x4000829f08o, LL0x4000829f10o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x2, x26, #0x0                               #! PC = 0x274877990056 *)
adds dontcare x2 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990060 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990060 = 0x274877990060;

rcut and [limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

(* NOTE: save old values *)
mov LL0x4000829eb8p LL0x4000829eb8; mov LL0x4000829ec0p LL0x4000829ec0;
mov LL0x4000829ec8p LL0x4000829ec8; mov LL0x4000829ed0p LL0x4000829ed0;
mov LL0x4000829ed8p LL0x4000829ed8; mov LL0x4000829ee0p LL0x4000829ee0;
mov LL0x4000829ee8p LL0x4000829ee8; mov LL0x4000829ef0p LL0x4000829ef0;
mov LL0x4000829ef8p LL0x4000829ef8; mov LL0x4000829f00p LL0x4000829f00;
mov LL0x4000829f08p LL0x4000829f08; mov LL0x4000829f10p LL0x4000829f10;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829eb8; Value = 0x7fc235e36f86aa80; PC = 0x274877984672 *)
mov x11 LL0x4000829eb8;
mov x12 LL0x4000829ec0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829e58; Value = 0xe4999ec244c04320; PC = 0x274877984676 *)
mov x19 LL0x4000829e58;
mov x20 LL0x4000829e60;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829ec8; Value = 0x9b1d12a21c36561b; PC = 0x274877984680 *)
mov x13 LL0x4000829ec8;
mov x14 LL0x4000829ed0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e68; Value = 0x6022a7a092e38e24; PC = 0x274877984688 *)
mov x21 LL0x4000829e68;
mov x22 LL0x4000829e70;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ed8; Value = 0xd2b34ba2a3519c50; PC = 0x274877984696 *)
mov x15 LL0x4000829ed8;
mov x16 LL0x4000829ee0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e78; Value = 0x085d97820599b4eb; PC = 0x274877984704 *)
mov x23 LL0x4000829e78;
mov x24 LL0x4000829e80;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829eb8; PC = 0x274877984712 *)
mov LL0x4000829eb8 x11;
mov LL0x4000829ec0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829ee8; Value = 0x0d244f65cc3dbd75; PC = 0x274877984720 *)
mov x11 LL0x4000829ee8;
mov x12 LL0x4000829ef0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e88; Value = 0xbdb8b82693d45e98; PC = 0x274877984728 *)
mov x19 LL0x4000829e88;
mov x20 LL0x4000829e90;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829ec8; PC = 0x274877984732 *)
mov LL0x4000829ec8 x13;
mov LL0x4000829ed0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ef8; Value = 0xf8536815e810a699; PC = 0x274877984736 *)
mov x13 LL0x4000829ef8;
mov x14 LL0x4000829f00;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829e98; Value = 0x4b4fada4c294efdb; PC = 0x274877984740 *)
mov x21 LL0x4000829e98;
mov x22 LL0x4000829ea0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ed8; PC = 0x274877984748 *)
mov LL0x4000829ed8 x15;
mov LL0x4000829ee0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f08; Value = 0x7d43beca4a75aeb4; PC = 0x274877984756 *)
mov x15 LL0x4000829f08;
mov x16 LL0x4000829f10;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829ea8; Value = 0xea09a14f864c29f4; PC = 0x274877984764 *)
mov x23 LL0x4000829ea8;
mov x24 LL0x4000829eb0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877984828 *)
mov LL0x4000829ee8 x11;
mov LL0x4000829ef0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877984836 *)
mov LL0x4000829ef8 x13;
mov LL0x4000829f00 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877984840 *)
mov LL0x4000829f08 x15;
mov LL0x4000829f10 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                        LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                        LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                        LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
              limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                        LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                        LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                        LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0])
             (limbs 64 [LL0x4000829eb8p, LL0x4000829ec0p, LL0x4000829ec8p,
                        LL0x4000829ed0p, LL0x4000829ed8p, LL0x4000829ee0p,
                        LL0x4000829ee8p, LL0x4000829ef0p, LL0x4000829ef8p,
                        LL0x4000829f00p, LL0x4000829f08p, LL0x4000829f10p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                        LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                        LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                        LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
              limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                        LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                        LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                        LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0])
             (limbs 64 [LL0x4000829eb8p, LL0x4000829ec0p, LL0x4000829ec8p,
                        LL0x4000829ed0p, LL0x4000829ed8p, LL0x4000829ee0p,
                        LL0x4000829ee8p, LL0x4000829ef0p, LL0x4000829ef8p,
                        LL0x4000829f00p, LL0x4000829f08p, LL0x4000829f10p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x1, x26, #0x0                               #! PC = 0x274877990064 *)
adds dontcare x1 x26 0@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990068 *)
mov x2 sp;
(* add	x0, x26, #0x0                               #! PC = 0x274877990072 *)
adds dontcare x0 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990076 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990076 = 0x274877990076;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829e58o LL0x4000829e58; mov LL0x4000829e60o LL0x4000829e60;
mov LL0x4000829e68o LL0x4000829e68; mov LL0x4000829e70o LL0x4000829e70;
mov LL0x4000829e78o LL0x4000829e78; mov LL0x4000829e80o LL0x4000829e80;
mov LL0x4000829e88o LL0x4000829e88; mov LL0x4000829e90o LL0x4000829e90;
mov LL0x4000829e98o LL0x4000829e98; mov LL0x4000829ea0o LL0x4000829ea0;
mov LL0x4000829ea8o LL0x4000829ea8; mov LL0x4000829eb0o LL0x4000829eb0;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829e58; Value = 0xe4999ec244c04320; PC = 0x274877984672 *)
mov x11 LL0x4000829e58;
mov x12 LL0x4000829e60;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0xea3e33f9b9158400; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e68; Value = 0x6022a7a092e38e24; PC = 0x274877984680 *)
mov x13 LL0x4000829e68;
mov x14 LL0x4000829e70;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xfb18d21ff5c5b765; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e78; Value = 0x085d97820599b4eb; PC = 0x274877984696 *)
mov x15 LL0x4000829e78;
mov x16 LL0x4000829e80;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x4c177cef160e8e16; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829e58; PC = 0x274877984712 *)
mov LL0x4000829e58 x11;
mov LL0x4000829e60 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e88; Value = 0xbdb8b82693d45e98; PC = 0x274877984720 *)
mov x11 LL0x4000829e88;
mov x12 LL0x4000829e90;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0xa9c929083df813f4; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e68; PC = 0x274877984732 *)
mov LL0x4000829e68 x13;
mov LL0x4000829e70 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e98; Value = 0x4b4fada4c294efdb; PC = 0x274877984736 *)
mov x13 LL0x4000829e98;
mov x14 LL0x4000829ea0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x3e983fa0f466cc55; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e78; PC = 0x274877984748 *)
mov LL0x4000829e78 x15;
mov LL0x4000829e80 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829ea8; Value = 0xea09a14f864c29f4; PC = 0x274877984756 *)
mov x15 LL0x4000829ea8;
mov x16 LL0x4000829eb0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x423387c002126c34; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e88; PC = 0x274877984828 *)
mov LL0x4000829e88 x11;
mov LL0x4000829e90 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e98; PC = 0x274877984836 *)
mov LL0x4000829e98 x13;
mov LL0x4000829ea0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829ea8; PC = 0x274877984840 *)
mov LL0x4000829ea8 x15;
mov LL0x4000829eb0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829908; Value = 0x001f004000008b50; PC = 0x274877990080 *)
mov x30 LL0x4000829908;
(* add	sp, sp, #0x60                               #! PC = 0x274877990084 *)
adds dontcare sp sp 0x60@uint64;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829910; Value = 0x0000004000016928; PC = 0x274877990088 *)
mov x19 LL0x4000829910;
mov x20 LL0x4000829918;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829920; Value = 0x0000004000829df8; PC = 0x274877990092 *)
mov x21 LL0x4000829920;
mov x22 LL0x4000829928;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829930; Value = 0x0000004000829c88; PC = 0x274877990096 *)
mov x23 LL0x4000829930;
mov x24 LL0x4000829938;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829940; Value = 0x0000004000829aa8; PC = 0x274877990100 *)
mov x25 LL0x4000829940;
mov x26 LL0x4000829948;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x4000829950; Value = 0x0000004000829b08; PC = 0x274877990104 *)
mov x27 LL0x4000829950;
mov x28 LL0x4000829958;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829900; Value = 0x0000004000829980; PC = 0x274877990108 *)
mov x29 LL0x4000829900;
(* #autiasp                                         #! PC = 0x274877990112 *)
#autiasp                                         #! 0x274877990112 = 0x274877990112;
(* #ret                                            #! PC = 0x274877990116 *)
#ret                                            #! 0x274877990116 = 0x274877990116;
(* ldp	x29, x30, [sp], #16                         #! EA = L0x4000829980; Value = 0x0000004000829990; PC = 0x274877942608 *)
mov x29 LL0x4000829980;
mov x30 LL0x4000829988;
(* #ret                                            #! PC = 0x274877942612 *)
#ret                                            #! 0x274877942612 = 0x274877942612;

assert true
    && eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                        LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                        LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                        LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829e58o, LL0x4000829e60o, LL0x4000829e68o,
                        LL0x4000829e70o, LL0x4000829e78o, LL0x4000829e80o,
                        LL0x4000829e88o, LL0x4000829e90o, LL0x4000829e98o,
                        LL0x4000829ea0o, LL0x4000829ea8o, LL0x4000829eb0o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                        LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                        LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                        LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829e58o, LL0x4000829e60o, LL0x4000829e68o,
                        LL0x4000829e70o, LL0x4000829e78o, LL0x4000829e80o,
                        LL0x4000829e88o, LL0x4000829e90o, LL0x4000829e98o,
                        LL0x4000829ea0o, LL0x4000829ea8o, LL0x4000829eb0o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* mul_382x(ret[1], aa, bb) *)

(*
assert and [eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
                   limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] * U)
                  ((limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                              LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
                    limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                              LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U) *
                   (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                              LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
                    limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                              LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                   U * U + 1],
            eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
                   limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U)
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                   limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a30, a31, a32, a33, a34, a35] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
                   limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U)
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                   limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b30, b31, b32, b33, b34, b35] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
       ]
    && true;
*)

(* mov	x3, x19                                     #! PC = 0x274877950632 *)
mov x3 x19;
(* mov	x2, x27                                     #! PC = 0x274877950636 *)
mov x2 x27;
(* mov	x1, x22                                     #! PC = 0x274877950640 *)
mov x1 x22;
(* mov	x0, x22                                     #! PC = 0x274877950644 *)
mov x0 x22;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950648 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950648 = 0x274877950648;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

rcut and [limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                    LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829e58p LL0x4000829e58; mov LL0x4000829e60p LL0x4000829e60;
mov LL0x4000829e68p LL0x4000829e68; mov LL0x4000829e70p LL0x4000829e70;
mov LL0x4000829e78p LL0x4000829e78; mov LL0x4000829e80p LL0x4000829e80;
mov LL0x4000829e88p LL0x4000829e88; mov LL0x4000829e90p LL0x4000829e90;
mov LL0x4000829e98p LL0x4000829e98; mov LL0x4000829ea0p LL0x4000829ea0;
mov LL0x4000829ea8p LL0x4000829ea8; mov LL0x4000829eb0p LL0x4000829eb0;
mov LL0x4000829eb8q LL0x4000829eb8; mov LL0x4000829ec0q LL0x4000829ec0;
mov LL0x4000829ec8q LL0x4000829ec8; mov LL0x4000829ed0q LL0x4000829ed0;
mov LL0x4000829ed8q LL0x4000829ed8; mov LL0x4000829ee0q LL0x4000829ee0;
mov LL0x4000829ee8q LL0x4000829ee8; mov LL0x4000829ef0q LL0x4000829ef0;
mov LL0x4000829ef8q LL0x4000829ef8; mov LL0x4000829f00q LL0x4000829f00;
mov LL0x4000829f08q LL0x4000829f08; mov LL0x4000829f10q LL0x4000829f10;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829e58; Value = 0xfa5b6ac88baabf20; PC = 0x274877984672 *)
mov x11 LL0x4000829e58;
mov x12 LL0x4000829e60;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b08; Value = 0xa1aa48c1b6c4bf20; PC = 0x274877984676 *)
mov x19 LL0x4000829b08;
mov x20 LL0x4000829b10;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e68; Value = 0x6509d5809d1dd6bf; PC = 0x274877984680 *)
mov x13 LL0x4000829e68;
mov x14 LL0x4000829e70;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b18; Value = 0xdb753b9dee26c493; PC = 0x274877984688 *)
mov x21 LL0x4000829b18;
mov x22 LL0x4000829b20;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e78; Value = 0xbc461a92ef8b26d5; PC = 0x274877984696 *)
mov x15 LL0x4000829e78;
mov x16 LL0x4000829e80;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b28; Value = 0xb416b4df03830d31; PC = 0x274877984704 *)
mov x23 LL0x4000829b28;
mov x24 LL0x4000829b30;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829e58; PC = 0x274877984712 *)
mov LL0x4000829e58 x11;
mov LL0x4000829e60 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e88; Value = 0xcdee8f1e55dbf54e; PC = 0x274877984720 *)
mov x11 LL0x4000829e88;
mov x12 LL0x4000829e90;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b38; Value = 0x520fba46aeb315b1; PC = 0x274877984728 *)
mov x19 LL0x4000829b38;
mov x20 LL0x4000829b40;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e68; PC = 0x274877984732 *)
mov LL0x4000829e68 x13;
mov LL0x4000829e70 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e98; Value = 0x73e840a4c4df19a9; PC = 0x274877984736 *)
mov x13 LL0x4000829e98;
mov x14 LL0x4000829ea0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829b48; Value = 0x09a67b1981fb69dc; PC = 0x274877984740 *)
mov x21 LL0x4000829b48;
mov x22 LL0x4000829b50;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e78; PC = 0x274877984748 *)
mov LL0x4000829e78 x15;
mov LL0x4000829e80 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829ea8; Value = 0xf2f1c145c7856a97; PC = 0x274877984756 *)
mov x15 LL0x4000829ea8;
mov x16 LL0x4000829eb0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829b58; Value = 0xea09a14285a838b9; PC = 0x274877984764 *)
mov x23 LL0x4000829b58;
mov x24 LL0x4000829b60;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e88; PC = 0x274877984828 *)
mov LL0x4000829e88 x11;
mov LL0x4000829e90 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e98; PC = 0x274877984836 *)
mov LL0x4000829e98 x13;
mov LL0x4000829ea0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829ea8; PC = 0x274877984840 *)
mov LL0x4000829ea8 x15;
mov LL0x4000829eb0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000200400000aabc; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* mov	x3, x19                                     #! PC = 0x274877950652 *)
mov x3 x19;
(* ldr	x2, [sp, #128]                              #! EA = L0x4000829a10; Value = 0x0000004000829b68; PC = 0x274877950656 *)
mov x2 LL0x4000829a10;
(* mov	x1, x26                                     #! PC = 0x274877950660 *)
mov x1 x26;
(* mov	x0, x26                                     #! PC = 0x274877950664 *)
mov x0 x26;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950668 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950668 = 0x274877950668;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829eb8; Value = 0x9b2897212ac66760; PC = 0x274877984672 *)
mov x11 LL0x4000829eb8;
mov x12 LL0x4000829ec0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b68; Value = 0xe6c8f4bf2a867760; PC = 0x274877984676 *)
mov x19 LL0x4000829b68;
mov x20 LL0x4000829b70;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829ec8; Value = 0x3afa6b018952c7f6; PC = 0x274877984680 *)
mov x13 LL0x4000829ec8;
mov x14 LL0x4000829ed0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b78; Value = 0x03848c78ce3ec7e6; PC = 0x274877984688 *)
mov x21 LL0x4000829b78;
mov x22 LL0x4000829b80;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ed8; Value = 0xca55b4209db7e764; PC = 0x274877984696 *)
mov x15 LL0x4000829ed8;
mov x16 LL0x4000829ee0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b88; Value = 0xd082d00b946555bc; PC = 0x274877984704 *)
mov x23 LL0x4000829b88;
mov x24 LL0x4000829b90;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829eb8; PC = 0x274877984712 *)
mov LL0x4000829eb8 x11;
mov LL0x4000829ec0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829ee8; Value = 0x4f6b973f38695edd; PC = 0x274877984720 *)
mov x11 LL0x4000829ee8;
mov x12 LL0x4000829ef0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b98; Value = 0xaeda3b4fdaff2cd9; PC = 0x274877984728 *)
mov x19 LL0x4000829b98;
mov x20 LL0x4000829ba0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829ec8; PC = 0x274877984732 *)
mov LL0x4000829ec8 x13;
mov LL0x4000829ed0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ef8; Value = 0xad03ba71257bb6bd; PC = 0x274877984736 *)
mov x13 LL0x4000829ef8;
mov x14 LL0x4000829f00;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ba8; Value = 0xc330383e3d66d124; PC = 0x274877984740 *)
mov x21 LL0x4000829ba8;
mov x22 LL0x4000829bb0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ed8; PC = 0x274877984748 *)
mov LL0x4000829ed8 x15;
mov LL0x4000829ee0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f08; Value = 0x933a1d7ac42984bf; PC = 0x274877984756 *)
mov x15 LL0x4000829f08;
mov x16 LL0x4000829f10;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829bb8; Value = 0x0000048689a12172; PC = 0x274877984764 *)
mov x23 LL0x4000829bb8;
mov x24 LL0x4000829bc0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877984828 *)
mov LL0x4000829ee8 x11;
mov LL0x4000829ef0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877984836 *)
mov LL0x4000829ef8 x13;
mov LL0x4000829f00 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877984840 *)
mov LL0x4000829f08 x15;
mov LL0x4000829f10 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000e00400000aad0; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

(* sub_fp2x2(ret[1], ret[1], t0) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
                   limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                             LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                             LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                             LL0x4000829b50, LL0x4000829b58, LL0x4000829b60])
                  (limbs 64 [LL0x4000829e58p, LL0x4000829e60p, LL0x4000829e68p,
                             LL0x4000829e70p, LL0x4000829e78p, LL0x4000829e80p,
                             LL0x4000829e88p, LL0x4000829e90p, LL0x4000829e98p,
                             LL0x4000829ea0p, LL0x4000829ea8p, LL0x4000829eb0p])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
                   limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                             LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                             LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                             LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0])
                  (limbs 64 [LL0x4000829eb8q, LL0x4000829ec0q, LL0x4000829ec8q,
                             LL0x4000829ed0q, LL0x4000829ed8q, LL0x4000829ee0q,
                             LL0x4000829ee8q, LL0x4000829ef0q, LL0x4000829ef8q,
                             LL0x4000829f00q, LL0x4000829f08q, LL0x4000829f10q])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
                   limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                             LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                             LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                             LL0x4000829b50, LL0x4000829b58, LL0x4000829b60])
                  (limbs 64 [LL0x4000829e58p, LL0x4000829e60p, LL0x4000829e68p,
                             LL0x4000829e70p, LL0x4000829e78p, LL0x4000829e80p,
                             LL0x4000829e88p, LL0x4000829e90p, LL0x4000829e98p,
                             LL0x4000829ea0p, LL0x4000829ea8p, LL0x4000829eb0p])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
                   limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                             LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                             LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                             LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0])
                  (limbs 64 [LL0x4000829eb8q, LL0x4000829ec0q, LL0x4000829ec8q,
                             LL0x4000829ed0q, LL0x4000829ed8q, LL0x4000829ee0q,
                             LL0x4000829ee8q, LL0x4000829ef0q, LL0x4000829ef8q,
                             LL0x4000829f00q, LL0x4000829f08q, LL0x4000829f10q])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877950672 *)
mov x3 x19;
(* mov	x2, x28                                     #! PC = 0x274877950676 *)
mov x2 x28;
(* mov	x1, x22                                     #! PC = 0x274877950680 *)
mov x1 x22;
(* mov	x0, x22                                     #! PC = 0x274877950684 *)
mov x0 x22;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950688 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950688 = 0x274877950688;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

rcut and [limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                    LL0x4000829c10, LL0x4000829c18, LL0x4000829c20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829e58r LL0x4000829e58; mov LL0x4000829e60r LL0x4000829e60;
mov LL0x4000829e68r LL0x4000829e68; mov LL0x4000829e70r LL0x4000829e70;
mov LL0x4000829e78r LL0x4000829e78; mov LL0x4000829e80r LL0x4000829e80;
mov LL0x4000829e88r LL0x4000829e88; mov LL0x4000829e90r LL0x4000829e90;
mov LL0x4000829e98r LL0x4000829e98; mov LL0x4000829ea0r LL0x4000829ea0;
mov LL0x4000829ea8r LL0x4000829ea8; mov LL0x4000829eb0r LL0x4000829eb0;
mov LL0x4000829eb8r LL0x4000829eb8; mov LL0x4000829ec0r LL0x4000829ec0;
mov LL0x4000829ec8r LL0x4000829ec8; mov LL0x4000829ed0r LL0x4000829ed0;
mov LL0x4000829ed8r LL0x4000829ed8; mov LL0x4000829ee0r LL0x4000829ee0;
mov LL0x4000829ee8r LL0x4000829ee8; mov LL0x4000829ef0r LL0x4000829ef0;
mov LL0x4000829ef8r LL0x4000829ef8; mov LL0x4000829f00r LL0x4000829f00;
mov LL0x4000829f08r LL0x4000829f08; mov LL0x4000829f10r LL0x4000829f10;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829e58; Value = 0x58b12206d4e60000; PC = 0x274877984672 *)
mov x11 LL0x4000829e58;
mov x12 LL0x4000829e60;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829bc8; Value = 0xde8c000000000000; PC = 0x274877984676 *)
mov x19 LL0x4000829bc8;
mov x20 LL0x4000829bd0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e68; Value = 0x899499e2aef7122b; PC = 0x274877984680 *)
mov x13 LL0x4000829e68;
mov x14 LL0x4000829e70;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829bd8; Value = 0x7a1bbdc054180c5e; PC = 0x274877984688 *)
mov x21 LL0x4000829bd8;
mov x22 LL0x4000829be0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e78; Value = 0x082f65b3ec0819a3; PC = 0x274877984696 *)
mov x15 LL0x4000829e78;
mov x16 LL0x4000829e80;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829be8; Value = 0xabfafe98a7fa10f6; PC = 0x274877984704 *)
mov x23 LL0x4000829be8;
mov x24 LL0x4000829bf0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829e58; PC = 0x274877984712 *)
mov LL0x4000829e58 x11;
mov LL0x4000829e60 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e88; Value = 0x7bded4d7a728df9d; PC = 0x274877984720 *)
mov x11 LL0x4000829e88;
mov x12 LL0x4000829e90;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829bf8; Value = 0x5fe26534850ac206; PC = 0x274877984728 *)
mov x19 LL0x4000829bf8;
mov x20 LL0x4000829c00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e68; PC = 0x274877984732 *)
mov LL0x4000829e68 x13;
mov LL0x4000829e70 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e98; Value = 0x6a41c58b42e3afcd; PC = 0x274877984736 *)
mov x13 LL0x4000829e98;
mov x14 LL0x4000829ea0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c08; Value = 0x1681664ed2569f1a; PC = 0x274877984740 *)
mov x21 LL0x4000829c08;
mov x22 LL0x4000829c10;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e78; PC = 0x274877984748 *)
mov LL0x4000829e78 x15;
mov LL0x4000829e80 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829ea8; Value = 0x08e8200341dd31dd; PC = 0x274877984756 *)
mov x15 LL0x4000829ea8;
mov x16 LL0x4000829eb0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c18; Value = 0x4b1ba6f6434b7cd5; PC = 0x274877984764 *)
mov x23 LL0x4000829c18;
mov x24 LL0x4000829c20;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e88; PC = 0x274877984828 *)
mov LL0x4000829e88 x11;
mov LL0x4000829e90 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e98; PC = 0x274877984836 *)
mov LL0x4000829e98 x13;
mov LL0x4000829ea0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829ea8; PC = 0x274877984840 *)
mov LL0x4000829ea8 x15;
mov LL0x4000829eb0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x002d00400000aae4; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* mov	x3, x19                                     #! PC = 0x274877950692 *)
mov x3 x19;
(* ldr	x2, [sp, #120]                              #! EA = L0x4000829a08; Value = 0x0000004000829c28; PC = 0x274877950696 *)
mov x2 LL0x4000829a08;
(* mov	x1, x26                                     #! PC = 0x274877950700 *)
mov x1 x26;
(* mov	x0, x26                                     #! PC = 0x274877950704 *)
mov x0 x26;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950708 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950708 = 0x274877950708;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829eb8; Value = 0xb45fa262003ff000; PC = 0x274877984672 *)
mov x11 LL0x4000829eb8;
mov x12 LL0x4000829ec0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c28; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 LL0x4000829c28;
mov x20 LL0x4000829c30;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829ec8; Value = 0x3775de88bb140010; PC = 0x274877984680 *)
mov x13 LL0x4000829ec8;
mov x14 LL0x4000829ed0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c38; Value = 0x0000000000000000; PC = 0x274877984688 *)
mov x21 LL0x4000829c38;
mov x22 LL0x4000829c40;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ed8; Value = 0xf9d2e415095291a8; PC = 0x274877984696 *)
mov x15 LL0x4000829ed8;
mov x16 LL0x4000829ee0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829c48; Value = 0xa5b75f691182b810; PC = 0x274877984704 *)
mov x23 LL0x4000829c48;
mov x24 LL0x4000829c50;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829eb8; PC = 0x274877984712 *)
mov LL0x4000829eb8 x11;
mov LL0x4000829ec0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829ee8; Value = 0xa0915bef5d6a3204; PC = 0x274877984720 *)
mov x11 LL0x4000829ee8;
mov x12 LL0x4000829ef0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829c58; Value = 0x30e97a4437e7fa80; PC = 0x274877984728 *)
mov x19 LL0x4000829c58;
mov x20 LL0x4000829c60;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829ec8; PC = 0x274877984732 *)
mov LL0x4000829ec8 x13;
mov LL0x4000829ed0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ef8; Value = 0xe9d38232e814e599; PC = 0x274877984736 *)
mov x13 LL0x4000829ef8;
mov x14 LL0x4000829f00;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c68; Value = 0x2aca32e21865e811; PC = 0x274877984740 *)
mov x21 LL0x4000829c68;
mov x22 LL0x4000829c70;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ed8; PC = 0x274877984748 *)
mov LL0x4000829ed8 x15;
mov LL0x4000829ee0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f08; Value = 0x933a18f43a88634c; PC = 0x274877984756 *)
mov x15 LL0x4000829f08;
mov x16 LL0x4000829f10;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c78; Value = 0x0000000000003000; PC = 0x274877984764 *)
mov x23 LL0x4000829c78;
mov x24 LL0x4000829c80;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877984828 *)
mov LL0x4000829ee8 x11;
mov LL0x4000829ef0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877984836 *)
mov LL0x4000829ef8 x13;
mov LL0x4000829f00 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877984840 *)
mov LL0x4000829f08 x15;
mov LL0x4000829f10 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x006f00400000aaf8; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829df8; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

(* sub_fp2x2(ret[1], ret[1], t1) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
                   limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                             LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                             LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                             LL0x4000829c10, LL0x4000829c18, LL0x4000829c20])
                  (limbs 64 [LL0x4000829e58r, LL0x4000829e60r, LL0x4000829e68r,
                             LL0x4000829e70r, LL0x4000829e78r, LL0x4000829e80r,
                             LL0x4000829e88r, LL0x4000829e90r, LL0x4000829e98r,
                             LL0x4000829ea0r, LL0x4000829ea8r, LL0x4000829eb0r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
                   limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                             LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                             LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                             LL0x4000829c70, LL0x4000829c78, LL0x4000829c80])
                  (limbs 64 [LL0x4000829eb8r, LL0x4000829ec0r, LL0x4000829ec8r,
                             LL0x4000829ed0r, LL0x4000829ed8r, LL0x4000829ee0r,
                             LL0x4000829ee8r, LL0x4000829ef0r, LL0x4000829ef8r,
                             LL0x4000829f00r, LL0x4000829f08r, LL0x4000829f10r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod (limbs 64 [LL0x4000829e58, LL0x4000829e60, LL0x4000829e68,
                             LL0x4000829e70, LL0x4000829e78, LL0x4000829e80,
                             LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                             LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] +
                   limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                             LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                             LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                             LL0x4000829c10, LL0x4000829c18, LL0x4000829c20])
                  (limbs 64 [LL0x4000829e58r, LL0x4000829e60r, LL0x4000829e68r,
                             LL0x4000829e70r, LL0x4000829e78r, LL0x4000829e80r,
                             LL0x4000829e88r, LL0x4000829e90r, LL0x4000829e98r,
                             LL0x4000829ea0r, LL0x4000829ea8r, LL0x4000829eb0r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829eb8, LL0x4000829ec0, LL0x4000829ec8,
                             LL0x4000829ed0, LL0x4000829ed8, LL0x4000829ee0,
                             LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                             LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] +
                   limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                             LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                             LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                             LL0x4000829c70, LL0x4000829c78, LL0x4000829c80])
                  (limbs 64 [LL0x4000829eb8r, LL0x4000829ec0r, LL0x4000829ec8r,
                             LL0x4000829ed0r, LL0x4000829ed8r, LL0x4000829ee0r,
                             LL0x4000829ee8r, LL0x4000829ef0r, LL0x4000829ef8r,
                             LL0x4000829f00r, LL0x4000829f08r, LL0x4000829f10r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;


(* add	x21, x20, #0x180                            #! PC = 0x274877950712 *)
adds dontcare x21 x20 0x180@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950716 *)
mov x3 x19;
(* ldr	x2, [sp, #96]                               #! EA = L0x40008299f0; Value = 0x0000004000829ce8; PC = 0x274877950720 *)
mov x2 LL0x40008299f0;
(* mov	x1, x23                                     #! PC = 0x274877950724 *)
mov x1 x23;
(* mov	x0, x21                                     #! PC = 0x274877950728 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950732 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950732 = 0x274877950732;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

rcut and [limbs 64 [LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                    LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c88; Value = 0xbf7e5d09780cb200; PC = 0x274877984672 *)
mov x11 LL0x4000829c88;
mov x12 LL0x4000829c90;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ce8; Value = 0xc73bbcb7f54de580; PC = 0x274877984676 *)
mov x19 LL0x4000829ce8;
mov x20 LL0x4000829cf0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c98; Value = 0x5ce62a1ce1098e3f; PC = 0x274877984680 *)
mov x13 LL0x4000829c98;
mov x14 LL0x4000829ca0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829cf8; Value = 0x293deebfffea2401; PC = 0x274877984688 *)
mov x21 LL0x4000829cf8;
mov x22 LL0x4000829d00;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ca8; Value = 0x9e46be45859c8f1f; PC = 0x274877984696 *)
mov x15 LL0x4000829ca8;
mov x16 LL0x4000829cb0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829d08; Value = 0xf05ac0a9b838b7e1; PC = 0x274877984704 *)
mov x23 LL0x4000829d08;
mov x24 LL0x4000829d10;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f18; PC = 0x274877984712 *)
mov LL0x4000829f18 x11;
mov LL0x4000829f20 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829cb8; Value = 0x9923a6debee0eac0; PC = 0x274877984720 *)
mov x11 LL0x4000829cb8;
mov x12 LL0x4000829cc0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829d18; Value = 0x2941fad56ff9c9f1; PC = 0x274877984728 *)
mov x19 LL0x4000829d18;
mov x20 LL0x4000829d20;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f28; PC = 0x274877984732 *)
mov LL0x4000829f28 x13;
mov LL0x4000829f30 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829cc8; Value = 0xa8efc16e4f1da713; PC = 0x274877984736 *)
mov x13 LL0x4000829cc8;
mov x14 LL0x4000829cd0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829d28; Value = 0xc6bfe47aaf5d5198; PC = 0x274877984740 *)
mov x21 LL0x4000829d28;
mov x22 LL0x4000829d30;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f38; PC = 0x274877984748 *)
mov LL0x4000829f38 x15;
mov LL0x4000829f40 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829cd8; Value = 0x4b1ba77642c5c25f; PC = 0x274877984756 *)
mov x15 LL0x4000829cd8;
mov x16 LL0x4000829ce0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829d38; Value = 0x00000040008303a0; PC = 0x274877984764 *)
mov x23 LL0x4000829d38;
mov x24 LL0x4000829d40;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829f48; PC = 0x274877984828 *)
mov LL0x4000829f48 x11;
mov LL0x4000829f50 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829f58; PC = 0x274877984836 *)
mov LL0x4000829f58 x13;
mov LL0x4000829f60 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f68; PC = 0x274877984840 *)
mov LL0x4000829f68 x15;
mov LL0x4000829f70 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000800400000ab10; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x20, x20, #0x1e0                            #! PC = 0x274877950736 *)
adds dontcare x20 x20 0x1e0@uint64;
(* mov	x3, x19                                     #! PC = 0x274877950740 *)
mov x3 x19;
(* ldr	x2, [sp, #96]                               #! EA = L0x40008299f0; Value = 0x0000004000829ce8; PC = 0x274877950744 *)
mov x2 LL0x40008299f0;
(* mov	x1, x23                                     #! PC = 0x274877950748 *)
mov x1 x23;
(* mov	x0, x20                                     #! PC = 0x274877950752 *)
mov x0 x20;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950756 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950756 = 0x274877950756;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c88; Value = 0xbf7e5d09780cb200; PC = 0x274877984384 *)
mov x11 LL0x4000829c88;
mov x12 LL0x4000829c90;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ce8; Value = 0xc73bbcb7f54de580; PC = 0x274877984388 *)
mov x19 LL0x4000829ce8;
mov x20 LL0x4000829cf0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c98; Value = 0x5ce62a1ce1098e3f; PC = 0x274877984392 *)
mov x13 LL0x4000829c98;
mov x14 LL0x4000829ca0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829cf8; Value = 0x293deebfffea2401; PC = 0x274877984400 *)
mov x21 LL0x4000829cf8;
mov x22 LL0x4000829d00;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ca8; Value = 0x9e46be45859c8f1f; PC = 0x274877984408 *)
mov x15 LL0x4000829ca8;
mov x16 LL0x4000829cb0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829d08; Value = 0xf05ac0a9b838b7e1; PC = 0x274877984416 *)
mov x23 LL0x4000829d08;
mov x24 LL0x4000829d10;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f78; PC = 0x274877984424 *)
mov LL0x4000829f78 x11;
mov LL0x4000829f80 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829cb8; Value = 0x9923a6debee0eac0; PC = 0x274877984432 *)
mov x11 LL0x4000829cb8;
mov x12 LL0x4000829cc0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829d18; Value = 0x2941fad56ff9c9f1; PC = 0x274877984440 *)
mov x19 LL0x4000829d18;
mov x20 LL0x4000829d20;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f88; PC = 0x274877984444 *)
mov LL0x4000829f88 x13;
mov LL0x4000829f90 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829cc8; Value = 0xa8efc16e4f1da713; PC = 0x274877984448 *)
mov x13 LL0x4000829cc8;
mov x14 LL0x4000829cd0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829d28; Value = 0xc6bfe47aaf5d5198; PC = 0x274877984452 *)
mov x21 LL0x4000829d28;
mov x22 LL0x4000829d30;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f98; PC = 0x274877984460 *)
mov LL0x4000829f98 x15;
mov LL0x4000829fa0 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829cd8; Value = 0x4b1ba77642c5c25f; PC = 0x274877984468 *)
mov x15 LL0x4000829cd8;
mov x16 LL0x4000829ce0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829d38; Value = 0x00000040008303a0; PC = 0x274877984476 *)
mov x23 LL0x4000829d38;
mov x24 LL0x4000829d40;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877984540 *)
mov LL0x4000829fa8 x11;
mov LL0x4000829fb0 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877984548 *)
mov LL0x4000829fb8 x13;
mov LL0x4000829fc0 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877984556 *)
mov LL0x4000829fc8 x15;
mov LL0x4000829fd0 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x004200400000ab28; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

(* mul_by_u_plus_1_fp2x2(ret[2], t2) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                              LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                              LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                              LL0x4000829d30, LL0x4000829d38, LL0x4000829d40])
                  (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                             LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                             LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                             LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0])
                  (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                             LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                             LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                             LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] +
                   limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                             LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                             LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                             LL0x4000829d30, LL0x4000829d38, LL0x4000829d40])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                              LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                              LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                              LL0x4000829d30, LL0x4000829d38, LL0x4000829d40])
                  (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                             LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                             LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                             LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0])
                  (limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                             LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                             LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                             LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] +
                   limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                             LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                             LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                             LL0x4000829d30, LL0x4000829d38, LL0x4000829d40])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877950760 *)
mov x3 x19;
(* mov	x2, x21                                     #! PC = 0x274877950764 *)
mov x2 x21;
(* mov	x1, x22                                     #! PC = 0x274877950768 *)
mov x1 x22;
(* mov	x0, x22                                     #! PC = 0x274877950772 *)
mov x0 x22;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950776 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950776 = 0x274877950776;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;

rcut and [limbs 64 [LL0x4000829e88, LL0x4000829e90, LL0x4000829e98,
                    LL0x4000829ea0, LL0x4000829ea8, LL0x4000829eb0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829ee8, LL0x4000829ef0, LL0x4000829ef8,
                    LL0x4000829f00, LL0x4000829f08, LL0x4000829f10] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                    LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829e58s LL0x4000829e58; mov LL0x4000829e60s LL0x4000829e60;
mov LL0x4000829e68s LL0x4000829e68; mov LL0x4000829e70s LL0x4000829e70;
mov LL0x4000829e78s LL0x4000829e78; mov LL0x4000829e80s LL0x4000829e80;
mov LL0x4000829e88s LL0x4000829e88; mov LL0x4000829e90s LL0x4000829e90;
mov LL0x4000829e98s LL0x4000829e98; mov LL0x4000829ea0s LL0x4000829ea0;
mov LL0x4000829ea8s LL0x4000829ea8; mov LL0x4000829eb0s LL0x4000829eb0;
mov LL0x4000829eb8s LL0x4000829eb8; mov LL0x4000829ec0s LL0x4000829ec0;
mov LL0x4000829ec8s LL0x4000829ec8; mov LL0x4000829ed0s LL0x4000829ed0;
mov LL0x4000829ed8s LL0x4000829ed8; mov LL0x4000829ee0s LL0x4000829ee0;
mov LL0x4000829ee8s LL0x4000829ee8; mov LL0x4000829ef0s LL0x4000829ef0;
mov LL0x4000829ef8s LL0x4000829ef8; mov LL0x4000829f00s LL0x4000829f00;
mov LL0x4000829f08s LL0x4000829f08; mov LL0x4000829f10s LL0x4000829f10;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829e58; Value = 0x7a252206d4e60000; PC = 0x274877984384 *)
mov x11 LL0x4000829e58;
mov x12 LL0x4000829e60;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829f18; Value = 0xf842a05182becc80; PC = 0x274877984388 *)
mov x19 LL0x4000829f18;
mov x20 LL0x4000829f20;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829e68; Value = 0x0f78dc225adf05cc; PC = 0x274877984392 *)
mov x13 LL0x4000829e68;
mov x14 LL0x4000829e70;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829f28; Value = 0x33a83b5ce11f6a3e; PC = 0x274877984400 *)
mov x21 LL0x4000829f28;
mov x22 LL0x4000829f30;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829e78; Value = 0x5c34671b440e08ad; PC = 0x274877984408 *)
mov x15 LL0x4000829e78;
mov x16 LL0x4000829e80;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829f38; Value = 0xadebfd9bcd63d73e; PC = 0x274877984416 *)
mov x23 LL0x4000829f38;
mov x24 LL0x4000829f40;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829e58; PC = 0x274877984424 *)
mov ret20 x11;
mov ret21 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829e88; Value = 0xd5fb6fa3221dc841; PC = 0x274877984432 *)
mov x11 LL0x4000829e88;
mov x12 LL0x4000829e90;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829f48; Value = 0x6fe1ac094ee720ce; PC = 0x274877984440 *)
mov x19 LL0x4000829f48;
mov x20 LL0x4000829f50;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829e68; PC = 0x274877984444 *)
mov ret22 x13;
mov ret23 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829e98; Value = 0xbaf131dd673e06d7; PC = 0x274877984448 *)
mov x13 LL0x4000829e98;
mov x14 LL0x4000829ea0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829f58; Value = 0xe22fdcf39fc0557a; PC = 0x274877984452 *)
mov x21 LL0x4000829f58;
mov x22 LL0x4000829f60;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829e78; PC = 0x274877984460 *)
mov ret24 x15;
mov ret25 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829ea8; Value = 0x08e820c341dd61e0; PC = 0x274877984468 *)
mov x15 LL0x4000829ea8;
mov x16 LL0x4000829eb0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829f68; Value = 0x4b1ba7364242bebe; PC = 0x274877984476 *)
mov x23 LL0x4000829f68;
mov x24 LL0x4000829f70;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829e88; PC = 0x274877984540 *)
mov ret26 x11;
mov ret27 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829e98; PC = 0x274877984548 *)
mov ret28 x13;
mov ret29 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829ea8; PC = 0x274877984556 *)
mov ret2a x15;
mov ret2b x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x005100400000ab3c; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* mov	x3, x19                                     #! PC = 0x274877950780 *)
mov x3 x19;
(* mov	x2, x20                                     #! PC = 0x274877950784 *)
mov x2 x20;
(* mov	x1, x26                                     #! PC = 0x274877950788 *)
mov x1 x26;
(* mov	x0, x26                                     #! PC = 0x274877950792 *)
mov x0 x26;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950796 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950796 = 0x274877950796;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829eb8; Value = 0xb45fa262003ff000; PC = 0x274877984384 *)
mov x11 LL0x4000829eb8;
mov x12 LL0x4000829ec0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829f78; Value = 0x86ba19c16d5a9780; PC = 0x274877984388 *)
mov x19 LL0x4000829f78;
mov x20 LL0x4000829f80;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829ec8; Value = 0x3775de88bb140010; PC = 0x274877984392 *)
mov x13 LL0x4000829ec8;
mov x14 LL0x4000829ed0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829f88; Value = 0x862418dce0f3b240; PC = 0x274877984400 *)
mov x21 LL0x4000829f88;
mov x22 LL0x4000829f90;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ed8; Value = 0x541b84abf7cfd998; PC = 0x274877984408 *)
mov x15 LL0x4000829ed8;
mov x16 LL0x4000829ee0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829f98; Value = 0x8ea17eef3dd54701; PC = 0x274877984416 *)
mov x23 LL0x4000829f98;
mov x24 LL0x4000829fa0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829eb8; PC = 0x274877984424 *)
mov ret30 x11;
mov ret31 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829ee8; Value = 0x6fa7e1ab25823783; PC = 0x274877984432 *)
mov x11 LL0x4000829ee8;
mov x12 LL0x4000829ef0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829fa8; Value = 0xc265a1b42edab4b2; PC = 0x274877984440 *)
mov x19 LL0x4000829fa8;
mov x20 LL0x4000829fb0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829ec8; PC = 0x274877984444 *)
mov ret32 x13;
mov ret33 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829ef8; Value = 0xbf094f50cfaefd88; PC = 0x274877984448 *)
mov x13 LL0x4000829ef8;
mov x14 LL0x4000829f00;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829fb8; Value = 0x6fafa5e8fe7af8ac; PC = 0x274877984452 *)
mov x21 LL0x4000829fb8;
mov x22 LL0x4000829fc0;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829ed8; PC = 0x274877984460 *)
mov ret34 x15;
mov ret35 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f08; Value = 0x933a18f43a88334c; PC = 0x274877984468 *)
mov x15 LL0x4000829f08;
mov x16 LL0x4000829f10;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829fc8; Value = 0x4b1ba7b64348c5ff; PC = 0x274877984476 *)
mov x23 LL0x4000829fc8;
mov x24 LL0x4000829fd0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829ee8; PC = 0x274877984540 *)
mov ret36 x11;
mov ret37 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829ef8; PC = 0x274877984548 *)
mov ret38 x13;
mov ret39 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f08; PC = 0x274877984556 *)
mov ret3a x15;
mov ret3b x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x003800400000ab50; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

(* add_fp2x2(ret[1], ret[1], ret[2]) *)

assert true
    && and [eqmod (limbs 64 [ret20, ret21, ret22, ret23, ret24, ret25,
                             ret26, ret27, ret28, ret29, ret2a, ret2b])
                  (limbs 64 [LL0x4000829e58s, LL0x4000829e60s, LL0x4000829e68s,
                             LL0x4000829e70s, LL0x4000829e78s, LL0x4000829e80s,
                             LL0x4000829e88s, LL0x4000829e90s, LL0x4000829e98s,
                             LL0x4000829ea0s, LL0x4000829ea8s, LL0x4000829eb0s] +
                   limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [ret30, ret31, ret32, ret33, ret34, ret35,
                             ret36, ret37, ret38, ret39, ret3a, ret3b])
                  (limbs 64 [LL0x4000829eb8s, LL0x4000829ec0s, LL0x4000829ec8s,
                             LL0x4000829ed0s, LL0x4000829ed8s, LL0x4000829ee0s,
                             LL0x4000829ee8s, LL0x4000829ef0s, LL0x4000829ef8s,
                             LL0x4000829f00s, LL0x4000829f08s, LL0x4000829f10s] +
                   limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod (limbs 64 [ret20, ret21, ret22, ret23, ret24, ret25,
                             ret26, ret27, ret28, ret29, ret2a, ret2b])
                  (limbs 64 [LL0x4000829e58s, LL0x4000829e60s, LL0x4000829e68s,
                             LL0x4000829e70s, LL0x4000829e78s, LL0x4000829e80s,
                             LL0x4000829e88s, LL0x4000829e90s, LL0x4000829e98s,
                             LL0x4000829ea0s, LL0x4000829ea8s, LL0x4000829eb0s] +
                   limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [ret30, ret31, ret32, ret33, ret34, ret35,
                             ret36, ret37, ret38, ret39, ret3a, ret3b])
                  (limbs 64 [LL0x4000829eb8s, LL0x4000829ec0s, LL0x4000829ec8s,
                             LL0x4000829ed0s, LL0x4000829ed8s, LL0x4000829ee0s,
                             LL0x4000829ee8s, LL0x4000829ef0s, LL0x4000829ef8s,
                             LL0x4000829f00s, LL0x4000829f08s, LL0x4000829f10s] +
                   limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* ret[1] = (a0 + a1)*(b0 + b1) - a0*b0 - a1*b1 + a2*b2*(u+1)
          = a0*b1 + a1*b0 + a2*b2*(u+1) *)
(*
ecut and [eqmod (limbs 64 [LL0x4000829a48r1, LL0x4000829a50r1, LL0x4000829a58r1,
                           LL0x4000829a60r1, LL0x4000829a68r1, LL0x4000829a70r1] +
                 limbs 64 [LL0x4000829a78r1, LL0x4000829a80r1, LL0x4000829a88r1,
                           LL0x4000829a90r1, LL0x4000829a98r1, LL0x4000829aa0r1] * U)
                (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                 limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U)
                [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
          eqmod (limbs 64 [LL0x4000829aa8r1, LL0x4000829ab0r1, LL0x4000829ab8r1,
                           LL0x4000829ac0r1, LL0x4000829ac8r1, LL0x4000829ad0r1] +
                 limbs 64 [LL0x4000829ad8r1, LL0x4000829ae0r1, LL0x4000829ae8r1,
                           LL0x4000829af0r1, LL0x4000829af8r1, LL0x4000829b00r1] * U)
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                 limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U)
                [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
          eqmod (limbs 64 [ret20, ret21, ret22, ret23, ret24, ret25,
                           ret26, ret27, ret28, ret29, ret2a, ret2b] +
                 limbs 64 [ret30, ret31, ret32, ret33, ret34, ret35,
                           ret36, ret37, ret38, ret39, ret3a, ret3b] * U)
                ((limbs 64 [LL0x4000829a48r1, LL0x4000829a50r1, LL0x4000829a58r1,
                            LL0x4000829a60r1, LL0x4000829a68r1, LL0x4000829a70r1] +
                  limbs 64 [LL0x4000829a78r1, LL0x4000829a80r1, LL0x4000829a88r1,
                            LL0x4000829a90r1, LL0x4000829a98r1, LL0x4000829aa0r1] * U) *
                 (limbs 64 [LL0x4000829aa8r1, LL0x4000829ab0r1, LL0x4000829ab8r1,
                            LL0x4000829ac0r1, LL0x4000829ac8r1, LL0x4000829ad0r1] +
                  limbs 64 [LL0x4000829ad8r1, LL0x4000829ae0r1, LL0x4000829ae8r1,
                            LL0x4000829af0r1, LL0x4000829af8r1, LL0x4000829b00r1] * U) -
                 (limbs 64 [a00, a01, a02, a03, a04, a05] +
                  limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                 (limbs 64 [b00, b01, b02, b03, b04, b05] +
                  limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
                 (limbs 64 [a20, a21, a22, a23, a24, a25] +
                  limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                 (limbs 64 [b20, b21, b22, b23, b24, b25] +
                  limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
                 (limbs 64 [a40, a41, a42, a43, a44, a45] +
                  limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                 (limbs 64 [b40, b41, b42, b43, b44, b45] +
                  limbs 64 [b50, b51, b52, b53, b54, b55] * U) *
                 (U + 1))
           [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
            U * U + 1]] prove with precondition;
*)

rcut and [limbs 64 [ret26, ret27, ret28, ret29, ret2a, ret2b] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [ret36, ret37, ret38, ret39, ret3a, ret3b] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [a00, a01, a02, a03, a04, a05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a10, a11, a12, a13, a14, a15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a40, a41, a42, a43, a44, a45] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a50, a51, a52, a53, a54, a55] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b00, b01, b02, b03, b04, b05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b10, b11, b12, b13, b14, b15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b40, b41, b42, b43, b44, b45] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b50, b51, b52, b53, b54, b55] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* mov	x3, x19                                     #! PC = 0x274877950800 *)
mov x3 x19;
(* ldr	x2, [sp, #152]                              #! EA = L0x4000829a28; Value = 0x000000400082a108; PC = 0x274877950804 *)
mov x2 LL0x4000829a28;
(* ldr	x1, [sp, #104]                              #! EA = L0x40008299f8; Value = 0x000000400082a048; PC = 0x274877950808 *)
mov x1 LL0x40008299f8;
(* mov	x0, x24                                     #! PC = 0x274877950812 *)
mov x0 x24;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877950816 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877950816 = 0x274877950816;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829960; PC = 0x274877979620 *)
mov LL0x4000829960 x29;
mov LL0x4000829968 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829970; PC = 0x274877979628 *)
mov LL0x4000829970 x19;
mov LL0x4000829978 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829980; PC = 0x274877979632 *)
mov LL0x4000829980 x21;
mov LL0x4000829988 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 LL0x4000016928;
mov x5 LL0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 LL0x4000016938;
mov x7 LL0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 LL0x4000016948;
mov x9 LL0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a048; Value = 0x0000004000841d60; PC = 0x274877979488 *)
mov x10 LL0x400082a048;
mov x11 LL0x400082a050;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a108; Value = 0x000000400085ea78; PC = 0x274877979492 *)
mov x16 LL0x400082a108;
mov x17 LL0x400082a110;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a058; Value = 0x000000400085d6d8; PC = 0x274877979496 *)
mov x12 LL0x400082a058;
mov x13 LL0x400082a060;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a118; Value = 0x0000004000841d2c; PC = 0x274877979500 *)
mov x19 LL0x400082a118;
mov x20 LL0x400082a120;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a068; Value = 0x0000004000000040; PC = 0x274877979504 *)
mov x14 LL0x400082a068;
mov x15 LL0x400082a070;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a128; Value = 0x000000400085d000; PC = 0x274877979508 *)
mov x21 LL0x400082a128;
mov x22 LL0x400082a130;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829a48; PC = 0x274877979652 *)
mov LL0x4000829a48 x10;
mov LL0x4000829a50 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829a58; PC = 0x274877979660 *)
mov LL0x4000829a58 x12;
mov LL0x4000829a60 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829a68; PC = 0x274877979668 *)
mov LL0x4000829a68 x14;
mov LL0x4000829a70 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a078; Value = 0x000000400085de20; PC = 0x274877979488 *)
mov x10 LL0x400082a078;
mov x11 LL0x400082a080;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a138; Value = 0x000000400082ae28; PC = 0x274877979492 *)
mov x16 LL0x400082a138;
mov x17 LL0x400082a140;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a088; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 LL0x400082a088;
mov x13 LL0x400082a090;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a148; Value = 0x000000400082da1c; PC = 0x274877979500 *)
mov x19 LL0x400082a148;
mov x20 LL0x400082a150;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a098; Value = 0x000000400082c000; PC = 0x274877979504 *)
mov x14 LL0x400082a098;
mov x15 LL0x400082a0a0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a158; Value = 0x000000400082ad60; PC = 0x274877979508 *)
mov x21 LL0x400082a158;
mov x22 LL0x400082a160;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829968; Value = 0x003400400000ab64; PC = 0x274877979676 *)
mov x30 LL0x4000829968;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829a78; PC = 0x274877979680 *)
mov LL0x4000829a78 x10;
mov LL0x4000829a80 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829a88; PC = 0x274877979684 *)
mov LL0x4000829a88 x12;
mov LL0x4000829a90 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829a98; PC = 0x274877979688 *)
mov LL0x4000829a98 x14;
mov LL0x4000829aa0 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829970; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 LL0x4000829970;
mov x20 LL0x4000829978;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829980; Value = 0x0000004000829f18; PC = 0x274877979696 *)
mov x21 LL0x4000829980;
mov x22 LL0x4000829988;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829960; Value = 0x0000004000829990; PC = 0x274877979700 *)
mov x29 LL0x4000829960;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* mov	x3, x19                                     #! PC = 0x274877950820 *)
mov x3 x19;
(* ldr	x2, [sp, #160]                              #! EA = L0x4000829a30; Value = 0x000000400082a228; PC = 0x274877950824 *)
mov x2 LL0x4000829a30;
(* ldr	x1, [sp, #112]                              #! EA = L0x4000829a00; Value = 0x000000400082a168; PC = 0x274877950828 *)
mov x1 LL0x4000829a00;
(* mov	x0, x25                                     #! PC = 0x274877950832 *)
mov x0 x25;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877950836 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877950836 = 0x274877950836;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829960; PC = 0x274877979620 *)
mov LL0x4000829960 x29;
mov LL0x4000829968 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829970; PC = 0x274877979628 *)
mov LL0x4000829970 x19;
mov LL0x4000829978 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829980; PC = 0x274877979632 *)
mov LL0x4000829980 x21;
mov LL0x4000829988 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 LL0x4000016928;
mov x5 LL0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 LL0x4000016938;
mov x7 LL0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 LL0x4000016948;
mov x9 LL0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a168; Value = 0xb9ff00400083c80b; PC = 0x274877979488 *)
mov x10 LL0x400082a168;
mov x11 LL0x400082a170;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a228; Value = 0x000000400085ea78; PC = 0x274877979492 *)
mov x16 LL0x400082a228;
mov x17 LL0x400082a230;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a178; Value = 0x6730d2e0f738100c; PC = 0x274877979496 *)
mov x12 LL0x400082a178;
mov x13 LL0x400082a180;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a238; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 LL0x400082a238;
mov x20 LL0x400082a240;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a188; Value = 0x4b1ba7f6434ecfb7; PC = 0x274877979504 *)
mov x14 LL0x400082a188;
mov x15 LL0x400082a190;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a248; Value = 0x0000004000841c68; PC = 0x274877979508 *)
mov x21 LL0x400082a248;
mov x22 LL0x400082a250;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829aa8; PC = 0x274877979652 *)
mov LL0x4000829aa8 x10;
mov LL0x4000829ab0 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829ab8; PC = 0x274877979660 *)
mov LL0x4000829ab8 x12;
mov LL0x4000829ac0 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829ac8; PC = 0x274877979668 *)
mov LL0x4000829ac8 x14;
mov LL0x4000829ad0 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a198; Value = 0x000000400085de20; PC = 0x274877979488 *)
mov x10 LL0x400082a198;
mov x11 LL0x400082a1a0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a258; Value = 0x0000008001087e28; PC = 0x274877979492 *)
mov x16 LL0x400082a258;
mov x17 LL0x400082a260;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a1a8; Value = 0x000000800106f748; PC = 0x274877979496 *)
mov x12 LL0x400082a1a8;
mov x13 LL0x400082a1b0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a268; Value = 0x0000004000000040; PC = 0x274877979500 *)
mov x19 LL0x400082a268;
mov x20 LL0x400082a270;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a1b8; Value = 0x000000c0018b3d60; PC = 0x274877979504 *)
mov x14 LL0x400082a1b8;
mov x15 LL0x400082a1c0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a278; Value = 0x000000400085d000; PC = 0x274877979508 *)
mov x21 LL0x400082a278;
mov x22 LL0x400082a280;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829968; Value = 0x003000400000ab78; PC = 0x274877979676 *)
mov x30 LL0x4000829968;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829ad8; PC = 0x274877979680 *)
mov LL0x4000829ad8 x10;
mov LL0x4000829ae0 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829ae8; PC = 0x274877979684 *)
mov LL0x4000829ae8 x12;
mov LL0x4000829af0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829af8; PC = 0x274877979688 *)
mov LL0x4000829af8 x14;
mov LL0x4000829b00 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829970; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 LL0x4000829970;
mov x20 LL0x4000829978;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829980; Value = 0x0000004000829f18; PC = 0x274877979696 *)
mov x21 LL0x4000829980;
mov x22 LL0x4000829988;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829960; Value = 0x0000004000829990; PC = 0x274877979700 *)
mov x29 LL0x4000829960;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;

(* add_fp2(aa, a[0], a[2]) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70])
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a40, a41, a42, a43, a44, a45])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0])
                  (limbs 64 [a10, a11, a12, a13, a14, a15] +
                   limbs 64 [a50, a51, a52, a53, a54, a55])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70])
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a40, a41, a42, a43, a44, a45])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0])
                  (limbs 64 [a10, a11, a12, a13, a14, a15] +
                   limbs 64 [a50, a51, a52, a53, a54, a55])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])]
    && true;

(* add_fp2(bb, b[0], b[2]) *)

assert true
    && and [eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0])
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b40, b41, b42, b43, b44, b45])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00])
                  (limbs 64 [b10, b11, b12, b13, b14, b15] +
                   limbs 64 [b50, b51, b52, b53, b54, b55])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0])
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b40, b41, b42, b43, b44, b45])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00])
                  (limbs 64 [b10, b11, b12, b13, b14, b15] +
                   limbs 64 [b50, b51, b52, b53, b54, b55])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])]
    && true;

(* NOTE: save old values *)
mov LL0x4000829a48r2 LL0x4000829a48; mov LL0x4000829a50r2 LL0x4000829a50;
mov LL0x4000829a58r2 LL0x4000829a58; mov LL0x4000829a60r2 LL0x4000829a60;
mov LL0x4000829a68r2 LL0x4000829a68; mov LL0x4000829a70r2 LL0x4000829a70;
mov LL0x4000829a78r2 LL0x4000829a78; mov LL0x4000829a80r2 LL0x4000829a80;
mov LL0x4000829a88r2 LL0x4000829a88; mov LL0x4000829a90r2 LL0x4000829a90;
mov LL0x4000829a98r2 LL0x4000829a98; mov LL0x4000829aa0r2 LL0x4000829aa0;
mov LL0x4000829aa8r2 LL0x4000829aa8; mov LL0x4000829ab0r2 LL0x4000829ab0;
mov LL0x4000829ab8r2 LL0x4000829ab8; mov LL0x4000829ac0r2 LL0x4000829ac0;
mov LL0x4000829ac8r2 LL0x4000829ac8; mov LL0x4000829ad0r2 LL0x4000829ad0;
mov LL0x4000829ad8r2 LL0x4000829ad8; mov LL0x4000829ae0r2 LL0x4000829ae0;
mov LL0x4000829ae8r2 LL0x4000829ae8; mov LL0x4000829af0r2 LL0x4000829af0;
mov LL0x4000829af8r2 LL0x4000829af8; mov LL0x4000829b00r2 LL0x4000829b00;

(* mov	x2, x25                                     #! PC = 0x274877950840 *)
mov x2 x25;
(* mov	x1, x24                                     #! PC = 0x274877950844 *)
mov x1 x24;
(* mov	x0, x21                                     #! PC = 0x274877950848 *)
mov x0 x21;
(* #bl	0x4000008b3c <mul_fp2x2>                    #! PC = 0x274877950852 *)
#bl	0x4000008b3c <mul_fp2x2>                    #! 0x274877950852 = 0x274877950852;
(* stp	x29, x30, [sp, #-16]!                       #! EA = L0x4000829980; PC = 0x274877942588 *)
mov LL0x4000829980 x29;
mov LL0x4000829988 x30;
(* mov	x29, sp                                     #! PC = 0x274877942592 *)
mov x29 sp;
(* #adrp	x3, 0x4000029000                           #! PC = 0x274877942596 *)
#adrp	%%x3, 0x4000029000                           #! 0x274877942596 = 0x274877942596;
(* ldr	x3, [x3, #4056]                             #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877942600 *)
mov x3 LL0x4000029fd8;
(* #bl	0x40000143c0 <mul_382x>                     #! PC = 0x274877942604 *)
#bl	0x40000143c0 <mul_382x>                     #! 0x274877942604 = 0x274877942604;
(* #paciasp                                         #! PC = 0x274877989824 *)
#paciasp                                         #! 0x274877989824 = 0x274877989824;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829900; PC = 0x274877989828 *)
mov LL0x4000829900 x29;
mov LL0x4000829908 x30;
(* mov	x29, sp                                     #! PC = 0x274877989832 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829910; PC = 0x274877989836 *)
mov LL0x4000829910 x19;
mov LL0x4000829918 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829920; PC = 0x274877989840 *)
mov LL0x4000829920 x21;
mov LL0x4000829928 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829930; PC = 0x274877989844 *)
mov LL0x4000829930 x23;
mov LL0x4000829938 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829940; PC = 0x274877989848 *)
mov LL0x4000829940 x25;
mov LL0x4000829948 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829950; PC = 0x274877989852 *)
mov LL0x4000829950 x27;
mov LL0x4000829958 x28;
(* sub	sp, sp, #0x60                               #! PC = 0x274877989856 *)
subc dontcare sp sp 0x60@uint64;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a48; Value = 0x00000080010a07d8; PC = 0x274877989860 *)
mov x11 LL0x4000829a48;
mov x12 LL0x4000829a50;
(* mov	x26, x0                                     #! PC = 0x274877989864 *)
mov x26 x0;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x4000829a78; Value = 0x0000008001088c48; PC = 0x274877989868 *)
mov x19 LL0x4000829a78;
mov x20 LL0x4000829a80;
(* mov	x27, x1                                     #! PC = 0x274877989872 *)
mov x27 x1;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a58; Value = 0x000000800109f404; PC = 0x274877989876 *)
mov x13 LL0x4000829a58;
mov x14 LL0x4000829a60;
(* mov	x28, x2                                     #! PC = 0x274877989880 *)
mov x28 x2;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x4000829a88; Value = 0x000000400082da1c; PC = 0x274877989884 *)
mov x21 LL0x4000829a88;
mov x22 LL0x4000829a90;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a68; Value = 0x000000800085d040; PC = 0x274877989888 *)
mov x15 LL0x4000829a68;
mov x16 LL0x4000829a70;
(* adds	x5, x11, x19                               #! PC = 0x274877989892 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x4000829a98; Value = 0x0000008001056d60; PC = 0x274877989896 *)
mov x23 LL0x4000829a98;
mov x24 LL0x4000829aa0;
(* adcs	x6, x12, x20                               #! PC = 0x274877989900 *)
adcs carry x6 x12 x20 carry;
(* ldp	x11, x12, [x2]                              #! EA = L0x4000829aa8; Value = 0xb9ff00800109b283; PC = 0x274877989904 *)
mov x11 LL0x4000829aa8;
mov x12 LL0x4000829ab0;
(* adcs	x7, x13, x21                               #! PC = 0x274877989908 *)
adcs carry x7 x13 x21 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829ad8; Value = 0x000000c0018e5c48; PC = 0x274877989912 *)
mov x19 LL0x4000829ad8;
mov x20 LL0x4000829ae0;
(* adcs	x8, x14, x22                               #! PC = 0x274877989916 *)
adcs carry x8 x14 x22 carry;
(* ldp	x13, x14, [x2, #16]                         #! EA = L0x4000829ab8; Value = 0x6730d2e0f738100c; PC = 0x274877989920 *)
mov x13 LL0x4000829ab8;
mov x14 LL0x4000829ac0;
(* adcs	x9, x15, x23                               #! PC = 0x274877989924 *)
adcs carry x9 x15 x23 carry;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ae8; Value = 0x000000c00106f788; PC = 0x274877989928 *)
mov x21 LL0x4000829ae8;
mov x22 LL0x4000829af0;
(* adc	x10, x16, x24                               #! PC = 0x274877989932 *)
adc x10 x16 x24 carry;
(* ldp	x15, x16, [x2, #32]                         #! EA = L0x4000829ac8; Value = 0x4b1ba83643d2ec1f; PC = 0x274877989936 *)
mov x15 LL0x4000829ac8;
mov x16 LL0x4000829ad0;
(* stp	x5, x6, [sp]                                #! EA = L0x40008298a0; PC = 0x274877989940 *)
mov LL0x40008298a0 x5;
mov LL0x40008298a8 x6;
(* adds	x5, x11, x19                               #! PC = 0x274877989944 *)
adds carry x5 x11 x19;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829af8; Value = 0x0000010002110d60; PC = 0x274877989948 *)
mov x23 LL0x4000829af8;
mov x24 LL0x4000829b00;
(* adcs	x6, x12, x20                               #! PC = 0x274877989952 *)
adcs carry x6 x12 x20 carry;
(* stp	x7, x8, [sp, #16]                           #! EA = L0x40008298b0; PC = 0x274877989956 *)
mov LL0x40008298b0 x7;
mov LL0x40008298b8 x8;
(* adcs	x7, x13, x21                               #! PC = 0x274877989960 *)
adcs carry x7 x13 x21 carry;
(* adcs	x8, x14, x22                               #! PC = 0x274877989964 *)
adcs carry x8 x14 x22 carry;
(* stp	x9, x10, [sp, #32]                          #! EA = L0x40008298c0; PC = 0x274877989968 *)
mov LL0x40008298c0 x9;
mov LL0x40008298c8 x10;
(* adcs	x9, x15, x23                               #! PC = 0x274877989972 *)
adcs carry x9 x15 x23 carry;
(* stp	x5, x6, [sp, #48]                           #! EA = L0x40008298d0; PC = 0x274877989976 *)
mov LL0x40008298d0 x5;
mov LL0x40008298d8 x6;
(* adc	x10, x16, x24                               #! PC = 0x274877989980 *)
adc x10 x16 x24 carry;
(* stp	x7, x8, [sp, #64]                           #! EA = L0x40008298e0; PC = 0x274877989984 *)
mov LL0x40008298e0 x7;
mov LL0x40008298e8 x8;
(* stp	x9, x10, [sp, #80]                          #! EA = L0x40008298f0; PC = 0x274877989988 *)
mov LL0x40008298f0 x9;
mov LL0x40008298f8 x10;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877989992 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877989992 = 0x274877989992;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a48; Value = 0x00000080010a07d8; PC = 0x274877989152 *)
mov x11 LL0x4000829a48;
mov x12 LL0x4000829a50;
(* ldr	x17, [x2]                                   #! EA = L0x4000829aa8; Value = 0xb9ff00800109b283; PC = 0x274877989156 *)
mov x17 LL0x4000829aa8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a58; Value = 0x000000800109f404; PC = 0x274877989160 *)
mov x13 LL0x4000829a58;
mov x14 LL0x4000829a60;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a68; Value = 0x000000800085d040; PC = 0x274877989164 *)
mov x15 LL0x4000829a68;
mov x16 LL0x4000829a70;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x4000829ab0; Value = 0x1eac003eb1d9d667; PC = 0x274877989216 *)
mov x17 LL0x4000829ab0;
(* str	x19, [x0]                                   #! EA = L0x4000829f18; PC = 0x274877989220 *)
mov LL0x4000829f18 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x4000829ab8; Value = 0x6730d2e0f738100c; PC = 0x274877989320 *)
mov x17 LL0x4000829ab8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829f20; PC = 0x274877989328 *)
mov LL0x4000829f20 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x4000829ac0; Value = 0x64774c04f48a94e7; PC = 0x274877989428 *)
mov x17 LL0x4000829ac0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829f28; PC = 0x274877989436 *)
mov LL0x4000829f28 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x4000829ac8; Value = 0x4b1ba83643d2ec1f; PC = 0x274877989536 *)
mov x17 LL0x4000829ac8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829f30; PC = 0x274877989544 *)
mov LL0x4000829f30 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x4000829ad0; Value = 0x1a0111ea397cdfcb; PC = 0x274877989644 *)
mov x17 LL0x4000829ad0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829f38; PC = 0x274877989652 *)
mov LL0x4000829f38 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829f40; PC = 0x274877989756 *)
mov LL0x4000829f40 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829f48; PC = 0x274877989784 *)
mov LL0x4000829f48 x19;
mov LL0x4000829f50 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829f58; PC = 0x274877989788 *)
mov LL0x4000829f58 x21;
mov LL0x4000829f60 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829f68; PC = 0x274877989792 *)
mov LL0x4000829f68 x23;
mov LL0x4000829f70 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* mov	x1, sp                                      #! PC = 0x274877989996 *)
mov x1 sp;
(* add	x2, sp, #0x30                               #! PC = 0x274877990000 *)
adds dontcare x2 sp 0x30@uint64;
(* add	x0, x26, #0x60                              #! PC = 0x274877990004 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990008 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990008 = 0x274877990008;
(* ldp	x11, x12, [x1]                              #! EA = L0x40008298a0; Value = 0x0000010002129420; PC = 0x274877989152 *)
mov x11 LL0x40008298a0;
mov x12 LL0x40008298a8;
(* ldr	x17, [x2]                                   #! EA = L0x40008298d0; Value = 0xb9ff014002980ecb; PC = 0x274877989156 *)
mov x17 LL0x40008298d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x40008298b0; Value = 0x000000c0018cce20; PC = 0x274877989160 *)
mov x13 LL0x40008298b0;
mov x14 LL0x40008298b8;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x40008298c0; Value = 0x00000100018b3da0; PC = 0x274877989164 *)
mov x15 LL0x40008298c0;
mov x16 LL0x40008298c8;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x40008298d8; Value = 0x1eac00feb3620a98; PC = 0x274877989216 *)
mov x17 LL0x40008298d8;
(* str	x19, [x0]                                   #! EA = L0x4000829f78; PC = 0x274877989220 *)
mov LL0x4000829f78 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x40008298e0; Value = 0x6730d3a0f83f0794; PC = 0x274877989320 *)
mov x17 LL0x40008298e0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x4000829f80; PC = 0x274877989328 *)
mov LL0x4000829f80 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x40008298e8; Value = 0x64774c84f5964c29; PC = 0x274877989428 *)
mov x17 LL0x40008298e8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x4000829f88; PC = 0x274877989436 *)
mov LL0x4000829f88 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x40008298f0; Value = 0x4b1ba93645e3f97f; PC = 0x274877989536 *)
mov x17 LL0x40008298f0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x4000829f90; PC = 0x274877989544 *)
mov LL0x4000829f90 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x40008298f8; Value = 0x1a01126a3a85ade4; PC = 0x274877989644 *)
mov x17 LL0x40008298f8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x4000829f98; PC = 0x274877989652 *)
mov LL0x4000829f98 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x4000829fa0; PC = 0x274877989756 *)
mov LL0x4000829fa0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877989784 *)
mov LL0x4000829fa8 x19;
mov LL0x4000829fb0 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877989788 *)
mov LL0x4000829fb8 x21;
mov LL0x4000829fc0 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877989792 *)
mov LL0x4000829fc8 x23;
mov LL0x4000829fd0 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* add	x1, x27, #0x30                              #! PC = 0x274877990012 *)
adds dontcare x1 x27 0x30@uint64;
(* add	x2, x28, #0x30                              #! PC = 0x274877990016 *)
adds dontcare x2 x28 0x30@uint64;
(* mov	x0, sp                                      #! PC = 0x274877990020 *)
mov x0 sp;
(* #bl	0x4000014120 <__mul_384>                    #! PC = 0x274877990024 *)
#bl	0x4000014120 <__mul_384>                    #! 0x274877990024 = 0x274877990024;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829a78; Value = 0x0000008001088c48; PC = 0x274877989152 *)
mov x11 LL0x4000829a78;
mov x12 LL0x4000829a80;
(* ldr	x17, [x2]                                   #! EA = L0x4000829ad8; Value = 0x000000c0018e5c48; PC = 0x274877989156 *)
mov x17 LL0x4000829ad8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829a88; Value = 0x000000400082da1c; PC = 0x274877989160 *)
mov x13 LL0x4000829a88;
mov x14 LL0x4000829a90;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829a98; Value = 0x0000008001056d60; PC = 0x274877989164 *)
mov x15 LL0x4000829a98;
mov x16 LL0x4000829aa0;
(* mul	x19, x11, x17                               #! PC = 0x274877989168 *)
mull mulHx11x17 x19 x11 x17;
(* mul	x20, x12, x17                               #! PC = 0x274877989172 *)
mull mulHx12x17 x20 x12 x17;
(* mul	x21, x13, x17                               #! PC = 0x274877989176 *)
mull mulHx13x17 x21 x13 x17;
(* mul	x22, x14, x17                               #! PC = 0x274877989180 *)
mull mulHx14x17 x22 x14 x17;
(* mul	x23, x15, x17                               #! PC = 0x274877989184 *)
mull mulHx15x17 x23 x15 x17;
(* mul	x24, x16, x17                               #! PC = 0x274877989188 *)
mull mulHx16x17 x24 x16 x17;
(* umulh	x5, x11, x17                              #! PC = 0x274877989192 *)
mov x5 mulHx11x17;
(* umulh	x6, x12, x17                              #! PC = 0x274877989196 *)
mov x6 mulHx12x17;
(* umulh	x7, x13, x17                              #! PC = 0x274877989200 *)
mov x7 mulHx13x17;
(* umulh	x8, x14, x17                              #! PC = 0x274877989204 *)
mov x8 mulHx14x17;
(* umulh	x9, x15, x17                              #! PC = 0x274877989208 *)
mov x9 mulHx15x17;
(* umulh	x10, x16, x17                             #! PC = 0x274877989212 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #8]                               #! EA = L0x4000829ae0; Value = 0x000000c001883431; PC = 0x274877989216 *)
mov x17 LL0x4000829ae0;
(* str	x19, [x0]                                   #! EA = L0x40008298a0; PC = 0x274877989220 *)
mov LL0x40008298a0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989224 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989228 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989232 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989236 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989240 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989244 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989248 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989252 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989256 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989260 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, xzr, x10                               #! PC = 0x274877989264 *)
adc x24 0@uint64 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989268 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989272 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989276 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989280 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989284 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989288 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989292 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989296 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989300 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989304 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989308 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989312 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989316 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #16]                              #! EA = L0x4000829ae8; Value = 0x000000c00106f788; PC = 0x274877989320 *)
mov x17 LL0x4000829ae8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989324 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #8]                               #! EA = L0x40008298a8; PC = 0x274877989328 *)
mov LL0x40008298a8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989332 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989336 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989340 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989344 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989348 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989352 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989356 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989360 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989364 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989368 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989372 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989376 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989380 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989384 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989388 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989392 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989396 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989400 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989404 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989408 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989412 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989416 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989420 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989424 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #24]                              #! EA = L0x4000829af0; Value = 0x00000080010bb742; PC = 0x274877989428 *)
mov x17 LL0x4000829af0;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989432 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #16]                              #! EA = L0x40008298b0; PC = 0x274877989436 *)
mov LL0x40008298b0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989440 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989444 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989448 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989452 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989456 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989460 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989464 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989468 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989472 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989476 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989480 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989484 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989488 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989492 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989496 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989500 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989504 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989508 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989512 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989516 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989520 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989524 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989528 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989532 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #32]                              #! EA = L0x4000829af8; Value = 0x0000010002110d60; PC = 0x274877989536 *)
mov x17 LL0x4000829af8;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989540 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #24]                              #! EA = L0x40008298b8; PC = 0x274877989544 *)
mov LL0x40008298b8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989548 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989552 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989556 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989560 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989564 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989568 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989572 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989576 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989580 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989584 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989588 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989592 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989596 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989600 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989604 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989608 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989612 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989616 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989620 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989624 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989628 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989632 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989636 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989640 *)
mov x10 mulHx16x17;
(* ldr	x17, [x2, #40]                              #! EA = L0x4000829b00; Value = 0x000000800108ce19; PC = 0x274877989644 *)
mov x17 LL0x4000829b00;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989648 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #32]                              #! EA = L0x40008298c0; PC = 0x274877989652 *)
mov LL0x40008298c0 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989656 *)
adds carry x19 x20 x5;
(* mul	x5, x11, x17                                #! PC = 0x274877989660 *)
mull mulHx11x17 x5 x11 x17;
(* adcs	x20, x21, x6                               #! PC = 0x274877989664 *)
adcs carry x20 x21 x6 carry;
(* mul	x6, x12, x17                                #! PC = 0x274877989668 *)
mull mulHx12x17 x6 x12 x17;
(* adcs	x21, x22, x7                               #! PC = 0x274877989672 *)
adcs carry x21 x22 x7 carry;
(* mul	x7, x13, x17                                #! PC = 0x274877989676 *)
mull mulHx13x17 x7 x13 x17;
(* adcs	x22, x23, x8                               #! PC = 0x274877989680 *)
adcs carry x22 x23 x8 carry;
(* mul	x8, x14, x17                                #! PC = 0x274877989684 *)
mull mulHx14x17 x8 x14 x17;
(* adcs	x23, x24, x9                               #! PC = 0x274877989688 *)
adcs carry x23 x24 x9 carry;
(* mul	x9, x15, x17                                #! PC = 0x274877989692 *)
mull mulHx15x17 x9 x15 x17;
(* adc	x24, x25, x10                               #! PC = 0x274877989696 *)
adc x24 x25 x10 carry;
(* mul	x10, x16, x17                               #! PC = 0x274877989700 *)
mull mulHx16x17 x10 x16 x17;
(* adds	x19, x19, x5                               #! PC = 0x274877989704 *)
adds carry x19 x19 x5;
(* umulh	x5, x11, x17                              #! PC = 0x274877989708 *)
mov x5 mulHx11x17;
(* adcs	x20, x20, x6                               #! PC = 0x274877989712 *)
adcs carry x20 x20 x6 carry;
(* umulh	x6, x12, x17                              #! PC = 0x274877989716 *)
mov x6 mulHx12x17;
(* adcs	x21, x21, x7                               #! PC = 0x274877989720 *)
adcs carry x21 x21 x7 carry;
(* umulh	x7, x13, x17                              #! PC = 0x274877989724 *)
mov x7 mulHx13x17;
(* adcs	x22, x22, x8                               #! PC = 0x274877989728 *)
adcs carry x22 x22 x8 carry;
(* umulh	x8, x14, x17                              #! PC = 0x274877989732 *)
mov x8 mulHx14x17;
(* adcs	x23, x23, x9                               #! PC = 0x274877989736 *)
adcs carry x23 x23 x9 carry;
(* umulh	x9, x15, x17                              #! PC = 0x274877989740 *)
mov x9 mulHx15x17;
(* adcs	x24, x24, x10                              #! PC = 0x274877989744 *)
adcs carry x24 x24 x10 carry;
(* umulh	x10, x16, x17                             #! PC = 0x274877989748 *)
mov x10 mulHx16x17;
(* adc	x25, xzr, xzr                               #! PC = 0x274877989752 *)
adc x25 0@uint64 0@uint64 carry;
(* str	x19, [x0, #40]                              #! EA = L0x40008298c8; PC = 0x274877989756 *)
mov LL0x40008298c8 x19;
(* adds	x19, x20, x5                               #! PC = 0x274877989760 *)
adds carry x19 x20 x5;
(* adcs	x20, x21, x6                               #! PC = 0x274877989764 *)
adcs carry x20 x21 x6 carry;
(* adcs	x21, x22, x7                               #! PC = 0x274877989768 *)
adcs carry x21 x22 x7 carry;
(* adcs	x22, x23, x8                               #! PC = 0x274877989772 *)
adcs carry x22 x23 x8 carry;
(* adcs	x23, x24, x9                               #! PC = 0x274877989776 *)
adcs carry x23 x24 x9 carry;
(* adc	x24, x25, x10                               #! PC = 0x274877989780 *)
adc x24 x25 x10 carry;
(* stp	x19, x20, [x0, #48]                         #! EA = L0x40008298d0; PC = 0x274877989784 *)
mov LL0x40008298d0 x19;
mov LL0x40008298d8 x20;
(* stp	x21, x22, [x0, #64]                         #! EA = L0x40008298e0; PC = 0x274877989788 *)
mov LL0x40008298e0 x21;
mov LL0x40008298e8 x22;
(* stp	x23, x24, [x0, #80]                         #! EA = L0x40008298f0; PC = 0x274877989792 *)
mov LL0x40008298f0 x23;
mov LL0x40008298f8 x24;
(* #ret                                            #! PC = 0x274877989796 *)
#ret                                            #! 0x274877989796 = 0x274877989796;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877990028 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877990032 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877990036 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* add	x1, x26, #0x60                              #! PC = 0x274877990040 *)
adds dontcare x1 x26 0x60@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990044 *)
mov x2 sp;
(* add	x0, x26, #0x60                              #! PC = 0x274877990048 *)
adds dontcare x0 x26 0x60@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990052 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990052 = 0x274877990052;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                    LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition, all cuts;

(* NOTE: save old values *)
mov LL0x4000829f78o LL0x4000829f78; mov LL0x4000829f80o LL0x4000829f80;
mov LL0x4000829f88o LL0x4000829f88; mov LL0x4000829f90o LL0x4000829f90;
mov LL0x4000829f98o LL0x4000829f98; mov LL0x4000829fa0o LL0x4000829fa0;
mov LL0x4000829fa8o LL0x4000829fa8; mov LL0x4000829fb0o LL0x4000829fb0;
mov LL0x4000829fb8o LL0x4000829fb8; mov LL0x4000829fc0o LL0x4000829fc0;
mov LL0x4000829fc8o LL0x4000829fc8; mov LL0x4000829fd0o LL0x4000829fd0;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f78; Value = 0xdb2d534edbd53560; PC = 0x274877984672 *)
mov x11 LL0x4000829f78;
mov x12 LL0x4000829f80;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x8d98f5a974c15440; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f88; Value = 0xb1e7c06ac193cfdf; PC = 0x274877984680 *)
mov x13 LL0x4000829f88;
mov x14 LL0x4000829f90;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xd3adb18a49106ad3; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f98; Value = 0x0e29cff53b97beb1; PC = 0x274877984696 *)
mov x15 LL0x4000829f98;
mov x16 LL0x4000829fa0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x8af196ade03987b6; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f78; PC = 0x274877984712 *)
mov LL0x4000829f78 x11;
mov LL0x4000829f80 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fa8; Value = 0x058de6395b845f1c; PC = 0x274877984720 *)
mov x11 LL0x4000829fa8;
mov x12 LL0x4000829fb0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0x1e91e94867250518; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f88; PC = 0x274877984732 *)
mov LL0x4000829f88 x13;
mov LL0x4000829f90 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fb8; Value = 0x5ff0238e611eb87a; PC = 0x274877984736 *)
mov x13 LL0x4000829fb8;
mov x14 LL0x4000829fc0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x18fe060b3feae66c; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f98; PC = 0x274877984748 *)
mov LL0x4000829f98 x15;
mov LL0x4000829fa0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fc8; Value = 0x775826e3ffa5beab; PC = 0x274877984756 *)
mov x15 LL0x4000829fc8;
mov x16 LL0x4000829fd0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x85294cc59b80f5ba; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877984828 *)
mov LL0x4000829fa8 x11;
mov LL0x4000829fb0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877984836 *)
mov LL0x4000829fb8 x13;
mov LL0x4000829fc0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877984840 *)
mov LL0x4000829fc8 x15;
mov LL0x4000829fd0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                        LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                        LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                        LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829f78o, LL0x4000829f80o, LL0x4000829f88o,
                        LL0x4000829f90o, LL0x4000829f98o, LL0x4000829fa0o,
                        LL0x4000829fa8o, LL0x4000829fb0o, LL0x4000829fb8o,
                        LL0x4000829fc0o, LL0x4000829fc8o, LL0x4000829fd0o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                        LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                        LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                        LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829f78o, LL0x4000829f80o, LL0x4000829f88o,
                        LL0x4000829f90o, LL0x4000829f98o, LL0x4000829fa0o,
                        LL0x4000829fa8o, LL0x4000829fb0o, LL0x4000829fb8o,
                        LL0x4000829fc0o, LL0x4000829fc8o, LL0x4000829fd0o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x2, x26, #0x0                               #! PC = 0x274877990056 *)
adds dontcare x2 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990060 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990060 = 0x274877990060;

rcut and [limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

(* NOTE: save old values *)
mov LL0x4000829f78p LL0x4000829f78; mov LL0x4000829f80p LL0x4000829f80;
mov LL0x4000829f88p LL0x4000829f88; mov LL0x4000829f90p LL0x4000829f90;
mov LL0x4000829f98p LL0x4000829f98; mov LL0x4000829fa0p LL0x4000829fa0;
mov LL0x4000829fa8p LL0x4000829fa8; mov LL0x4000829fb0p LL0x4000829fb0;
mov LL0x4000829fb8p LL0x4000829fb8; mov LL0x4000829fc0p LL0x4000829fc0;
mov LL0x4000829fc8p LL0x4000829fc8; mov LL0x4000829fd0p LL0x4000829fd0;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f78; Value = 0x4d945da56713e120; PC = 0x274877984672 *)
mov x11 LL0x4000829f78;
mov x12 LL0x4000829f80;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829f18; Value = 0xf206419ba02e3388; PC = 0x274877984676 *)
mov x19 LL0x4000829f18;
mov x20 LL0x4000829f20;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f88; Value = 0xde3a0ee07883650c; PC = 0x274877984680 *)
mov x13 LL0x4000829f88;
mov x14 LL0x4000829f90;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829f28; Value = 0xc0210346ada5edb2; PC = 0x274877984688 *)
mov x21 LL0x4000829f28;
mov x22 LL0x4000829f30;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f98; Value = 0x833839475b5e36fb; PC = 0x274877984696 *)
mov x15 LL0x4000829f98;
mov x16 LL0x4000829fa0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829f38; Value = 0x4b41c3b36b36d84d; PC = 0x274877984704 *)
mov x23 LL0x4000829f38;
mov x24 LL0x4000829f40;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f78; PC = 0x274877984712 *)
mov LL0x4000829f78 x11;
mov LL0x4000829f80 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fa8; Value = 0xe6fbfcf0f45f5a03; PC = 0x274877984720 *)
mov x11 LL0x4000829fa8;
mov x12 LL0x4000829fb0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829f48; Value = 0x4e3ad31c19d1d2ec; PC = 0x274877984728 *)
mov x19 LL0x4000829f48;
mov x20 LL0x4000829f50;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f88; PC = 0x274877984732 *)
mov LL0x4000829f88 x13;
mov LL0x4000829f90 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fb8; Value = 0x46f21d832133d20d; PC = 0x274877984736 *)
mov x13 LL0x4000829fb8;
mov x14 LL0x4000829fc0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829f58; Value = 0x95102f51fd067ec1; PC = 0x274877984740 *)
mov x21 LL0x4000829f58;
mov x22 LL0x4000829f60;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f98; PC = 0x274877984748 *)
mov LL0x4000829f98 x15;
mov LL0x4000829fa0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fc8; Value = 0xf22eda1e6424c8f1; PC = 0x274877984756 *)
mov x15 LL0x4000829fc8;
mov x16 LL0x4000829fd0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829f68; Value = 0x95c0a8e31a9dbf3c; PC = 0x274877984764 *)
mov x23 LL0x4000829f68;
mov x24 LL0x4000829f70;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877984828 *)
mov LL0x4000829fa8 x11;
mov LL0x4000829fb0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877984836 *)
mov LL0x4000829fb8 x13;
mov LL0x4000829fc0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877984840 *)
mov LL0x4000829fc8 x15;
mov LL0x4000829fd0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;

assert true
    && eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                        LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                        LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                        LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
              limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                        LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                        LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                        LL0x4000829f60, LL0x4000829f68, LL0x4000829f70])
             (limbs 64 [LL0x4000829f78p, LL0x4000829f80p, LL0x4000829f88p,
                        LL0x4000829f90p, LL0x4000829f98p, LL0x4000829fa0p,
                        LL0x4000829fa8p, LL0x4000829fb0p, LL0x4000829fb8p,
                        LL0x4000829fc0p, LL0x4000829fc8p, LL0x4000829fd0p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                        LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                        LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                        LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
              limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                        LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                        LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                        LL0x4000829f60, LL0x4000829f68, LL0x4000829f70])
             (limbs 64 [LL0x4000829f78p, LL0x4000829f80p, LL0x4000829f88p,
                        LL0x4000829f90p, LL0x4000829f98p, LL0x4000829fa0p,
                        LL0x4000829fa8p, LL0x4000829fb0p, LL0x4000829fb8p,
                        LL0x4000829fc0p, LL0x4000829fc8p, LL0x4000829fd0p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* add	x1, x26, #0x0                               #! PC = 0x274877990064 *)
adds dontcare x1 x26 0@uint64;
(* mov	x2, sp                                      #! PC = 0x274877990068 *)
mov x2 sp;
(* add	x0, x26, #0x0                               #! PC = 0x274877990072 *)
adds dontcare x0 x26 0@uint64;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877990076 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877990076 = 0x274877990076;

rcut and [limbs 64 [LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                    LL0x40008298e8, LL0x40008298f0, LL0x40008298f8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                    LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829f18o LL0x4000829f18; mov LL0x4000829f20o LL0x4000829f20;
mov LL0x4000829f28o LL0x4000829f28; mov LL0x4000829f30o LL0x4000829f30;
mov LL0x4000829f38o LL0x4000829f38; mov LL0x4000829f40o LL0x4000829f40;
mov LL0x4000829f48o LL0x4000829f48; mov LL0x4000829f50o LL0x4000829f50;
mov LL0x4000829f58o LL0x4000829f58; mov LL0x4000829f60o LL0x4000829f60;
mov LL0x4000829f68o LL0x4000829f68; mov LL0x4000829f70o LL0x4000829f70;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f18; Value = 0xf206419ba02e3388; PC = 0x274877984672 *)
mov x11 LL0x4000829f18;
mov x12 LL0x4000829f20;
(* ldp	x19, x20, [x2]                              #! EA = L0x40008298a0; Value = 0x8d98f5a974c15440; PC = 0x274877984676 *)
mov x19 LL0x40008298a0;
mov x20 LL0x40008298a8;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f28; Value = 0xc0210346ada5edb2; PC = 0x274877984680 *)
mov x13 LL0x4000829f28;
mov x14 LL0x4000829f30;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x40008298b0; Value = 0xd3adb18a49106ad3; PC = 0x274877984688 *)
mov x21 LL0x40008298b0;
mov x22 LL0x40008298b8;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f38; Value = 0x4b41c3b36b36d84d; PC = 0x274877984696 *)
mov x15 LL0x4000829f38;
mov x16 LL0x4000829f40;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x40008298c0; Value = 0x8af196ade03987b6; PC = 0x274877984704 *)
mov x23 LL0x40008298c0;
mov x24 LL0x40008298c8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f18; PC = 0x274877984712 *)
mov LL0x4000829f18 x11;
mov LL0x4000829f20 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829f48; Value = 0x4e3ad31c19d1d2ec; PC = 0x274877984720 *)
mov x11 LL0x4000829f48;
mov x12 LL0x4000829f50;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x40008298d0; Value = 0x1e91e94867250518; PC = 0x274877984728 *)
mov x19 LL0x40008298d0;
mov x20 LL0x40008298d8;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f28; PC = 0x274877984732 *)
mov LL0x4000829f28 x13;
mov LL0x4000829f30 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829f58; Value = 0x95102f51fd067ec1; PC = 0x274877984736 *)
mov x13 LL0x4000829f58;
mov x14 LL0x4000829f60;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x40008298e0; Value = 0x18fe060b3feae66c; PC = 0x274877984740 *)
mov x21 LL0x40008298e0;
mov x22 LL0x40008298e8;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f38; PC = 0x274877984748 *)
mov LL0x4000829f38 x15;
mov LL0x4000829f40 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f68; Value = 0x95c0a8e31a9dbf3c; PC = 0x274877984756 *)
mov x15 LL0x4000829f68;
mov x16 LL0x4000829f70;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x40008298f0; Value = 0x85294cc59b80f5ba; PC = 0x274877984764 *)
mov x23 LL0x40008298f0;
mov x24 LL0x40008298f8;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829f48; PC = 0x274877984828 *)
mov LL0x4000829f48 x11;
mov LL0x4000829f50 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829f58; PC = 0x274877984836 *)
mov LL0x4000829f58 x13;
mov LL0x4000829f60 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f68; PC = 0x274877984840 *)
mov LL0x4000829f68 x15;
mov LL0x4000829f70 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829908; Value = 0x001f004000008b50; PC = 0x274877990080 *)
mov x30 LL0x4000829908;
(* add	sp, sp, #0x60                               #! PC = 0x274877990084 *)
adds dontcare sp sp 0x60@uint64;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829910; Value = 0x0000004000016928; PC = 0x274877990088 *)
mov x19 LL0x4000829910;
mov x20 LL0x4000829918;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829920; Value = 0x0000004000829f18; PC = 0x274877990092 *)
mov x21 LL0x4000829920;
mov x22 LL0x4000829928;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829930; Value = 0x0000004000829c88; PC = 0x274877990096 *)
mov x23 LL0x4000829930;
mov x24 LL0x4000829938;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829940; Value = 0x0000004000829aa8; PC = 0x274877990100 *)
mov x25 LL0x4000829940;
mov x26 LL0x4000829948;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x4000829950; Value = 0x0000004000829b08; PC = 0x274877990104 *)
mov x27 LL0x4000829950;
mov x28 LL0x4000829958;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829900; Value = 0x0000004000829980; PC = 0x274877990108 *)
mov x29 LL0x4000829900;
(* #autiasp                                         #! PC = 0x274877990112 *)
#autiasp                                         #! 0x274877990112 = 0x274877990112;
(* #ret                                            #! PC = 0x274877990116 *)
#ret                                            #! 0x274877990116 = 0x274877990116;

assert true
    && eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                        LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                        LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                        LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829f18o, LL0x4000829f20o, LL0x4000829f28o,
                        LL0x4000829f30o, LL0x4000829f38o, LL0x4000829f40o,
                        LL0x4000829f48o, LL0x4000829f50o, LL0x4000829f58o,
                        LL0x4000829f60o, LL0x4000829f68o, LL0x4000829f70o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                        LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                        LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                        LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
              limbs 64 [LL0x40008298a0, LL0x40008298a8, LL0x40008298b0,
                        LL0x40008298b8, LL0x40008298c0, LL0x40008298c8,
                        LL0x40008298d0, LL0x40008298d8, LL0x40008298e0,
                        LL0x40008298e8, LL0x40008298f0, LL0x40008298f8])
             (limbs 64 [LL0x4000829f18o, LL0x4000829f20o, LL0x4000829f28o,
                        LL0x4000829f30o, LL0x4000829f38o, LL0x4000829f40o,
                        LL0x4000829f48o, LL0x4000829f50o, LL0x4000829f58o,
                        LL0x4000829f60o, LL0x4000829f68o, LL0x4000829f70o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
    && true;

(* mul_382x(ret[2], aa, bb) *)

(*
assert and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] * U)
                  ((limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                              LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
                    limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U) *
                   (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                              LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
                    limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                              LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                   U * U + 1],
            eqmod (limbs 64 [LL0x4000829a48, LL0x4000829a50, LL0x4000829a58,
                             LL0x4000829a60, LL0x4000829a68, LL0x4000829a70] +
                   limbs 64 [LL0x4000829a78, LL0x4000829a80, LL0x4000829a88,
                             LL0x4000829a90, LL0x4000829a98, LL0x4000829aa0] * U)
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                   limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [a50, a51, a52, a53, a54, a55] * U)
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829aa8, LL0x4000829ab0, LL0x4000829ab8,
                             LL0x4000829ac0, LL0x4000829ac8, LL0x4000829ad0] +
                   limbs 64 [LL0x4000829ad8, LL0x4000829ae0, LL0x4000829ae8,
                             LL0x4000829af0, LL0x4000829af8, LL0x4000829b00] * U)
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                   limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [b50, b51, b52, b53, b54, b55] * U)
                  (limbs 64 [m0, m1, m2, m3, m4, m5])]
    && true;
*)

(* ldp	x29, x30, [sp], #16                         #! EA = L0x4000829980; Value = 0x0000004000829990; PC = 0x274877942608 *)
mov x29 LL0x4000829980;
mov x30 LL0x4000829988;
(* #ret                                            #! PC = 0x274877942612 *)
#ret                                            #! 0x274877942612 = 0x274877942612;

rcut and [limbs 64 [LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                    LL0x4000829b50, LL0x4000829b58, LL0x4000829b60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                    LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                    LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829f18q LL0x4000829f18; mov LL0x4000829f20q LL0x4000829f20;
mov LL0x4000829f28q LL0x4000829f28; mov LL0x4000829f30q LL0x4000829f30;
mov LL0x4000829f38q LL0x4000829f38; mov LL0x4000829f40q LL0x4000829f40;
mov LL0x4000829f48q LL0x4000829f48; mov LL0x4000829f50q LL0x4000829f50;
mov LL0x4000829f58q LL0x4000829f58; mov LL0x4000829f60q LL0x4000829f60;
mov LL0x4000829f68q LL0x4000829f68; mov LL0x4000829f70q LL0x4000829f70;
mov LL0x4000829f78q LL0x4000829f78; mov LL0x4000829f80q LL0x4000829f80;
mov LL0x4000829f88q LL0x4000829f88; mov LL0x4000829f90q LL0x4000829f90;
mov LL0x4000829f98q LL0x4000829f98; mov LL0x4000829fa0q LL0x4000829fa0;
mov LL0x4000829fa8q LL0x4000829fa8; mov LL0x4000829fb0q LL0x4000829fb0;
mov LL0x4000829fb8q LL0x4000829fb8; mov LL0x4000829fc0q LL0x4000829fc0;
mov LL0x4000829fc8q LL0x4000829fc8; mov LL0x4000829fd0q LL0x4000829fd0;

(* mov	x3, x19                                     #! PC = 0x274877950856 *)
mov x3 x19;
(* mov	x2, x27                                     #! PC = 0x274877950860 *)
mov x2 x27;
(* mov	x1, x21                                     #! PC = 0x274877950864 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877950868 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950872 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950872 = 0x274877950872;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f18; Value = 0x646d4bf22b6cdf48; PC = 0x274877984672 *)
mov x11 LL0x4000829f18;
mov x12 LL0x4000829f20;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b08; Value = 0xa1aa48c1b6c4bf20; PC = 0x274877984676 *)
mov x19 LL0x4000829b08;
mov x20 LL0x4000829b10;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f28; Value = 0xec7351bc649582df; PC = 0x274877984680 *)
mov x13 LL0x4000829f28;
mov x14 LL0x4000829f30;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b18; Value = 0xdb753b9dee26c493; PC = 0x274877984688 *)
mov x21 LL0x4000829b18;
mov x22 LL0x4000829b20;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f38; Value = 0xc0502d058afd5096; PC = 0x274877984696 *)
mov x15 LL0x4000829f38;
mov x16 LL0x4000829f40;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b28; Value = 0xb416b4df03830d31; PC = 0x274877984704 *)
mov x23 LL0x4000829b28;
mov x24 LL0x4000829b30;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f18; PC = 0x274877984712 *)
mov LL0x4000829f18 x11;
mov LL0x4000829f20 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829f48; Value = 0x2fa8e9d3b2accdd3; PC = 0x274877984720 *)
mov x11 LL0x4000829f48;
mov x12 LL0x4000829f50;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b38; Value = 0x520fba46aeb315b1; PC = 0x274877984728 *)
mov x19 LL0x4000829b38;
mov x20 LL0x4000829b40;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f28; PC = 0x274877984732 *)
mov LL0x4000829f28 x13;
mov LL0x4000829f30 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829f58; Value = 0x7c122946bd1b9855; PC = 0x274877984736 *)
mov x13 LL0x4000829f58;
mov x14 LL0x4000829f60;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829b48; Value = 0x09a67b1981fb69dc; PC = 0x274877984740 *)
mov x21 LL0x4000829b48;
mov x22 LL0x4000829b50;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f38; PC = 0x274877984748 *)
mov LL0x4000829f38 x15;
mov LL0x4000829f40 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f68; Value = 0x10975c1d7f1cc982; PC = 0x274877984756 *)
mov x15 LL0x4000829f68;
mov x16 LL0x4000829f70;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829b58; Value = 0xea09a14285a838b9; PC = 0x274877984764 *)
mov x23 LL0x4000829b58;
mov x24 LL0x4000829b60;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829f48; PC = 0x274877984828 *)
mov LL0x4000829f48 x11;
mov LL0x4000829f50 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829f58; PC = 0x274877984836 *)
mov LL0x4000829f58 x13;
mov LL0x4000829f60 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f68; PC = 0x274877984840 *)
mov LL0x4000829f68 x15;
mov LL0x4000829f70 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x005a00400000ab9c; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* mov	x3, x19                                     #! PC = 0x274877950876 *)
mov x3 x19;
(* ldr	x2, [sp, #128]                              #! EA = L0x4000829a10; Value = 0x0000004000829b68; PC = 0x274877950880 *)
mov x2 LL0x4000829a10;
(* mov	x1, x20                                     #! PC = 0x274877950884 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877950888 *)
mov x0 x20;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950892 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950892 = 0x274877950892;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f78; Value = 0x5b8e1c09c6e5ad98; PC = 0x274877984672 *)
mov x11 LL0x4000829f78;
mov x12 LL0x4000829f80;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829b68; Value = 0xe6c8f4bf2a867760; PC = 0x274877984676 *)
mov x19 LL0x4000829b68;
mov x20 LL0x4000829b70;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f88; Value = 0x1e190b99cadd7759; PC = 0x274877984680 *)
mov x13 LL0x4000829f88;
mov x14 LL0x4000829f90;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829b78; Value = 0x03848c78ce3ec7e6; PC = 0x274877984688 *)
mov x21 LL0x4000829b78;
mov x22 LL0x4000829b80;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f98; Value = 0x37f67593f0275eae; PC = 0x274877984696 *)
mov x15 LL0x4000829f98;
mov x16 LL0x4000829fa0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829b88; Value = 0xd082d00b946555bc; PC = 0x274877984704 *)
mov x23 LL0x4000829b88;
mov x24 LL0x4000829b90;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f78; PC = 0x274877984712 *)
mov LL0x4000829f78 x11;
mov LL0x4000829f80 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fa8; Value = 0x98c129d4da8d8717; PC = 0x274877984720 *)
mov x11 LL0x4000829fa8;
mov x12 LL0x4000829fb0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829b98; Value = 0xaeda3b4fdaff2cd9; PC = 0x274877984728 *)
mov x19 LL0x4000829b98;
mov x20 LL0x4000829ba0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f88; PC = 0x274877984732 *)
mov LL0x4000829f88 x13;
mov LL0x4000829f90 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fb8; Value = 0xb1e1ee31242d534c; PC = 0x274877984736 *)
mov x13 LL0x4000829fb8;
mov x14 LL0x4000829fc0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ba8; Value = 0xc330383e3d66d124; PC = 0x274877984740 *)
mov x21 LL0x4000829ba8;
mov x22 LL0x4000829bb0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f98; PC = 0x274877984748 *)
mov LL0x4000829f98 x15;
mov LL0x4000829fa0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fc8; Value = 0x5c6e313b498709b4; PC = 0x274877984756 *)
mov x15 LL0x4000829fc8;
mov x16 LL0x4000829fd0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829bb8; Value = 0x0000048689a12172; PC = 0x274877984764 *)
mov x23 LL0x4000829bb8;
mov x24 LL0x4000829bc0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877984828 *)
mov LL0x4000829fa8 x11;
mov LL0x4000829fb0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877984836 *)
mov LL0x4000829fb8 x13;
mov LL0x4000829fc0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877984840 *)
mov LL0x4000829fc8 x15;
mov LL0x4000829fd0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x004f00400000abb0; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

assert true
    && and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                             LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                             LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                             LL0x4000829b50, LL0x4000829b58, LL0x4000829b60])
                  (limbs 64 [LL0x4000829f18q, LL0x4000829f20q, LL0x4000829f28q,
                             LL0x4000829f30q, LL0x4000829f38q, LL0x4000829f40q,
                             LL0x4000829f48q, LL0x4000829f50q, LL0x4000829f58q,
                             LL0x4000829f60q, LL0x4000829f68q, LL0x4000829f70q])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
                   limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                             LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                             LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                             LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0])
                  (limbs 64 [LL0x4000829f78q, LL0x4000829f80q, LL0x4000829f88q,
                             LL0x4000829f90q, LL0x4000829f98q, LL0x4000829fa0q,
                             LL0x4000829fa8q, LL0x4000829fb0q, LL0x4000829fb8q,
                             LL0x4000829fc0q, LL0x4000829fc8q, LL0x4000829fd0q])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
      ];

assume and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829b08, LL0x4000829b10, LL0x4000829b18,
                             LL0x4000829b20, LL0x4000829b28, LL0x4000829b30,
                             LL0x4000829b38, LL0x4000829b40, LL0x4000829b48,
                             LL0x4000829b50, LL0x4000829b58, LL0x4000829b60])
                  (limbs 64 [LL0x4000829f18q, LL0x4000829f20q, LL0x4000829f28q,
                             LL0x4000829f30q, LL0x4000829f38q, LL0x4000829f40q,
                             LL0x4000829f48q, LL0x4000829f50q, LL0x4000829f58q,
                             LL0x4000829f60q, LL0x4000829f68q, LL0x4000829f70q])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
                   limbs 64 [LL0x4000829b68, LL0x4000829b70, LL0x4000829b78,
                             LL0x4000829b80, LL0x4000829b88, LL0x4000829b90,
                             LL0x4000829b98, LL0x4000829ba0, LL0x4000829ba8,
                             LL0x4000829bb0, LL0x4000829bb8, LL0x4000829bc0])
                  (limbs 64 [LL0x4000829f78q, LL0x4000829f80q, LL0x4000829f88q,
                             LL0x4000829f90q, LL0x4000829f98q, LL0x4000829fa0q,
                             LL0x4000829fa8q, LL0x4000829fb0q, LL0x4000829fb8q,
                             LL0x4000829fc0q, LL0x4000829fc8q, LL0x4000829fd0q])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
      ]
   && true;

(* mov	x3, x19                                     #! PC = 0x274877950896 *)
mov x3 x19;
(* mov	x2, x23                                     #! PC = 0x274877950900 *)
mov x2 x23;
(* mov	x1, x21                                     #! PC = 0x274877950904 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877950908 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950912 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950912 = 0x274877950912;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

rcut and [limbs 64 [LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                    LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                    LL0x4000829d30, LL0x4000829d38, LL0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                    LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829f18r LL0x4000829f18; mov LL0x4000829f20r LL0x4000829f20;
mov LL0x4000829f28r LL0x4000829f28; mov LL0x4000829f30r LL0x4000829f30;
mov LL0x4000829f38r LL0x4000829f38; mov LL0x4000829f40r LL0x4000829f40;
mov LL0x4000829f48r LL0x4000829f48; mov LL0x4000829f50r LL0x4000829f50;
mov LL0x4000829f58r LL0x4000829f58; mov LL0x4000829f60r LL0x4000829f60;
mov LL0x4000829f68r LL0x4000829f68; mov LL0x4000829f70r LL0x4000829f70;
mov LL0x4000829f78r LL0x4000829f78; mov LL0x4000829f80r LL0x4000829f80;
mov LL0x4000829f88r LL0x4000829f88; mov LL0x4000829f90r LL0x4000829f90;
mov LL0x4000829f98r LL0x4000829f98; mov LL0x4000829fa0r LL0x4000829fa0;
mov LL0x4000829fa8r LL0x4000829fa8; mov LL0x4000829fb0r LL0x4000829fb0;
mov LL0x4000829fb8r LL0x4000829fb8; mov LL0x4000829fc0r LL0x4000829fc0;
mov LL0x4000829fc8r LL0x4000829fc8; mov LL0x4000829fd0r LL0x4000829fd0;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f18; Value = 0xc2c3033074a82028; PC = 0x274877984672 *)
mov x11 LL0x4000829f18;
mov x12 LL0x4000829f20;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c88; Value = 0xbf7e5d09780cb200; PC = 0x274877984676 *)
mov x19 LL0x4000829c88;
mov x20 LL0x4000829c90;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f28; Value = 0x10fe161e766ebe4c; PC = 0x274877984680 *)
mov x13 LL0x4000829f28;
mov x14 LL0x4000829f30;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c98; Value = 0x5ce62a1ce1098e3f; PC = 0x274877984688 *)
mov x21 LL0x4000829c98;
mov x22 LL0x4000829ca0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f38; Value = 0x0c397826877a4364; PC = 0x274877984696 *)
mov x15 LL0x4000829f38;
mov x16 LL0x4000829f40;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829ca8; Value = 0x9e46be45859c8f1f; PC = 0x274877984704 *)
mov x23 LL0x4000829ca8;
mov x24 LL0x4000829cb0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f18; PC = 0x274877984712 *)
mov LL0x4000829f18 x11;
mov LL0x4000829f20 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829f48; Value = 0xdd992f8d03f9b822; PC = 0x274877984720 *)
mov x11 LL0x4000829f48;
mov x12 LL0x4000829f50;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829cb8; Value = 0x9923a6debee0eac0; PC = 0x274877984728 *)
mov x19 LL0x4000829cb8;
mov x20 LL0x4000829cc0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f28; PC = 0x274877984732 *)
mov LL0x4000829f28 x13;
mov LL0x4000829f30 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829f58; Value = 0x726bae2d3b202e78; PC = 0x274877984736 *)
mov x13 LL0x4000829f58;
mov x14 LL0x4000829f60;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829cc8; Value = 0xa8efc16e4f1da713; PC = 0x274877984740 *)
mov x21 LL0x4000829cc8;
mov x22 LL0x4000829cd0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f38; PC = 0x274877984748 *)
mov LL0x4000829f38 x15;
mov LL0x4000829f40 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f68; Value = 0x268dbadaf97490c8; PC = 0x274877984756 *)
mov x15 LL0x4000829f68;
mov x16 LL0x4000829f70;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829cd8; Value = 0x4b1ba77642c5c25f; PC = 0x274877984764 *)
mov x23 LL0x4000829cd8;
mov x24 LL0x4000829ce0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829f48; PC = 0x274877984828 *)
mov LL0x4000829f48 x11;
mov LL0x4000829f50 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829f58; PC = 0x274877984836 *)
mov LL0x4000829f58 x13;
mov LL0x4000829f60 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f68; PC = 0x274877984840 *)
mov LL0x4000829f68 x15;
mov LL0x4000829f70 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000400400000abc4; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* mov	x3, x19                                     #! PC = 0x274877950916 *)
mov x3 x19;
(* ldr	x2, [sp, #96]                               #! EA = L0x40008299f0; Value = 0x0000004000829ce8; PC = 0x274877950920 *)
mov x2 LL0x40008299f0;
(* mov	x1, x20                                     #! PC = 0x274877950924 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877950928 *)
mov x0 x20;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877950932 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877950932 = 0x274877950932;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984580 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984588 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984592 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984596 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f78; Value = 0x74c5274a9c5f3638; PC = 0x274877984672 *)
mov x11 LL0x4000829f78;
mov x12 LL0x4000829f80;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ce8; Value = 0xc73bbcb7f54de580; PC = 0x274877984676 *)
mov x19 LL0x4000829ce8;
mov x20 LL0x4000829cf0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f88; Value = 0x1a947f20fc9eaf73; PC = 0x274877984680 *)
mov x13 LL0x4000829f88;
mov x14 LL0x4000829f90;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829cf8; Value = 0x293deebfffea2401; PC = 0x274877984688 *)
mov x21 LL0x4000829cf8;
mov x22 LL0x4000829d00;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f98; Value = 0x6773a5885bc208f1; PC = 0x274877984696 *)
mov x15 LL0x4000829f98;
mov x16 LL0x4000829fa0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829d08; Value = 0xf05ac0a9b838b7e1; PC = 0x274877984704 *)
mov x23 LL0x4000829d08;
mov x24 LL0x4000829d10;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f78; PC = 0x274877984712 *)
mov LL0x4000829f78 x11;
mov LL0x4000829f80 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fa8; Value = 0xe9e6ee84ff8e5a3d; PC = 0x274877984720 *)
mov x11 LL0x4000829fa8;
mov x12 LL0x4000829fb0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829d18; Value = 0x2941fad56ff9c9f1; PC = 0x274877984728 *)
mov x19 LL0x4000829d18;
mov x20 LL0x4000829d20;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f88; PC = 0x274877984732 *)
mov LL0x4000829f88 x13;
mov LL0x4000829f90 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fb8; Value = 0xeeb1b5f2e6c68227; PC = 0x274877984736 *)
mov x13 LL0x4000829fb8;
mov x14 LL0x4000829fc0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829d28; Value = 0xc6bfe47aaf5d5198; PC = 0x274877984740 *)
mov x21 LL0x4000829d28;
mov x22 LL0x4000829d30;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f98; PC = 0x274877984748 *)
mov LL0x4000829f98 x15;
mov LL0x4000829fa0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fc8; Value = 0x5c6e2cb4bfe5e842; PC = 0x274877984756 *)
mov x15 LL0x4000829fc8;
mov x16 LL0x4000829fd0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829d38; Value = 0x00000040008303a0; PC = 0x274877984764 *)
mov x23 LL0x4000829d38;
mov x24 LL0x4000829d40;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877984828 *)
mov LL0x4000829fa8 x11;
mov LL0x4000829fb0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877984836 *)
mov LL0x4000829fb8 x13;
mov LL0x4000829fc0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877984840 *)
mov LL0x4000829fc8 x15;
mov LL0x4000829fd0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x003400400000abd8; PC = 0x274877984616 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984624 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984628 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984632 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

assert true
    && and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                             LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                             LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                             LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0])
                  (limbs 64 [LL0x4000829f18r, LL0x4000829f20r, LL0x4000829f28r,
                             LL0x4000829f30r, LL0x4000829f38r, LL0x4000829f40r,
                             LL0x4000829f48r, LL0x4000829f50r, LL0x4000829f58r,
                             LL0x4000829f60r, LL0x4000829f68r, LL0x4000829f70r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
                   limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                             LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                             LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                             LL0x4000829d30, LL0x4000829d38, LL0x4000829d40])
                  (limbs 64 [LL0x4000829f78r, LL0x4000829f80r, LL0x4000829f88r,
                             LL0x4000829f90r, LL0x4000829f98r, LL0x4000829fa0r,
                             LL0x4000829fa8r, LL0x4000829fb0r, LL0x4000829fb8r,
                             LL0x4000829fc0r, LL0x4000829fc8r, LL0x4000829fd0r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod (limbs 64 [LL0x4000829f18, LL0x4000829f20, LL0x4000829f28,
                             LL0x4000829f30, LL0x4000829f38, LL0x4000829f40,
                             LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                             LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] +
                   limbs 64 [LL0x4000829c88, LL0x4000829c90, LL0x4000829c98,
                             LL0x4000829ca0, LL0x4000829ca8, LL0x4000829cb0,
                             LL0x4000829cb8, LL0x4000829cc0, LL0x4000829cc8,
                             LL0x4000829cd0, LL0x4000829cd8, LL0x4000829ce0])
                  (limbs 64 [LL0x4000829f18r, LL0x4000829f20r, LL0x4000829f28r,
                             LL0x4000829f30r, LL0x4000829f38r, LL0x4000829f40r,
                             LL0x4000829f48r, LL0x4000829f50r, LL0x4000829f58r,
                             LL0x4000829f60r, LL0x4000829f68r, LL0x4000829f70r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [LL0x4000829f78, LL0x4000829f80, LL0x4000829f88,
                             LL0x4000829f90, LL0x4000829f98, LL0x4000829fa0,
                             LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                             LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] +
                   limbs 64 [LL0x4000829ce8, LL0x4000829cf0, LL0x4000829cf8,
                             LL0x4000829d00, LL0x4000829d08, LL0x4000829d10,
                             LL0x4000829d18, LL0x4000829d20, LL0x4000829d28,
                             LL0x4000829d30, LL0x4000829d38, LL0x4000829d40])
                  (limbs 64 [LL0x4000829f78r, LL0x4000829f80r, LL0x4000829f88r,
                             LL0x4000829f90r, LL0x4000829f98r, LL0x4000829fa0r,
                             LL0x4000829fa8r, LL0x4000829fb0r, LL0x4000829fb8r,
                             LL0x4000829fc0r, LL0x4000829fc8r, LL0x4000829fd0r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877950936 *)
mov x3 x19;
(* mov	x2, x28                                     #! PC = 0x274877950940 *)
mov x2 x28;
(* mov	x1, x21                                     #! PC = 0x274877950944 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877950948 *)
mov x0 x21;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950952 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950952 = 0x274877950952;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;

rcut and [limbs 64 [LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                    LL0x4000829c10, LL0x4000829c18, LL0x4000829c20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                    LL0x4000829c70, LL0x4000829c78, LL0x4000829c80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829f48, LL0x4000829f50, LL0x4000829f58,
                    LL0x4000829f60, LL0x4000829f68, LL0x4000829f70] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [LL0x4000829fa8, LL0x4000829fb0, LL0x4000829fb8,
                    LL0x4000829fc0, LL0x4000829fc8, LL0x4000829fd0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts;

(* NOTE: save old values *)
mov LL0x4000829f18s LL0x4000829f18; mov LL0x4000829f20s LL0x4000829f20;
mov LL0x4000829f28s LL0x4000829f28; mov LL0x4000829f30s LL0x4000829f30;
mov LL0x4000829f38s LL0x4000829f38; mov LL0x4000829f40s LL0x4000829f40;
mov LL0x4000829f48s LL0x4000829f48; mov LL0x4000829f50s LL0x4000829f50;
mov LL0x4000829f58s LL0x4000829f58; mov LL0x4000829f60s LL0x4000829f60;
mov LL0x4000829f68s LL0x4000829f68; mov LL0x4000829f70s LL0x4000829f70;
mov LL0x4000829f78s LL0x4000829f78; mov LL0x4000829f80s LL0x4000829f80;
mov LL0x4000829f88s LL0x4000829f88; mov LL0x4000829f90s LL0x4000829f90;
mov LL0x4000829f98s LL0x4000829f98; mov LL0x4000829fa0s LL0x4000829fa0;
mov LL0x4000829fa8s LL0x4000829fa8; mov LL0x4000829fb0s LL0x4000829fb0;
mov LL0x4000829fb8s LL0x4000829fb8; mov LL0x4000829fc0s LL0x4000829fc0;
mov LL0x4000829fc8s LL0x4000829fc8; mov LL0x4000829fd0s LL0x4000829fd0;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f18; Value = 0x0344a626fc9b6e28; PC = 0x274877984384 *)
mov x11 LL0x4000829f18;
mov x12 LL0x4000829f20;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829bc8; Value = 0xde8c000000000000; PC = 0x274877984388 *)
mov x19 LL0x4000829bc8;
mov x20 LL0x4000829bd0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f28; Value = 0xb417ec019565300c; PC = 0x274877984392 *)
mov x13 LL0x4000829f28;
mov x14 LL0x4000829f30;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829bd8; Value = 0x7a1bbdc054180c5e; PC = 0x274877984400 *)
mov x21 LL0x4000829bd8;
mov x22 LL0x4000829be0;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f38; Value = 0x6df2b9e101ddb445; PC = 0x274877984408 *)
mov x15 LL0x4000829f38;
mov x16 LL0x4000829f40;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829be8; Value = 0xabfafe98a7fa10f6; PC = 0x274877984416 *)
mov x23 LL0x4000829be8;
mov x24 LL0x4000829bf0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f18; PC = 0x274877984424 *)
mov ret40 x11;
mov ret41 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829f48; Value = 0xfe7488ae4518780d; PC = 0x274877984432 *)
mov x11 LL0x4000829f48;
mov x12 LL0x4000829f50;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829bf8; Value = 0x5fe26534850ac206; PC = 0x274877984440 *)
mov x19 LL0x4000829bf8;
mov x20 LL0x4000829c00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f28; PC = 0x274877984444 *)
mov ret42 x13;
mov ret43 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829f58; Value = 0x30acbf5fe2b37d89; PC = 0x274877984448 *)
mov x13 LL0x4000829f58;
mov x14 LL0x4000829f60;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c08; Value = 0x1681664ed2569f1a; PC = 0x274877984452 *)
mov x21 LL0x4000829c08;
mov x22 LL0x4000829c10;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f38; PC = 0x274877984460 *)
mov ret44 x15;
mov ret45 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829f68; Value = 0x268dbb1af9fa7b40; PC = 0x274877984468 *)
mov x15 LL0x4000829f68;
mov x16 LL0x4000829f70;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c18; Value = 0x4b1ba6f6434b7cd5; PC = 0x274877984476 *)
mov x23 LL0x4000829c18;
mov x24 LL0x4000829c20;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829f48; PC = 0x274877984540 *)
mov ret46 x11;
mov ret47 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829f58; PC = 0x274877984548 *)
mov ret48 x13;
mov ret49 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829f68; PC = 0x274877984556 *)
mov ret4a x15;
mov ret4b x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x006d00400000abec; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* mov	x3, x19                                     #! PC = 0x274877950956 *)
mov x3 x19;
(* ldr	x2, [sp, #120]                              #! EA = L0x4000829a08; Value = 0x0000004000829c28; PC = 0x274877950960 *)
mov x2 LL0x4000829a08;
(* mov	x1, x20                                     #! PC = 0x274877950964 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877950968 *)
mov x0 x20;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877950972 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877950972 = 0x274877950972;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829950; PC = 0x274877984292 *)
mov LL0x4000829950 x29;
mov LL0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877984300 *)
mov LL0x4000829960 x19;
mov LL0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877984304 *)
mov LL0x4000829970 x21;
mov LL0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877984308 *)
mov LL0x4000829980 x23;
mov LL0x4000829988 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 LL0x4000016928;
mov x6 LL0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 LL0x4000016938;
mov x8 LL0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 LL0x4000016948;
mov x10 LL0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f78; Value = 0xad896a92a71150b8; PC = 0x274877984384 *)
mov x11 LL0x4000829f78;
mov x12 LL0x4000829f80;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c28; Value = 0x0000000000000000; PC = 0x274877984388 *)
mov x19 LL0x4000829c28;
mov x20 LL0x4000829c30;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f88; Value = 0xf1569060fcb48b72; PC = 0x274877984392 *)
mov x13 LL0x4000829f88;
mov x14 LL0x4000829f90;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c38; Value = 0x0000000000000000; PC = 0x274877984400 *)
mov x21 LL0x4000829c38;
mov x22 LL0x4000829c40;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829f98; Value = 0x7718e4dea3895110; PC = 0x274877984408 *)
mov x15 LL0x4000829f98;
mov x16 LL0x4000829fa0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829c48; Value = 0xa5b75f691182b810; PC = 0x274877984416 *)
mov x23 LL0x4000829c48;
mov x24 LL0x4000829c50;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x4000829f78; PC = 0x274877984424 *)
mov ret50 x11;
mov ret51 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fa8; Value = 0xc0a4f3af8f94904b; PC = 0x274877984432 *)
mov x11 LL0x4000829fa8;
mov x12 LL0x4000829fb0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829c58; Value = 0x30e97a4437e7fa80; PC = 0x274877984440 *)
mov x19 LL0x4000829c58;
mov x20 LL0x4000829c60;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x4000829f88; PC = 0x274877984444 *)
mov ret52 x13;
mov ret53 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fb8; Value = 0x27f1d1783769308e; PC = 0x274877984448 *)
mov x13 LL0x4000829fb8;
mov x14 LL0x4000829fc0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c68; Value = 0x2aca32e21865e811; PC = 0x274877984452 *)
mov x21 LL0x4000829c68;
mov x22 LL0x4000829c70;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x4000829f98; PC = 0x274877984460 *)
mov ret54 x15;
mov ret55 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fc8; Value = 0x5c6e2c74bf62e4a1; PC = 0x274877984468 *)
mov x15 LL0x4000829fc8;
mov x16 LL0x4000829fd0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c78; Value = 0x0000000000003000; PC = 0x274877984476 *)
mov x23 LL0x4000829c78;
mov x24 LL0x4000829c80;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x4000829fa8; PC = 0x274877984540 *)
mov ret56 x11;
mov ret57 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x4000829fb8; PC = 0x274877984548 *)
mov ret58 x13;
mov ret59 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x4000829fc8; PC = 0x274877984556 *)
mov ret5a x15;
mov ret5b x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x001900400000ac00; PC = 0x274877984328 *)
mov x30 LL0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 LL0x4000829960;
mov x20 LL0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x0000004000829f18; PC = 0x274877984336 *)
mov x21 LL0x4000829970;
mov x22 LL0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x0000004000829c88; PC = 0x274877984340 *)
mov x23 LL0x4000829980;
mov x24 LL0x4000829988;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829950; Value = 0x0000004000829990; PC = 0x274877984344 *)
mov x29 LL0x4000829950;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

assert true
    && and [eqmod (limbs 64 [ret40, ret41, ret42, ret43, ret44, ret45,
                             ret46, ret47, ret48, ret49, ret4a, ret4b])
                  (limbs 64 [LL0x4000829f18s, LL0x4000829f20s, LL0x4000829f28s,
                             LL0x4000829f30s, LL0x4000829f38s, LL0x4000829f40s,
                             LL0x4000829f48s, LL0x4000829f50s, LL0x4000829f58s,
                             LL0x4000829f60s, LL0x4000829f68s, LL0x4000829f70s] +
                   limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                             LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                             LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                             LL0x4000829c10, LL0x4000829c18, LL0x4000829c20])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod (limbs 64 [ret50, ret51, ret52, ret53, ret54, ret55,
                             ret56, ret57, ret58, ret59, ret5a, ret5b])
                  (limbs 64 [LL0x4000829f78s, LL0x4000829f80s, LL0x4000829f88s,
                             LL0x4000829f90s, LL0x4000829f98s, LL0x4000829fa0s,
                             LL0x4000829fa8s, LL0x4000829fb0s, LL0x4000829fb8s,
                             LL0x4000829fc0s, LL0x4000829fc8s, LL0x4000829fd0s] +
                   limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                             LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                             LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                             LL0x4000829c70, LL0x4000829c78, LL0x4000829c80])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                               m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod (limbs 64 [ret40, ret41, ret42, ret43, ret44, ret45,
                             ret46, ret47, ret48, ret49, ret4a, ret4b])
                  (limbs 64 [LL0x4000829f18s, LL0x4000829f20s, LL0x4000829f28s,
                             LL0x4000829f30s, LL0x4000829f38s, LL0x4000829f40s,
                             LL0x4000829f48s, LL0x4000829f50s, LL0x4000829f58s,
                             LL0x4000829f60s, LL0x4000829f68s, LL0x4000829f70s] +
                   limbs 64 [LL0x4000829bc8, LL0x4000829bd0, LL0x4000829bd8,
                             LL0x4000829be0, LL0x4000829be8, LL0x4000829bf0,
                             LL0x4000829bf8, LL0x4000829c00, LL0x4000829c08,
                             LL0x4000829c10, LL0x4000829c18, LL0x4000829c20])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [ret50, ret51, ret52, ret53, ret54, ret55,
                             ret56, ret57, ret58, ret59, ret5a, ret5b])
                  (limbs 64 [LL0x4000829f78s, LL0x4000829f80s, LL0x4000829f88s,
                             LL0x4000829f90s, LL0x4000829f98s, LL0x4000829fa0s,
                             LL0x4000829fa8s, LL0x4000829fb0s, LL0x4000829fb8s,
                             LL0x4000829fc0s, LL0x4000829fc8s, LL0x4000829fd0s] +
                   limbs 64 [LL0x4000829c28, LL0x4000829c30, LL0x4000829c38,
                             LL0x4000829c40, LL0x4000829c48, LL0x4000829c50,
                             LL0x4000829c58, LL0x4000829c60, LL0x4000829c68,
                             LL0x4000829c70, LL0x4000829c78, LL0x4000829c80])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* ret[2] = (a0 + a2)*(b0 + b2) - a0*b0 - a2*b2 + a1*b1
          = a0*b2 + a2*b0 + a1*b1 *)
(*
assert and [eqmod (limbs 64 [LL0x4000829a48r2, LL0x4000829a50r2, LL0x4000829a58r2,
                             LL0x4000829a60r2, LL0x4000829a68r2, LL0x4000829a70r2] +
                   limbs 64 [LL0x4000829a78r2, LL0x4000829a80r2, LL0x4000829a88r2,
                             LL0x4000829a90r2, LL0x4000829a98r2, LL0x4000829aa0r2] * U)
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                   limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [a50, a51, a52, a53, a54, a55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [LL0x4000829aa8r2, LL0x4000829ab0r2, LL0x4000829ab8r2,
                             LL0x4000829ac0r2, LL0x4000829ac8r2, LL0x4000829ad0r2] +
                   limbs 64 [LL0x4000829ad8r2, LL0x4000829ae0r2, LL0x4000829ae8r2,
                             LL0x4000829af0r2, LL0x4000829af8r2, LL0x4000829b00r2] * U)
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                   limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [b50, b51, b52, b53, b54, b55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [ret40, ret41, ret42, ret43, ret44, ret45,
                             ret46, ret47, ret48, ret49, ret4a, ret4b] +
                   limbs 64 [ret50, ret51, ret52, ret53, ret54, ret55,
                             ret56, ret57, ret58, ret59, ret5a, ret5b] * U)
                  ((limbs 64 [LL0x4000829a48r2, LL0x4000829a50r2, LL0x4000829a58r2,
                              LL0x4000829a60r2, LL0x4000829a68r2, LL0x4000829a70r2] +
                    limbs 64 [LL0x4000829a78r2, LL0x4000829a80r2, LL0x4000829a88r2,
                              LL0x4000829a90r2, LL0x4000829a98r2, LL0x4000829aa0r2] * U) *
                   (limbs 64 [LL0x4000829aa8r2, LL0x4000829ab0r2, LL0x4000829ab8r2,
                              LL0x4000829ac0r2, LL0x4000829ac8r2, LL0x4000829ad0r2] +
                    limbs 64 [LL0x4000829ad8r2, LL0x4000829ae0r2, LL0x4000829ae8r2,
                              LL0x4000829af0r2, LL0x4000829af8r2, LL0x4000829b00r2] * U) -
                   (limbs 64 [a00, a01, a02, a03, a04, a05] +
                    limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                   (limbs 64 [b00, b01, b02, b03, b04, b05] +
                    limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
                   (limbs 64 [a40, a41, a42, a43, a44, a45] +
                    limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                   (limbs 64 [b40, b41, b42, b43, b44, b45] +
                    limbs 64 [b50, b51, b52, b53, b54, b55] * U) +
                   (limbs 64 [a20, a21, a22, a23, a24, a25] +
                    limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                   (limbs 64 [b20, b21, b22, b23, b24, b25] +
                    limbs 64 [b30, b31, b32, b33, b34, b35] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                   U * U + 1]]
    && true;
*)
(* ldr	x0, [sp, #168]                              #! EA = L0x4000829a38; Value = 0x000000400085d6d0; PC = 0x274877950976 *)
mov x0 LL0x4000829a38;
(* ldr	x1, [sp, #952]                              #! EA = L0x4000829d48; Value = 0xb9a8639ce44cac00; PC = 0x274877950980 *)
mov x1 LL0x4000829d48;
(* ldr	x0, [x0]                                    #! EA = L0x400085d6d0; Value = 0xb9a8639ce44cac00; PC = 0x274877950984 *)
mov x0 LL0x400085d6d0;
(* eor	x0, x1, x0                                  #! PC = 0x274877950988 *)
xor x0@uint64 x1 x0;
(* #cbnz	x0, 0x400000ac34 <mul_fp6x2+892>          #! PC = 0x274877950992 *)
#cbnz	%%x0, 0x400000ac34 <mul_fp6x2+892>          #! 0x274877950992 = 0x274877950992;
(* ldp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; Value = 0x000000400082a048; PC = 0x274877950996 *)
mov x19 LL0x40008299a0;
mov x20 LL0x40008299a8;
(* ldp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; Value = 0x0000004000829d98; PC = 0x274877951000 *)
mov x21 LL0x40008299b0;
mov x22 LL0x40008299b8;
(* ldp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; Value = 0x000000400085d6d0; PC = 0x274877951004 *)
mov x23 LL0x40008299c0;
mov x24 LL0x40008299c8;
(* ldp	x25, x26, [sp, #64]                         #! EA = L0x40008299d0; Value = 0x000000400085d6d0; PC = 0x274877951008 *)
mov x25 LL0x40008299d0;
mov x26 LL0x40008299d8;
(* ldp	x27, x28, [sp, #80]                         #! EA = L0x40008299e0; Value = 0x000000400082a718; PC = 0x274877951012 *)
mov x27 LL0x40008299e0;
mov x28 LL0x40008299e8;
(* ldp	x29, x30, [sp]                              #! EA = L0x4000829990; Value = 0x0000004000829d50; PC = 0x274877951016 *)
mov x29 LL0x4000829990;
mov x30 LL0x4000829998;
(* add	sp, sp, #0x3c0                              #! PC = 0x274877951020 *)
adds dontcare sp sp 0x3c0@uint64;
(* #ret                                            #! PC = 0x274877951024 *)
#ret                                            #! 0x274877951024 = 0x274877951024;
{
  true
&&
  true
}

proc main (uint64 a00,uint64 a01,uint64 a02,uint64 a03,uint64 a04,uint64 a05,
           uint64 a10,uint64 a11,uint64 a12,uint64 a13,uint64 a14,uint64 a15,
           uint64 a20,uint64 a21,uint64 a22,uint64 a23,uint64 a24,uint64 a25,
           uint64 a30,uint64 a31,uint64 a32,uint64 a33,uint64 a34,uint64 a35,
           uint64 a40,uint64 a41,uint64 a42,uint64 a43,uint64 a44,uint64 a45,
           uint64 a50,uint64 a51,uint64 a52,uint64 a53,uint64 a54,uint64 a55,
           uint64 a60,uint64 a61,uint64 a62,uint64 a63,uint64 a64,uint64 a65,
           uint64 a70,uint64 a71,uint64 a72,uint64 a73,uint64 a74,uint64 a75,
           uint64 a80,uint64 a81,uint64 a82,uint64 a83,uint64 a84,uint64 a85,
           uint64 a90,uint64 a91,uint64 a92,uint64 a93,uint64 a94,uint64 a95,
           uint64 aa0,uint64 aa1,uint64 aa2,uint64 aa3,uint64 aa4,uint64 aa5,
           uint64 ab0,uint64 ab1,uint64 ab2,uint64 ab3,uint64 ab4,uint64 ab5,

           uint64 b00,uint64 b01,uint64 b02,uint64 b03,uint64 b04,uint64 b05,
           uint64 b10,uint64 b11,uint64 b12,uint64 b13,uint64 b14,uint64 b15,
           uint64 b20,uint64 b21,uint64 b22,uint64 b23,uint64 b24,uint64 b25,
           uint64 b30,uint64 b31,uint64 b32,uint64 b33,uint64 b34,uint64 b35,
           uint64 b40,uint64 b41,uint64 b42,uint64 b43,uint64 b44,uint64 b45,
           uint64 b50,uint64 b51,uint64 b52,uint64 b53,uint64 b54,uint64 b55,
           uint64 b60,uint64 b61,uint64 b62,uint64 b63,uint64 b64,uint64 b65,
           uint64 b70,uint64 b71,uint64 b72,uint64 b73,uint64 b74,uint64 b75,
           uint64 b80,uint64 b81,uint64 b82,uint64 b83,uint64 b84,uint64 b85,
           uint64 b90,uint64 b91,uint64 b92,uint64 b93,uint64 b94,uint64 b95,
           uint64 ba0,uint64 ba1,uint64 ba2,uint64 ba3,uint64 ba4,uint64 ba5,
           uint64 bb0,uint64 bb1,uint64 bb2,uint64 bb3,uint64 bb4,uint64 bb5,

           uint64  m0, uint64  m1, uint64  m2,
           uint64  m3, uint64  m4, uint64  m5,

           uint64  mp,
           uint64  x0,  uint64 x1,  uint64 x2,
           uint64 x19, uint64 x20, uint64 x21, uint64 x22, uint64 x23,
           uint64 x24, uint64 x25, uint64 x26, uint64 x27, uint64 x28,
           uint64 x29, uint64 x30,
           uint64 sp,

           uint64   U, uint64   V, uint64  W) =
{
  and [
    x0 = 0x400082aa78, x1 = 0x400082a5f8, x2 = 0x400082a838,
    m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
    m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
    m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a
  ]
&&
  and [
    x0 = 0x400082aa78@64, x1 = 0x400082a5f8@64, x2 = 0x400082a838@64,
    m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
    m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
    m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

    limbs 64 [a00,a01,a02,a03,a04,a05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a10,a11,a12,a13,a14,a15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a20,a21,a22,a23,a24,a25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a30,a31,a32,a33,a34,a35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a40,a41,a42,a43,a44,a45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a50,a51,a52,a53,a54,a55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a60,a61,a62,a63,a64,a65] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a70,a71,a72,a73,a74,a75] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a80,a81,a82,a83,a84,a85] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [a90,a91,a92,a93,a94,a95] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [aa0,aa1,aa2,aa3,aa4,aa5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [ab0,ab1,ab2,ab3,ab4,ab5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b00,b01,b02,b03,b04,b05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b10,b11,b12,b13,b14,b15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b20,b21,b22,b23,b24,b25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b30,b31,b32,b33,b34,b35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b40,b41,b42,b43,b44,b45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b50,b51,b52,b53,b54,b55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b60,b61,b62,b63,b64,b65] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b70,b71,b72,b73,b74,b75] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b80,b81,b82,b83,b84,b85] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [b90,b91,b92,b93,b94,b95] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [ba0,ba1,ba2,ba3,ba4,ba5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
    limbs 64 [bb0,bb1,bb2,bb3,bb4,bb5] <u limbs 64 [m0,m1,m2,m3,m4,m5]
  ]
}

mov L0x400082a5f8 a00; mov L0x400082a600 a01; mov L0x400082a608 a02;
mov L0x400082a610 a03; mov L0x400082a618 a04; mov L0x400082a620 a05;
mov L0x400082a628 a10; mov L0x400082a630 a11; mov L0x400082a638 a12;
mov L0x400082a640 a13; mov L0x400082a648 a14; mov L0x400082a650 a15;
mov L0x400082a658 a20; mov L0x400082a660 a21; mov L0x400082a668 a22;
mov L0x400082a670 a23; mov L0x400082a678 a24; mov L0x400082a680 a25;
mov L0x400082a688 a30; mov L0x400082a690 a31; mov L0x400082a698 a32;
mov L0x400082a6a0 a33; mov L0x400082a6a8 a34; mov L0x400082a6b0 a35;
mov L0x400082a6b8 a40; mov L0x400082a6c0 a41; mov L0x400082a6c8 a42;
mov L0x400082a6d0 a43; mov L0x400082a6d8 a44; mov L0x400082a6e0 a45;
mov L0x400082a6e8 a50; mov L0x400082a6f0 a51; mov L0x400082a6f8 a52;
mov L0x400082a700 a53; mov L0x400082a708 a54; mov L0x400082a710 a55;
mov L0x400082a718 a60; mov L0x400082a720 a61; mov L0x400082a728 a62;
mov L0x400082a730 a63; mov L0x400082a738 a64; mov L0x400082a740 a65;
mov L0x400082a748 a70; mov L0x400082a750 a71; mov L0x400082a758 a72;
mov L0x400082a760 a73; mov L0x400082a768 a74; mov L0x400082a770 a75;
mov L0x400082a778 a80; mov L0x400082a780 a81; mov L0x400082a788 a82;
mov L0x400082a790 a83; mov L0x400082a798 a84; mov L0x400082a7a0 a85;
mov L0x400082a7a8 a90; mov L0x400082a7b0 a91; mov L0x400082a7b8 a92;
mov L0x400082a7c0 a93; mov L0x400082a7c8 a94; mov L0x400082a7d0 a95;
mov L0x400082a7d8 aa0; mov L0x400082a7e0 aa1; mov L0x400082a7e8 aa2;
mov L0x400082a7f0 aa3; mov L0x400082a7f8 aa4; mov L0x400082a800 aa5;
mov L0x400082a808 ab0; mov L0x400082a810 ab1; mov L0x400082a818 ab2;
mov L0x400082a820 ab3; mov L0x400082a828 ab4; mov L0x400082a830 ab5;

mov L0x400082a838 b00; mov L0x400082a840 b01; mov L0x400082a848 b02;
mov L0x400082a850 b03; mov L0x400082a858 b04; mov L0x400082a860 b05;
mov L0x400082a868 b10; mov L0x400082a870 b11; mov L0x400082a878 b12;
mov L0x400082a880 b13; mov L0x400082a888 b14; mov L0x400082a890 b15;
mov L0x400082a898 b20; mov L0x400082a8a0 b21; mov L0x400082a8a8 b22;
mov L0x400082a8b0 b23; mov L0x400082a8b8 b24; mov L0x400082a8c0 b25;
mov L0x400082a8c8 b30; mov L0x400082a8d0 b31; mov L0x400082a8d8 b32;
mov L0x400082a8e0 b33; mov L0x400082a8e8 b34; mov L0x400082a8f0 b35;
mov L0x400082a8f8 b40; mov L0x400082a900 b41; mov L0x400082a908 b42;
mov L0x400082a910 b43; mov L0x400082a918 b44; mov L0x400082a920 b45;
mov L0x400082a928 b50; mov L0x400082a930 b51; mov L0x400082a938 b52;
mov L0x400082a940 b53; mov L0x400082a948 b54; mov L0x400082a950 b55;
mov L0x400082a958 b60; mov L0x400082a960 b61; mov L0x400082a968 b62;
mov L0x400082a970 b63; mov L0x400082a978 b64; mov L0x400082a980 b65;
mov L0x400082a988 b70; mov L0x400082a990 b71; mov L0x400082a998 b72;
mov L0x400082a9a0 b73; mov L0x400082a9a8 b74; mov L0x400082a9b0 b75;
mov L0x400082a9b8 b80; mov L0x400082a9c0 b81; mov L0x400082a9c8 b82;
mov L0x400082a9d0 b83; mov L0x400082a9d8 b84; mov L0x400082a9e0 b85;
mov L0x400082a9e8 b90; mov L0x400082a9f0 b91; mov L0x400082a9f8 b92;
mov L0x400082aa00 b93; mov L0x400082aa08 b94; mov L0x400082aa10 b95;
mov L0x400082aa18 ba0; mov L0x400082aa20 ba1; mov L0x400082aa28 ba2;
mov L0x400082aa30 ba3; mov L0x400082aa38 ba4; mov L0x400082aa40 ba5;
mov L0x400082aa48 bb0; mov L0x400082aa50 bb1; mov L0x400082aa58 bb2;
mov L0x400082aa60 bb3; mov L0x400082aa68 bb4; mov L0x400082aa70 bb5;

mov L0x4000029fb0 0x000000400085d6d0@uint64;
mov L0x400085d6d0 0x2e016ed0bbf5d500@uint64;

mov L0x4000016928 m0; mov L0x4000016930 m1; mov L0x4000016938 m2;
mov L0x4000016940 m3; mov L0x4000016948 m4; mov L0x4000016950 m5;


(* NOTE: declare t0 *)

mov t0_00 0@uint64; mov t0_01 0@uint64; mov t0_02 0@uint64;
mov t0_03 0@uint64; mov t0_04 0@uint64; mov t0_05 0@uint64;
mov t0_06 0@uint64; mov t0_07 0@uint64; mov t0_08 0@uint64;
mov t0_09 0@uint64; mov t0_0a 0@uint64; mov t0_0b 0@uint64;
mov t0_10 0@uint64; mov t0_11 0@uint64; mov t0_12 0@uint64;
mov t0_13 0@uint64; mov t0_14 0@uint64; mov t0_15 0@uint64;
mov t0_16 0@uint64; mov t0_17 0@uint64; mov t0_18 0@uint64;
mov t0_19 0@uint64; mov t0_1a 0@uint64; mov t0_1b 0@uint64;
mov t0_20 0@uint64; mov t0_21 0@uint64; mov t0_22 0@uint64;
mov t0_23 0@uint64; mov t0_24 0@uint64; mov t0_25 0@uint64;
mov t0_26 0@uint64; mov t0_27 0@uint64; mov t0_28 0@uint64;
mov t0_29 0@uint64; mov t0_2a 0@uint64; mov t0_2b 0@uint64;
mov t0_30 0@uint64; mov t0_31 0@uint64; mov t0_32 0@uint64;
mov t0_33 0@uint64; mov t0_34 0@uint64; mov t0_35 0@uint64;
mov t0_36 0@uint64; mov t0_37 0@uint64; mov t0_38 0@uint64;
mov t0_39 0@uint64; mov t0_3a 0@uint64; mov t0_3b 0@uint64;
mov t0_40 0@uint64; mov t0_41 0@uint64; mov t0_42 0@uint64;
mov t0_43 0@uint64; mov t0_44 0@uint64; mov t0_45 0@uint64;
mov t0_46 0@uint64; mov t0_47 0@uint64; mov t0_48 0@uint64;
mov t0_49 0@uint64; mov t0_4a 0@uint64; mov t0_4b 0@uint64;
mov t0_50 0@uint64; mov t0_51 0@uint64; mov t0_52 0@uint64;
mov t0_53 0@uint64; mov t0_54 0@uint64; mov t0_55 0@uint64;
mov t0_56 0@uint64; mov t0_57 0@uint64; mov t0_58 0@uint64;
mov t0_59 0@uint64; mov t0_5a 0@uint64; mov t0_5b 0@uint64;

(* NOTE: declare t1 *)

mov t1_00 0@uint64; mov t1_01 0@uint64; mov t1_02 0@uint64;
mov t1_03 0@uint64; mov t1_04 0@uint64; mov t1_05 0@uint64;
mov t1_06 0@uint64; mov t1_07 0@uint64; mov t1_08 0@uint64;
mov t1_09 0@uint64; mov t1_0a 0@uint64; mov t1_0b 0@uint64;
mov t1_10 0@uint64; mov t1_11 0@uint64; mov t1_12 0@uint64;
mov t1_13 0@uint64; mov t1_14 0@uint64; mov t1_15 0@uint64;
mov t1_16 0@uint64; mov t1_17 0@uint64; mov t1_18 0@uint64;
mov t1_19 0@uint64; mov t1_1a 0@uint64; mov t1_1b 0@uint64;
mov t1_20 0@uint64; mov t1_21 0@uint64; mov t1_22 0@uint64;
mov t1_23 0@uint64; mov t1_24 0@uint64; mov t1_25 0@uint64;
mov t1_26 0@uint64; mov t1_27 0@uint64; mov t1_28 0@uint64;
mov t1_29 0@uint64; mov t1_2a 0@uint64; mov t1_2b 0@uint64;
mov t1_30 0@uint64; mov t1_31 0@uint64; mov t1_32 0@uint64;
mov t1_33 0@uint64; mov t1_34 0@uint64; mov t1_35 0@uint64;
mov t1_36 0@uint64; mov t1_37 0@uint64; mov t1_38 0@uint64;
mov t1_39 0@uint64; mov t1_3a 0@uint64; mov t1_3b 0@uint64;
mov t1_40 0@uint64; mov t1_41 0@uint64; mov t1_42 0@uint64;
mov t1_43 0@uint64; mov t1_44 0@uint64; mov t1_45 0@uint64;
mov t1_46 0@uint64; mov t1_47 0@uint64; mov t1_48 0@uint64;
mov t1_49 0@uint64; mov t1_4a 0@uint64; mov t1_4b 0@uint64;
mov t1_50 0@uint64; mov t1_51 0@uint64; mov t1_52 0@uint64;
mov t1_53 0@uint64; mov t1_54 0@uint64; mov t1_55 0@uint64;
mov t1_56 0@uint64; mov t1_57 0@uint64; mov t1_58 0@uint64;
mov t1_59 0@uint64; mov t1_5a 0@uint64; mov t1_5b 0@uint64;

(* NOTE: declare rx *)

mov rx_00 0@uint64; mov rx_01 0@uint64; mov rx_02 0@uint64;
mov rx_03 0@uint64; mov rx_04 0@uint64; mov rx_05 0@uint64;
mov rx_06 0@uint64; mov rx_07 0@uint64; mov rx_08 0@uint64;
mov rx_09 0@uint64; mov rx_0a 0@uint64; mov rx_0b 0@uint64;
mov rx_10 0@uint64; mov rx_11 0@uint64; mov rx_12 0@uint64;
mov rx_13 0@uint64; mov rx_14 0@uint64; mov rx_15 0@uint64;
mov rx_16 0@uint64; mov rx_17 0@uint64; mov rx_18 0@uint64;
mov rx_19 0@uint64; mov rx_1a 0@uint64; mov rx_1b 0@uint64;
mov rx_20 0@uint64; mov rx_21 0@uint64; mov rx_22 0@uint64;
mov rx_23 0@uint64; mov rx_24 0@uint64; mov rx_25 0@uint64;
mov rx_26 0@uint64; mov rx_27 0@uint64; mov rx_28 0@uint64;
mov rx_29 0@uint64; mov rx_2a 0@uint64; mov rx_2b 0@uint64;
mov rx_30 0@uint64; mov rx_31 0@uint64; mov rx_32 0@uint64;
mov rx_33 0@uint64; mov rx_34 0@uint64; mov rx_35 0@uint64;
mov rx_36 0@uint64; mov rx_37 0@uint64; mov rx_38 0@uint64;
mov rx_39 0@uint64; mov rx_3a 0@uint64; mov rx_3b 0@uint64;
mov rx_40 0@uint64; mov rx_41 0@uint64; mov rx_42 0@uint64;
mov rx_43 0@uint64; mov rx_44 0@uint64; mov rx_45 0@uint64;
mov rx_46 0@uint64; mov rx_47 0@uint64; mov rx_48 0@uint64;
mov rx_49 0@uint64; mov rx_4a 0@uint64; mov rx_4b 0@uint64;
mov rx_50 0@uint64; mov rx_51 0@uint64; mov rx_52 0@uint64;
mov rx_53 0@uint64; mov rx_54 0@uint64; mov rx_55 0@uint64;
mov rx_56 0@uint64; mov rx_57 0@uint64; mov rx_58 0@uint64;
mov rx_59 0@uint64; mov rx_5a 0@uint64; mov rx_5b 0@uint64;

(* sub	sp, sp, #0x8c0                              #! PC = 0x274877953284 *)
(* sub	%%sp, %%sp, #0x8c0                              #! 0x274877953284 = 0x274877953284; *)
(* stp	x29, x30, [sp]                              #! EA = L0x40008299d0; PC = 0x274877953288 *)
mov L0x40008299d0 x29;
mov L0x40008299d8 x30;
(* mov	x29, sp                                     #! PC = 0x274877953292 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299e0; PC = 0x274877953296 *)
mov L0x40008299e0 x19;
mov L0x40008299e8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299f0; PC = 0x274877953300 *)
mov L0x40008299f0 x21;
mov L0x40008299f8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829a00; PC = 0x274877953304 *)
mov L0x4000829a00 x23;
mov L0x4000829a08 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829a10; PC = 0x274877953308 *)
mov L0x4000829a10 x25;
mov L0x4000829a18 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x4000829a20; PC = 0x274877953312 *)
mov L0x4000829a20 x27;
mov L0x4000829a28 x28;
(* mov	x28, x0                                     #! PC = 0x274877953316 *)
mov x28 x0;
(* mov	x21, x1                                     #! PC = 0x274877953320 *)
mov x21 x1;
(* mov	x20, x2                                     #! PC = 0x274877953324 *)
mov x20 x2;
(* #adrp	x0, 0x4000029000                           #! PC = 0x274877953328 *)
#adrp	%%x0, 0x4000029000                           #! 0x274877953328 = 0x274877953328;
(* ldr	x0, [x0, #4016]                             #! EA = L0x4000029fb0; Value = 0x000000400085d6d0; PC = 0x274877953332 *)
mov x0 L0x4000029fb0;
(* str	x0, [sp, #136]                              #! EA = L0x4000829a58; PC = 0x274877953336 *)
mov L0x4000829a58 x0;
(* ldr	x3, [x0]                                    #! EA = L0x400085d6d0; Value = 0x2e016ed0bbf5d500; PC = 0x274877953340 *)
mov x3 L0x400085d6d0;
(* str	x3, [sp, #2232]                             #! EA = L0x400082a288; PC = 0x274877953344 *)
mov L0x400082a288 x3;
(* mov	x3, #0x0                   	// #0           #! PC = 0x274877953348 *)
mov x3 0x0@uint64;
(* add	x24, sp, #0x1f8                             #! PC = 0x274877953352 *)
adds dontcare x24 sp 0x1f8@uint64;
(* mov	x0, x24                                     #! PC = 0x274877953356 *)
mov x0 x24;
(* #bl	0x400000a8b8 <mul_fp6x2>                    #! PC = 0x274877953360 *)
#bl	0x400000a8b8 <mul_fp6x2>                    #! 0x274877953360 = 0x274877953360;

(* mul_fp6x2(t0, a[0], b[0]) *)

inline mul_fp6x2 ((* t0 *)
                t0_00, t0_01, t0_02, t0_03, t0_04, t0_05,
                t0_06, t0_07, t0_08, t0_09, t0_0a, t0_0b,
                t0_10, t0_11, t0_12, t0_13, t0_14, t0_15,
                t0_16, t0_17, t0_18, t0_19, t0_1a, t0_1b,
                t0_20, t0_21, t0_22, t0_23, t0_24, t0_25,
                t0_26, t0_27, t0_28, t0_29, t0_2a, t0_2b,
                t0_30, t0_31, t0_32, t0_33, t0_34, t0_35,
                t0_36, t0_37, t0_38, t0_39, t0_3a, t0_3b,
                t0_40, t0_41, t0_42, t0_43, t0_44, t0_45,
                t0_46, t0_47, t0_48, t0_49, t0_4a, t0_4b,
                t0_50, t0_51, t0_52, t0_53, t0_54, t0_55,
                t0_56, t0_57, t0_58, t0_59, t0_5a, t0_5b,

                (* a[0] *)
                L0x400082a5f8, L0x400082a600, L0x400082a608,
                L0x400082a610, L0x400082a618, L0x400082a620,
                L0x400082a628, L0x400082a630, L0x400082a638,
                L0x400082a640, L0x400082a648, L0x400082a650,
                L0x400082a658, L0x400082a660, L0x400082a668,
                L0x400082a670, L0x400082a678, L0x400082a680,
                L0x400082a688, L0x400082a690, L0x400082a698,
                L0x400082a6a0, L0x400082a6a8, L0x400082a6b0,
                L0x400082a6b8, L0x400082a6c0, L0x400082a6c8,
                L0x400082a6d0, L0x400082a6d8, L0x400082a6e0,
                L0x400082a6e8, L0x400082a6f0, L0x400082a6f8,
                L0x400082a700, L0x400082a708, L0x400082a710,

                (* b[0] *)
                L0x400082a838, L0x400082a840, L0x400082a848,
                L0x400082a850, L0x400082a858, L0x400082a860,
                L0x400082a868, L0x400082a870, L0x400082a878,
                L0x400082a880, L0x400082a888, L0x400082a890,
                L0x400082a898, L0x400082a8a0, L0x400082a8a8,
                L0x400082a8b0, L0x400082a8b8, L0x400082a8c0,
                L0x400082a8c8, L0x400082a8d0, L0x400082a8d8,
                L0x400082a8e0, L0x400082a8e8, L0x400082a8f0,
                L0x400082a8f8, L0x400082a900, L0x400082a908,
                L0x400082a910, L0x400082a918, L0x400082a920,
                L0x400082a928, L0x400082a930, L0x400082a938,
                L0x400082a940, L0x400082a948, L0x400082a950,

                m0, m1, m2, m3, m4, m5,
                mp,
                x0, x1, x2,
                x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30,
                sp,
                U, V, W);

mov L0x4000829bc8 t0_00; mov L0x4000829bd0 t0_01; mov L0x4000829bd8 t0_02;
mov L0x4000829be0 t0_03; mov L0x4000829be8 t0_04; mov L0x4000829bf0 t0_05;
mov L0x4000829bf8 t0_06; mov L0x4000829c00 t0_07; mov L0x4000829c08 t0_08;
mov L0x4000829c10 t0_09; mov L0x4000829c18 t0_0a; mov L0x4000829c20 t0_0b;
mov L0x4000829c28 t0_10; mov L0x4000829c30 t0_11; mov L0x4000829c38 t0_12;
mov L0x4000829c40 t0_13; mov L0x4000829c48 t0_14; mov L0x4000829c50 t0_15;
mov L0x4000829c58 t0_16; mov L0x4000829c60 t0_17; mov L0x4000829c68 t0_18;
mov L0x4000829c70 t0_19; mov L0x4000829c78 t0_1a; mov L0x4000829c80 t0_1b;
mov L0x4000829c88 t0_20; mov L0x4000829c90 t0_21; mov L0x4000829c98 t0_22;
mov L0x4000829ca0 t0_23; mov L0x4000829ca8 t0_24; mov L0x4000829cb0 t0_25;
mov L0x4000829cb8 t0_26; mov L0x4000829cc0 t0_27; mov L0x4000829cc8 t0_28;
mov L0x4000829cd0 t0_29; mov L0x4000829cd8 t0_2a; mov L0x4000829ce0 t0_2b;

mov L0x4000829ce8 t0_30; mov L0x4000829cf0 t0_31; mov L0x4000829cf8 t0_32;
mov L0x4000829d00 t0_33; mov L0x4000829d08 t0_34; mov L0x4000829d10 t0_35; 
mov L0x4000829d18 t0_36; mov L0x4000829d20 t0_37; mov L0x4000829d28 t0_38;
mov L0x4000829d30 t0_39; mov L0x4000829d38 t0_3a; mov L0x4000829d40 t0_3b;
mov L0x4000829d48 t0_40; mov L0x4000829d50 t0_41; mov L0x4000829d58 t0_42;
mov L0x4000829d60 t0_43; mov L0x4000829d68 t0_44; mov L0x4000829d70 t0_45;
mov L0x4000829d78 t0_46; mov L0x4000829d80 t0_47; mov L0x4000829d88 t0_48;
mov L0x4000829d90 t0_49; mov L0x4000829d98 t0_4a; mov L0x4000829da0 t0_4b;
mov L0x4000829da8 t0_50; mov L0x4000829db0 t0_51; mov L0x4000829db8 t0_52;
mov L0x4000829dc0 t0_53; mov L0x4000829dc8 t0_54; mov L0x4000829dd0 t0_55;
mov L0x4000829dd8 t0_56; mov L0x4000829de0 t0_57; mov L0x4000829de8 t0_58;
mov L0x4000829df0 t0_59; mov L0x4000829df8 t0_5a; mov L0x4000829e00 t0_5b;

mov LL0x4000829a48r00 LL0x4000829a48r0; mov LL0x4000829a50r00 LL0x4000829a50r0;
mov LL0x4000829a58r00 LL0x4000829a58r0; mov LL0x4000829a60r00 LL0x4000829a60r0;
mov LL0x4000829a68r00 LL0x4000829a68r0; mov LL0x4000829a70r00 LL0x4000829a70r0;
mov LL0x4000829a78r00 LL0x4000829a78r0; mov LL0x4000829a80r00 LL0x4000829a80r0;
mov LL0x4000829a88r00 LL0x4000829a88r0; mov LL0x4000829a90r00 LL0x4000829a90r0;
mov LL0x4000829a98r00 LL0x4000829a98r0; mov LL0x4000829aa0r00 LL0x4000829aa0r0;
mov LL0x4000829aa8r00 LL0x4000829aa8r0; mov LL0x4000829ab0r00 LL0x4000829ab0r0;
mov LL0x4000829ab8r00 LL0x4000829ab8r0; mov LL0x4000829ac0r00 LL0x4000829ac0r0;
mov LL0x4000829ac8r00 LL0x4000829ac8r0; mov LL0x4000829ad0r00 LL0x4000829ad0r0;
mov LL0x4000829ad8r00 LL0x4000829ad8r0; mov LL0x4000829ae0r00 LL0x4000829ae0r0;
mov LL0x4000829ae8r00 LL0x4000829ae8r0; mov LL0x4000829af0r00 LL0x4000829af0r0;
mov LL0x4000829af8r00 LL0x4000829af8r0; mov LL0x4000829b00r00 LL0x4000829b00r0;
mov LL0x4000829a48r10 LL0x4000829a48r1; mov LL0x4000829a50r10 LL0x4000829a50r1;
mov LL0x4000829a58r10 LL0x4000829a58r1; mov LL0x4000829a60r10 LL0x4000829a60r1;
mov LL0x4000829a68r10 LL0x4000829a68r1; mov LL0x4000829a70r10 LL0x4000829a70r1;
mov LL0x4000829a78r10 LL0x4000829a78r1; mov LL0x4000829a80r10 LL0x4000829a80r1;
mov LL0x4000829a88r10 LL0x4000829a88r1; mov LL0x4000829a90r10 LL0x4000829a90r1;
mov LL0x4000829a98r10 LL0x4000829a98r1; mov LL0x4000829aa0r10 LL0x4000829aa0r1;
mov LL0x4000829aa8r10 LL0x4000829aa8r1; mov LL0x4000829ab0r10 LL0x4000829ab0r1;
mov LL0x4000829ab8r10 LL0x4000829ab8r1; mov LL0x4000829ac0r10 LL0x4000829ac0r1;
mov LL0x4000829ac8r10 LL0x4000829ac8r1; mov LL0x4000829ad0r10 LL0x4000829ad0r1;
mov LL0x4000829ad8r10 LL0x4000829ad8r1; mov LL0x4000829ae0r10 LL0x4000829ae0r1;
mov LL0x4000829ae8r10 LL0x4000829ae8r1; mov LL0x4000829af0r10 LL0x4000829af0r1;
mov LL0x4000829af8r10 LL0x4000829af8r1; mov LL0x4000829b00r10 LL0x4000829b00r1;
mov LL0x4000829a48r20 LL0x4000829a48r2; mov LL0x4000829a50r20 LL0x4000829a50r2;
mov LL0x4000829a58r20 LL0x4000829a58r2; mov LL0x4000829a60r20 LL0x4000829a60r2;
mov LL0x4000829a68r20 LL0x4000829a68r2; mov LL0x4000829a70r20 LL0x4000829a70r2;
mov LL0x4000829a78r20 LL0x4000829a78r2; mov LL0x4000829a80r20 LL0x4000829a80r2;
mov LL0x4000829a88r20 LL0x4000829a88r2; mov LL0x4000829a90r20 LL0x4000829a90r2;
mov LL0x4000829a98r20 LL0x4000829a98r2; mov LL0x4000829aa0r20 LL0x4000829aa0r2;
mov LL0x4000829aa8r20 LL0x4000829aa8r2; mov LL0x4000829ab0r20 LL0x4000829ab0r2;
mov LL0x4000829ab8r20 LL0x4000829ab8r2; mov LL0x4000829ac0r20 LL0x4000829ac0r2;
mov LL0x4000829ac8r20 LL0x4000829ac8r2; mov LL0x4000829ad0r20 LL0x4000829ad0r2;
mov LL0x4000829ad8r20 LL0x4000829ad8r2; mov LL0x4000829ae0r20 LL0x4000829ae0r2;
mov LL0x4000829ae8r20 LL0x4000829ae8r2; mov LL0x4000829af0r20 LL0x4000829af0r2;
mov LL0x4000829af8r20 LL0x4000829af8r2; mov LL0x4000829b00r20 LL0x4000829b00r2;

cut and[(* ret[0] = ((a1 + a2)*(b1 + b2) - a1*b1 - a2*b2)*(u+1) + a0*b0
                  = (a1*b2 + a2*b1)*(u+1) + a0*b0 *)
        eqmod (limbs 64 [LL0x4000829a48r00, LL0x4000829a50r00, LL0x4000829a58r00,
                         LL0x4000829a60r00, LL0x4000829a68r00, LL0x4000829a70r00] +
               limbs 64 [LL0x4000829a78r00, LL0x4000829a80r00, LL0x4000829a88r00,
                         LL0x4000829a90r00, LL0x4000829a98r00, LL0x4000829aa0r00] * U)
              ((limbs 64 [a20, a21, a22, a23, a24, a25] +
                limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
               (limbs 64 [a40, a41, a42, a43, a44, a45] +
                limbs 64 [a50, a51, a52, a53, a54, a55] * U))
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [LL0x4000829aa8r0, LL0x4000829ab0r0, LL0x4000829ab8r0,
                         LL0x4000829ac0r0, LL0x4000829ac8r0, LL0x4000829ad0r0] +
               limbs 64 [LL0x4000829ad8r0, LL0x4000829ae0r0, LL0x4000829ae8r0,
                         LL0x4000829af0r0, LL0x4000829af8r0, LL0x4000829b00r0] * U)
              ((limbs 64 [b20, b21, b22, b23, b24, b25] +
                limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
               (limbs 64 [b40, b41, b42, b43, b44, b45] +
                limbs 64 [b50, b51, b52, b53, b54, b55] * U))
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                         L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                         L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                         L0x4000829c10, L0x4000829c18, L0x4000829c20] +
               limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38,
                         L0x4000829c40, L0x4000829c48, L0x4000829c50,
                         L0x4000829c58, L0x4000829c60, L0x4000829c68,
                         L0x4000829c70, L0x4000829c78, L0x4000829c80] * U)
              (((limbs 64 [LL0x4000829a48r00, LL0x4000829a50r00, LL0x4000829a58r00,
                           LL0x4000829a60r00, LL0x4000829a68r00, LL0x4000829a70r00] +
                 limbs 64 [LL0x4000829a78r00, LL0x4000829a80r00, LL0x4000829a88r00,
                           LL0x4000829a90r00, LL0x4000829a98r00, LL0x4000829aa0r00] * U) *
                (limbs 64 [LL0x4000829aa8r00, LL0x4000829ab0r00, LL0x4000829ab8r00,
                           LL0x4000829ac0r00, LL0x4000829ac8r00, LL0x4000829ad0r00] +
                 limbs 64 [LL0x4000829ad8r00, LL0x4000829ae0r00, LL0x4000829ae8r00,
                           LL0x4000829af0r00, LL0x4000829af8r00, LL0x4000829b00r00] * U) -
                (limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                (limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U) -
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U)) *
               (U + 1) +
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U))
              [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
               U * U + 1],
              
        (* ret[1] = (a0 + a1)*(b0 + b1) - a0*b0 - a1*b1 + a2*b2*(u+1)
                  = a0*b1 + a1*b0 + a2*b2*(u+1) *)
        eqmod (limbs 64 [LL0x4000829a48r10, LL0x4000829a50r10, LL0x4000829a58r10,
                         LL0x4000829a60r10, LL0x4000829a68r10, LL0x4000829a70r10] +
               limbs 64 [LL0x4000829a78r10, LL0x4000829a80r10, LL0x4000829a88r10,
                         LL0x4000829a90r10, LL0x4000829a98r10, LL0x4000829aa0r10] * U)
              (limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U +
               limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [LL0x4000829aa8r10, LL0x4000829ab0r10, LL0x4000829ab8r10,
                         LL0x4000829ac0r10, LL0x4000829ac8r10, LL0x4000829ad0r10] +
               limbs 64 [LL0x4000829ad8r10, LL0x4000829ae0r10, LL0x4000829ae8r10,
                         LL0x4000829af0r10, LL0x4000829af8r10, LL0x4000829b00r10] * U)
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U +
               limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98,
                         L0x4000829ca0, L0x4000829ca8, L0x4000829cb0,
                         L0x4000829cb8, L0x4000829cc0, L0x4000829cc8,
                         L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
               limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8,
                         L0x4000829d00, L0x4000829d08, L0x4000829d10,
                         L0x4000829d18, L0x4000829d20, L0x4000829d28,
                         L0x4000829d30, L0x4000829d38, L0x4000829d40] * U)
              ((limbs 64 [LL0x4000829a48r10, LL0x4000829a50r10, LL0x4000829a58r10,
                          LL0x4000829a60r10, LL0x4000829a68r10, LL0x4000829a70r10] +
                limbs 64 [LL0x4000829a78r10, LL0x4000829a80r10, LL0x4000829a88r10,
                          LL0x4000829a90r10, LL0x4000829a98r10, LL0x4000829aa0r10] * U) *
               (limbs 64 [LL0x4000829aa8r10, LL0x4000829ab0r10, LL0x4000829ab8r10,
                          LL0x4000829ac0r10, LL0x4000829ac8r10, LL0x4000829ad0r10] +
                limbs 64 [LL0x4000829ad8r10, LL0x4000829ae0r10, LL0x4000829ae8r10,
                          LL0x4000829af0r10, LL0x4000829af8r10, LL0x4000829b00r10] * U) -
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
               (limbs 64 [a20, a21, a22, a23, a24, a25] +
                limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
               (limbs 64 [b20, b21, b22, b23, b24, b25] +
                limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
               (limbs 64 [a40, a41, a42, a43, a44, a45] +
                limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
               (limbs 64 [b40, b41, b42, b43, b44, b45] +
                limbs 64 [b50, b51, b52, b53, b54, b55] * U) *
               (U + 1))
              [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
               U * U + 1],

        (* ret[2] = (a0 + a2)*(b0 + b2) - a0*b0 - a2*b2 + a1*b1
                  = a0*b2 + a2*b0 + a1*b1 *)
        eqmod (limbs 64 [LL0x4000829a48r20, LL0x4000829a50r20, LL0x4000829a58r20,
                         LL0x4000829a60r20, LL0x4000829a68r20, LL0x4000829a70r20] +
               limbs 64 [LL0x4000829a78r20, LL0x4000829a80r20, LL0x4000829a88r20,
                         LL0x4000829a90r20, LL0x4000829a98r20, LL0x4000829aa0r20] * U)
              (limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U +
               limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [LL0x4000829aa8r20, LL0x4000829ab0r20, LL0x4000829ab8r20,
                         LL0x4000829ac0r20, LL0x4000829ac8r20, LL0x4000829ad0r20] +
               limbs 64 [LL0x4000829ad8r20, LL0x4000829ae0r20, LL0x4000829ae8r20,
                         LL0x4000829af0r20, LL0x4000829af8r20, LL0x4000829b00r20] * U)
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U +
               limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58,
                         L0x4000829d60, L0x4000829d68, L0x4000829d70,
                         L0x4000829d78, L0x4000829d80, L0x4000829d88,
                         L0x4000829d90, L0x4000829d98, L0x4000829da0] +
               limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8,
                         L0x4000829dc0, L0x4000829dc8, L0x4000829dd0,
                         L0x4000829dd8, L0x4000829de0, L0x4000829de8,
                         L0x4000829df0, L0x4000829df8, L0x4000829e00] * U)
              ((limbs 64 [LL0x4000829a48r20, LL0x4000829a50r20, LL0x4000829a58r20,
                          LL0x4000829a60r20, LL0x4000829a68r20, LL0x4000829a70r20] +
                limbs 64 [LL0x4000829a78r20, LL0x4000829a80r20, LL0x4000829a88r20,
                          LL0x4000829a90r20, LL0x4000829a98r20, LL0x4000829aa0r20] * U) *
               (limbs 64 [LL0x4000829aa8r20, LL0x4000829ab0r20, LL0x4000829ab8r20,
                          LL0x4000829ac0r20, LL0x4000829ac8r20, LL0x4000829ad0r20] +
                limbs 64 [LL0x4000829ad8r20, LL0x4000829ae0r20, LL0x4000829ae8r20,
                          LL0x4000829af0r20, LL0x4000829af8r20, LL0x4000829b00r20] * U) -
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
               (limbs 64 [a40, a41, a42, a43, a44, a45] +
                limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
               (limbs 64 [b40, b41, b42, b43, b44, b45] +
                limbs 64 [b50, b51, b52, b53, b54, b55] * U) +
               (limbs 64 [a20, a21, a22, a23, a24, a25] +
                limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
               (limbs 64 [b20, b21, b22, b23, b24, b25] +
                limbs 64 [b30, b31, b32, b33, b34, b35] * U))
              [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
               U * U + 1]
    ]
 && and [limbs 64 [L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                   L0x4000829c10, L0x4000829c18, L0x4000829c20] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
          
         limbs 64 [L0x4000829c58, L0x4000829c60, L0x4000829c68,
                   L0x4000829c70, L0x4000829c78, L0x4000829c80] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829cb8, L0x4000829cc0, L0x4000829cc8,
                   L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829d18, L0x4000829d20, L0x4000829d28,
                   L0x4000829d30, L0x4000829d38, L0x4000829d40] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829d78, L0x4000829d80, L0x4000829d88,
                   L0x4000829d90, L0x4000829d98, L0x4000829da0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829dd8, L0x4000829de0, L0x4000829de8,
                   L0x4000829df0, L0x4000829df8, L0x4000829e00] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a718, L0x400082a720, L0x400082a728,
                   L0x400082a730, L0x400082a738, L0x400082a740] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         limbs 64 [L0x400082a748, L0x400082a750, L0x400082a758,
                   L0x400082a760, L0x400082a768, L0x400082a770] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         limbs 64 [L0x400082a778, L0x400082a780, L0x400082a788,
                   L0x400082a790, L0x400082a798, L0x400082a7a0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         limbs 64 [L0x400082a7a8, L0x400082a7b0, L0x400082a7b8,
                   L0x400082a7c0, L0x400082a7c8, L0x400082a7d0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         limbs 64 [L0x400082a7d8, L0x400082a7e0, L0x400082a7e8,
                   L0x400082a7f0, L0x400082a7f8, L0x400082a800] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         limbs 64 [L0x400082a808, L0x400082a810, L0x400082a818,
                   L0x400082a820, L0x400082a828, L0x400082a830] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a958, L0x400082a960, L0x400082a968,
                   L0x400082a970, L0x400082a978, L0x400082a980] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a988, L0x400082a990, L0x400082a998,
                   L0x400082a9a0, L0x400082a9a8, L0x400082a9b0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a9b8, L0x400082a9c0, L0x400082a9c8,
                   L0x400082a9d0, L0x400082a9d8, L0x400082a9e0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a9e8, L0x400082a9f0, L0x400082a9f8,
                   L0x400082aa00, L0x400082aa08, L0x400082aa10] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082aa18, L0x400082aa20, L0x400082aa28,
                   L0x400082aa30, L0x400082aa38, L0x400082aa40] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082aa48, L0x400082aa50, L0x400082aa58,
                   L0x400082aa60, L0x400082aa68, L0x400082aa70] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
    ] prove with precondition, all cuts;

(* mul_fp6x2(t1, a[1], b[1]) *)

inline mul_fp6x2 ((* t1 *)
                t1_00, t1_01, t1_02, t1_03, t1_04, t1_05,
                t1_06, t1_07, t1_08, t1_09, t1_0a, t1_0b,
                t1_10, t1_11, t1_12, t1_13, t1_14, t1_15,
                t1_16, t1_17, t1_18, t1_19, t1_1a, t1_1b,
                t1_20, t1_21, t1_22, t1_23, t1_24, t1_25,
                t1_26, t1_27, t1_28, t1_29, t1_2a, t1_2b,
                t1_30, t1_31, t1_32, t1_33, t1_34, t1_35,
                t1_36, t1_37, t1_38, t1_39, t1_3a, t1_3b,
                t1_40, t1_41, t1_42, t1_43, t1_44, t1_45,
                t1_46, t1_47, t1_48, t1_49, t1_4a, t1_4b,
                t1_50, t1_51, t1_52, t1_53, t1_54, t1_55,
                t1_56, t1_57, t1_58, t1_59, t1_5a, t1_5b,

                (* a[1] *)
                L0x400082a718, L0x400082a720, L0x400082a728,
                L0x400082a730, L0x400082a738, L0x400082a740,
                L0x400082a748, L0x400082a750, L0x400082a758,
                L0x400082a760, L0x400082a768, L0x400082a770,
                L0x400082a778, L0x400082a780, L0x400082a788,
                L0x400082a790, L0x400082a798, L0x400082a7a0,
                L0x400082a7a8, L0x400082a7b0, L0x400082a7b8,
                L0x400082a7c0, L0x400082a7c8, L0x400082a7d0,
                L0x400082a7d8, L0x400082a7e0, L0x400082a7e8,
                L0x400082a7f0, L0x400082a7f8, L0x400082a800,
                L0x400082a808, L0x400082a810, L0x400082a818,
                L0x400082a820, L0x400082a828, L0x400082a830,

                (* b[1] *)
                L0x400082a958, L0x400082a960, L0x400082a968,
                L0x400082a970, L0x400082a978, L0x400082a980,
                L0x400082a988, L0x400082a990, L0x400082a998,
                L0x400082a9a0, L0x400082a9a8, L0x400082a9b0,
                L0x400082a9b8, L0x400082a9c0, L0x400082a9c8,
                L0x400082a9d0, L0x400082a9d8, L0x400082a9e0,
                L0x400082a9e8, L0x400082a9f0, L0x400082a9f8,
                L0x400082aa00, L0x400082aa08, L0x400082aa10,
                L0x400082aa18, L0x400082aa20, L0x400082aa28,
                L0x400082aa30, L0x400082aa38, L0x400082aa40,
                L0x400082aa48, L0x400082aa50, L0x400082aa58,
                L0x400082aa60, L0x400082aa68, L0x400082aa70,

                m0, m1, m2, m3, m4, m5,
                mp,
                x0, x1, x2,
                x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30,
                sp,
                U, V, W);

mov LL0x4000829a48r01 LL0x4000829a48r0; mov LL0x4000829a50r01 LL0x4000829a50r0;
mov LL0x4000829a58r01 LL0x4000829a58r0; mov LL0x4000829a60r01 LL0x4000829a60r0;
mov LL0x4000829a68r01 LL0x4000829a68r0; mov LL0x4000829a70r01 LL0x4000829a70r0;
mov LL0x4000829a78r01 LL0x4000829a78r0; mov LL0x4000829a80r01 LL0x4000829a80r0;
mov LL0x4000829a88r01 LL0x4000829a88r0; mov LL0x4000829a90r01 LL0x4000829a90r0;
mov LL0x4000829a98r01 LL0x4000829a98r0; mov LL0x4000829aa0r01 LL0x4000829aa0r0;
mov LL0x4000829aa8r01 LL0x4000829aa8r0; mov LL0x4000829ab0r01 LL0x4000829ab0r0;
mov LL0x4000829ab8r01 LL0x4000829ab8r0; mov LL0x4000829ac0r01 LL0x4000829ac0r0;
mov LL0x4000829ac8r01 LL0x4000829ac8r0; mov LL0x4000829ad0r01 LL0x4000829ad0r0;
mov LL0x4000829ad8r01 LL0x4000829ad8r0; mov LL0x4000829ae0r01 LL0x4000829ae0r0;
mov LL0x4000829ae8r01 LL0x4000829ae8r0; mov LL0x4000829af0r01 LL0x4000829af0r0;
mov LL0x4000829af8r01 LL0x4000829af8r0; mov LL0x4000829b00r01 LL0x4000829b00r0;
mov LL0x4000829a48r11 LL0x4000829a48r1; mov LL0x4000829a50r11 LL0x4000829a50r1;
mov LL0x4000829a58r11 LL0x4000829a58r1; mov LL0x4000829a60r11 LL0x4000829a60r1;
mov LL0x4000829a68r11 LL0x4000829a68r1; mov LL0x4000829a70r11 LL0x4000829a70r1;
mov LL0x4000829a78r11 LL0x4000829a78r1; mov LL0x4000829a80r11 LL0x4000829a80r1;
mov LL0x4000829a88r11 LL0x4000829a88r1; mov LL0x4000829a90r11 LL0x4000829a90r1;
mov LL0x4000829a98r11 LL0x4000829a98r1; mov LL0x4000829aa0r11 LL0x4000829aa0r1;
mov LL0x4000829aa8r11 LL0x4000829aa8r1; mov LL0x4000829ab0r11 LL0x4000829ab0r1;
mov LL0x4000829ab8r11 LL0x4000829ab8r1; mov LL0x4000829ac0r11 LL0x4000829ac0r1;
mov LL0x4000829ac8r11 LL0x4000829ac8r1; mov LL0x4000829ad0r11 LL0x4000829ad0r1;
mov LL0x4000829ad8r11 LL0x4000829ad8r1; mov LL0x4000829ae0r11 LL0x4000829ae0r1;
mov LL0x4000829ae8r11 LL0x4000829ae8r1; mov LL0x4000829af0r11 LL0x4000829af0r1;
mov LL0x4000829af8r11 LL0x4000829af8r1; mov LL0x4000829b00r11 LL0x4000829b00r1;
mov LL0x4000829a48r21 LL0x4000829a48r2; mov LL0x4000829a50r21 LL0x4000829a50r2;
mov LL0x4000829a58r21 LL0x4000829a58r2; mov LL0x4000829a60r21 LL0x4000829a60r2;
mov LL0x4000829a68r21 LL0x4000829a68r2; mov LL0x4000829a70r21 LL0x4000829a70r2;
mov LL0x4000829a78r21 LL0x4000829a78r2; mov LL0x4000829a80r21 LL0x4000829a80r2;
mov LL0x4000829a88r21 LL0x4000829a88r2; mov LL0x4000829a90r21 LL0x4000829a90r2;
mov LL0x4000829a98r21 LL0x4000829a98r2; mov LL0x4000829aa0r21 LL0x4000829aa0r2;
mov LL0x4000829aa8r21 LL0x4000829aa8r2; mov LL0x4000829ab0r21 LL0x4000829ab0r2;
mov LL0x4000829ab8r21 LL0x4000829ab8r2; mov LL0x4000829ac0r21 LL0x4000829ac0r2;
mov LL0x4000829ac8r21 LL0x4000829ac8r2; mov LL0x4000829ad0r21 LL0x4000829ad0r2;
mov LL0x4000829ad8r21 LL0x4000829ad8r2; mov LL0x4000829ae0r21 LL0x4000829ae0r2;
mov LL0x4000829ae8r21 LL0x4000829ae8r2; mov LL0x4000829af0r21 LL0x4000829af0r2;
mov LL0x4000829af8r21 LL0x4000829af8r2; mov LL0x4000829b00r21 LL0x4000829b00r2;

mov L0x4000829e08 t1_00; mov L0x4000829e10 t1_01; mov L0x4000829e18 t1_02;
mov L0x4000829e20 t1_03; mov L0x4000829e28 t1_04; mov L0x4000829e30 t1_05;
mov L0x4000829e38 t1_06; mov L0x4000829e40 t1_07; mov L0x4000829e48 t1_08;
mov L0x4000829e50 t1_09; mov L0x4000829e58 t1_0a; mov L0x4000829e60 t1_0b;
mov L0x4000829e68 t1_10; mov L0x4000829e70 t1_11; mov L0x4000829e78 t1_12;
mov L0x4000829e80 t1_13; mov L0x4000829e88 t1_14; mov L0x4000829e90 t1_15;
mov L0x4000829e98 t1_16; mov L0x4000829ea0 t1_17; mov L0x4000829ea8 t1_18;
mov L0x4000829eb0 t1_19; mov L0x4000829eb8 t1_1a; mov L0x4000829ec0 t1_1b;
mov L0x4000829ec8 t1_20; mov L0x4000829ed0 t1_21; mov L0x4000829ed8 t1_22;
mov L0x4000829ee0 t1_23; mov L0x4000829ee8 t1_24; mov L0x4000829ef0 t1_25;
mov L0x4000829ef8 t1_26; mov L0x4000829f00 t1_27; mov L0x4000829f08 t1_28;
mov L0x4000829f10 t1_29; mov L0x4000829f18 t1_2a; mov L0x4000829f20 t1_2b;

mov L0x4000829f28 t1_30; mov L0x4000829f30 t1_31; mov L0x4000829f38 t1_32;
mov L0x4000829f40 t1_33; mov L0x4000829f48 t1_34; mov L0x4000829f50 t1_35;
mov L0x4000829f58 t1_36; mov L0x4000829f60 t1_37; mov L0x4000829f68 t1_38;
mov L0x4000829f70 t1_39; mov L0x4000829f78 t1_3a; mov L0x4000829f80 t1_3b;
mov L0x4000829f88 t1_40; mov L0x4000829f90 t1_41; mov L0x4000829f98 t1_42;
mov L0x4000829fa0 t1_43; mov L0x4000829fa8 t1_44; mov L0x4000829fb0 t1_45;
mov L0x4000829fb8 t1_46; mov L0x4000829fc0 t1_47; mov L0x4000829fc8 t1_48;
mov L0x4000829fd0 t1_49; mov L0x4000829fd8 t1_4a; mov L0x4000829fe0 t1_4b;
mov L0x4000829fe8 t1_50; mov L0x4000829ff0 t1_51; mov L0x4000829ff8 t1_52;
mov L0x400082a000 t1_53; mov L0x400082a008 t1_54; mov L0x400082a010 t1_55;
mov L0x400082a018 t1_56; mov L0x400082a020 t1_57; mov L0x400082a028 t1_58;
mov L0x400082a030 t1_59; mov L0x400082a038 t1_5a; mov L0x400082a040 t1_5b;

cut and[(* ret[0] = ((a1 + a2)*(b1 + b2) - a1*b1 - a2*b2)*(u+1) + a0*b0
                  = (a1*b2 + a2*b1)*(u+1) + a0*b0 *)
        eqmod (limbs 64 [LL0x4000829a48r01, LL0x4000829a50r01, LL0x4000829a58r01,
                         LL0x4000829a60r01, LL0x4000829a68r01, LL0x4000829a70r01] +
               limbs 64 [LL0x4000829a78r01, LL0x4000829a80r01, LL0x4000829a88r01,
                         LL0x4000829a90r01, LL0x4000829a98r01, LL0x4000829aa0r01] * U)
              ((limbs 64 [a80, a81, a82, a83, a84, a85] +
                limbs 64 [a90, a91, a92, a93, a94, a95] * U) +
               (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U))
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [LL0x4000829aa8r01, LL0x4000829ab0r01, LL0x4000829ab8r01,
                         LL0x4000829ac0r01, LL0x4000829ac8r01, LL0x4000829ad0r01] +
               limbs 64 [LL0x4000829ad8r01, LL0x4000829ae0r01, LL0x4000829ae8r01,
                         LL0x4000829af0r01, LL0x4000829af8r01, LL0x4000829b00r01] * U)
              ((limbs 64 [b80, b81, b82, b83, b84, b85] +
                limbs 64 [b90, b91, b92, b93, b94, b95] * U) +
               (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U))
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                         L0x4000829e20, L0x4000829e28, L0x4000829e30,
                         L0x4000829e38, L0x4000829e40, L0x4000829e48,
                         L0x4000829e50, L0x4000829e58, L0x4000829e60] +
               limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                         L0x4000829e80, L0x4000829e88, L0x4000829e90,
                         L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                         L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] * U)
              (((limbs 64 [LL0x4000829a48r01, LL0x4000829a50r01, LL0x4000829a58r01,
                           LL0x4000829a60r01, LL0x4000829a68r01, LL0x4000829a70r01] +
                 limbs 64 [LL0x4000829a78r01, LL0x4000829a80r01, LL0x4000829a88r01,
                           LL0x4000829a90r01, LL0x4000829a98r01, LL0x4000829aa0r01] * U) *
                (limbs 64 [LL0x4000829aa8r01, LL0x4000829ab0r01, LL0x4000829ab8r01,
                           LL0x4000829ac0r01, LL0x4000829ac8r01, LL0x4000829ad0r01] +
                 limbs 64 [LL0x4000829ad8r01, LL0x4000829ae0r01, LL0x4000829ae8r01,
                           LL0x4000829af0r01, LL0x4000829af8r01, LL0x4000829b00r01] * U) -
                (limbs 64 [a80, a81, a82, a83, a84, a85] +
                 limbs 64 [a90, a91, a92, a93, a94, a95] * U) *
                (limbs 64 [b80, b81, b82, b83, b84, b85] +
                 limbs 64 [b90, b91, b92, b93, b94, b95] * U) -
                (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                 limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U) *
                (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                 limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U)) *
               (U + 1) +
               (limbs 64 [a60, a61, a62, a63, a64, a65] +
                limbs 64 [a70, a71, a72, a73, a74, a75] * U) *
               (limbs 64 [b60, b61, b62, b63, b64, b65] +
                limbs 64 [b70, b71, b72, b73, b74, b75] * U))
              [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
               U * U + 1],
              
        (* ret[1] = (a0 + a1)*(b0 + b1) - a0*b0 - a1*b1 + a2*b2*(u+1)
                  = a0*b1 + a1*b0 + a2*b2*(u+1) *)
        eqmod (limbs 64 [LL0x4000829a48r11, LL0x4000829a50r11, LL0x4000829a58r11,
                         LL0x4000829a60r11, LL0x4000829a68r11, LL0x4000829a70r11] +
               limbs 64 [LL0x4000829a78r11, LL0x4000829a80r11, LL0x4000829a88r11,
                         LL0x4000829a90r11, LL0x4000829a98r11, LL0x4000829aa0r11] * U)
              (limbs 64 [a60, a61, a62, a63, a64, a65] +
               limbs 64 [a70, a71, a72, a73, a74, a75] * U +
               limbs 64 [a80, a81, a82, a83, a84, a85] +
               limbs 64 [a90, a91, a92, a93, a94, a95] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [LL0x4000829aa8r11, LL0x4000829ab0r11, LL0x4000829ab8r11,
                         LL0x4000829ac0r11, LL0x4000829ac8r11, LL0x4000829ad0r11] +
               limbs 64 [LL0x4000829ad8r11, LL0x4000829ae0r11, LL0x4000829ae8r11,
                         LL0x4000829af0r11, LL0x4000829af8r11, LL0x4000829b00r11] * U)
              (limbs 64 [b60, b61, b62, b63, b64, b65] +
               limbs 64 [b70, b71, b72, b73, b74, b75] * U +
               limbs 64 [b80, b81, b82, b83, b84, b85] +
               limbs 64 [b90, b91, b92, b93, b94, b95] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                         L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                         L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                         L0x4000829f10, L0x4000829f18, L0x4000829f20] +
               limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                         L0x4000829f40, L0x4000829f48, L0x4000829f50,
                         L0x4000829f58, L0x4000829f60, L0x4000829f68,
                         L0x4000829f70, L0x4000829f78, L0x4000829f80] * U)
              ((limbs 64 [LL0x4000829a48r11, LL0x4000829a50r11, LL0x4000829a58r11,
                          LL0x4000829a60r11, LL0x4000829a68r11, LL0x4000829a70r11] +
                limbs 64 [LL0x4000829a78r11, LL0x4000829a80r11, LL0x4000829a88r11,
                          LL0x4000829a90r11, LL0x4000829a98r11, LL0x4000829aa0r11] * U) *
               (limbs 64 [LL0x4000829aa8r11, LL0x4000829ab0r11, LL0x4000829ab8r11,
                          LL0x4000829ac0r11, LL0x4000829ac8r11, LL0x4000829ad0r11] +
                limbs 64 [LL0x4000829ad8r11, LL0x4000829ae0r11, LL0x4000829ae8r11,
                          LL0x4000829af0r11, LL0x4000829af8r11, LL0x4000829b00r11] * U) -
               (limbs 64 [a60, a61, a62, a63, a64, a65] +
                limbs 64 [a70, a71, a72, a73, a74, a75] * U) *
               (limbs 64 [b60, b61, b62, b63, b64, b65] +
                limbs 64 [b70, b71, b72, b73, b74, b75] * U) -
               (limbs 64 [a80, a81, a82, a83, a84, a85] +
                limbs 64 [a90, a91, a92, a93, a94, a95] * U) *
               (limbs 64 [b80, b81, b82, b83, b84, b85] +
                limbs 64 [b90, b91, b92, b93, b94, b95] * U) +
               (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U) *
               (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U) *
               (U + 1))
              [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
               U * U + 1],

        (* ret[2] = (a0 + a2)*(b0 + b2) - a0*b0 - a2*b2 + a1*b1
                  = a0*b2 + a2*b0 + a1*b1 *)
        eqmod (limbs 64 [LL0x4000829a48r21, LL0x4000829a50r21, LL0x4000829a58r21,
                         LL0x4000829a60r21, LL0x4000829a68r21, LL0x4000829a70r21] +
               limbs 64 [LL0x4000829a78r21, LL0x4000829a80r21, LL0x4000829a88r21,
                         LL0x4000829a90r21, LL0x4000829a98r21, LL0x4000829aa0r21] * U)
              (limbs 64 [a60, a61, a62, a63, a64, a65] +
               limbs 64 [a70, a71, a72, a73, a74, a75] * U +
               limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
               limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [LL0x4000829aa8r21, LL0x4000829ab0r21, LL0x4000829ab8r21,
                         LL0x4000829ac0r21, LL0x4000829ac8r21, LL0x4000829ad0r21] +
               limbs 64 [LL0x4000829ad8r21, LL0x4000829ae0r21, LL0x4000829ae8r21,
                         LL0x4000829af0r21, LL0x4000829af8r21, LL0x4000829b00r21] * U)
              (limbs 64 [b60, b61, b62, b63, b64, b65] +
               limbs 64 [b70, b71, b72, b73, b74, b75] * U +
               limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
               limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U)
              [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
        eqmod (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                         L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                         L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                         L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
               limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                         L0x400082a000, L0x400082a008, L0x400082a010,
                         L0x400082a018, L0x400082a020, L0x400082a028,
                         L0x400082a030, L0x400082a038, L0x400082a040] * U)
              ((limbs 64 [LL0x4000829a48r21, LL0x4000829a50r21, LL0x4000829a58r21,
                          LL0x4000829a60r21, LL0x4000829a68r21, LL0x4000829a70r21] +
                limbs 64 [LL0x4000829a78r21, LL0x4000829a80r21, LL0x4000829a88r21,
                          LL0x4000829a90r21, LL0x4000829a98r21, LL0x4000829aa0r21] * U) *
               (limbs 64 [LL0x4000829aa8r21, LL0x4000829ab0r21, LL0x4000829ab8r21,
                          LL0x4000829ac0r21, LL0x4000829ac8r21, LL0x4000829ad0r21] +
                limbs 64 [LL0x4000829ad8r21, LL0x4000829ae0r21, LL0x4000829ae8r21,
                          LL0x4000829af0r21, LL0x4000829af8r21, LL0x4000829b00r21] * U) -
               (limbs 64 [a60, a61, a62, a63, a64, a65] +
                limbs 64 [a70, a71, a72, a73, a74, a75] * U) *
               (limbs 64 [b60, b61, b62, b63, b64, b65] +
                limbs 64 [b70, b71, b72, b73, b74, b75] * U) -
               (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U) *
               (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U) +
               (limbs 64 [a80, a81, a82, a83, a84, a85] +
                limbs 64 [a90, a91, a92, a93, a94, a95] * U) *
               (limbs 64 [b80, b81, b82, b83, b84, b85] +
                limbs 64 [b90, b91, b92, b93, b94, b95] * U))
              [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
               U * U + 1]
    ]
 && and [limbs 64 [L0x4000829e38, L0x4000829e40, L0x4000829e48,
                   L0x4000829e50, L0x4000829e58, L0x4000829e60] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
          
         limbs 64 [L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                   L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                   L0x4000829f10, L0x4000829f18, L0x4000829f20] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829f58, L0x4000829f60, L0x4000829f68,
                   L0x4000829f70, L0x4000829f78, L0x4000829f80] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                   L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a018, L0x400082a020, L0x400082a028,
                   L0x400082a030, L0x400082a038, L0x400082a040] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         limbs 64 [a00,a01,a02,a03,a04,a05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a10,a11,a12,a13,a14,a15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a20,a21,a22,a23,a24,a25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a30,a31,a32,a33,a34,a35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a40,a41,a42,a43,a44,a45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a50,a51,a52,a53,a54,a55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a60,a61,a62,a63,a64,a65] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a70,a71,a72,a73,a74,a75] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a80,a81,a82,a83,a84,a85] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [a90,a91,a92,a93,a94,a95] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [aa0,aa1,aa2,aa3,aa4,aa5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [ab0,ab1,ab2,ab3,ab4,ab5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b00,b01,b02,b03,b04,b05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b10,b11,b12,b13,b14,b15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b20,b21,b22,b23,b24,b25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b30,b31,b32,b33,b34,b35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b40,b41,b42,b43,b44,b45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b50,b51,b52,b53,b54,b55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b60,b61,b62,b63,b64,b65] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b70,b71,b72,b73,b74,b75] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b80,b81,b82,b83,b84,b85] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [b90,b91,b92,b93,b94,b95] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [ba0,ba1,ba2,ba3,ba4,ba5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [bb0,bb1,bb2,bb3,bb4,bb5] <u limbs 64 [m0,m1,m2,m3,m4,m5]
    ] prove with precondition, all cuts;

(* add	x19, sp, #0xd8                              #! PC = 0x274877953392 *)
adds dontcare x19 sp 0xd8@uint64;
(* mov	x2, x23                                     #! PC = 0x274877953396 *)
mov x2 x23;
(* mov	x1, x21                                     #! PC = 0x274877953400 *)
mov x1 x21;
(* mov	x0, x19                                     #! PC = 0x274877953404 *)
mov x0 x19;
(* #bl	0x4000005eb4 <add_fp6>                      #! PC = 0x274877953408 *)
#bl	0x4000005eb4 <add_fp6>                      #! 0x274877953408 = 0x274877953408;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x40008299a0; PC = 0x274877931188 *)
mov L0x40008299a0 x29;
mov L0x40008299a8 x30;
(* mov	x29, sp                                     #! PC = 0x274877931192 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299b0; PC = 0x274877931196 *)
mov L0x40008299b0 x19;
mov L0x40008299b8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299c0; PC = 0x274877931200 *)
mov L0x40008299c0 x21;
mov L0x40008299c8 x22;
(* mov	x20, x0                                     #! PC = 0x274877931204 *)
mov x20 x0;
(* mov	x21, x1                                     #! PC = 0x274877931208 *)
mov x21 x1;
(* mov	x22, x2                                     #! PC = 0x274877931212 *)
mov x22 x2;
(* #adrp	x19, 0x4000029000                          #! PC = 0x274877931216 *)
#adrp	%%x19, 0x4000029000                          #! 0x274877931216 = 0x274877931216;
(* ldr	x19, [x19, #4056]                           #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877931220 *)
mov x19 LL0x4000029fd8;
(* mov	x3, x19                                     #! PC = 0x274877931224 *)
mov x3 x19;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877931228 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877931228 = 0x274877931228;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829970; PC = 0x274877979620 *)
mov L0x4000829970 x29;
mov L0x4000829978 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829980; PC = 0x274877979628 *)
mov L0x4000829980 x19;
mov L0x4000829988 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829990; PC = 0x274877979632 *)
mov L0x4000829990 x21;
mov L0x4000829998 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 L0x4000016928;
mov x5 L0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 L0x4000016938;
mov x7 L0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 L0x4000016948;
mov x9 L0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a5f8; Value = 0x0000004000841d60; PC = 0x274877979488 *)
mov x10 L0x400082a5f8;
mov x11 L0x400082a600;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a718; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a718;
mov x17 L0x400082a720;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a608; Value = 0x000000400085d6d8; PC = 0x274877979496 *)
mov x12 L0x400082a608;
mov x13 L0x400082a610;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a728; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 L0x400082a728;
mov x20 L0x400082a730;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a618; Value = 0x0000004000000040; PC = 0x274877979504 *)
mov x14 L0x400082a618;
mov x15 L0x400082a620;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a738; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082a738;
mov x22 L0x400082a740;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829aa8; PC = 0x274877979652 *)
mov L0x4000829aa8 x10;
mov L0x4000829ab0 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829ab8; PC = 0x274877979660 *)
mov L0x4000829ab8 x12;
mov L0x4000829ac0 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829ac8; PC = 0x274877979668 *)
mov L0x4000829ac8 x14;
mov L0x4000829ad0 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a628; Value = 0x000000400085de20; PC = 0x274877979488 *)
mov x10 L0x400082a628;
mov x11 L0x400082a630;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a748; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a748;
mov x17 L0x400082a750;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a638; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a638;
mov x13 L0x400082a640;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a758; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 L0x400082a758;
mov x20 L0x400082a760;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a648; Value = 0x000000400082c000; PC = 0x274877979504 *)
mov x14 L0x400082a648;
mov x15 L0x400082a650;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a768; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082a768;
mov x22 L0x400082a770;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829978; Value = 0x002d004000005ee0; PC = 0x274877979676 *)
mov x30 L0x4000829978;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829ad8; PC = 0x274877979680 *)
mov L0x4000829ad8 x10;
mov L0x4000829ae0 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829ae8; PC = 0x274877979684 *)
mov L0x4000829ae8 x12;
mov L0x4000829af0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829af8; PC = 0x274877979688 *)
mov L0x4000829af8 x14;
mov L0x4000829b00 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829980; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 L0x4000829980;
mov x20 L0x4000829988;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829990; Value = 0x000000400082a5f8; PC = 0x274877979696 *)
mov x21 L0x4000829990;
mov x22 L0x4000829998;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829970; Value = 0x00000040008299a0; PC = 0x274877979700 *)
mov x29 L0x4000829970;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* mov	x3, x19                                     #! PC = 0x274877931232 *)
mov x3 x19;
(* add	x2, x22, #0x60                              #! PC = 0x274877931236 *)
adds dontcare x2 x22 0x60@uint64;
(* add	x1, x21, #0x60                              #! PC = 0x274877931240 *)
adds dontcare x1 x21 0x60@uint64;
(* add	x0, x20, #0x60                              #! PC = 0x274877931244 *)
adds dontcare x0 x20 0x60@uint64;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877931248 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877931248 = 0x274877931248;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829970; PC = 0x274877979620 *)
mov L0x4000829970 x29;
mov L0x4000829978 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829980; PC = 0x274877979628 *)
mov L0x4000829980 x19;
mov L0x4000829988 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829990; PC = 0x274877979632 *)
mov L0x4000829990 x21;
mov L0x4000829998 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 L0x4000016928;
mov x5 L0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 L0x4000016938;
mov x7 L0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 L0x4000016948;
mov x9 L0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a658; Value = 0x0000000000000000; PC = 0x274877979488 *)
mov x10 L0x400082a658;
mov x11 L0x400082a660;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a778; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a778;
mov x17 L0x400082a780;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a668; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a668;
mov x13 L0x400082a670;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a788; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 L0x400082a788;
mov x20 L0x400082a790;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a678; Value = 0x0000004000845000; PC = 0x274877979504 *)
mov x14 L0x400082a678;
mov x15 L0x400082a680;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a798; Value = 0x0000004000841c68; PC = 0x274877979508 *)
mov x21 L0x400082a798;
mov x22 L0x400082a7a0;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829b08; PC = 0x274877979652 *)
mov L0x4000829b08 x10;
mov L0x4000829b10 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829b18; PC = 0x274877979660 *)
mov L0x4000829b18 x12;
mov L0x4000829b20 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829b28; PC = 0x274877979668 *)
mov L0x4000829b28 x14;
mov L0x4000829b30 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a688; Value = 0x0000004000000000; PC = 0x274877979488 *)
mov x10 L0x400082a688;
mov x11 L0x400082a690;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a7a8; Value = 0x000000400085d000; PC = 0x274877979492 *)
mov x16 L0x400082a7a8;
mov x17 L0x400082a7b0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a698; Value = 0x000000400085ea90; PC = 0x274877979496 *)
mov x12 L0x400082a698;
mov x13 L0x400082a6a0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a7b8; Value = 0x0000004000000040; PC = 0x274877979500 *)
mov x19 L0x400082a7b8;
mov x20 L0x400082a7c0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a6a8; Value = 0x000000400085e000; PC = 0x274877979504 *)
mov x14 L0x400082a6a8;
mov x15 L0x400082a6b0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a7c8; Value = 0x000000400085d000; PC = 0x274877979508 *)
mov x21 L0x400082a7c8;
mov x22 L0x400082a7d0;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829978; Value = 0x006e004000005ef4; PC = 0x274877979676 *)
mov x30 L0x4000829978;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829b38; PC = 0x274877979680 *)
mov L0x4000829b38 x10;
mov L0x4000829b40 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829b48; PC = 0x274877979684 *)
mov L0x4000829b48 x12;
mov L0x4000829b50 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829b58; PC = 0x274877979688 *)
mov L0x4000829b58 x14;
mov L0x4000829b60 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829980; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 L0x4000829980;
mov x20 L0x4000829988;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829990; Value = 0x000000400082a5f8; PC = 0x274877979696 *)
mov x21 L0x4000829990;
mov x22 L0x4000829998;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829970; Value = 0x00000040008299a0; PC = 0x274877979700 *)
mov x29 L0x4000829970;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* mov	x3, x19                                     #! PC = 0x274877931252 *)
mov x3 x19;
(* add	x2, x22, #0xc0                              #! PC = 0x274877931256 *)
adds dontcare x2 x22 0xc0@uint64;
(* add	x1, x21, #0xc0                              #! PC = 0x274877931260 *)
adds dontcare x1 x21 0xc0@uint64;
(* add	x0, x20, #0xc0                              #! PC = 0x274877931264 *)
adds dontcare x0 x20 0xc0@uint64;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877931268 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877931268 = 0x274877931268;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829970; PC = 0x274877979620 *)
mov L0x4000829970 x29;
mov L0x4000829978 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829980; PC = 0x274877979628 *)
mov L0x4000829980 x19;
mov L0x4000829988 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829990; PC = 0x274877979632 *)
mov L0x4000829990 x21;
mov L0x4000829998 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 L0x4000016928;
mov x5 L0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 L0x4000016938;
mov x7 L0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 L0x4000016948;
mov x9 L0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a6b8; Value = 0x000000400085ea78; PC = 0x274877979488 *)
mov x10 L0x400082a6b8;
mov x11 L0x400082a6c0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a7d8; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a7d8;
mov x17 L0x400082a7e0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a6c8; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a6c8;
mov x13 L0x400082a6d0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a7e8; Value = 0x0000004000841d2c; PC = 0x274877979500 *)
mov x19 L0x400082a7e8;
mov x20 L0x400082a7f0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a6d8; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a6d8;
mov x15 L0x400082a6e0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a7f8; Value = 0x000000400085d000; PC = 0x274877979508 *)
mov x21 L0x400082a7f8;
mov x22 L0x400082a800;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x4000829b68; PC = 0x274877979652 *)
mov L0x4000829b68 x10;
mov L0x4000829b70 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x4000829b78; PC = 0x274877979660 *)
mov L0x4000829b78 x12;
mov L0x4000829b80 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x4000829b88; PC = 0x274877979668 *)
mov L0x4000829b88 x14;
mov L0x4000829b90 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a6e8; Value = 0x000000400082ae28; PC = 0x274877979488 *)
mov x10 L0x400082a6e8;
mov x11 L0x400082a6f0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a808; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a808;
mov x17 L0x400082a810;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a6f8; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a6f8;
mov x13 L0x400082a700;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a818; Value = 0x000000400082da1c; PC = 0x274877979500 *)
mov x19 L0x400082a818;
mov x20 L0x400082a820;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a708; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a708;
mov x15 L0x400082a710;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a828; Value = 0x000000400082ad60; PC = 0x274877979508 *)
mov x21 L0x400082a828;
mov x22 L0x400082a830;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829978; Value = 0x006c004000005f08; PC = 0x274877979676 *)
mov x30 L0x4000829978;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x4000829b98; PC = 0x274877979680 *)
mov L0x4000829b98 x10;
mov L0x4000829ba0 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x4000829ba8; PC = 0x274877979684 *)
mov L0x4000829ba8 x12;
mov L0x4000829bb0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x4000829bb8; PC = 0x274877979688 *)
mov L0x4000829bb8 x14;
mov L0x4000829bc0 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829980; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 L0x4000829980;
mov x20 L0x4000829988;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829990; Value = 0x000000400082a5f8; PC = 0x274877979696 *)
mov x21 L0x4000829990;
mov x22 L0x4000829998;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829970; Value = 0x00000040008299a0; PC = 0x274877979700 *)
mov x29 L0x4000829970;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* ldp	x19, x20, [sp, #16]                         #! EA = L0x40008299b0; Value = 0x0000004000829aa8; PC = 0x274877931272 *)
mov x19 L0x40008299b0;
mov x20 L0x40008299b8;
(* ldp	x21, x22, [sp, #32]                         #! EA = L0x40008299c0; Value = 0x000000400082a5f8; PC = 0x274877931276 *)
mov x21 L0x40008299c0;
mov x22 L0x40008299c8;
(* ldp	x29, x30, [sp], #48                         #! EA = L0x40008299a0; Value = 0x00000040008299d0; PC = 0x274877931280 *)
mov x29 L0x40008299a0;
mov x30 L0x40008299a8;
(* #ret                                            #! PC = 0x274877931284 *)
#ret                                            #! 0x274877931284 = 0x274877931284;

(* add_fp6(t2, a[0], a[1]) *)

mov t2_00 L0x4000829aa8; mov t2_01 L0x4000829ab0; mov t2_02 L0x4000829ab8;
mov t2_03 L0x4000829ac0; mov t2_04 L0x4000829ac8; mov t2_05 L0x4000829ad0;
mov t2_10 L0x4000829ad8; mov t2_11 L0x4000829ae0; mov t2_12 L0x4000829ae8;
mov t2_13 L0x4000829af0; mov t2_14 L0x4000829af8; mov t2_15 L0x4000829b00;
mov t2_20 L0x4000829b08; mov t2_21 L0x4000829b10; mov t2_22 L0x4000829b18;
mov t2_23 L0x4000829b20; mov t2_24 L0x4000829b28; mov t2_25 L0x4000829b30;
mov t2_30 L0x4000829b38; mov t2_31 L0x4000829b40; mov t2_32 L0x4000829b48;
mov t2_33 L0x4000829b50; mov t2_34 L0x4000829b58; mov t2_35 L0x4000829b60;
mov t2_40 L0x4000829b68; mov t2_41 L0x4000829b70; mov t2_42 L0x4000829b78;
mov t2_43 L0x4000829b80; mov t2_44 L0x4000829b88; mov t2_45 L0x4000829b90;
mov t2_50 L0x4000829b98; mov t2_51 L0x4000829ba0; mov t2_52 L0x4000829ba8;
mov t2_53 L0x4000829bb0; mov t2_54 L0x4000829bb8; mov t2_55 L0x4000829bc0;

assert true
    && and [eqmod (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05])
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a60, a61, a62, a63, a64, a65])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15])
                  (limbs 64 [a10, a11, a12, a13, a14, a15] +
                   limbs 64 [a70, a71, a72, a73, a74, a75])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25])
                  (limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a80, a81, a82, a83, a84, a85])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35])
                  (limbs 64 [a30, a31, a32, a33, a34, a35] +
                   limbs 64 [a90, a91, a92, a93, a94, a95])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45])
                  (limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55])
                  (limbs 64 [a50, a51, a52, a53, a54, a55] +
                   limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05])
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a60, a61, a62, a63, a64, a65])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15])
                  (limbs 64 [a10, a11, a12, a13, a14, a15] +
                   limbs 64 [a70, a71, a72, a73, a74, a75])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25])
                  (limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a80, a81, a82, a83, a84, a85])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35])
                  (limbs 64 [a30, a31, a32, a33, a34, a35] +
                   limbs 64 [a90, a91, a92, a93, a94, a95])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45])
                  (limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55])
                  (limbs 64 [a50, a51, a52, a53, a54, a55] +
                   limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])]
    && true;

(* add	x0, x28, #0x120                             #! PC = 0x274877953412 *)
adds dontcare x0 x28 0x120@uint64;
(* mov	x2, x22                                     #! PC = 0x274877953416 *)
mov x2 x22;
(* mov	x1, x20                                     #! PC = 0x274877953420 *)
mov x1 x20;
(* mov	x20, x0                                     #! PC = 0x274877953424 *)
mov x20 x0;
(* #bl	0x4000005eb4 <add_fp6>                      #! PC = 0x274877953428 *)
#bl	0x4000005eb4 <add_fp6>                      #! 0x274877953428 = 0x274877953428;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x40008299a0; PC = 0x274877931188 *)
mov L0x40008299a0 x29;
mov L0x40008299a8 x30;
(* mov	x29, sp                                     #! PC = 0x274877931192 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299b0; PC = 0x274877931196 *)
mov L0x40008299b0 x19;
mov L0x40008299b8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299c0; PC = 0x274877931200 *)
mov L0x40008299c0 x21;
mov L0x40008299c8 x22;
(* mov	x20, x0                                     #! PC = 0x274877931204 *)
mov x20 x0;
(* mov	x21, x1                                     #! PC = 0x274877931208 *)
mov x21 x1;
(* mov	x22, x2                                     #! PC = 0x274877931212 *)
mov x22 x2;
(* #adrp	x19, 0x4000029000                          #! PC = 0x274877931216 *)
#adrp	%%x19, 0x4000029000                          #! 0x274877931216 = 0x274877931216;
(* ldr	x19, [x19, #4056]                           #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877931220 *)
mov x19 LL0x4000029fd8;
(* mov	x3, x19                                     #! PC = 0x274877931224 *)
mov x3 x19;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877931228 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877931228 = 0x274877931228;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829970; PC = 0x274877979620 *)
mov L0x4000829970 x29;
mov L0x4000829978 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829980; PC = 0x274877979628 *)
mov L0x4000829980 x19;
mov L0x4000829988 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829990; PC = 0x274877979632 *)
mov L0x4000829990 x21;
mov L0x4000829998 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 L0x4000016928;
mov x5 L0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 L0x4000016938;
mov x7 L0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 L0x4000016948;
mov x9 L0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a838; Value = 0x000000400082ae10; PC = 0x274877979488 *)
mov x10 L0x400082a838;
mov x11 L0x400082a840;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a958; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a958;
mov x17 L0x400082a960;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a848; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a848;
mov x13 L0x400082a850;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a968; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 L0x400082a968;
mov x20 L0x400082a970;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a858; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a858;
mov x15 L0x400082a860;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a978; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082a978;
mov x22 L0x400082a980;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x400082ab98; PC = 0x274877979652 *)
mov L0x400082ab98 x10;
mov L0x400082aba0 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x400082aba8; PC = 0x274877979660 *)
mov L0x400082aba8 x12;
mov L0x400082abb0 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x400082abb8; PC = 0x274877979668 *)
mov L0x400082abb8 x14;
mov L0x400082abc0 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a868; Value = 0x0000000000000000; PC = 0x274877979488 *)
mov x10 L0x400082a868;
mov x11 L0x400082a870;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a988; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082a988;
mov x17 L0x400082a990;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a878; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a878;
mov x13 L0x400082a880;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a998; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 L0x400082a998;
mov x20 L0x400082a9a0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a888; Value = 0x000000400082dd48; PC = 0x274877979504 *)
mov x14 L0x400082a888;
mov x15 L0x400082a890;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a9a8; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082a9a8;
mov x22 L0x400082a9b0;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829978; Value = 0x002d004000005ee0; PC = 0x274877979676 *)
mov x30 L0x4000829978;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x400082abc8; PC = 0x274877979680 *)
mov L0x400082abc8 x10;
mov L0x400082abd0 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x400082abd8; PC = 0x274877979684 *)
mov L0x400082abd8 x12;
mov L0x400082abe0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x400082abe8; PC = 0x274877979688 *)
mov L0x400082abe8 x14;
mov L0x400082abf0 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829980; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 L0x4000829980;
mov x20 L0x4000829988;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829990; Value = 0x000000400082a838; PC = 0x274877979696 *)
mov x21 L0x4000829990;
mov x22 L0x4000829998;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829970; Value = 0x00000040008299a0; PC = 0x274877979700 *)
mov x29 L0x4000829970;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* mov	x3, x19                                     #! PC = 0x274877931232 *)
mov x3 x19;
(* add	x2, x22, #0x60                              #! PC = 0x274877931236 *)
adds dontcare x2 x22 0x60@uint64;
(* add	x1, x21, #0x60                              #! PC = 0x274877931240 *)
adds dontcare x1 x21 0x60@uint64;
(* add	x0, x20, #0x60                              #! PC = 0x274877931244 *)
adds dontcare x0 x20 0x60@uint64;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877931248 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877931248 = 0x274877931248;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829970; PC = 0x274877979620 *)
mov L0x4000829970 x29;
mov L0x4000829978 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829980; PC = 0x274877979628 *)
mov L0x4000829980 x19;
mov L0x4000829988 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829990; PC = 0x274877979632 *)
mov L0x4000829990 x21;
mov L0x4000829998 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 L0x4000016928;
mov x5 L0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 L0x4000016938;
mov x7 L0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 L0x4000016948;
mov x9 L0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a898; Value = 0x0000000000000000; PC = 0x274877979488 *)
mov x10 L0x400082a898;
mov x11 L0x400082a8a0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a9b8; Value = 0x000000400085dea8; PC = 0x274877979492 *)
mov x16 L0x400082a9b8;
mov x17 L0x400082a9c0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a8a8; Value = 0x000000400082cfe8; PC = 0x274877979496 *)
mov x12 L0x400082a8a8;
mov x13 L0x400082a8b0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a9c8; Value = 0x000000400085de68; PC = 0x274877979500 *)
mov x19 L0x400082a9c8;
mov x20 L0x400082a9d0;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a8b8; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a8b8;
mov x15 L0x400082a8c0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082a9d8; Value = 0x000000400085dee8; PC = 0x274877979508 *)
mov x21 L0x400082a9d8;
mov x22 L0x400082a9e0;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x400082abf8; PC = 0x274877979652 *)
mov L0x400082abf8 x10;
mov L0x400082ac00 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x400082ac08; PC = 0x274877979660 *)
mov L0x400082ac08 x12;
mov L0x400082ac10 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x400082ac18; PC = 0x274877979668 *)
mov L0x400082ac18 x14;
mov L0x400082ac20 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a8c8; Value = 0x000000400082d0c8; PC = 0x274877979488 *)
mov x10 L0x400082a8c8;
mov x11 L0x400082a8d0;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082a9e8; Value = 0x000000400085df08; PC = 0x274877979492 *)
mov x16 L0x400082a9e8;
mov x17 L0x400082a9f0;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a8d8; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a8d8;
mov x13 L0x400082a8e0;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082a9f8; Value = 0x000000400085de98; PC = 0x274877979500 *)
mov x19 L0x400082a9f8;
mov x20 L0x400082aa00;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a8e8; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a8e8;
mov x15 L0x400082a8f0;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082aa08; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082aa08;
mov x22 L0x400082aa10;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829978; Value = 0x006e004000005ef4; PC = 0x274877979676 *)
mov x30 L0x4000829978;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x400082ac28; PC = 0x274877979680 *)
mov L0x400082ac28 x10;
mov L0x400082ac30 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x400082ac38; PC = 0x274877979684 *)
mov L0x400082ac38 x12;
mov L0x400082ac40 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x400082ac48; PC = 0x274877979688 *)
mov L0x400082ac48 x14;
mov L0x400082ac50 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829980; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 L0x4000829980;
mov x20 L0x4000829988;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829990; Value = 0x000000400082a838; PC = 0x274877979696 *)
mov x21 L0x4000829990;
mov x22 L0x4000829998;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829970; Value = 0x00000040008299a0; PC = 0x274877979700 *)
mov x29 L0x4000829970;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* mov	x3, x19                                     #! PC = 0x274877931252 *)
mov x3 x19;
(* add	x2, x22, #0xc0                              #! PC = 0x274877931256 *)
adds dontcare x2 x22 0xc0@uint64;
(* add	x1, x21, #0xc0                              #! PC = 0x274877931260 *)
adds dontcare x1 x21 0xc0@uint64;
(* add	x0, x20, #0xc0                              #! PC = 0x274877931264 *)
adds dontcare x0 x20 0xc0@uint64;
(* #bl	0x4000011be0 <add_mod_384x>                 #! PC = 0x274877931268 *)
#bl	0x4000011be0 <add_mod_384x>                 #! 0x274877931268 = 0x274877931268;
(* #paciasp                                         #! PC = 0x274877979616 *)
#paciasp                                         #! 0x274877979616 = 0x274877979616;
(* stp	x29, x30, [sp, #-48]!                       #! EA = L0x4000829970; PC = 0x274877979620 *)
mov L0x4000829970 x29;
mov L0x4000829978 x30;
(* mov	x29, sp                                     #! PC = 0x274877979624 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829980; PC = 0x274877979628 *)
mov L0x4000829980 x19;
mov L0x4000829988 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829990; PC = 0x274877979632 *)
mov L0x4000829990 x21;
mov L0x4000829998 x22;
(* ldp	x4, x5, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877979636 *)
mov x4 L0x4000016928;
mov x5 L0x4000016930;
(* ldp	x6, x7, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877979640 *)
mov x6 L0x4000016938;
mov x7 L0x4000016940;
(* ldp	x8, x9, [x3, #32]                           #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877979644 *)
mov x8 L0x4000016948;
mov x9 L0x4000016950;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979648 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979648 = 0x274877979648;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a8f8; Value = 0x0000000000000000; PC = 0x274877979488 *)
mov x10 L0x400082a8f8;
mov x11 L0x400082a900;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082aa18; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082aa18;
mov x17 L0x400082aa20;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a908; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a908;
mov x13 L0x400082a910;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082aa28; Value = 0x0000000000000000; PC = 0x274877979500 *)
mov x19 L0x400082aa28;
mov x20 L0x400082aa30;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a918; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a918;
mov x15 L0x400082a920;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082aa38; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082aa38;
mov x22 L0x400082aa40;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* stp	x10, x11, [x0]                              #! EA = L0x400082ac58; PC = 0x274877979652 *)
mov L0x400082ac58 x10;
mov L0x400082ac60 x11;
(* add	x1, x1, #0x30                               #! PC = 0x274877979656 *)
adds dontcare x1 x1 0x30@uint64;
(* stp	x12, x13, [x0, #16]                         #! EA = L0x400082ac68; PC = 0x274877979660 *)
mov L0x400082ac68 x12;
mov L0x400082ac70 x13;
(* add	x2, x2, #0x30                               #! PC = 0x274877979664 *)
adds dontcare x2 x2 0x30@uint64;
(* stp	x14, x15, [x0, #32]                         #! EA = L0x400082ac78; PC = 0x274877979668 *)
mov L0x400082ac78 x14;
mov L0x400082ac80 x15;
(* #bl	0x4000011b60 <__add_mod_384>                #! PC = 0x274877979672 *)
#bl	0x4000011b60 <__add_mod_384>                #! 0x274877979672 = 0x274877979672;
(* ldp	x10, x11, [x1]                              #! EA = L0x400082a928; Value = 0x00000040008418b4; PC = 0x274877979488 *)
mov x10 L0x400082a928;
mov x11 L0x400082a930;
(* ldp	x16, x17, [x2]                              #! EA = L0x400082aa48; Value = 0x0000000000000000; PC = 0x274877979492 *)
mov x16 L0x400082aa48;
mov x17 L0x400082aa50;
(* ldp	x12, x13, [x1, #16]                         #! EA = L0x400082a938; Value = 0x0000000000000000; PC = 0x274877979496 *)
mov x12 L0x400082a938;
mov x13 L0x400082a940;
(* ldp	x19, x20, [x2, #16]                         #! EA = L0x400082aa58; Value = 0x000000400085ded8; PC = 0x274877979500 *)
mov x19 L0x400082aa58;
mov x20 L0x400082aa60;
(* ldp	x14, x15, [x1, #32]                         #! EA = L0x400082a948; Value = 0x0000000000000000; PC = 0x274877979504 *)
mov x14 L0x400082a948;
mov x15 L0x400082a950;
(* ldp	x21, x22, [x2, #32]                         #! EA = L0x400082aa68; Value = 0x0000000000000000; PC = 0x274877979508 *)
mov x21 L0x400082aa68;
mov x22 L0x400082aa70;
(* adds	x10, x10, x16                              #! PC = 0x274877979512 *)
adds carry x10 x10 x16;
(* adcs	x11, x11, x17                              #! PC = 0x274877979516 *)
adcs carry x11 x11 x17 carry;
(* adcs	x12, x12, x19                              #! PC = 0x274877979520 *)
adcs carry x12 x12 x19 carry;
(* adcs	x13, x13, x20                              #! PC = 0x274877979524 *)
adcs carry x13 x13 x20 carry;
(* adcs	x14, x14, x21                              #! PC = 0x274877979528 *)
adcs carry x14 x14 x21 carry;
(* adcs	x15, x15, x22                              #! PC = 0x274877979532 *)
adcs carry x15 x15 x22 carry;
(* adc	x3, xzr, xzr                                #! PC = 0x274877979536 *)
adc x3 0@uint64 0@uint64 carry;
(* subs	x16, x10, x4                               #! PC = 0x274877979540 *)
subc carry x16 x10 x4;
(* sbcs	x17, x11, x5                               #! PC = 0x274877979544 *)
sbcs carry x17 x11 x5 carry;
(* sbcs	x19, x12, x6                               #! PC = 0x274877979548 *)
sbcs carry x19 x12 x6 carry;
(* sbcs	x20, x13, x7                               #! PC = 0x274877979552 *)
sbcs carry x20 x13 x7 carry;
(* sbcs	x21, x14, x8                               #! PC = 0x274877979556 *)
sbcs carry x21 x14 x8 carry;
(* sbcs	x22, x15, x9                               #! PC = 0x274877979560 *)
sbcs carry x22 x15 x9 carry;
(* sbcs	xzr, x3, xzr                               #! PC = 0x274877979564 *)
sbcs carry dontcare x3 0@uint64 carry;
(* csel	x10, x10, x16, cc  // cc = lo, ul, last    #! PC = 0x274877979568 *)
cmov x10 carry x16 x10;
(* csel	x11, x11, x17, cc  // cc = lo, ul, last    #! PC = 0x274877979572 *)
cmov x11 carry x17 x11;
(* csel	x12, x12, x19, cc  // cc = lo, ul, last    #! PC = 0x274877979576 *)
cmov x12 carry x19 x12;
(* csel	x13, x13, x20, cc  // cc = lo, ul, last    #! PC = 0x274877979580 *)
cmov x13 carry x20 x13;
(* csel	x14, x14, x21, cc  // cc = lo, ul, last    #! PC = 0x274877979584 *)
cmov x14 carry x21 x14;
(* csel	x15, x15, x22, cc  // cc = lo, ul, last    #! PC = 0x274877979588 *)
cmov x15 carry x22 x15;
(* #ret                                            #! PC = 0x274877979592 *)
#ret                                            #! 0x274877979592 = 0x274877979592;
(* ldr	x30, [sp, #8]                               #! EA = L0x4000829978; Value = 0x006c004000005f08; PC = 0x274877979676 *)
mov x30 L0x4000829978;
(* stp	x10, x11, [x0, #48]                         #! EA = L0x400082ac88; PC = 0x274877979680 *)
mov L0x400082ac88 x10;
mov L0x400082ac90 x11;
(* stp	x12, x13, [x0, #64]                         #! EA = L0x400082ac98; PC = 0x274877979684 *)
mov L0x400082ac98 x12;
mov L0x400082aca0 x13;
(* stp	x14, x15, [x0, #80]                         #! EA = L0x400082aca8; PC = 0x274877979688 *)
mov L0x400082aca8 x14;
mov L0x400082acb0 x15;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829980; Value = 0x0000004000016928; PC = 0x274877979692 *)
mov x19 L0x4000829980;
mov x20 L0x4000829988;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829990; Value = 0x000000400082a838; PC = 0x274877979696 *)
mov x21 L0x4000829990;
mov x22 L0x4000829998;
(* ldr	x29, [sp], #48                              #! EA = L0x4000829970; Value = 0x00000040008299a0; PC = 0x274877979700 *)
mov x29 L0x4000829970;
(* #autiasp                                         #! PC = 0x274877979704 *)
#autiasp                                         #! 0x274877979704 = 0x274877979704;
(* #ret                                            #! PC = 0x274877979708 *)
#ret                                            #! 0x274877979708 = 0x274877979708;
(* ldp	x19, x20, [sp, #16]                         #! EA = L0x40008299b0; Value = 0x0000004000829aa8; PC = 0x274877931272 *)
mov x19 L0x40008299b0;
mov x20 L0x40008299b8;
(* ldp	x21, x22, [sp, #32]                         #! EA = L0x40008299c0; Value = 0x000000400082a5f8; PC = 0x274877931276 *)
mov x21 L0x40008299c0;
mov x22 L0x40008299c8;
(* ldp	x29, x30, [sp], #48                         #! EA = L0x40008299a0; Value = 0x00000040008299d0; PC = 0x274877931280 *)
mov x29 L0x40008299a0;
mov x30 L0x40008299a8;
(* #ret                                            #! PC = 0x274877931284 *)
#ret                                            #! 0x274877931284 = 0x274877931284;

(* add_fp6(ret[1], b[0], b[1]) *)

assert true
    && and [eqmod (limbs 64 [L0x400082ab98, L0x400082aba0, L0x400082aba8,
                             L0x400082abb0, L0x400082abb8, L0x400082abc0])
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b60, b61, b62, b63, b64, b65])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082abc8, L0x400082abd0, L0x400082abd8,
                             L0x400082abe0, L0x400082abe8, L0x400082abf0])
                  (limbs 64 [b10, b11, b12, b13, b14, b15] +
                   limbs 64 [b70, b71, b72, b73, b74, b75])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082abf8, L0x400082ac00, L0x400082ac08,
                             L0x400082ac10, L0x400082ac18, L0x400082ac20])
                  (limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b80, b81, b82, b83, b84, b85])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082ac28, L0x400082ac30, L0x400082ac38,
                             L0x400082ac40, L0x400082ac48, L0x400082ac50])
                  (limbs 64 [b30, b31, b32, b33, b34, b35] +
                   limbs 64 [b90, b91, b92, b93, b94, b95])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082ac58, L0x400082ac60, L0x400082ac68,
                             L0x400082ac70, L0x400082ac78, L0x400082ac80])
                  (limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082ac88, L0x400082ac90, L0x400082ac98,
                             L0x400082aca0, L0x400082aca8, L0x400082acb0])
                  (limbs 64 [b50, b51, b52, b53, b54, b55] +
                   limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [L0x400082ab98, L0x400082aba0, L0x400082aba8,
                             L0x400082abb0, L0x400082abb8, L0x400082abc0])
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b60, b61, b62, b63, b64, b65])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082abc8, L0x400082abd0, L0x400082abd8,
                             L0x400082abe0, L0x400082abe8, L0x400082abf0])
                  (limbs 64 [b10, b11, b12, b13, b14, b15] +
                   limbs 64 [b70, b71, b72, b73, b74, b75])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082abf8, L0x400082ac00, L0x400082ac08,
                             L0x400082ac10, L0x400082ac18, L0x400082ac20])
                  (limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b80, b81, b82, b83, b84, b85])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082ac28, L0x400082ac30, L0x400082ac38,
                             L0x400082ac40, L0x400082ac48, L0x400082ac50])
                  (limbs 64 [b30, b31, b32, b33, b34, b35] +
                   limbs 64 [b90, b91, b92, b93, b94, b95])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082ac58, L0x400082ac60, L0x400082ac68,
                             L0x400082ac70, L0x400082ac78, L0x400082ac80])
                  (limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082ac88, L0x400082ac90, L0x400082ac98,
                             L0x400082aca0, L0x400082aca8, L0x400082acb0])
                  (limbs 64 [b50, b51, b52, b53, b54, b55] +
                   limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5])
                  (limbs 64 [m0, m1, m2, m3, m4, m5])]
    && true;

(* add	x0, sp, #0x678                              #! PC = 0x274877953432 *)
adds dontcare x0 sp 0x678@uint64;
(* mov	x2, x19                                     #! PC = 0x274877953436 *)
mov x2 x19;
(* str	x20, [sp, #128]                             #! EA = L0x4000829a50; PC = 0x274877953440 *)
mov L0x4000829a50 x20;
(* mov	x1, x20                                     #! PC = 0x274877953444 *)
mov x1 x20;
(* mov	x25, x0                                     #! PC = 0x274877953448 *)
mov x25 x0;
(* #bl	0x400000a8b8 <mul_fp6x2>                    #! PC = 0x274877953452 *)
#bl	0x400000a8b8 <mul_fp6x2>                    #! 0x274877953452 = 0x274877953452;

(* NOTE: save ret[1] *)

mov L0x400082ab98o L0x400082ab98; mov L0x400082aba0o L0x400082aba0;
mov L0x400082aba8o L0x400082aba8; mov L0x400082abb0o L0x400082abb0;
mov L0x400082abb8o L0x400082abb8; mov L0x400082abc0o L0x400082abc0;
mov L0x400082abc8o L0x400082abc8; mov L0x400082abd0o L0x400082abd0;
mov L0x400082abd8o L0x400082abd8; mov L0x400082abe0o L0x400082abe0;
mov L0x400082abe8o L0x400082abe8; mov L0x400082abf0o L0x400082abf0;
mov L0x400082abf8o L0x400082abf8; mov L0x400082ac00o L0x400082ac00;
mov L0x400082ac08o L0x400082ac08; mov L0x400082ac10o L0x400082ac10;
mov L0x400082ac18o L0x400082ac18; mov L0x400082ac20o L0x400082ac20;
mov L0x400082ac28o L0x400082ac28; mov L0x400082ac30o L0x400082ac30;
mov L0x400082ac38o L0x400082ac38; mov L0x400082ac40o L0x400082ac40;
mov L0x400082ac48o L0x400082ac48; mov L0x400082ac50o L0x400082ac50;
mov L0x400082ac58o L0x400082ac58; mov L0x400082ac60o L0x400082ac60;
mov L0x400082ac68o L0x400082ac68; mov L0x400082ac70o L0x400082ac70;
mov L0x400082ac78o L0x400082ac78; mov L0x400082ac80o L0x400082ac80;
mov L0x400082ac88o L0x400082ac88; mov L0x400082ac90o L0x400082ac90;
mov L0x400082ac98o L0x400082ac98; mov L0x400082aca0o L0x400082aca0;
mov L0x400082aca8o L0x400082aca8; mov L0x400082acb0o L0x400082acb0;

cut and [eqmod ((limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U) +
                (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) * V +
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U) * V**2)
               (((limbs 64 [a00, a01, a02, a03, a04, a05] +
                  limbs 64 [a60, a61, a62, a63, a64, a65]) +
                 (limbs 64 [a10, a11, a12, a13, a14, a15] +
                  limbs 64 [a70, a71, a72, a73, a74, a75]) * U) +
                ((limbs 64 [a20, a21, a22, a23, a24, a25] +
                  limbs 64 [a80, a81, a82, a83, a84, a85]) +
                 (limbs 64 [a30, a31, a32, a33, a34, a35] +
                  limbs 64 [a90, a91, a92, a93, a94, a95]) * U) * V +
                ((limbs 64 [a40, a41, a42, a43, a44, a45] +
                  limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5]) +
                 (limbs 64 [a50, a51, a52, a53, a54, a55] +
                  limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5]) * U) * V**2)
               [limbs 64 [m0, m1, m2, m3, m4, m5],
                U**2 + 1, V**3 - U - 1],
         eqmod ((limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) +
                 (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                            L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                  limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                            L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) * V +
                 (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                            L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                  limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                            L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) * V**2)
               (((limbs 64 [b00, b01, b02, b03, b04, b05] +
                  limbs 64 [b60, b61, b62, b63, b64, b65]) +
                 (limbs 64 [b10, b11, b12, b13, b14, b15] +
                  limbs 64 [b70, b71, b72, b73, b74, b75]) * U) +
                ((limbs 64 [b20, b21, b22, b23, b24, b25] +
                  limbs 64 [b80, b81, b82, b83, b84, b85]) +
                 (limbs 64 [b30, b31, b32, b33, b34, b35] +
                  limbs 64 [b90, b91, b92, b93, b94, b95]) * U) * V +
                ((limbs 64 [b40, b41, b42, b43, b44, b45] +
                  limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5]) +
                 (limbs 64 [b50, b51, b52, b53, b54, b55] +
                  limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5]) * U) * V**2)
               [limbs 64 [m0, m1, m2, m3, m4, m5],
                U**2 + 1, V**3 - U - 1]]
 && and [limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                   L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                   L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                   L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                   L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                   L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                   L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
    ] prove with precondition, all cuts;

(* mul_fp6x2(rx, ret[1], t2) *)

inline mul_fp6x2 ((* rx *)
                rx_00, rx_01, rx_02, rx_03, rx_04, rx_05,
                rx_06, rx_07, rx_08, rx_09, rx_0a, rx_0b,
                rx_10, rx_11, rx_12, rx_13, rx_14, rx_15,
                rx_16, rx_17, rx_18, rx_19, rx_1a, rx_1b,
                rx_20, rx_21, rx_22, rx_23, rx_24, rx_25,
                rx_26, rx_27, rx_28, rx_29, rx_2a, rx_2b,
                rx_30, rx_31, rx_32, rx_33, rx_34, rx_35,
                rx_36, rx_37, rx_38, rx_39, rx_3a, rx_3b,
                rx_40, rx_41, rx_42, rx_43, rx_44, rx_45,
                rx_46, rx_47, rx_48, rx_49, rx_4a, rx_4b,
                rx_50, rx_51, rx_52, rx_53, rx_54, rx_55,
                rx_56, rx_57, rx_58, rx_59, rx_5a, rx_5b,

                (* ret[1] *)
                L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                L0x400082abb0o, L0x400082abb8o, L0x400082abc0o,
                L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                L0x400082abe0o, L0x400082abe8o, L0x400082abf0o,
                L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                L0x400082ac10o, L0x400082ac18o, L0x400082ac20o,
                L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                L0x400082ac40o, L0x400082ac48o, L0x400082ac50o,
                L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                L0x400082ac70o, L0x400082ac78o, L0x400082ac80o,
                L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                L0x400082aca0o, L0x400082aca8o, L0x400082acb0o,

                (* t2 *)
                t2_00, t2_01, t2_02, t2_03, t2_04, t2_05,
                t2_10, t2_11, t2_12, t2_13, t2_14, t2_15,
                t2_20, t2_21, t2_22, t2_23, t2_24, t2_25,
                t2_30, t2_31, t2_32, t2_33, t2_34, t2_35,
                t2_40, t2_41, t2_42, t2_43, t2_44, t2_45,
                t2_50, t2_51, t2_52, t2_53, t2_54, t2_55,

                m0, m1, m2, m3, m4, m5,
                mp,
                x0, x1, x2,
                x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30,
                sp,
                U, V, W);

mov L0x400082a048 rx_00; mov L0x400082a050 rx_01; mov L0x400082a058 rx_02;
mov L0x400082a060 rx_03; mov L0x400082a068 rx_04; mov L0x400082a070 rx_05;
mov L0x400082a078 rx_06; mov L0x400082a080 rx_07; mov L0x400082a088 rx_08;
mov L0x400082a090 rx_09; mov L0x400082a098 rx_0a; mov L0x400082a0a0 rx_0b;
mov L0x400082a0a8 rx_10; mov L0x400082a0b0 rx_11; mov L0x400082a0b8 rx_12;
mov L0x400082a0c0 rx_13; mov L0x400082a0c8 rx_14; mov L0x400082a0d0 rx_15;
mov L0x400082a0d8 rx_16; mov L0x400082a0e0 rx_17; mov L0x400082a0e8 rx_18;
mov L0x400082a0f0 rx_19; mov L0x400082a0f8 rx_1a; mov L0x400082a100 rx_1b;
mov L0x400082a108 rx_20; mov L0x400082a110 rx_21; mov L0x400082a118 rx_22;
mov L0x400082a120 rx_23; mov L0x400082a128 rx_24; mov L0x400082a130 rx_25;
mov L0x400082a138 rx_26; mov L0x400082a140 rx_27; mov L0x400082a148 rx_28;
mov L0x400082a150 rx_29; mov L0x400082a158 rx_2a; mov L0x400082a160 rx_2b;

mov L0x400082a168 rx_30; mov L0x400082a170 rx_31; mov L0x400082a178 rx_32;
mov L0x400082a180 rx_33; mov L0x400082a188 rx_34; mov L0x400082a190 rx_35;
mov L0x400082a198 rx_36; mov L0x400082a1a0 rx_37; mov L0x400082a1a8 rx_38;
mov L0x400082a1b0 rx_39; mov L0x400082a1b8 rx_3a; mov L0x400082a1c0 rx_3b;
mov L0x400082a1c8 rx_40; mov L0x400082a1d0 rx_41; mov L0x400082a1d8 rx_42;
mov L0x400082a1e0 rx_43; mov L0x400082a1e8 rx_44; mov L0x400082a1f0 rx_45;
mov L0x400082a1f8 rx_46; mov L0x400082a200 rx_47; mov L0x400082a208 rx_48;
mov L0x400082a210 rx_49; mov L0x400082a218 rx_4a; mov L0x400082a220 rx_4b;
mov L0x400082a228 rx_50; mov L0x400082a230 rx_51; mov L0x400082a238 rx_52;
mov L0x400082a240 rx_53; mov L0x400082a248 rx_54; mov L0x400082a250 rx_55;
mov L0x400082a258 rx_56; mov L0x400082a260 rx_57; mov L0x400082a268 rx_58;
mov L0x400082a270 rx_59; mov L0x400082a278 rx_5a; mov L0x400082a280 rx_5b;

(* ldr	x19, [x19, #4056]                           #! EA = L0x4000029fd8; Value = 0x0000004000016928; PC = 0x274877953460 *)
mov x19 LL0x4000029fd8;
(* mov	x3, x19                                     #! PC = 0x274877953464 *)
mov x3 x19;
(* mov	x2, x24                                     #! PC = 0x274877953468 *)
mov x2 x24;
(* mov	x1, x25                                     #! PC = 0x274877953472 *)
mov x1 x25;
(* mov	x0, x25                                     #! PC = 0x274877953476 *)
mov x0 x25;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953480 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953480 = 0x274877953480;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

mov LL0x4000829a48r02 LL0x4000829a48r0; mov LL0x4000829a50r02 LL0x4000829a50r0;
mov LL0x4000829a58r02 LL0x4000829a58r0; mov LL0x4000829a60r02 LL0x4000829a60r0;
mov LL0x4000829a68r02 LL0x4000829a68r0; mov LL0x4000829a70r02 LL0x4000829a70r0;
mov LL0x4000829a78r02 LL0x4000829a78r0; mov LL0x4000829a80r02 LL0x4000829a80r0;
mov LL0x4000829a88r02 LL0x4000829a88r0; mov LL0x4000829a90r02 LL0x4000829a90r0;
mov LL0x4000829a98r02 LL0x4000829a98r0; mov LL0x4000829aa0r02 LL0x4000829aa0r0;
mov LL0x4000829aa8r02 LL0x4000829aa8r0; mov LL0x4000829ab0r02 LL0x4000829ab0r0;
mov LL0x4000829ab8r02 LL0x4000829ab8r0; mov LL0x4000829ac0r02 LL0x4000829ac0r0;
mov LL0x4000829ac8r02 LL0x4000829ac8r0; mov LL0x4000829ad0r02 LL0x4000829ad0r0;
mov LL0x4000829ad8r02 LL0x4000829ad8r0; mov LL0x4000829ae0r02 LL0x4000829ae0r0;
mov LL0x4000829ae8r02 LL0x4000829ae8r0; mov LL0x4000829af0r02 LL0x4000829af0r0;
mov LL0x4000829af8r02 LL0x4000829af8r0; mov LL0x4000829b00r02 LL0x4000829b00r0;
mov LL0x4000829a48r12 LL0x4000829a48r1; mov LL0x4000829a50r12 LL0x4000829a50r1;
mov LL0x4000829a58r12 LL0x4000829a58r1; mov LL0x4000829a60r12 LL0x4000829a60r1;
mov LL0x4000829a68r12 LL0x4000829a68r1; mov LL0x4000829a70r12 LL0x4000829a70r1;
mov LL0x4000829a78r12 LL0x4000829a78r1; mov LL0x4000829a80r12 LL0x4000829a80r1;
mov LL0x4000829a88r12 LL0x4000829a88r1; mov LL0x4000829a90r12 LL0x4000829a90r1;
mov LL0x4000829a98r12 LL0x4000829a98r1; mov LL0x4000829aa0r12 LL0x4000829aa0r1;
mov LL0x4000829aa8r12 LL0x4000829aa8r1; mov LL0x4000829ab0r12 LL0x4000829ab0r1;
mov LL0x4000829ab8r12 LL0x4000829ab8r1; mov LL0x4000829ac0r12 LL0x4000829ac0r1;
mov LL0x4000829ac8r12 LL0x4000829ac8r1; mov LL0x4000829ad0r12 LL0x4000829ad0r1;
mov LL0x4000829ad8r12 LL0x4000829ad8r1; mov LL0x4000829ae0r12 LL0x4000829ae0r1;
mov LL0x4000829ae8r12 LL0x4000829ae8r1; mov LL0x4000829af0r12 LL0x4000829af0r1;
mov LL0x4000829af8r12 LL0x4000829af8r1; mov LL0x4000829b00r12 LL0x4000829b00r1;
mov LL0x4000829a48r22 LL0x4000829a48r2; mov LL0x4000829a50r22 LL0x4000829a50r2;
mov LL0x4000829a58r22 LL0x4000829a58r2; mov LL0x4000829a60r22 LL0x4000829a60r2;
mov LL0x4000829a68r22 LL0x4000829a68r2; mov LL0x4000829a70r22 LL0x4000829a70r2;
mov LL0x4000829a78r22 LL0x4000829a78r2; mov LL0x4000829a80r22 LL0x4000829a80r2;
mov LL0x4000829a88r22 LL0x4000829a88r2; mov LL0x4000829a90r22 LL0x4000829a90r2;
mov LL0x4000829a98r22 LL0x4000829a98r2; mov LL0x4000829aa0r22 LL0x4000829aa0r2;
mov LL0x4000829aa8r22 LL0x4000829aa8r2; mov LL0x4000829ab0r22 LL0x4000829ab0r2;
mov LL0x4000829ab8r22 LL0x4000829ab8r2; mov LL0x4000829ac0r22 LL0x4000829ac0r2;
mov LL0x4000829ac8r22 LL0x4000829ac8r2; mov LL0x4000829ad0r22 LL0x4000829ad0r2;
mov LL0x4000829ad8r22 LL0x4000829ad8r2; mov LL0x4000829ae0r22 LL0x4000829ae0r2;
mov LL0x4000829ae8r22 LL0x4000829ae8r2; mov LL0x4000829af0r22 LL0x4000829af0r2;
mov LL0x4000829af8r22 LL0x4000829af8r2; mov LL0x4000829b00r22 LL0x4000829b00r2;

cut and [(* ret[0] = ((a1 + a2)*(b1 + b2) - a1*b1 - a2*b2)*(u+1) + a0*b0
                   = (a1*b2 + a2*b1)*(u+1) + a0*b0 *)
         eqmod (limbs 64 [LL0x4000829a48r02, LL0x4000829a50r02, LL0x4000829a58r02,
                          LL0x4000829a60r02, LL0x4000829a68r02, LL0x4000829a70r02] +
                limbs 64 [LL0x4000829a78r02, LL0x4000829a80r02, LL0x4000829a88r02,
                          LL0x4000829a90r02, LL0x4000829a98r02, LL0x4000829aa0r02] * U)
               ((limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                           L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                 limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                           L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) +
                (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                           L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                 limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                           L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r02, LL0x4000829ab0r02, LL0x4000829ab8r02,
                          LL0x4000829ac0r02, LL0x4000829ac8r02, LL0x4000829ad0r02] +
                limbs 64 [LL0x4000829ad8r02, LL0x4000829ae0r02, LL0x4000829ae8r02,
                          LL0x4000829af0r02, LL0x4000829af8r02, LL0x4000829b00r02] * U)
               ((limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) +
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                          L0x400082a060, L0x400082a068, L0x400082a070,
                          L0x400082a078, L0x400082a080, L0x400082a088,
                          L0x400082a090, L0x400082a098, L0x400082a0a0] +
                limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                          L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                          L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                          L0x400082a0f0, L0x400082a0f8, L0x400082a100] * U)
               (((limbs 64 [LL0x4000829a48r02, LL0x4000829a50r02, LL0x4000829a58r02,
                            LL0x4000829a60r02, LL0x4000829a68r02, LL0x4000829a70r02] +
                  limbs 64 [LL0x4000829a78r02, LL0x4000829a80r02, LL0x4000829a88r02,
                            LL0x4000829a90r02, LL0x4000829a98r02, LL0x4000829aa0r02] * U) *
                 (limbs 64 [LL0x4000829aa8r02, LL0x4000829ab0r02, LL0x4000829ab8r02,
                            LL0x4000829ac0r02, LL0x4000829ac8r02, LL0x4000829ad0r02] +
                  limbs 64 [LL0x4000829ad8r02, LL0x4000829ae0r02, LL0x4000829ae8r02,
                            LL0x4000829af0r02, LL0x4000829af8r02, LL0x4000829b00r02] * U) -
                 (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                            L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                  limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                            L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) *
                 (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                  limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) -
                 (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                            L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                  limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                            L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) *
                 (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                  limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U)) *
                (U + 1) +
                (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) *
                (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
              
         (* ret[1] = (a0 + a1)*(b0 + b1) - a0*b0 - a1*b1 + a2*b2*(u+1)
                   = a0*b1 + a1*b0 + a2*b2*(u+1) *)
         eqmod (limbs 64 [LL0x4000829a48r12, LL0x4000829a50r12, LL0x4000829a58r12,
                          LL0x4000829a60r12, LL0x4000829a68r12, LL0x4000829a70r12] +
                limbs 64 [LL0x4000829a78r12, LL0x4000829a80r12, LL0x4000829a88r12,
                          LL0x4000829a90r12, LL0x4000829a98r12, LL0x4000829aa0r12] * U)
               (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                          L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                          L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U +
                limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                          L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                          L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [LL0x4000829aa8r12, LL0x4000829ab0r12, LL0x4000829ab8r12,
                          LL0x4000829ac0r12, LL0x4000829ac8r12, LL0x4000829ad0r12] +
                limbs 64 [LL0x4000829ad8r12, LL0x4000829ae0r12, LL0x4000829ae8r12,
                          LL0x4000829af0r12, LL0x4000829af8r12, LL0x4000829b00r12] * U)
               (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U +
                limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                          L0x400082a120, L0x400082a128, L0x400082a130,
                          L0x400082a138, L0x400082a140, L0x400082a148,
                          L0x400082a150, L0x400082a158, L0x400082a160] +
                limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                          L0x400082a180, L0x400082a188, L0x400082a190,
                          L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                          L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] * U)
               ((limbs 64 [LL0x4000829a48r12, LL0x4000829a50r12, LL0x4000829a58r12,
                           LL0x4000829a60r12, LL0x4000829a68r12, LL0x4000829a70r12] +
                 limbs 64 [LL0x4000829a78r12, LL0x4000829a80r12, LL0x4000829a88r12,
                           LL0x4000829a90r12, LL0x4000829a98r12, LL0x4000829aa0r12] * U) *
                (limbs 64 [LL0x4000829aa8r12, LL0x4000829ab0r12, LL0x4000829ab8r12,
                           LL0x4000829ac0r12, LL0x4000829ac8r12, LL0x4000829ad0r12] +
                 limbs 64 [LL0x4000829ad8r12, LL0x4000829ae0r12, LL0x4000829ae8r12,
                           LL0x4000829af0r12, LL0x4000829af8r12, LL0x4000829b00r12] * U) -
                (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) *
                (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U) -
                (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                           L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                 limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                           L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) *
                (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) +
                (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                           L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                 limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                           L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) *
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U) *
                (U + 1))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],

         (* ret[2] = (a0 + a2)*(b0 + b2) - a0*b0 - a2*b2 + a1*b1
                   = a0*b2 + a2*b0 + a1*b1 *)
         eqmod (limbs 64 [LL0x4000829a48r22, LL0x4000829a50r22, LL0x4000829a58r22,
                          LL0x4000829a60r22, LL0x4000829a68r22, LL0x4000829a70r22] +
                limbs 64 [LL0x4000829a78r22, LL0x4000829a80r22, LL0x4000829a88r22,
                          LL0x4000829a90r22, LL0x4000829a98r22, LL0x4000829aa0r22] * U)
               (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                          L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                          L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U +
                limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                          L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                          L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [LL0x4000829aa8r22, LL0x4000829ab0r22, LL0x4000829ab8r22,
                          LL0x4000829ac0r22, LL0x4000829ac8r22, LL0x4000829ad0r22] +
                limbs 64 [LL0x4000829ad8r22, LL0x4000829ae0r22, LL0x4000829ae8r22,
                          LL0x4000829af0r22, LL0x4000829af8r22, LL0x4000829b00r22] * U)
               (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U +
                limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                          L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                          L0x400082a1f8, L0x400082a200, L0x400082a208,
                          L0x400082a210, L0x400082a218, L0x400082a220] +
                limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                          L0x400082a240, L0x400082a248, L0x400082a250,
                          L0x400082a258, L0x400082a260, L0x400082a268,
                          L0x400082a270, L0x400082a278, L0x400082a280] * U)
               ((limbs 64 [LL0x4000829a48r22, LL0x4000829a50r22, LL0x4000829a58r22,
                           LL0x4000829a60r22, LL0x4000829a68r22, LL0x4000829a70r22] +
                 limbs 64 [LL0x4000829a78r22, LL0x4000829a80r22, LL0x4000829a88r22,
                           LL0x4000829a90r22, LL0x4000829a98r22, LL0x4000829aa0r22] * U) *
                (limbs 64 [LL0x4000829aa8r22, LL0x4000829ab0r22, LL0x4000829ab8r22,
                           LL0x4000829ac0r22, LL0x4000829ac8r22, LL0x4000829ad0r22] +
                 limbs 64 [LL0x4000829ad8r22, LL0x4000829ae0r22, LL0x4000829ae8r22,
                           LL0x4000829af0r22, LL0x4000829af8r22, LL0x4000829b00r22] * U) -
                (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) *
                (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U) -
                (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                           L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                 limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                           L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) *
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U) +
                (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                           L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                 limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                           L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) *
                (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1]
    ]
 && and [limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                   L0x400082a090, L0x400082a098, L0x400082a0a0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                   L0x400082a0f0, L0x400082a0f8, L0x400082a100] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                   L0x400082a150, L0x400082a158, L0x400082a160] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                   L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                   L0x400082a210, L0x400082a218, L0x400082a220] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                   L0x400082a270, L0x400082a278, L0x400082a280] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                   L0x4000829c10, L0x4000829c18, L0x4000829c20] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829c58, L0x4000829c60, L0x4000829c68,
                   L0x4000829c70, L0x4000829c78, L0x4000829c80] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829cb8, L0x4000829cc0, L0x4000829cc8,
                   L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829d18, L0x4000829d20, L0x4000829d28,
                   L0x4000829d30, L0x4000829d38, L0x4000829d40] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829d78, L0x4000829d80, L0x4000829d88,
                   L0x4000829d90, L0x4000829d98, L0x4000829da0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829dd8, L0x4000829de0, L0x4000829de8,
                   L0x4000829df0, L0x4000829df8, L0x4000829e00] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
    ] prove with precondition, all cuts;

ecut true;

(* NOTE: save old values *)

mov rx00o L0x400082a048; mov rx01o L0x400082a050; mov rx02o L0x400082a058;
mov rx03o L0x400082a060; mov rx04o L0x400082a068; mov rx05o L0x400082a070;
mov rx06o L0x400082a078; mov rx07o L0x400082a080; mov rx08o L0x400082a088;
mov rx09o L0x400082a090; mov rx0ao L0x400082a098; mov rx0bo L0x400082a0a0;
mov rx10o L0x400082a0a8; mov rx11o L0x400082a0b0; mov rx12o L0x400082a0b8;
mov rx13o L0x400082a0c0; mov rx14o L0x400082a0c8; mov rx15o L0x400082a0d0;
mov rx16o L0x400082a0d8; mov rx17o L0x400082a0e0; mov rx18o L0x400082a0e8;
mov rx19o L0x400082a0f0; mov rx1ao L0x400082a0f8; mov rx1bo L0x400082a100;
mov rx20o L0x400082a108; mov rx21o L0x400082a110; mov rx22o L0x400082a118;
mov rx23o L0x400082a120; mov rx24o L0x400082a128; mov rx25o L0x400082a130;
mov rx26o L0x400082a138; mov rx27o L0x400082a140; mov rx28o L0x400082a148;
mov rx29o L0x400082a150; mov rx2ao L0x400082a158; mov rx2bo L0x400082a160;

mov rx30o L0x400082a168; mov rx31o L0x400082a170; mov rx32o L0x400082a178;
mov rx33o L0x400082a180; mov rx34o L0x400082a188; mov rx35o L0x400082a190;
mov rx36o L0x400082a198; mov rx37o L0x400082a1a0; mov rx38o L0x400082a1a8;
mov rx39o L0x400082a1b0; mov rx3ao L0x400082a1b8; mov rx3bo L0x400082a1c0;
mov rx40o L0x400082a1c8; mov rx41o L0x400082a1d0; mov rx42o L0x400082a1d8;
mov rx43o L0x400082a1e0; mov rx44o L0x400082a1e8; mov rx45o L0x400082a1f0;
mov rx46o L0x400082a1f8; mov rx47o L0x400082a200; mov rx48o L0x400082a208;
mov rx49o L0x400082a210; mov rx4ao L0x400082a218; mov rx4bo L0x400082a220;
mov rx50o L0x400082a228; mov rx51o L0x400082a230; mov rx52o L0x400082a238;
mov rx53o L0x400082a240; mov rx54o L0x400082a248; mov rx55o L0x400082a250;
mov rx56o L0x400082a258; mov rx57o L0x400082a260; mov rx58o L0x400082a268;
mov rx59o L0x400082a270; mov rx5ao L0x400082a278; mov rx5bo L0x400082a280;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a048; Value = 0xd65c4c829f0e6880; PC = 0x274877984672 *)
mov x11 L0x400082a048;
mov x12 L0x400082a050;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829bc8; Value = 0x9d1ddf3b72ffd900; PC = 0x274877984676 *)
mov x19 L0x4000829bc8;
mov x20 L0x4000829bd0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a058; Value = 0xad1ca073f43b4f7e; PC = 0x274877984680 *)
mov x13 L0x400082a058;
mov x14 L0x400082a060;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829bd8; Value = 0x006f7d9f7d012100; PC = 0x274877984688 *)
mov x21 L0x4000829bd8;
mov x22 L0x4000829be0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a068; Value = 0xe4595c6e736f44ed; PC = 0x274877984696 *)
mov x15 L0x400082a068;
mov x16 L0x400082a070;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829be8; Value = 0x59e391b72d5448df; PC = 0x274877984704 *)
mov x23 L0x4000829be8;
mov x24 L0x4000829bf0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a048; PC = 0x274877984712 *)
mov L0x400082a048 x11;
mov L0x400082a050 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a078; Value = 0x21c2f9e3d4bcb1df; PC = 0x274877984720 *)
mov x11 L0x400082a078;
mov x12 L0x400082a080;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829bf8; Value = 0xfc28f423cb30385a; PC = 0x274877984728 *)
mov x19 L0x4000829bf8;
mov x20 L0x4000829c00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a058; PC = 0x274877984732 *)
mov L0x400082a058 x13;
mov L0x400082a060 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a088; Value = 0xd39ae5870df39f92; PC = 0x274877984736 *)
mov x13 L0x400082a088;
mov x14 L0x400082a090;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c08; Value = 0x1eff4dedef9ebf23; PC = 0x274877984740 *)
mov x21 L0x4000829c08;
mov x22 L0x4000829c10;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a068; PC = 0x274877984748 *)
mov L0x400082a068 x15;
mov L0x400082a070 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a098; Value = 0x83138ee8259febce; PC = 0x274877984756 *)
mov x15 L0x400082a098;
mov x16 L0x400082a0a0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c18; Value = 0x2a7025b647625def; PC = 0x274877984764 *)
mov x23 L0x4000829c18;
mov x24 L0x4000829c20;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a078; PC = 0x274877984828 *)
mov L0x400082a078 x11;
mov L0x400082a080 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a088; PC = 0x274877984836 *)
mov L0x400082a088 x13;
mov L0x400082a090 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a098; PC = 0x274877984840 *)
mov L0x400082a098 x15;
mov L0x400082a0a0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x004100400000b5cc; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a5f8; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a718; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x2, x24, #0x60                              #! PC = 0x274877953484 *)
adds dontcare x2 x24 0x60@uint64;
(* add	x20, x25, #0x60                             #! PC = 0x274877953488 *)
adds dontcare x20 x25 0x60@uint64;
(* mov	x3, x19                                     #! PC = 0x274877953492 *)
mov x3 x19;
(* str	x2, [sp, #144]                              #! EA = L0x4000829a60; PC = 0x274877953496 *)
mov L0x4000829a60 x2;
(* mov	x1, x20                                     #! PC = 0x274877953500 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877953504 *)
mov x0 x20;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953508 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953508 = 0x274877953508;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0a8; Value = 0x6556e2ff807bfc00; PC = 0x274877984672 *)
mov x11 L0x400082a0a8;
mov x12 L0x400082a0b0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c28; Value = 0x21ec38fd15bfc080; PC = 0x274877984676 *)
mov x19 L0x4000829c28;
mov x20 L0x4000829c30;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0xef3c8749c0f65881; PC = 0x274877984680 *)
mov x13 L0x400082a0b8;
mov x14 L0x400082a0c0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c38; Value = 0x6285331e934e7dc0; PC = 0x274877984688 *)
mov x21 L0x4000829c38;
mov x22 L0x4000829c40;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x22f7c51d9064a7fb; PC = 0x274877984696 *)
mov x15 L0x400082a0c8;
mov x16 L0x400082a0d0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829c48; Value = 0xe591b60c674c9660; PC = 0x274877984704 *)
mov x23 L0x4000829c48;
mov x24 L0x4000829c50;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a0a8; PC = 0x274877984712 *)
mov L0x400082a0a8 x11;
mov L0x400082a0b0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a0d8; Value = 0xe95c3950ca31803e; PC = 0x274877984720 *)
mov x11 L0x400082a0d8;
mov x12 L0x400082a0e0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829c58; Value = 0x8390a9f8a99ea078; PC = 0x274877984728 *)
mov x19 L0x4000829c58;
mov x20 L0x4000829c60;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a0b8; PC = 0x274877984732 *)
mov L0x400082a0b8 x13;
mov L0x400082a0c0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a0e8; Value = 0x07a8786ff1f0785c; PC = 0x274877984736 *)
mov x13 L0x400082a0e8;
mov x14 L0x400082a0f0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829c68; Value = 0x68ee78fe8bc840c0; PC = 0x274877984740 *)
mov x21 L0x4000829c68;
mov x22 L0x4000829c70;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a0c8; PC = 0x274877984748 *)
mov L0x400082a0c8 x15;
mov L0x400082a0d0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a0f8; Value = 0xc6850e248dae762b; PC = 0x274877984756 *)
mov x15 L0x400082a0f8;
mov x16 L0x400082a100;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829c78; Value = 0x20ab84400082de10; PC = 0x274877984764 *)
mov x23 L0x4000829c78;
mov x24 L0x4000829c80;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a0d8; PC = 0x274877984828 *)
mov L0x400082a0d8 x11;
mov L0x400082a0e0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a0e8; PC = 0x274877984836 *)
mov L0x400082a0e8 x13;
mov L0x400082a0f0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a0f8; PC = 0x274877984840 *)
mov L0x400082a0f8 x15;
mov L0x400082a100 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x000c00400000b5e8; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a5f8; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a718; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x4, x24, #0xc0                              #! PC = 0x274877953512 *)
adds dontcare x4 x24 0xc0@uint64;
(* add	x27, x25, #0xc0                             #! PC = 0x274877953516 *)
adds dontcare x27 x25 0xc0@uint64;
(* mov	x3, x19                                     #! PC = 0x274877953520 *)
mov x3 x19;
(* str	x4, [sp, #152]                              #! EA = L0x4000829a68; PC = 0x274877953524 *)
mov L0x4000829a68 x4;
(* mov	x2, x4                                      #! PC = 0x274877953528 *)
mov x2 x4;
(* mov	x1, x27                                     #! PC = 0x274877953532 *)
mov x1 x27;
(* mov	x0, x27                                     #! PC = 0x274877953536 *)
mov x0 x27;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953540 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953540 = 0x274877953540;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a108; Value = 0x3930ae24ef95dc80; PC = 0x274877984672 *)
mov x11 L0x400082a108;
mov x12 L0x400082a110;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829c88; Value = 0x39a0f70fcbd62680; PC = 0x274877984676 *)
mov x19 L0x4000829c88;
mov x20 L0x4000829c90;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a118; Value = 0xdfab344e7de7ba97; PC = 0x274877984680 *)
mov x13 L0x400082a118;
mov x14 L0x400082a120;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829c98; Value = 0x83dbe791dcf06040; PC = 0x274877984688 *)
mov x21 L0x4000829c98;
mov x22 L0x4000829ca0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a128; Value = 0x1c23738306bd8680; PC = 0x274877984696 *)
mov x15 L0x400082a128;
mov x16 L0x400082a130;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829ca8; Value = 0x3ba447a7a66cef00; PC = 0x274877984704 *)
mov x23 L0x4000829ca8;
mov x24 L0x4000829cb0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a108; PC = 0x274877984712 *)
mov L0x400082a108 x11;
mov L0x400082a110 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a138; Value = 0x51cf2dadd7f336e2; PC = 0x274877984720 *)
mov x11 L0x400082a138;
mov x12 L0x400082a140;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829cb8; Value = 0x964a20d028d9de1f; PC = 0x274877984728 *)
mov x19 L0x4000829cb8;
mov x20 L0x4000829cc0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a118; PC = 0x274877984732 *)
mov L0x400082a118 x13;
mov L0x400082a120 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a148; Value = 0x1e2a653f336aee4b; PC = 0x274877984736 *)
mov x13 L0x400082a148;
mov x14 L0x400082a150;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829cc8; Value = 0x9d26391086f3892f; PC = 0x274877984740 *)
mov x21 L0x4000829cc8;
mov x22 L0x4000829cd0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a128; PC = 0x274877984748 *)
mov L0x400082a128 x15;
mov L0x400082a130 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a158; Value = 0x28208c558de8cfdf; PC = 0x274877984756 *)
mov x15 L0x400082a158;
mov x16 L0x400082a160;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829cd8; Value = 0x0000000000000000; PC = 0x274877984764 *)
mov x23 L0x4000829cd8;
mov x24 L0x4000829ce0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a138; PC = 0x274877984828 *)
mov L0x400082a138 x11;
mov L0x400082a140 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a148; PC = 0x274877984836 *)
mov L0x400082a148 x13;
mov L0x400082a150 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a158; PC = 0x274877984840 *)
mov L0x400082a158 x15;
mov L0x400082a160 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x005400400000b608; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a5f8; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a718; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x24, #0x120                             #! PC = 0x274877953544 *)
adds dontcare x3 x24 0x120@uint64;
(* mov	x4, x3                                      #! PC = 0x274877953548 *)
mov x4 x3;
(* add	x23, x25, #0x120                            #! PC = 0x274877953552 *)
adds dontcare x23 x25 0x120@uint64;
(* mov	x3, x19                                     #! PC = 0x274877953556 *)
mov x3 x19;
(* str	x4, [sp, #160]                              #! EA = L0x4000829a70; PC = 0x274877953560 *)
mov L0x4000829a70 x4;
(* mov	x2, x4                                      #! PC = 0x274877953564 *)
mov x2 x4;
(* mov	x1, x23                                     #! PC = 0x274877953568 *)
mov x1 x23;
(* mov	x0, x23                                     #! PC = 0x274877953572 *)
mov x0 x23;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953576 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953576 = 0x274877953576;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a168; Value = 0x2ac50693e070eb40; PC = 0x274877984672 *)
mov x11 L0x400082a168;
mov x12 L0x400082a170;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ce8; Value = 0x6336672e1302db40; PC = 0x274877984676 *)
mov x19 L0x4000829ce8;
mov x20 L0x4000829cf0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a178; Value = 0x34fb002ab2b844a9; PC = 0x274877984680 *)
mov x13 L0x400082a178;
mov x14 L0x400082a180;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829cf8; Value = 0xc67c5f67f06bd820; PC = 0x274877984688 *)
mov x21 L0x4000829cf8;
mov x22 L0x4000829d00;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a188; Value = 0x7cd73bbb89107ff2; PC = 0x274877984696 *)
mov x15 L0x400082a188;
mov x16 L0x400082a190;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829d08; Value = 0x62d80a56e7525200; PC = 0x274877984704 *)
mov x23 L0x4000829d08;
mov x24 L0x4000829d10;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a168; PC = 0x274877984712 *)
mov L0x400082a168 x11;
mov L0x400082a170 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a198; Value = 0xdc1e88a29be6b464; PC = 0x274877984720 *)
mov x11 L0x400082a198;
mov x12 L0x400082a1a0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829d18; Value = 0x41643d0fb0412fe9; PC = 0x274877984728 *)
mov x19 L0x4000829d18;
mov x20 L0x4000829d20;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a178; PC = 0x274877984732 *)
mov L0x400082a178 x13;
mov L0x400082a180 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a1a8; Value = 0xbddf2d0ba41ee373; PC = 0x274877984736 *)
mov x13 L0x400082a1a8;
mov x14 L0x400082a1b0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829d28; Value = 0x8a0b20b64e851610; PC = 0x274877984740 *)
mov x21 L0x4000829d28;
mov x22 L0x4000829d30;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a188; PC = 0x274877984748 *)
mov L0x400082a188 x15;
mov L0x400082a190 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a1b8; Value = 0x296286663e9e140a; PC = 0x274877984756 *)
mov x15 L0x400082a1b8;
mov x16 L0x400082a1c0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829d38; Value = 0x20b3fa400082dfe8; PC = 0x274877984764 *)
mov x23 L0x4000829d38;
mov x24 L0x4000829d40;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a198; PC = 0x274877984828 *)
mov L0x400082a198 x11;
mov L0x400082a1a0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a1a8; PC = 0x274877984836 *)
mov L0x400082a1a8 x13;
mov L0x400082a1b0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a1b8; PC = 0x274877984840 *)
mov L0x400082a1b8 x15;
mov L0x400082a1c0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x007000400000b62c; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a5f8; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x24, #0x180                             #! PC = 0x274877953580 *)
adds dontcare x3 x24 0x180@uint64;
(* mov	x4, x3                                      #! PC = 0x274877953584 *)
mov x4 x3;
(* add	x22, x25, #0x180                            #! PC = 0x274877953588 *)
adds dontcare x22 x25 0x180@uint64;
(* mov	x3, x19                                     #! PC = 0x274877953592 *)
mov x3 x19;
(* str	x4, [sp, #168]                              #! EA = L0x4000829a78; PC = 0x274877953596 *)
mov L0x4000829a78 x4;
(* mov	x2, x4                                      #! PC = 0x274877953600 *)
mov x2 x4;
(* mov	x1, x22                                     #! PC = 0x274877953604 *)
mov x1 x22;
(* mov	x0, x22                                     #! PC = 0x274877953608 *)
mov x0 x22;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953612 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953612 = 0x274877953612;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a1c8; Value = 0x3867f9ee45500900; PC = 0x274877984672 *)
mov x11 L0x400082a1c8;
mov x12 L0x400082a1d0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829d48; Value = 0xdef43a48ab390900; PC = 0x274877984676 *)
mov x19 L0x4000829d48;
mov x20 L0x4000829d50;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a1d8; Value = 0xb18f8a0585927b37; PC = 0x274877984680 *)
mov x13 L0x400082a1d8;
mov x14 L0x400082a1e0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829d58; Value = 0xbdd0e591ababaf7f; PC = 0x274877984688 *)
mov x21 L0x4000829d58;
mov x22 L0x4000829d60;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a1e8; Value = 0x316266493e6628f7; PC = 0x274877984696 *)
mov x15 L0x400082a1e8;
mov x16 L0x400082a1f0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829d68; Value = 0x3ab9fa120e1054ff; PC = 0x274877984704 *)
mov x23 L0x4000829d68;
mov x24 L0x4000829d70;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a1c8; PC = 0x274877984712 *)
mov L0x400082a1c8 x11;
mov L0x400082a1d0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a1f8; Value = 0x3c97fd43ef868dc3; PC = 0x274877984720 *)
mov x11 L0x400082a1f8;
mov x12 L0x400082a200;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829d78; Value = 0x83e9bbae2e2a34c0; PC = 0x274877984728 *)
mov x19 L0x4000829d78;
mov x20 L0x4000829d80;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a1d8; PC = 0x274877984732 *)
mov L0x400082a1d8 x13;
mov L0x400082a1e0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a208; Value = 0x26d2fef3f9d150f4; PC = 0x274877984736 *)
mov x13 L0x400082a208;
mov x14 L0x400082a210;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829d88; Value = 0x4164aed096250a00; PC = 0x274877984740 *)
mov x21 L0x4000829d88;
mov x22 L0x4000829d90;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a1e8; PC = 0x274877984748 *)
mov L0x400082a1e8 x15;
mov L0x400082a1f0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a218; Value = 0x281eb090dd8d06bf; PC = 0x274877984756 *)
mov x15 L0x400082a218;
mov x16 L0x400082a220;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829d98; Value = 0x0000024004982e90; PC = 0x274877984764 *)
mov x23 L0x4000829d98;
mov x24 L0x4000829da0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a1f8; PC = 0x274877984828 *)
mov L0x400082a1f8 x11;
mov L0x400082a200 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a208; PC = 0x274877984836 *)
mov L0x400082a208 x13;
mov L0x400082a210 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a218; PC = 0x274877984840 *)
mov L0x400082a218 x15;
mov L0x400082a220 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x007f00400000b650; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a5f8; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x24, #0x1e0                             #! PC = 0x274877953616 *)
adds dontcare x3 x24 0x1e0@uint64;
(* mov	x4, x3                                      #! PC = 0x274877953620 *)
mov x4 x3;
(* add	x21, x25, #0x1e0                            #! PC = 0x274877953624 *)
adds dontcare x21 x25 0x1e0@uint64;
(* mov	x3, x19                                     #! PC = 0x274877953628 *)
mov x3 x19;
(* str	x4, [sp, #176]                              #! EA = L0x4000829a80; PC = 0x274877953632 *)
mov L0x4000829a80 x4;
(* mov	x2, x4                                      #! PC = 0x274877953636 *)
mov x2 x4;
(* mov	x1, x21                                     #! PC = 0x274877953640 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877953644 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953648 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953648 = 0x274877953648;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a228; Value = 0xe7c8b3daa2303a00; PC = 0x274877984672 *)
mov x11 L0x400082a228;
mov x12 L0x400082a230;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829da8; Value = 0x836519e12fffba00; PC = 0x274877984676 *)
mov x19 L0x4000829da8;
mov x20 L0x4000829db0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a238; Value = 0xd7a261d262c7cfc9; PC = 0x274877984680 *)
mov x13 L0x400082a238;
mov x14 L0x400082a240;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829db8; Value = 0x6330224fb2222940; PC = 0x274877984688 *)
mov x21 L0x4000829db8;
mov x22 L0x4000829dc0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a248; Value = 0x9e3b569483716964; PC = 0x274877984696 *)
mov x15 L0x400082a248;
mov x16 L0x400082a250;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829dc8; Value = 0x2f65b23adb954940; PC = 0x274877984704 *)
mov x23 L0x4000829dc8;
mov x24 L0x4000829dd0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a228; PC = 0x274877984712 *)
mov L0x400082a228 x11;
mov L0x400082a230 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a258; Value = 0x8fa86ed51c75f5b6; PC = 0x274877984720 *)
mov x11 L0x400082a258;
mov x12 L0x400082a260;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829dd8; Value = 0x62d696e87a789771; PC = 0x274877984728 *)
mov x19 L0x4000829dd8;
mov x20 L0x4000829de0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a238; PC = 0x274877984732 *)
mov L0x400082a238 x13;
mov L0x400082a240 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a268; Value = 0x7e142ba75c902392; PC = 0x274877984736 *)
mov x13 L0x400082a268;
mov x14 L0x400082a270;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829de8; Value = 0x000000400082dfe8; PC = 0x274877984740 *)
mov x21 L0x4000829de8;
mov x22 L0x4000829df0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a248; PC = 0x274877984748 *)
mov L0x400082a248 x15;
mov L0x400082a250 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a278; Value = 0xa5d7755ff5883db2; PC = 0x274877984756 *)
mov x15 L0x400082a278;
mov x16 L0x400082a280;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829df8; Value = 0x0000000000001000; PC = 0x274877984764 *)
mov x23 L0x4000829df8;
mov x24 L0x4000829e00;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a258; PC = 0x274877984828 *)
mov L0x400082a258 x11;
mov L0x400082a260 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a268; PC = 0x274877984836 *)
mov L0x400082a268 x13;
mov L0x400082a270 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a278; PC = 0x274877984840 *)
mov L0x400082a278 x15;
mov L0x400082a280 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x006000400000b674; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

(* sub_fp6x2(rx, rx, t0) *)

assert true
    && and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0] +
                   limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                             L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                             L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                             L0x4000829c10, L0x4000829c18, L0x4000829c20])
                  (limbs 64 [rx00o, rx01o, rx02o, rx03o, rx04o, rx05o,
                             rx06o, rx07o, rx08o, rx09o, rx0ao, rx0bo])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100] +
                   limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                             L0x4000829c40, L0x4000829c48, L0x4000829c50,
                             L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                             L0x4000829c70, L0x4000829c78, L0x4000829c80])
                  (limbs 64 [rx10o, rx11o, rx12o, rx13o, rx14o, rx15o,
                             rx16o, rx17o, rx18o, rx19o, rx1ao, rx1bo])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                             L0x400082a120, L0x400082a128, L0x400082a130,
                             L0x400082a138, L0x400082a140, L0x400082a148,
                             L0x400082a150, L0x400082a158, L0x400082a160] +
                   limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                             L0x4000829ca0, L0x4000829ca8, L0x4000829cb0,
                             L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                             L0x4000829cd0, L0x4000829cd8, L0x4000829ce0])
                  (limbs 64 [rx20o, rx21o, rx22o, rx23o, rx24o, rx25o,
                             rx26o, rx27o, rx28o, rx29o, rx2ao, rx2bo])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                             L0x400082a180, L0x400082a188, L0x400082a190,
                             L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                             L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] +
                   limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                             L0x4000829d00, L0x4000829d08, L0x4000829d10,
                             L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                             L0x4000829d30, L0x4000829d38, L0x4000829d40])
                  (limbs 64 [rx30o, rx31o, rx32o, rx33o, rx34o, rx35o,
                             rx36o, rx37o, rx38o, rx39o, rx3ao, rx3bo])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                             L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                             L0x400082a1f8, L0x400082a200, L0x400082a208,
                             L0x400082a210, L0x400082a218, L0x400082a220] +
                   limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                             L0x4000829d60, L0x4000829d68, L0x4000829d70,
                             L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                             L0x4000829d90, L0x4000829d98, L0x4000829da0])
                  (limbs 64 [rx40o, rx41o, rx42o, rx43o, rx44o, rx45o,
                             rx46o, rx47o, rx48o, rx49o, rx4ao, rx4bo])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                             L0x400082a240, L0x400082a248, L0x400082a250,
                             L0x400082a258, L0x400082a260, L0x400082a268,
                             L0x400082a270, L0x400082a278, L0x400082a280] +
                   limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                             L0x4000829dc0, L0x4000829dc8, L0x4000829dd0,
                             L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                             L0x4000829df0, L0x4000829df8, L0x4000829e00])
                  (limbs 64 [rx50o, rx51o, rx52o, rx53o, rx54o, rx55o,
                             rx56o, rx57o, rx58o, rx59o, rx5ao, rx5bo])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5])];
                  
assume and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0] +
                   limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                             L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                             L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                             L0x4000829c10, L0x4000829c18, L0x4000829c20])
                  (limbs 64 [rx00o, rx01o, rx02o, rx03o, rx04o, rx05o,
                             rx06o, rx07o, rx08o, rx09o, rx0ao, rx0bo])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100] +
                   limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                             L0x4000829c40, L0x4000829c48, L0x4000829c50,
                             L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                             L0x4000829c70, L0x4000829c78, L0x4000829c80])
                  (limbs 64 [rx10o, rx11o, rx12o, rx13o, rx14o, rx15o,
                             rx16o, rx17o, rx18o, rx19o, rx1ao, rx1bo])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                             L0x400082a120, L0x400082a128, L0x400082a130,
                             L0x400082a138, L0x400082a140, L0x400082a148,
                             L0x400082a150, L0x400082a158, L0x400082a160] +
                   limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                             L0x4000829ca0, L0x4000829ca8, L0x4000829cb0,
                             L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                             L0x4000829cd0, L0x4000829cd8, L0x4000829ce0])
                  (limbs 64 [rx20o, rx21o, rx22o, rx23o, rx24o, rx25o,
                             rx26o, rx27o, rx28o, rx29o, rx2ao, rx2bo])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                             L0x400082a180, L0x400082a188, L0x400082a190,
                             L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                             L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] +
                   limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                             L0x4000829d00, L0x4000829d08, L0x4000829d10,
                             L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                             L0x4000829d30, L0x4000829d38, L0x4000829d40])
                  (limbs 64 [rx30o, rx31o, rx32o, rx33o, rx34o, rx35o,
                             rx36o, rx37o, rx38o, rx39o, rx3ao, rx3bo])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                             L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                             L0x400082a1f8, L0x400082a200, L0x400082a208,
                             L0x400082a210, L0x400082a218, L0x400082a220] +
                   limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                             L0x4000829d60, L0x4000829d68, L0x4000829d70,
                             L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                             L0x4000829d90, L0x4000829d98, L0x4000829da0])
                  (limbs 64 [rx40o, rx41o, rx42o, rx43o, rx44o, rx45o,
                             rx46o, rx47o, rx48o, rx49o, rx4ao, rx4bo])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                             L0x400082a240, L0x400082a248, L0x400082a250,
                             L0x400082a258, L0x400082a260, L0x400082a268,
                             L0x400082a270, L0x400082a278, L0x400082a280] +
                   limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                             L0x4000829dc0, L0x4000829dc8, L0x4000829dd0,
                             L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                             L0x4000829df0, L0x4000829df8, L0x4000829e00])
                  (limbs 64 [rx50o, rx51o, rx52o, rx53o, rx54o, rx55o,
                             rx56o, rx57o, rx58o, rx59o, rx5ao, rx5bo])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877953652 *)
mov x3 x19;
(* mov	x2, x26                                     #! PC = 0x274877953656 *)
mov x2 x26;
(* mov	x1, x25                                     #! PC = 0x274877953660 *)
mov x1 x25;
(* mov	x0, x25                                     #! PC = 0x274877953664 *)
mov x0 x25;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953668 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953668 = 0x274877953668;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;

(* NOTE: save old values *)

mov rx00p L0x400082a048; mov rx01p L0x400082a050; mov rx02p L0x400082a058;
mov rx03p L0x400082a060; mov rx04p L0x400082a068; mov rx05p L0x400082a070;
mov rx06p L0x400082a078; mov rx07p L0x400082a080; mov rx08p L0x400082a088;
mov rx09p L0x400082a090; mov rx0ap L0x400082a098; mov rx0bp L0x400082a0a0;
mov rx10p L0x400082a0a8; mov rx11p L0x400082a0b0; mov rx12p L0x400082a0b8;
mov rx13p L0x400082a0c0; mov rx14p L0x400082a0c8; mov rx15p L0x400082a0d0;
mov rx16p L0x400082a0d8; mov rx17p L0x400082a0e0; mov rx18p L0x400082a0e8;
mov rx19p L0x400082a0f0; mov rx1ap L0x400082a0f8; mov rx1bp L0x400082a100;
mov rx20p L0x400082a108; mov rx21p L0x400082a110; mov rx22p L0x400082a118;
mov rx23p L0x400082a120; mov rx24p L0x400082a128; mov rx25p L0x400082a130;
mov rx26p L0x400082a138; mov rx27p L0x400082a140; mov rx28p L0x400082a148;
mov rx29p L0x400082a150; mov rx2ap L0x400082a158; mov rx2bp L0x400082a160;

mov rx30p L0x400082a168; mov rx31p L0x400082a170; mov rx32p L0x400082a178;
mov rx33p L0x400082a180; mov rx34p L0x400082a188; mov rx35p L0x400082a190;
mov rx36p L0x400082a198; mov rx37p L0x400082a1a0; mov rx38p L0x400082a1a8;
mov rx39p L0x400082a1b0; mov rx3ap L0x400082a1b8; mov rx3bp L0x400082a1c0;
mov rx40p L0x400082a1c8; mov rx41p L0x400082a1d0; mov rx42p L0x400082a1d8;
mov rx43p L0x400082a1e0; mov rx44p L0x400082a1e8; mov rx45p L0x400082a1f0;
mov rx46p L0x400082a1f8; mov rx47p L0x400082a200; mov rx48p L0x400082a208;
mov rx49p L0x400082a210; mov rx4ap L0x400082a218; mov rx4bp L0x400082a220;
mov rx50p L0x400082a228; mov rx51p L0x400082a230; mov rx52p L0x400082a238;
mov rx53p L0x400082a240; mov rx54p L0x400082a248; mov rx55p L0x400082a250;
mov rx56p L0x400082a258; mov rx57p L0x400082a260; mov rx58p L0x400082a268;
mov rx59p L0x400082a270; mov rx5ap L0x400082a278; mov rx5bp L0x400082a280;

rcut and [limbs 64 [rx06p, rx07p, rx08p, rx09p, rx0ap, rx0bp] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [rx16p, rx17p, rx18p, rx19p, rx1ap, rx1bp] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [rx26p, rx27p, rx28p, rx29p, rx2ap, rx2bp] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [rx36p, rx37p, rx38p, rx39p, rx3ap, rx3bp] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [rx46p, rx47p, rx48p, rx49p, rx4ap, rx4bp] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [rx56p, rx57p, rx58p, rx59p, rx5ap, rx5bp] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x4000829e38, L0x4000829e40, L0x4000829e48,
                    L0x4000829e50, L0x4000829e58, L0x4000829e60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                    L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                    L0x4000829f10, L0x4000829f18, L0x4000829f20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829f58, L0x4000829f60, L0x4000829f68,
                    L0x4000829f70, L0x4000829f78, L0x4000829f80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                    L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x400082a018, L0x400082a020, L0x400082a028,
                    L0x400082a030, L0x400082a038, L0x400082a040] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with precondition, all cuts;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a048; Value = 0x393e6d472c0e8f80; PC = 0x274877984672 *)
mov x11 L0x400082a048;
mov x12 L0x400082a050;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829e08; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 L0x4000829e08;
mov x20 L0x4000829e10;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a058; Value = 0xacad22d4773a2e7e; PC = 0x274877984680 *)
mov x13 L0x400082a058;
mov x14 L0x400082a060;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e18; Value = 0xb472dc8596ebe43f; PC = 0x274877984688 *)
mov x21 L0x4000829e18;
mov x22 L0x4000829e20;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a068; Value = 0x8a75cab7461afc0d; PC = 0x274877984696 *)
mov x15 L0x400082a068;
mov x16 L0x400082a070;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e28; Value = 0x50047e75b8aecb3e; PC = 0x274877984704 *)
mov x23 L0x4000829e28;
mov x24 L0x4000829e30;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a048; PC = 0x274877984712 *)
mov L0x400082a048 x11;
mov L0x400082a050 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a078; Value = 0xdf9905c0098c242f; PC = 0x274877984720 *)
mov x11 L0x400082a078;
mov x12 L0x400082a080;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e38; Value = 0x6441fdc2bbfcb728; PC = 0x274877984728 *)
mov x19 L0x4000829e38;
mov x20 L0x4000829e40;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a058; PC = 0x274877984732 *)
mov L0x400082a058 x13;
mov L0x400082a060 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a088; Value = 0x1bcc6a3a1505d692; PC = 0x274877984736 *)
mov x13 L0x400082a088;
mov x14 L0x400082a090;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829e48; Value = 0x2379e4beef08c95a; PC = 0x274877984740 *)
mov x21 L0x4000829e48;
mov x22 L0x4000829e50;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a068; PC = 0x274877984748 *)
mov L0x400082a068 x15;
mov L0x400082a070 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a098; Value = 0xa3bf10e821893ab6; PC = 0x274877984756 *)
mov x15 L0x400082a098;
mov x16 L0x400082a0a0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829e58; Value = 0xc536c3682291d78e; PC = 0x274877984764 *)
mov x23 L0x4000829e58;
mov x24 L0x4000829e60;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a078; PC = 0x274877984828 *)
mov L0x400082a078 x11;
mov L0x400082a080 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a088; PC = 0x274877984836 *)
mov L0x400082a088 x13;
mov L0x400082a090 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a098; PC = 0x274877984840 *)
mov L0x400082a098 x15;
mov L0x400082a0a0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x000700400000b688; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x26, #0x60                              #! PC = 0x274877953672 *)
adds dontcare x3 x26 0x60@uint64;
(* mov	x4, x3                                      #! PC = 0x274877953676 *)
mov x4 x3;
(* mov	x3, x19                                     #! PC = 0x274877953680 *)
mov x3 x19;
(* str	x4, [sp, #184]                              #! EA = L0x4000829a88; PC = 0x274877953684 *)
mov L0x4000829a88 x4;
(* mov	x2, x4                                      #! PC = 0x274877953688 *)
mov x2 x4;
(* mov	x1, x20                                     #! PC = 0x274877953692 *)
mov x1 x20;
(* mov	x0, x20                                     #! PC = 0x274877953696 *)
mov x0 x20;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953700 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953700 = 0x274877953700;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0a8; Value = 0x436aaa026abc3b80; PC = 0x274877984672 *)
mov x11 L0x400082a0a8;
mov x12 L0x400082a0b0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829e68; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 L0x4000829e68;
mov x20 L0x4000829e70;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0x8cb7542b2da7dac1; PC = 0x274877984680 *)
mov x13 L0x400082a0b8;
mov x14 L0x400082a0c0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e78; Value = 0xc6562cd81a828cc0; PC = 0x274877984688 *)
mov x21 L0x4000829e78;
mov x22 L0x4000829e80;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x3d660f112918119b; PC = 0x274877984696 *)
mov x15 L0x400082a0c8;
mov x16 L0x400082a0d0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e88; Value = 0xf37d72be3b7ae7c1; PC = 0x274877984704 *)
mov x23 L0x4000829e88;
mov x24 L0x4000829e90;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a0a8; PC = 0x274877984712 *)
mov L0x400082a0a8 x11;
mov L0x400082a0b0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a0d8; Value = 0x65cb8f582092dfc5; PC = 0x274877984720 *)
mov x11 L0x400082a0d8;
mov x12 L0x400082a0e0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e98; Value = 0xdacca68d537bfd43; PC = 0x274877984728 *)
mov x19 L0x4000829e98;
mov x20 L0x4000829ea0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a0b8; PC = 0x274877984732 *)
mov L0x400082a0b8 x13;
mov L0x400082a0c0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a0e8; Value = 0x9eb9ff716628379b; PC = 0x274877984736 *)
mov x13 L0x400082a0e8;
mov x14 L0x400082a0f0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ea8; Value = 0xd230135609d8e44a; PC = 0x274877984740 *)
mov x21 L0x4000829ea8;
mov x22 L0x4000829eb0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a0c8; PC = 0x274877984748 *)
mov L0x400082a0c8 x15;
mov L0x400082a0d0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a0f8; Value = 0xa5d989e48d2b981a; PC = 0x274877984756 *)
mov x15 L0x400082a0f8;
mov x16 L0x400082a100;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829eb8; Value = 0x8461d524876de6c9; PC = 0x274877984764 *)
mov x23 L0x4000829eb8;
mov x24 L0x4000829ec0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a0d8; PC = 0x274877984828 *)
mov L0x400082a0d8 x11;
mov L0x400082a0e0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a0e8; PC = 0x274877984836 *)
mov L0x400082a0e8 x13;
mov L0x400082a0f0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a0f8; PC = 0x274877984840 *)
mov L0x400082a0f8 x15;
mov L0x400082a100 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x001200400000b6a8; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x26, #0xc0                              #! PC = 0x274877953704 *)
adds dontcare x3 x26 0xc0@uint64;
(* mov	x5, x3                                      #! PC = 0x274877953708 *)
mov x5 x3;
(* mov	x3, x19                                     #! PC = 0x274877953712 *)
mov x3 x19;
(* str	x5, [sp, #192]                              #! EA = L0x4000829a90; PC = 0x274877953716 *)
mov L0x4000829a90 x5;
(* mov	x2, x5                                      #! PC = 0x274877953720 *)
mov x2 x5;
(* mov	x1, x27                                     #! PC = 0x274877953724 *)
mov x1 x27;
(* str	x27, [sp, #104]                             #! EA = L0x4000829a38; PC = 0x274877953728 *)
mov L0x4000829a38 x27;
(* mov	x0, x27                                     #! PC = 0x274877953732 *)
mov x0 x27;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953736 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953736 = 0x274877953736;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a108; Value = 0xff8fb71523bfb600; PC = 0x274877984672 *)
mov x11 L0x400082a108;
mov x12 L0x400082a110;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ec8; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 L0x4000829ec8;
mov x20 L0x4000829ed0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a118; Value = 0x5bcf4cbca0f75a57; PC = 0x274877984680 *)
mov x13 L0x400082a118;
mov x14 L0x400082a120;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829ed8; Value = 0x0000000000000000; PC = 0x274877984688 *)
mov x21 L0x4000829ed8;
mov x22 L0x4000829ee0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a128; Value = 0xe07f2bdb60509780; PC = 0x274877984696 *)
mov x15 L0x400082a128;
mov x16 L0x400082a130;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829ee8; Value = 0xbcac7f37f572cb3f; PC = 0x274877984704 *)
mov x23 L0x4000829ee8;
mov x24 L0x4000829ef0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a108; PC = 0x274877984712 *)
mov L0x400082a108 x11;
mov L0x400082a110 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a138; Value = 0xbb850cddaf1958c2; PC = 0x274877984720 *)
mov x11 L0x400082a138;
mov x12 L0x400082a140;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829ef8; Value = 0x34e09190ffb552aa; PC = 0x274877984728 *)
mov x19 L0x4000829ef8;
mov x20 L0x4000829f00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a118; PC = 0x274877984732 *)
mov L0x400082a118 x13;
mov L0x400082a120 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a148; Value = 0x81042c2eac77651c; PC = 0x274877984736 *)
mov x13 L0x400082a148;
mov x14 L0x400082a150;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829f08; Value = 0x672e6e5bf6089f6b; PC = 0x274877984740 *)
mov x21 L0x4000829f08;
mov x22 L0x4000829f10;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a128; PC = 0x274877984748 *)
mov L0x400082a128 x15;
mov L0x400082a130 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a158; Value = 0x28208c558de8cfdf; PC = 0x274877984756 *)
mov x15 L0x400082a158;
mov x16 L0x400082a160;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829f18; Value = 0x4a59efe11241155f; PC = 0x274877984764 *)
mov x23 L0x4000829f18;
mov x24 L0x4000829f20;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a138; PC = 0x274877984828 *)
mov L0x400082a138 x11;
mov L0x400082a140 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a148; PC = 0x274877984836 *)
mov L0x400082a148 x13;
mov L0x400082a150 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a158; PC = 0x274877984840 *)
mov L0x400082a158 x15;
mov L0x400082a160 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x006300400000b6cc; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x26, #0x120                             #! PC = 0x274877953740 *)
adds dontcare x3 x26 0x120@uint64;
(* mov	x6, x3                                      #! PC = 0x274877953744 *)
mov x6 x3;
(* mov	x3, x19                                     #! PC = 0x274877953748 *)
mov x3 x19;
(* str	x6, [sp, #200]                              #! EA = L0x4000829a98; PC = 0x274877953752 *)
mov L0x4000829a98 x6;
(* mov	x2, x6                                      #! PC = 0x274877953756 *)
mov x2 x6;
(* mov	x1, x23                                     #! PC = 0x274877953760 *)
mov x1 x23;
(* mov	x0, x23                                     #! PC = 0x274877953764 *)
mov x0 x23;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953768 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953768 = 0x274877953768;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a168; Value = 0xc78e9f65cd6e1000; PC = 0x274877984672 *)
mov x11 L0x400082a168;
mov x12 L0x400082a170;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829f28; Value = 0x0000000000000000; PC = 0x274877984676 *)
mov x19 L0x4000829f28;
mov x20 L0x4000829f30;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a178; Value = 0x6e7ea0c2c24c6c89; PC = 0x274877984680 *)
mov x13 L0x400082a178;
mov x14 L0x400082a180;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829f38; Value = 0x41692ad9c1f81000; PC = 0x274877984688 *)
mov x21 L0x4000829f38;
mov x22 L0x4000829f40;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a188; Value = 0x19ff3164a1be2df1; PC = 0x274877984696 *)
mov x15 L0x400082a188;
mov x16 L0x400082a190;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829f48; Value = 0x4281815ad547e080; PC = 0x274877984704 *)
mov x23 L0x4000829f48;
mov x24 L0x4000829f50;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a168; PC = 0x274877984712 *)
mov L0x400082a168 x11;
mov L0x400082a170 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a198; Value = 0x9aba4b92eba5847a; PC = 0x274877984720 *)
mov x11 L0x400082a198;
mov x12 L0x400082a1a0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829f58; Value = 0x850cbcc9ffd77778; PC = 0x274877984728 *)
mov x19 L0x4000829f58;
mov x20 L0x4000829f60;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a178; PC = 0x274877984732 *)
mov L0x400082a178 x13;
mov L0x400082a180 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a1a8; Value = 0x33d40c555599cd62; PC = 0x274877984736 *)
mov x13 L0x400082a1a8;
mov x14 L0x400082a1b0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829f68; Value = 0xc7ffb492269e6d78; PC = 0x274877984740 *)
mov x21 L0x4000829f68;
mov x22 L0x4000829f70;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a188; PC = 0x274877984748 *)
mov L0x400082a188 x15;
mov L0x400082a190 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a1b8; Value = 0x08ae8c263e1b3422; PC = 0x274877984756 *)
mov x15 L0x400082a1b8;
mov x16 L0x400082a1c0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829f78; Value = 0x85237479841202c0; PC = 0x274877984764 *)
mov x23 L0x4000829f78;
mov x24 L0x4000829f80;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a198; PC = 0x274877984828 *)
mov L0x400082a198 x11;
mov L0x400082a1a0 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a1a8; PC = 0x274877984836 *)
mov L0x400082a1a8 x13;
mov L0x400082a1b0 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a1b8; PC = 0x274877984840 *)
mov L0x400082a1b8 x15;
mov L0x400082a1c0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x004100400000b6ec; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x26, #0x180                             #! PC = 0x274877953772 *)
adds dontcare x3 x26 0x180@uint64;
(* mov	x4, x3                                      #! PC = 0x274877953776 *)
mov x4 x3;
(* mov	x3, x19                                     #! PC = 0x274877953780 *)
mov x3 x19;
(* str	x4, [sp, #112]                              #! EA = L0x4000829a40; PC = 0x274877953784 *)
mov L0x4000829a40 x4;
(* mov	x2, x4                                      #! PC = 0x274877953788 *)
mov x2 x4;
(* mov	x1, x22                                     #! PC = 0x274877953792 *)
mov x1 x22;
(* mov	x0, x22                                     #! PC = 0x274877953796 *)
mov x0 x22;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953800 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953800 = 0x274877953800;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a1c8; Value = 0x5973bfa59a170000; PC = 0x274877984672 *)
mov x11 L0x400082a1c8;
mov x12 L0x400082a1d0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829f88; Value = 0xbd13f8065ba18000; PC = 0x274877984676 *)
mov x19 L0x4000829f88;
mov x20 L0x4000829f90;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a1d8; Value = 0xf3bea473d9e6cbb7; PC = 0x274877984680 *)
mov x13 L0x400082a1d8;
mov x14 L0x400082a1e0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829f98; Value = 0x9ac5ba4fc1d2f0ff; PC = 0x274877984688 *)
mov x21 L0x4000829f98;
mov x22 L0x4000829fa0;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a1e8; Value = 0xf6a86c373055d3f7; PC = 0x274877984696 *)
mov x15 L0x400082a1e8;
mov x16 L0x400082a1f0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829fa8; Value = 0xa484f3dcd713a378; PC = 0x274877984704 *)
mov x23 L0x4000829fa8;
mov x24 L0x4000829fb0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a1c8; PC = 0x274877984712 *)
mov L0x400082a1c8 x11;
mov L0x400082a1d0 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a1f8; Value = 0xb8ae4195c15c5903; PC = 0x274877984720 *)
mov x11 L0x400082a1f8;
mov x12 L0x400082a200;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829fb8; Value = 0xfbb7db4070607623; PC = 0x274877984728 *)
mov x19 L0x4000829fb8;
mov x20 L0x4000829fc0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a1d8; PC = 0x274877984732 *)
mov L0x400082a1d8 x13;
mov L0x400082a1e0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a208; Value = 0xe56e502363ac46f4; PC = 0x274877984736 *)
mov x13 L0x400082a208;
mov x14 L0x400082a210;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829fc8; Value = 0xeb129e39ae7ad9ec; PC = 0x274877984740 *)
mov x21 L0x4000829fc8;
mov x22 L0x4000829fd0;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a1e8; PC = 0x274877984748 *)
mov L0x400082a1e8 x15;
mov L0x400082a1f0 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a218; Value = 0x281eae50d8f4d82f; PC = 0x274877984756 *)
mov x15 L0x400082a218;
mov x16 L0x400082a220;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829fd8; Value = 0x0829156ef0d9285f; PC = 0x274877984764 *)
mov x23 L0x4000829fd8;
mov x24 L0x4000829fe0;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a1f8; PC = 0x274877984828 *)
mov L0x400082a1f8 x11;
mov L0x400082a200 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a208; PC = 0x274877984836 *)
mov L0x400082a208 x13;
mov L0x400082a210 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a218; PC = 0x274877984840 *)
mov L0x400082a218 x15;
mov L0x400082a220 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x005100400000b70c; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* add	x3, x26, #0x1e0                             #! PC = 0x274877953804 *)
adds dontcare x3 x26 0x1e0@uint64;
(* mov	x5, x3                                      #! PC = 0x274877953808 *)
mov x5 x3;
(* mov	x3, x19                                     #! PC = 0x274877953812 *)
mov x3 x19;
(* str	x5, [sp, #120]                              #! EA = L0x4000829a48; PC = 0x274877953816 *)
mov L0x4000829a48 x5;
(* mov	x2, x5                                      #! PC = 0x274877953820 *)
mov x2 x5;
(* mov	x1, x21                                     #! PC = 0x274877953824 *)
mov x1 x21;
(* mov	x0, x21                                     #! PC = 0x274877953828 *)
mov x0 x21;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953832 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953832 = 0x274877953832;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a228; Value = 0x646399f972308000; PC = 0x274877984672 *)
mov x11 L0x400082a228;
mov x12 L0x400082a230;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829fe8; Value = 0x42ebeff972308000; PC = 0x274877984676 *)
mov x19 L0x4000829fe8;
mov x20 L0x4000829ff0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a238; Value = 0x74723f82b0a5a689; PC = 0x274877984680 *)
mov x13 L0x400082a238;
mov x14 L0x400082a240;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829ff8; Value = 0xe7eebb26e9e90f00; PC = 0x274877984688 *)
mov x21 L0x4000829ff8;
mov x22 L0x400082a000;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a248; Value = 0x6ed5a459a7dc2023; PC = 0x274877984696 *)
mov x15 L0x400082a248;
mov x16 L0x400082a250;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x400082a008; Value = 0xf26bc0c1397bad49; PC = 0x274877984704 *)
mov x23 L0x400082a008;
mov x24 L0x400082a010;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a228; PC = 0x274877984712 *)
mov L0x400082a228 x11;
mov L0x400082a230 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x400082a258; Value = 0x2cd1d7eca1fd5e45; PC = 0x274877984720 *)
mov x11 L0x400082a258;
mov x12 L0x400082a260;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a018; Value = 0xb05060bb9f58bbc1; PC = 0x274877984728 *)
mov x19 L0x400082a018;
mov x20 L0x400082a020;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a238; PC = 0x274877984732 *)
mov L0x400082a238 x13;
mov L0x400082a240 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x400082a268; Value = 0x7e142b675c0d43aa; PC = 0x274877984736 *)
mov x13 L0x400082a268;
mov x14 L0x400082a270;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a028; Value = 0x0aedf4d071332e30; PC = 0x274877984740 *)
mov x21 L0x400082a028;
mov x22 L0x400082a030;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a248; PC = 0x274877984748 *)
mov L0x400082a248 x15;
mov L0x400082a250 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x400082a278; Value = 0xa5d7755ff5882db2; PC = 0x274877984756 *)
mov x15 L0x400082a278;
mov x16 L0x400082a280;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a038; Value = 0x4230dab2221e69f8; PC = 0x274877984764 *)
mov x23 L0x400082a038;
mov x24 L0x400082a040;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a258; PC = 0x274877984828 *)
mov L0x400082a258 x11;
mov L0x400082a260 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a268; PC = 0x274877984836 *)
mov L0x400082a268 x13;
mov L0x400082a270 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a278; PC = 0x274877984840 *)
mov L0x400082a278 x15;
mov L0x400082a280 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x007800400000b72c; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;

(* sub_fp6x2(rx, rx, t1); *)

assert true
    && and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0] +
                   limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                             L0x4000829e20, L0x4000829e28, L0x4000829e30,
                             L0x4000829e38, L0x4000829e40, L0x4000829e48,
                             L0x4000829e50, L0x4000829e58, L0x4000829e60])
                  (limbs 64 [rx00p, rx01p, rx02p, rx03p, rx04p, rx05p,
                             rx06p, rx07p, rx08p, rx09p, rx0ap, rx0bp])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100] +
                   limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                             L0x4000829e80, L0x4000829e88, L0x4000829e90,
                             L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                             L0x4000829eb0, L0x4000829eb8, L0x4000829ec0])
                  (limbs 64 [rx10p, rx11p, rx12p, rx13p, rx14p, rx15p,
                             rx16p, rx17p, rx18p, rx19p, rx1ap, rx1bp])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                             L0x400082a120, L0x400082a128, L0x400082a130,
                             L0x400082a138, L0x400082a140, L0x400082a148,
                             L0x400082a150, L0x400082a158, L0x400082a160] +
                   limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                             L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                             L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                             L0x4000829f10, L0x4000829f18, L0x4000829f20])
                  (limbs 64 [rx20p, rx21p, rx22p, rx23p, rx24p, rx25p,
                             rx26p, rx27p, rx28p, rx29p, rx2ap, rx2bp])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                             L0x400082a180, L0x400082a188, L0x400082a190,
                             L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                             L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] +
                   limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                             L0x4000829f40, L0x4000829f48, L0x4000829f50,
                             L0x4000829f58, L0x4000829f60, L0x4000829f68,
                             L0x4000829f70, L0x4000829f78, L0x4000829f80])
                  (limbs 64 [rx30p, rx31p, rx32p, rx33p, rx34p, rx35p,
                             rx36p, rx37p, rx38p, rx39p, rx3ap, rx3bp])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                             L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                             L0x400082a1f8, L0x400082a200, L0x400082a208,
                             L0x400082a210, L0x400082a218, L0x400082a220] +
                   limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                             L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                             L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                             L0x4000829fd0, L0x4000829fd8, L0x4000829fe0])
                  (limbs 64 [rx40p, rx41p, rx42p, rx43p, rx44p, rx45p,
                             rx46p, rx47p, rx48p, rx49p, rx4ap, rx4bp])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                             L0x400082a240, L0x400082a248, L0x400082a250,
                             L0x400082a258, L0x400082a260, L0x400082a268,
                             L0x400082a270, L0x400082a278, L0x400082a280] +
                   limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                             L0x400082a000, L0x400082a008, L0x400082a010,
                             L0x400082a018, L0x400082a020, L0x400082a028,
                             L0x400082a030, L0x400082a038, L0x400082a040])
                  (limbs 64 [rx50p, rx51p, rx52p, rx53p, rx54p, rx55p,
                             rx56p, rx57p, rx58p, rx59p, rx5ap, rx5bp])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0] +
                   limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                             L0x4000829e20, L0x4000829e28, L0x4000829e30,
                             L0x4000829e38, L0x4000829e40, L0x4000829e48,
                             L0x4000829e50, L0x4000829e58, L0x4000829e60])
                  (limbs 64 [rx00p, rx01p, rx02p, rx03p, rx04p, rx05p,
                             rx06p, rx07p, rx08p, rx09p, rx0ap, rx0bp])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100] +
                   limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                             L0x4000829e80, L0x4000829e88, L0x4000829e90,
                             L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                             L0x4000829eb0, L0x4000829eb8, L0x4000829ec0])
                  (limbs 64 [rx10p, rx11p, rx12p, rx13p, rx14p, rx15p,
                             rx16p, rx17p, rx18p, rx19p, rx1ap, rx1bp])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                             L0x400082a120, L0x400082a128, L0x400082a130,
                             L0x400082a138, L0x400082a140, L0x400082a148,
                             L0x400082a150, L0x400082a158, L0x400082a160] +
                   limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                             L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                             L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                             L0x4000829f10, L0x4000829f18, L0x4000829f20])
                  (limbs 64 [rx20p, rx21p, rx22p, rx23p, rx24p, rx25p,
                             rx26p, rx27p, rx28p, rx29p, rx2ap, rx2bp])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                             L0x400082a180, L0x400082a188, L0x400082a190,
                             L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                             L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] +
                   limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                             L0x4000829f40, L0x4000829f48, L0x4000829f50,
                             L0x4000829f58, L0x4000829f60, L0x4000829f68,
                             L0x4000829f70, L0x4000829f78, L0x4000829f80])
                  (limbs 64 [rx30p, rx31p, rx32p, rx33p, rx34p, rx35p,
                             rx36p, rx37p, rx38p, rx39p, rx3ap, rx3bp])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                             L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                             L0x400082a1f8, L0x400082a200, L0x400082a208,
                             L0x400082a210, L0x400082a218, L0x400082a220] +
                   limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                             L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                             L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                             L0x4000829fd0, L0x4000829fd8, L0x4000829fe0])
                  (limbs 64 [rx40p, rx41p, rx42p, rx43p, rx44p, rx45p,
                             rx46p, rx47p, rx48p, rx49p, rx4ap, rx4bp])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                             L0x400082a240, L0x400082a248, L0x400082a250,
                             L0x400082a258, L0x400082a260, L0x400082a268,
                             L0x400082a270, L0x400082a278, L0x400082a280] +
                   limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                             L0x400082a000, L0x400082a008, L0x400082a010,
                             L0x400082a018, L0x400082a020, L0x400082a028,
                             L0x400082a030, L0x400082a038, L0x400082a040])
                  (limbs 64 [rx50p, rx51p, rx52p, rx53p, rx54p, rx55p,
                             rx56p, rx57p, rx58p, rx59p, rx5ap, rx5bp])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])]
    && true;

mov rx00q L0x400082a048; mov rx01q L0x400082a050; mov rx02q L0x400082a058;
mov rx03q L0x400082a060; mov rx04q L0x400082a068; mov rx05q L0x400082a070;
mov rx06q L0x400082a078; mov rx07q L0x400082a080; mov rx08q L0x400082a088;
mov rx09q L0x400082a090; mov rx0aq L0x400082a098; mov rx0bq L0x400082a0a0;
mov rx10q L0x400082a0a8; mov rx11q L0x400082a0b0; mov rx12q L0x400082a0b8;
mov rx13q L0x400082a0c0; mov rx14q L0x400082a0c8; mov rx15q L0x400082a0d0;
mov rx16q L0x400082a0d8; mov rx17q L0x400082a0e0; mov rx18q L0x400082a0e8;
mov rx19q L0x400082a0f0; mov rx1aq L0x400082a0f8; mov rx1bq L0x400082a100;
mov rx20q L0x400082a108; mov rx21q L0x400082a110; mov rx22q L0x400082a118;
mov rx23q L0x400082a120; mov rx24q L0x400082a128; mov rx25q L0x400082a130;
mov rx26q L0x400082a138; mov rx27q L0x400082a140; mov rx28q L0x400082a148;
mov rx29q L0x400082a150; mov rx2aq L0x400082a158; mov rx2bq L0x400082a160;
mov rx30q L0x400082a168; mov rx31q L0x400082a170; mov rx32q L0x400082a178;
mov rx33q L0x400082a180; mov rx34q L0x400082a188; mov rx35q L0x400082a190;
mov rx36q L0x400082a198; mov rx37q L0x400082a1a0; mov rx38q L0x400082a1a8;
mov rx39q L0x400082a1b0; mov rx3aq L0x400082a1b8; mov rx3bq L0x400082a1c0;
mov rx40q L0x400082a1c8; mov rx41q L0x400082a1d0; mov rx42q L0x400082a1d8;
mov rx43q L0x400082a1e0; mov rx44q L0x400082a1e8; mov rx45q L0x400082a1f0;
mov rx46q L0x400082a1f8; mov rx47q L0x400082a200; mov rx48q L0x400082a208;
mov rx49q L0x400082a210; mov rx4aq L0x400082a218; mov rx4bq L0x400082a220;
mov rx50q L0x400082a228; mov rx51q L0x400082a230; mov rx52q L0x400082a238;
mov rx53q L0x400082a240; mov rx54q L0x400082a248; mov rx55q L0x400082a250;
mov rx56q L0x400082a258; mov rx57q L0x400082a260; mov rx58q L0x400082a268;
mov rx59q L0x400082a270; mov rx5aq L0x400082a278; mov rx5bq L0x400082a280;

cut and [eqmod ((limbs 64 [rx00q, rx01q, rx02q, rx03q, rx04q, rx05q,
                           rx06q, rx07q, rx08q, rx09q, rx0aq, rx0bq] +
                 limbs 64 [rx10q, rx11q, rx12q, rx13q, rx14q, rx15q,
                           rx16q, rx17q, rx18q, rx19q, rx1aq, rx1bq] * U) +
                (limbs 64 [rx20q, rx21q, rx22q, rx23q, rx24q, rx25q,
                           rx26q, rx27q, rx28q, rx29q, rx2aq, rx2bq] +
                 limbs 64 [rx30q, rx31q, rx32q, rx33q, rx34q, rx35q,
                           rx36q, rx37q, rx38q, rx39q, rx3aq, rx3bq] * U) * V +
                (limbs 64 [rx40q, rx41q, rx42q, rx43q, rx44q, rx45q,
                           rx46q, rx47q, rx48q, rx49q, rx4aq, rx4bq] +
                 limbs 64 [rx50q, rx51q, rx52q, rx53q, rx54q, rx55q,
                           rx56q, rx57q, rx58q, rx59q, rx5aq, rx5bq] * U) * V**2)
               (((limbs 64 [rx00o, rx01o, rx02o, rx03o, rx04o, rx05o,
                            rx06o, rx07o, rx08o, rx09o, rx0ao, rx0bo] +
                  limbs 64 [rx10o, rx11o, rx12o, rx13o, rx14o, rx15o,
                            rx16o, rx17o, rx18o, rx19o, rx1ao, rx1bo] * U) +
                 (limbs 64 [rx20o, rx21o, rx22o, rx23o, rx24o, rx25o,
                            rx26o, rx27o, rx28o, rx29o, rx2ao, rx2bo] +
                  limbs 64 [rx30o, rx31o, rx32o, rx33o, rx34o, rx35o,
                            rx36o, rx37o, rx38o, rx39o, rx3ao, rx3bo] * U) * V +
                 (limbs 64 [rx40o, rx41o, rx42o, rx43o, rx44o, rx45o,
                            rx46o, rx47o, rx48o, rx49o, rx4ao, rx4bo] +
                  limbs 64 [rx50o, rx51o, rx52o, rx53o, rx54o, rx55o,
                            rx56o, rx57o, rx58o, rx59o, rx5ao, rx5bo] * U) * V**2) -
                ((limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                            L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                            L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                            L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                  limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                            L0x4000829c40, L0x4000829c48, L0x4000829c50,
                            L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                            L0x4000829c70, L0x4000829c78, L0x4000829c80] * U) +
                 (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                            L0x4000829ca0, L0x4000829ca8, L0x4000829cb0,
                            L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                            L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                  limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                            L0x4000829d00, L0x4000829d08, L0x4000829d10,
                            L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                            L0x4000829d30, L0x4000829d38, L0x4000829d40] * U) * V +
                 (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                            L0x4000829d60, L0x4000829d68, L0x4000829d70,
                            L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                            L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                  limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                            L0x4000829dc0, L0x4000829dc8, L0x4000829dd0,
                            L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                            L0x4000829df0, L0x4000829df8, L0x4000829e00] * U) * V**2) -
                ((limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                            L0x4000829e20, L0x4000829e28, L0x4000829e30,
                            L0x4000829e38, L0x4000829e40, L0x4000829e48,
                            L0x4000829e50, L0x4000829e58, L0x4000829e60] +
                  limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                            L0x4000829e80, L0x4000829e88, L0x4000829e90,
                            L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                            L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] * U) +
                 (limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                            L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                            L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                            L0x4000829f10, L0x4000829f18, L0x4000829f20] +
                  limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                            L0x4000829f40, L0x4000829f48, L0x4000829f50,
                            L0x4000829f58, L0x4000829f60, L0x4000829f68,
                            L0x4000829f70, L0x4000829f78, L0x4000829f80] * U) * V +
                 (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                            L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                            L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                            L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                  limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                            L0x400082a000, L0x400082a008, L0x400082a010,
                            L0x400082a018, L0x400082a020, L0x400082a028,
                            L0x400082a030, L0x400082a038, L0x400082a040] * U) * V**2))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1, V**3 - U - 1]]
        prove with all cuts
 && and [limbs 64 [rx06q, rx07q, rx08q, rx09q, rx0aq, rx0bq] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [rx16q, rx17q, rx18q, rx19q, rx1aq, rx1bq] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [rx26q, rx27q, rx28q, rx29q, rx2aq, rx2bq] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [rx36q, rx37q, rx38q, rx39q, rx3aq, rx3bq] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [rx46q, rx47q, rx48q, rx49q, rx4aq, rx4bq] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [rx56q, rx57q, rx58q, rx59q, rx5aq, rx5bq] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
    prove with all cuts;

(* mov	x27, #0xfffd                	// #65533      #! PC = 0x274877953836 *)
(* mov	%%x27, #0xfffd                	// #65533      #! 0x274877953836 = 0x274877953836; *)
(* movk	x27, #0xfffc, lsl #16                      #! PC = 0x274877953840 *)
(* movk	%%x27, #0xfffc, lsl #16                      #! 0x274877953840 = 0x274877953840; *)
(* movk	x27, #0xfffc, lsl #32                      #! PC = 0x274877953844 *)
(* movk	%%x27, #0xfffc, lsl #32                      #! 0x274877953844 = 0x274877953844; *)
(* movk	x27, #0x89f3, lsl #48                      #! PC = 0x274877953848 *)
(* movk	%%x27, #0x89f3, lsl #48                      #! 0x274877953848 = 0x274877953848; *)
(* NOTE: n *)
mov x27 0x89f3fffcfffcfffd@uint64;
(* mov	x3, x27                                     #! PC = 0x274877953852 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877953856 *)
mov x2 x19;
(* mov	x1, x25                                     #! PC = 0x274877953860 *)
mov x1 x25;
(* ldr	x0, [sp, #128]                              #! EA = L0x4000829a50; Value = 0x000000400082ab98; PC = 0x274877953864 *)
mov x0 L0x4000829a50;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877953868 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877953868 = 0x274877953868;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
    prove with precondition
 && and [1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a048; Value = 0x393e6d472c0e8f80; PC = 0x274877988288 *)
mov x11 L0x400082a048;
mov x12 L0x400082a050;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a058; Value = 0xf83a464ee04e4a3e; PC = 0x274877988292 *)
mov x13 L0x400082a058;
mov x14 L0x400082a060;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a068; Value = 0x3a714c418d6c30cf; PC = 0x274877988300 *)
mov x15 L0x400082a068;
mov x16 L0x400082a070;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                    L0x400082a090, L0x400082a098, L0x400082a0a0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a078; Value = 0x355607fd4d8f17b1; PC = 0x274877988928 *)
mov x19 L0x400082a078;
mov x20 L0x400082a080;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a088; Value = 0x5f83581c1cae035b; PC = 0x274877988932 *)
mov x21 L0x400082a088;
mov x22 L0x400082a090;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a098; Value = 0x29a3f53642430fff; PC = 0x274877988936 *)
mov x23 L0x400082a098;
mov x24 L0x400082a0a0;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ab98; PC = 0x274877989020 *)
mov L0x400082ab98 x11;
mov L0x400082aba0 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082aba8; PC = 0x274877989024 *)
mov L0x400082aba8 x13;
mov L0x400082abb0 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082abb8; PC = 0x274877989028 *)
mov L0x400082abb8 x15;
mov L0x400082abc0 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ab98, L0x400082aba0, L0x400082aba8,
                        L0x400082abb0, L0x400082abb8, L0x400082abc0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                        L0x400082a090, L0x400082a098, L0x400082a0a0])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ab98, L0x400082aba0, L0x400082aba8,
                        L0x400082abb0, L0x400082abb8, L0x400082abc0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                        L0x400082a090, L0x400082a098, L0x400082a0a0])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x007b00400000b750; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877953872 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877953876 *)
mov x2 x19;
(* mov	x1, x20                                     #! PC = 0x274877953880 *)
mov x1 x20;
(* add	x0, x28, #0x150                             #! PC = 0x274877953884 *)
adds dontcare x0 x28 0x150@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877953888 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877953888 = 0x274877953888;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082ab98, L0x400082aba0, L0x400082aba8,
                          L0x400082abb0, L0x400082abb8, L0x400082abc0])
               (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                          L0x400082a060, L0x400082a068, L0x400082a070,
                          L0x400082a078, L0x400082a080, L0x400082a088,
                          L0x400082a090, L0x400082a098, L0x400082a0a0])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
               
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082ab98, L0x400082aba0, L0x400082aba8,
                   L0x400082abb0, L0x400082abb8, L0x400082abc0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0a8; Value = 0x436aaa026abc3b80; PC = 0x274877988288 *)
mov x11 L0x400082a0a8;
mov x12 L0x400082a0b0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0xc661275313254e00; PC = 0x274877988292 *)
mov x13 L0x400082a0b8;
mov x14 L0x400082a0c0;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x49e89c52ed9d29da; PC = 0x274877988300 *)
mov x15 L0x400082a0c8;
mov x16 L0x400082a0d0;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                    L0x400082a0f0, L0x400082a0f8, L0x400082a100] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a0d8; Value = 0x8afee8cacd16e282; PC = 0x274877988928 *)
mov x19 L0x400082a0d8;
mov x20 L0x400082a0e0;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a0e8; Value = 0xcc89ec1b5c4f5351; PC = 0x274877988932 *)
mov x21 L0x400082a0e8;
mov x22 L0x400082a0f0;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a0f8; Value = 0x2177b4c005bdb151; PC = 0x274877988936 *)
mov x23 L0x400082a0f8;
mov x24 L0x400082a100;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082abc8; PC = 0x274877989020 *)
mov L0x400082abc8 x11;
mov L0x400082abd0 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082abd8; PC = 0x274877989024 *)
mov L0x400082abd8 x13;
mov L0x400082abe0 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082abe8; PC = 0x274877989028 *)
mov L0x400082abe8 x15;
mov L0x400082abf0 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082abc8, L0x400082abd0, L0x400082abd8,
                        L0x400082abe0, L0x400082abe8, L0x400082abf0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                        L0x400082a0f0, L0x400082a0f8, L0x400082a100])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082abc8, L0x400082abd0, L0x400082abd8,
                        L0x400082abe0, L0x400082abe8, L0x400082abf0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                        L0x400082a0f0, L0x400082a0f8, L0x400082a100])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x006400400000b764; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877953892 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877953896 *)
mov x2 x19;
(* ldr	x1, [sp, #104]                              #! EA = L0x4000829a38; Value = 0x000000400082a108; PC = 0x274877953900 *)
mov x1 L0x4000829a38;
(* add	x0, x28, #0x180                             #! PC = 0x274877953904 *)
adds dontcare x0 x28 0x180@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877953908 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877953908 = 0x274877953908;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082abc8, L0x400082abd0, L0x400082abd8,
                          L0x400082abe0, L0x400082abe8, L0x400082abf0])
               (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                          L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                          L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                          L0x400082a0f0, L0x400082a0f8, L0x400082a100])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082abc8, L0x400082abd0, L0x400082abd8,
                   L0x400082abe0, L0x400082abe8, L0x400082abf0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a108; Value = 0xff8fb71523bfb600; PC = 0x274877988288 *)
mov x11 L0x400082a108;
mov x12 L0x400082a110;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a118; Value = 0x5bcf4cbca0f75a57; PC = 0x274877988292 *)
mov x13 L0x400082a118;
mov x14 L0x400082a120;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a128; Value = 0x23d2aca36addcc40; PC = 0x274877988300 *)
mov x15 L0x400082a128;
mov x16 L0x400082a130;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                    L0x400082a150, L0x400082a158, L0x400082a160] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a138; Value = 0x40a37b4caf63b0c2; PC = 0x274877988928 *)
mov x19 L0x400082a138;
mov x20 L0x400082a140;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a148; Value = 0x81069073ad1fbbd4; PC = 0x274877988932 *)
mov x21 L0x400082a148;
mov x22 L0x400082a150;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a158; Value = 0x28e2442abef36757; PC = 0x274877988936 *)
mov x23 L0x400082a158;
mov x24 L0x400082a160;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082abf8; PC = 0x274877989020 *)
mov L0x400082abf8 x11;
mov L0x400082ac00 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ac08; PC = 0x274877989024 *)
mov L0x400082ac08 x13;
mov L0x400082ac10 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082ac18; PC = 0x274877989028 *)
mov L0x400082ac18 x15;
mov L0x400082ac20 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082abf8, L0x400082ac00, L0x400082ac08,
                        L0x400082ac10, L0x400082ac18, L0x400082ac20])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                        L0x400082a150, L0x400082a158, L0x400082a160])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082abf8, L0x400082ac00, L0x400082ac08,
                        L0x400082ac10, L0x400082ac18, L0x400082ac20])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                        L0x400082a150, L0x400082a158, L0x400082a160])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x003a00400000b778; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877953912 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877953916 *)
mov x2 x19;
(* mov	x1, x23                                     #! PC = 0x274877953920 *)
mov x1 x23;
(* add	x0, x28, #0x1b0                             #! PC = 0x274877953924 *)
adds dontcare x0 x28 0x1b0@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877953928 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877953928 = 0x274877953928;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082abf8, L0x400082ac00, L0x400082ac08,
                          L0x400082ac10, L0x400082ac18, L0x400082ac20])
               (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                          L0x400082a120, L0x400082a128, L0x400082a130,
                          L0x400082a138, L0x400082a140, L0x400082a148,
                          L0x400082a150, L0x400082a158, L0x400082a160])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082abf8, L0x400082ac00, L0x400082ac08,
                   L0x400082ac10, L0x400082ac18, L0x400082ac20] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a168; Value = 0xc78e9f65cd6e1000; PC = 0x274877988288 *)
mov x11 L0x400082a168;
mov x12 L0x400082a170;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a178; Value = 0x2d1575e900545c89; PC = 0x274877988292 *)
mov x13 L0x400082a178;
mov x14 L0x400082a180;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a188; Value = 0xd77db009cc764d71; PC = 0x274877988300 *)
mov x15 L0x400082a188;
mov x16 L0x400082a190;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                    L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a198; Value = 0x15ad8ec8ebce0d02; PC = 0x274877988928 *)
mov x19 L0x400082a198;
mov x20 L0x400082a1a0;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a1a8; Value = 0x6bd457c32efb5fe9; PC = 0x274877988932 *)
mov x21 L0x400082a1a8;
mov x22 L0x400082a1b0;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a1b8; Value = 0x838b17acba093161; PC = 0x274877988936 *)
mov x23 L0x400082a1b8;
mov x24 L0x400082a1c0;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ac28; PC = 0x274877989020 *)
mov L0x400082ac28 x11;
mov L0x400082ac30 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ac38; PC = 0x274877989024 *)
mov L0x400082ac38 x13;
mov L0x400082ac40 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082ac48; PC = 0x274877989028 *)
mov L0x400082ac48 x15;
mov L0x400082ac50 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ac28, L0x400082ac30, L0x400082ac38,
                        L0x400082ac40, L0x400082ac48, L0x400082ac50])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                        L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ac28, L0x400082ac30, L0x400082ac38,
                        L0x400082ac40, L0x400082ac48, L0x400082ac50])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                        L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x002e00400000b78c; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877953932 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877953936 *)
mov x2 x19;
(* mov	x1, x22                                     #! PC = 0x274877953940 *)
mov x1 x22;
(* add	x0, x28, #0x1e0                             #! PC = 0x274877953944 *)
adds dontcare x0 x28 0x1e0@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877953948 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877953948 = 0x274877953948;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082ac28, L0x400082ac30, L0x400082ac38,
                          L0x400082ac40, L0x400082ac48, L0x400082ac50])
               (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                          L0x400082a180, L0x400082a188, L0x400082a190,
                          L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                          L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082ac28, L0x400082ac30, L0x400082ac38,
                   L0x400082ac40, L0x400082ac48, L0x400082ac50] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a1c8; Value = 0x9c5fc79f3e758000; PC = 0x274877988288 *)
mov x11 L0x400082a1c8;
mov x12 L0x400082a1d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a1d8; Value = 0x58f8ea241813dab8; PC = 0x274877988292 *)
mov x13 L0x400082a1d8;
mov x14 L0x400082a1e0;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a1e8; Value = 0x5223785a5942307f; PC = 0x274877988300 *)
mov x15 L0x400082a1e8;
mov x16 L0x400082a1f0;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                    L0x400082a210, L0x400082a218, L0x400082a220] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a1f8; Value = 0xbcf6665550fbe2df; PC = 0x274877988928 *)
mov x19 L0x400082a1f8;
mov x20 L0x400082a200;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a208; Value = 0xfa5bb1e9b5316d07; PC = 0x274877988932 *)
mov x21 L0x400082a208;
mov x22 L0x400082a210;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a218; Value = 0x1ff598e1e81bafd0; PC = 0x274877988936 *)
mov x23 L0x400082a218;
mov x24 L0x400082a220;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ac58; PC = 0x274877989020 *)
mov L0x400082ac58 x11;
mov L0x400082ac60 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ac68; PC = 0x274877989024 *)
mov L0x400082ac68 x13;
mov L0x400082ac70 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082ac78; PC = 0x274877989028 *)
mov L0x400082ac78 x15;
mov L0x400082ac80 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ac58, L0x400082ac60, L0x400082ac68,
                        L0x400082ac70, L0x400082ac78, L0x400082ac80])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                        L0x400082a210, L0x400082a218, L0x400082a220])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ac58, L0x400082ac60, L0x400082ac68,
                        L0x400082ac70, L0x400082ac78, L0x400082ac80])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                        L0x400082a210, L0x400082a218, L0x400082a220])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x001f00400000b7a0; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877953952 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877953956 *)
mov x2 x19;
(* mov	x1, x21                                     #! PC = 0x274877953960 *)
mov x1 x21;
(* add	x0, x28, #0x210                             #! PC = 0x274877953964 *)
adds dontcare x0 x28 0x210@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877953968 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877953968 = 0x274877953968;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082ac58, L0x400082ac60, L0x400082ac68,
                          L0x400082ac70, L0x400082ac78, L0x400082ac80])
               (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                          L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                          L0x400082a1f8, L0x400082a200, L0x400082a208,
                          L0x400082a210, L0x400082a218, L0x400082a220])
              (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082ac58, L0x400082ac60, L0x400082ac68,
                   L0x400082ac70, L0x400082ac78, L0x400082ac80] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a228; Value = 0x2177aa0000000000; PC = 0x274877988288 *)
mov x11 L0x400082a228;
mov x12 L0x400082a230;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a238; Value = 0x8c83845bc6bc9788; PC = 0x274877988292 *)
mov x13 L0x400082a238;
mov x14 L0x400082a240;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a248; Value = 0x7c69e3986e6072da; PC = 0x274877988300 *)
mov x15 L0x400082a248;
mov x16 L0x400082a250;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                    L0x400082a270, L0x400082a278, L0x400082a280] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
    prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a258; Value = 0x7c81773102a4a283; PC = 0x274877988928 *)
mov x19 L0x400082a258;
mov x20 L0x400082a260;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a268; Value = 0x73263696eada1579; PC = 0x274877988932 *)
mov x21 L0x400082a268;
mov x22 L0x400082a270;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a278; Value = 0x63a69aadd369c3b9; PC = 0x274877988936 *)
mov x23 L0x400082a278;
mov x24 L0x400082a280;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ac88; PC = 0x274877989020 *)
mov L0x400082ac88 x11;
mov L0x400082ac90 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ac98; PC = 0x274877989024 *)
mov L0x400082ac98 x13;
mov L0x400082aca0 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082aca8; PC = 0x274877989028 *)
mov L0x400082aca8 x15;
mov L0x400082acb0 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ac88, L0x400082ac90, L0x400082ac98,
                        L0x400082aca0, L0x400082aca8, L0x400082acb0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                        L0x400082a270, L0x400082a278, L0x400082a280])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ac88, L0x400082ac90, L0x400082ac98,
                        L0x400082aca0, L0x400082aca8, L0x400082acb0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                        L0x400082a270, L0x400082a278, L0x400082a280])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x001100400000b7b4; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;

(* redc_fp6x2(ret[1], rx) *)

cut eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                     L0x400082ac88, L0x400082ac90, L0x400082ac98,
                     L0x400082aca0, L0x400082aca8, L0x400082acb0])
          (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                     L0x400082a240, L0x400082a248, L0x400082a250,
                     L0x400082a258, L0x400082a260, L0x400082a268,
                     L0x400082a270, L0x400082a278, L0x400082a280])
          (limbs 64 [m0, m1, m2, m3, m4, m5])
 && and [limbs 64 [L0x400082ac88, L0x400082ac90, L0x400082ac98, 
                   L0x400082aca0, L0x400082aca8, L0x400082acb0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                   L0x400082a270, L0x400082a278, L0x400082a280] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                   L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                   L0x4000829d30, L0x4000829d38, L0x4000829d40] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829e38, L0x4000829e40, L0x4000829e48,
                   L0x4000829e50, L0x4000829e58, L0x4000829e60] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                   L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                   L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a018, L0x400082a020, L0x400082a028,
                   L0x400082a030, L0x400082a038, L0x400082a040] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
    prove with all cuts;

(* mov	x3, x19                                     #! PC = 0x274877953972 *)
mov x3 x19;
(* ldr	x2, [sp, #120]                              #! EA = L0x4000829a48; Value = 0x0000004000829fe8; PC = 0x274877953976 *)
mov x2 L0x4000829a48;
(* ldr	x1, [sp, #112]                              #! EA = L0x4000829a40; Value = 0x0000004000829f88; PC = 0x274877953980 *)
mov x1 L0x4000829a40;
(* mov	x0, x25                                     #! PC = 0x274877953984 *)
mov x0 x25;
(* #bl	0x4000012f40 <sub_mod_384x384>              #! PC = 0x274877953988 *)
#bl	0x4000012f40 <sub_mod_384x384>              #! 0x274877953988 = 0x274877953988;
(* #paciasp                                         #! PC = 0x274877984576 *)
#paciasp                                         #! 0x274877984576 = 0x274877984576;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984580 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984584 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984588 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984592 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984596 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984600 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984604 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984608 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012fa0 <__sub_mod_384x384>            #! PC = 0x274877984612 *)
#bl	0x4000012fa0 <__sub_mod_384x384>            #! 0x274877984612 = 0x274877984612;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f88; Value = 0xbd13f8065ba18000; PC = 0x274877984672 *)
mov x11 L0x4000829f88;
mov x12 L0x4000829f90;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829fe8; Value = 0x42ebeff972308000; PC = 0x274877984676 *)
mov x19 L0x4000829fe8;
mov x20 L0x4000829ff0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f98; Value = 0x9ac5ba4fc1d2f0ff; PC = 0x274877984680 *)
mov x13 L0x4000829f98;
mov x14 L0x4000829fa0;
(* subs	x11, x11, x19                              #! PC = 0x274877984684 *)
subc carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829ff8; Value = 0xe7eebb26e9e90f00; PC = 0x274877984688 *)
mov x21 L0x4000829ff8;
mov x22 L0x400082a000;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984692 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829fa8; Value = 0xa484f3dcd713a378; PC = 0x274877984696 *)
mov x15 L0x4000829fa8;
mov x16 L0x4000829fb0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984700 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x400082a008; Value = 0xf26bc0c1397bad49; PC = 0x274877984704 *)
mov x23 L0x400082a008;
mov x24 L0x400082a010;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984708 *)
sbcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a048; PC = 0x274877984712 *)
mov L0x400082a048 x11;
mov L0x400082a050 x12;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984716 *)
sbcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fb8; Value = 0xfbb7db4070607623; PC = 0x274877984720 *)
mov x11 L0x4000829fb8;
mov x12 L0x4000829fc0;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984724 *)
sbcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a018; Value = 0xb05060bb9f58bbc1; PC = 0x274877984728 *)
mov x19 L0x400082a018;
mov x20 L0x400082a020;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a058; PC = 0x274877984732 *)
mov L0x400082a058 x13;
mov L0x400082a060 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fc8; Value = 0xeb129e39ae7ad9ec; PC = 0x274877984736 *)
mov x13 L0x4000829fc8;
mov x14 L0x4000829fd0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a028; Value = 0x0aedf4d071332e30; PC = 0x274877984740 *)
mov x21 L0x400082a028;
mov x22 L0x400082a030;
(* sbcs	x11, x11, x19                              #! PC = 0x274877984744 *)
sbcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a068; PC = 0x274877984748 *)
mov L0x400082a068 x15;
mov L0x400082a070 x16;
(* sbcs	x12, x12, x20                              #! PC = 0x274877984752 *)
sbcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fd8; Value = 0x0829156ef0d9285f; PC = 0x274877984756 *)
mov x15 L0x4000829fd8;
mov x16 L0x4000829fe0;
(* sbcs	x13, x13, x21                              #! PC = 0x274877984760 *)
sbcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a038; Value = 0x4230dab2221e69f8; PC = 0x274877984764 *)
mov x23 L0x400082a038;
mov x24 L0x400082a040;
(* sbcs	x14, x14, x22                              #! PC = 0x274877984768 *)
sbcs carry x14 x14 x22 carry;
(* sbcs	x15, x15, x23                              #! PC = 0x274877984772 *)
sbcs carry x15 x15 x23 carry;
(* sbcs	x16, x16, x24                              #! PC = 0x274877984776 *)
sbcs carry x16 x16 x24 carry;
(* ngc	x17, xzr                                    #! PC = 0x274877984780 *)
cmov x17 carry 0@uint64 0xffffffffffffffff@uint64;
(* and	x19, x5, x17                                #! PC = 0x274877984784 *)
and x19@uint64 x5 x17;
(* and	x20, x6, x17                                #! PC = 0x274877984788 *)
and x20@uint64 x6 x17;
(* adds	x11, x11, x19                              #! PC = 0x274877984792 *)
adds carry x11 x11 x19;
(* and	x21, x7, x17                                #! PC = 0x274877984796 *)
and x21@uint64 x7 x17;
(* adcs	x12, x12, x20                              #! PC = 0x274877984800 *)
adcs carry x12 x12 x20 carry;
(* and	x22, x8, x17                                #! PC = 0x274877984804 *)
and x22@uint64 x8 x17;
(* adcs	x13, x13, x21                              #! PC = 0x274877984808 *)
adcs carry x13 x13 x21 carry;
(* and	x23, x9, x17                                #! PC = 0x274877984812 *)
and x23@uint64 x9 x17;
(* adcs	x14, x14, x22                              #! PC = 0x274877984816 *)
adcs carry x14 x14 x22 carry;
(* and	x24, x10, x17                               #! PC = 0x274877984820 *)
and x24@uint64 x10 x17;
(* adcs	x15, x15, x23                              #! PC = 0x274877984824 *)
adcs carry x15 x15 x23 carry;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a078; PC = 0x274877984828 *)
mov L0x400082a078 x11;
mov L0x400082a080 x12;
(* adc	x16, x16, x24                               #! PC = 0x274877984832 *)
adcs dontcare x16 x16 x24 carry;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a088; PC = 0x274877984836 *)
mov L0x400082a088 x13;
mov L0x400082a090 x14;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a098; PC = 0x274877984840 *)
mov L0x400082a098 x15;
mov L0x400082a0a0 x16;
(* #ret                                            #! PC = 0x274877984844 *)
#ret                                            #! 0x274877984844 = 0x274877984844;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x006600400000b7c8; PC = 0x274877984616 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984620 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984624 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984628 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984632 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984636 *)
#autiasp                                         #! 0x274877984636 = 0x274877984636;
(* #ret                                            #! PC = 0x274877984640 *)
#ret                                            #! 0x274877984640 = 0x274877984640;
(* mov	x3, x19                                     #! PC = 0x274877953992 *)
mov x3 x19;
(* ldr	x2, [sp, #120]                              #! EA = L0x4000829a48; Value = 0x0000004000829fe8; PC = 0x274877953996 *)
mov x2 L0x4000829a48;
(* ldr	x1, [sp, #112]                              #! EA = L0x4000829a40; Value = 0x0000004000829f88; PC = 0x274877954000 *)
mov x1 L0x4000829a40;
(* mov	x0, x20                                     #! PC = 0x274877954004 *)
mov x0 x20;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954008 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954008 = 0x274877954008;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829f88; Value = 0xbd13f8065ba18000; PC = 0x274877984384 *)
mov x11 L0x4000829f88;
mov x12 L0x4000829f90;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829fe8; Value = 0x42ebeff972308000; PC = 0x274877984388 *)
mov x19 L0x4000829fe8;
mov x20 L0x4000829ff0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829f98; Value = 0x9ac5ba4fc1d2f0ff; PC = 0x274877984392 *)
mov x13 L0x4000829f98;
mov x14 L0x4000829fa0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829ff8; Value = 0xe7eebb26e9e90f00; PC = 0x274877984400 *)
mov x21 L0x4000829ff8;
mov x22 L0x400082a000;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829fa8; Value = 0xa484f3dcd713a378; PC = 0x274877984408 *)
mov x15 L0x4000829fa8;
mov x16 L0x4000829fb0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x400082a008; Value = 0xf26bc0c1397bad49; PC = 0x274877984416 *)
mov x23 L0x400082a008;
mov x24 L0x400082a010;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a0a8; PC = 0x274877984424 *)
mov L0x400082a0a8 x11;
mov L0x400082a0b0 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829fb8; Value = 0xfbb7db4070607623; PC = 0x274877984432 *)
mov x11 L0x4000829fb8;
mov x12 L0x4000829fc0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a018; Value = 0xb05060bb9f58bbc1; PC = 0x274877984440 *)
mov x19 L0x400082a018;
mov x20 L0x400082a020;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a0b8; PC = 0x274877984444 *)
mov L0x400082a0b8 x13;
mov L0x400082a0c0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829fc8; Value = 0xeb129e39ae7ad9ec; PC = 0x274877984448 *)
mov x13 L0x4000829fc8;
mov x14 L0x4000829fd0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a028; Value = 0x0aedf4d071332e30; PC = 0x274877984452 *)
mov x21 L0x400082a028;
mov x22 L0x400082a030;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a0c8; PC = 0x274877984460 *)
mov L0x400082a0c8 x15;
mov L0x400082a0d0 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829fd8; Value = 0x0829156ef0d9285f; PC = 0x274877984468 *)
mov x15 L0x4000829fd8;
mov x16 L0x4000829fe0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a038; Value = 0x4230dab2221e69f8; PC = 0x274877984476 *)
mov x23 L0x400082a038;
mov x24 L0x400082a040;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a0d8; PC = 0x274877984540 *)
mov L0x400082a0d8 x11;
mov L0x400082a0e0 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a0e8; PC = 0x274877984548 *)
mov L0x400082a0e8 x13;
mov L0x400082a0f0 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a0f8; PC = 0x274877984556 *)
mov L0x400082a0f8 x15;
mov L0x400082a100 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x004800400000b7dc; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

(* mul_by_u_plus_1_fp2x2(rx[0], t1[2]) *)

assert true
    && and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0] +
                   limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                             L0x400082a000, L0x400082a008, L0x400082a010,
                             L0x400082a018, L0x400082a020, L0x400082a028,
                             L0x400082a030, L0x400082a038, L0x400082a040])
                  (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                             L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                             L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                             L0x4000829fd0, L0x4000829fd8, L0x4000829fe0])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100])
                  (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                             L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                             L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                             L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                   limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                             L0x400082a000, L0x400082a008, L0x400082a010,
                             L0x400082a018, L0x400082a020, L0x400082a028,
                             L0x400082a030, L0x400082a038, L0x400082a040])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5])];
assume and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0] +
                   limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                             L0x400082a000, L0x400082a008, L0x400082a010,
                             L0x400082a018, L0x400082a020, L0x400082a028,
                             L0x400082a030, L0x400082a038, L0x400082a040])
                  (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                             L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                             L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                             L0x4000829fd0, L0x4000829fd8, L0x4000829fe0])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100])
                  (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                             L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                             L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                             L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                   limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                             L0x400082a000, L0x400082a008, L0x400082a010,
                             L0x400082a018, L0x400082a020, L0x400082a028,
                             L0x400082a030, L0x400082a038, L0x400082a040])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877954012 *)
mov x3 x19;
(* mov	x2, x25                                     #! PC = 0x274877954016 *)
mov x2 x25;
(* mov	x1, x24                                     #! PC = 0x274877954020 *)
mov x1 x24;
(* mov	x0, x25                                     #! PC = 0x274877954024 *)
mov x0 x25;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954028 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954028 = 0x274877954028;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;

cut eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                     L0x400082a060, L0x400082a068, L0x400082a070,
                     L0x400082a078, L0x400082a080, L0x400082a088,
                     L0x400082a090, L0x400082a098, L0x400082a0a0] +
           limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                     L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                     L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                     L0x400082a0f0, L0x400082a0f8, L0x400082a100] * U)
          ((limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                      L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                      L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                      L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
            limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                      L0x400082a000, L0x400082a008, L0x400082a010,
                      L0x400082a018, L0x400082a020, L0x400082a028,
                      L0x400082a030, L0x400082a038, L0x400082a040] * U) *
           (1 + U))
          [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5], U**2 + 1]
    prove with precondition
 && and [limbs 64 [L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                   L0x4000829c10, L0x4000829c18, L0x4000829c20] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                   L0x4000829c70, L0x4000829c78, L0x4000829c80] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                   L0x400082a090, L0x400082a098, L0x400082a0a0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                   L0x400082a0f0, L0x400082a0f8, L0x400082a100] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
    prove with all cuts;

(* NOTE: save old values *)

mov rx00r L0x400082a048; mov rx01r L0x400082a050; mov rx02r L0x400082a058;
mov rx03r L0x400082a060; mov rx04r L0x400082a068; mov rx05r L0x400082a070;
mov rx10r L0x400082a078; mov rx11r L0x400082a080; mov rx12r L0x400082a088;
mov rx13r L0x400082a090; mov rx14r L0x400082a098; mov rx15r L0x400082a0a0;
mov rx20r L0x400082a0a8; mov rx21r L0x400082a0b0; mov rx22r L0x400082a0b8;
mov rx23r L0x400082a0c0; mov rx24r L0x400082a0c8; mov rx25r L0x400082a0d0;
mov rx30r L0x400082a0d8; mov rx31r L0x400082a0e0; mov rx32r L0x400082a0e8;
mov rx33r L0x400082a0f0; mov rx34r L0x400082a0f8; mov rx35r L0x400082a100;

(* ldp	x11, x12, [x1]                              #! EA = L0x4000829bc8; Value = 0x9d1ddf3b72ffd900; PC = 0x274877984384 *)
mov x11 L0x4000829bc8;
mov x12 L0x4000829bd0;
(* ldp	x19, x20, [x2]                              #! EA = L0x400082a048; Value = 0x7a28080ce9710000; PC = 0x274877984388 *)
mov x19 L0x400082a048;
mov x20 L0x400082a050;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829bd8; Value = 0x006f7d9f7d012100; PC = 0x274877984392 *)
mov x13 L0x4000829bd8;
mov x14 L0x4000829be0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x400082a058; Value = 0xb2d6ff28d7e9e1fe; PC = 0x274877984400 *)
mov x21 L0x400082a058;
mov x22 L0x400082a060;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829be8; Value = 0x59e391b72d5448df; PC = 0x274877984408 *)
mov x15 L0x4000829be8;
mov x16 L0x4000829bf0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x400082a068; Value = 0xb219331b9d97f62e; PC = 0x274877984416 *)
mov x23 L0x400082a068;
mov x24 L0x400082a070;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a048; PC = 0x274877984424 *)
mov L0x400082a048 x11;
mov L0x400082a050 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829bf8; Value = 0xfc28f423cb30385a; PC = 0x274877984432 *)
mov x11 L0x4000829bf8;
mov x12 L0x4000829c00;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a078; Value = 0x4b677a84d107ba61; PC = 0x274877984440 *)
mov x19 L0x400082a078;
mov x20 L0x400082a080;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a058; PC = 0x274877984444 *)
mov L0x400082a058 x13;
mov L0x400082a060 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829c08; Value = 0x1eff4dedef9ebf23; PC = 0x274877984448 *)
mov x13 L0x4000829c08;
mov x14 L0x4000829c10;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a088; Value = 0xe024a9693d47abbb; PC = 0x274877984452 *)
mov x21 L0x400082a088;
mov x22 L0x400082a090;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a068; PC = 0x274877984460 *)
mov L0x400082a068 x15;
mov L0x400082a070 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829c18; Value = 0x2a7025b647625def; PC = 0x274877984468 *)
mov x15 L0x4000829c18;
mov x16 L0x4000829c20;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a098; Value = 0xc5f83abccebabe66; PC = 0x274877984476 *)
mov x23 L0x400082a098;
mov x24 L0x400082a0a0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a078; PC = 0x274877984540 *)
mov L0x400082a078 x11;
mov L0x400082a080 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a088; PC = 0x274877984548 *)
mov L0x400082a088 x13;
mov L0x400082a090 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a098; PC = 0x274877984556 *)
mov L0x400082a098 x15;
mov L0x400082a0a0 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x002100400000b7f0; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* mov	x3, x19                                     #! PC = 0x274877954032 *)
mov x3 x19;
(* mov	x2, x20                                     #! PC = 0x274877954036 *)
mov x2 x20;
(* ldr	x1, [sp, #144]                              #! EA = L0x4000829a60; Value = 0x0000004000829c28; PC = 0x274877954040 *)
mov x1 L0x4000829a60;
(* mov	x0, x20                                     #! PC = 0x274877954044 *)
mov x0 x20;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954048 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954048 = 0x274877954048;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c28; Value = 0x21ec38fd15bfc080; PC = 0x274877984384 *)
mov x11 L0x4000829c28;
mov x12 L0x4000829c30;
(* ldp	x19, x20, [x2]                              #! EA = L0x400082a0a8; Value = 0xffffe7ffcdd20000; PC = 0x274877984388 *)
mov x19 L0x400082a0a8;
mov x20 L0x400082a0b0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c38; Value = 0x6285331e934e7dc0; PC = 0x274877984392 *)
mov x13 L0x4000829c38;
mov x14 L0x4000829c40;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x400082a0b8; Value = 0x82b47576abbbffff; PC = 0x274877984400 *)
mov x21 L0x400082a0b8;
mov x22 L0x400082a0c0;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829c48; Value = 0xe591b60c674c9660; PC = 0x274877984408 *)
mov x15 L0x4000829c48;
mov x16 L0x4000829c50;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x400082a0c8; Value = 0x96f0b49e108f50c1; PC = 0x274877984416 *)
mov x23 L0x400082a0c8;
mov x24 L0x400082a0d0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a0a8; PC = 0x274877984424 *)
mov L0x400082a0a8 x11;
mov L0x400082a0b0 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829c58; Value = 0x8390a9f8a99ea078; PC = 0x274877984432 *)
mov x11 L0x4000829c58;
mov x12 L0x4000829c60;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x400082a0d8; Value = 0xac083bfc0fb931e5; PC = 0x274877984440 *)
mov x19 L0x400082a0d8;
mov x20 L0x400082a0e0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a0b8; PC = 0x274877984444 *)
mov L0x400082a0b8 x13;
mov L0x400082a0c0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829c68; Value = 0x68ee78fe8bc840c0; PC = 0x274877984448 *)
mov x13 L0x4000829c68;
mov x14 L0x4000829c70;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x400082a0e8; Value = 0xf600930a1fae081d; PC = 0x274877984452 *)
mov x21 L0x400082a0e8;
mov x22 L0x400082a0f0;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a0c8; PC = 0x274877984460 *)
mov L0x400082a0c8 x15;
mov L0x400082a0d0 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829c78; Value = 0x20ab84400082de10; PC = 0x274877984468 *)
mov x15 L0x4000829c78;
mov x16 L0x4000829c80;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x400082a0f8; Value = 0x4a59f02112f79257; PC = 0x274877984476 *)
mov x23 L0x400082a0f8;
mov x24 L0x400082a100;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a0d8; PC = 0x274877984540 *)
mov L0x400082a0d8 x11;
mov L0x400082a0e0 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a0e8; PC = 0x274877984548 *)
mov L0x400082a0e8 x13;
mov L0x400082a0f0 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a0f8; PC = 0x274877984556 *)
mov L0x400082a0f8 x15;
mov L0x400082a100 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x004400400000b804; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

(* add_fp2x2(rx[0], t0[0], rx[0]) *)

assert true
    && and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0])
                  (limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                             L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                             L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                             L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                   limbs 64 [rx00r, rx01r, rx02r, rx03r, rx04r, rx05r,
                             rx10r, rx11r, rx12r, rx13r, rx14r, rx15r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100])
                  (limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                             L0x4000829c40, L0x4000829c48, L0x4000829c50,
                             L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                             L0x4000829c70, L0x4000829c78, L0x4000829c80] +
                   limbs 64 [rx20r, rx21r, rx22r, rx23r, rx24r, rx25r,
                             rx30r, rx31r, rx32r, rx33r, rx34r, rx35r])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                             L0x400082a060, L0x400082a068, L0x400082a070,
                             L0x400082a078, L0x400082a080, L0x400082a088,
                             L0x400082a090, L0x400082a098, L0x400082a0a0])
                  (limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                             L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                             L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                             L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                   limbs 64 [rx00r, rx01r, rx02r, rx03r, rx04r, rx05r,
                             rx10r, rx11r, rx12r, rx13r, rx14r, rx15r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                             L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                             L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                             L0x400082a0f0, L0x400082a0f8, L0x400082a100])
                  (limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                             L0x4000829c40, L0x4000829c48, L0x4000829c50,
                             L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                             L0x4000829c70, L0x4000829c78, L0x4000829c80] +
                   limbs 64 [rx20r, rx21r, rx22r, rx23r, rx24r, rx25r,
                             rx30r, rx31r, rx32r, rx33r, rx34r, rx35r])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877954052 *)
mov x3 x19;
(* mov	x2, x26                                     #! PC = 0x274877954056 *)
mov x2 x26;
(* ldr	x1, [sp, #152]                              #! EA = L0x4000829a68; Value = 0x0000004000829c88; PC = 0x274877954060 *)
mov x1 L0x4000829a68;
(* ldr	x24, [sp, #104]                             #! EA = L0x4000829a38; Value = 0x000000400082a108; PC = 0x274877954064 *)
mov x24 L0x4000829a38;
(* mov	x0, x24                                     #! PC = 0x274877954068 *)
mov x0 x24;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954072 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954072 = 0x274877954072;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;

rcut and [limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                    L0x400082a090, L0x400082a098, L0x400082a0a0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                    L0x400082a0f0, L0x400082a0f8, L0x400082a100] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
                    
          limbs 64 [L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                    L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                    L0x4000829d30, L0x4000829d38, L0x4000829d40] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x4000829e38, L0x4000829e40, L0x4000829e48,
                    L0x4000829e50, L0x4000829e58, L0x4000829e60] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                    L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829c88; Value = 0x39a0f70fcbd62680; PC = 0x274877984384 *)
mov x11 L0x4000829c88;
mov x12 L0x4000829c90;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829e08; Value = 0x0000000000000000; PC = 0x274877984388 *)
mov x19 L0x4000829e08;
mov x20 L0x4000829e10;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829c98; Value = 0x83dbe791dcf06040; PC = 0x274877984392 *)
mov x13 L0x4000829c98;
mov x14 L0x4000829ca0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e18; Value = 0xb472dc8596ebe43f; PC = 0x274877984400 *)
mov x21 L0x4000829e18;
mov x22 L0x4000829e20;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829ca8; Value = 0x3ba447a7a66cef00; PC = 0x274877984408 *)
mov x15 L0x4000829ca8;
mov x16 L0x4000829cb0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e28; Value = 0x50047e75b8aecb3e; PC = 0x274877984416 *)
mov x23 L0x4000829e28;
mov x24 L0x4000829e30;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a108; PC = 0x274877984424 *)
mov L0x400082a108 x11;
mov L0x400082a110 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829cb8; Value = 0x964a20d028d9de1f; PC = 0x274877984432 *)
mov x11 L0x4000829cb8;
mov x12 L0x4000829cc0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e38; Value = 0x6441fdc2bbfcb728; PC = 0x274877984440 *)
mov x19 L0x4000829e38;
mov x20 L0x4000829e40;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a118; PC = 0x274877984444 *)
mov L0x400082a118 x13;
mov L0x400082a120 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829cc8; Value = 0x9d26391086f3892f; PC = 0x274877984448 *)
mov x13 L0x4000829cc8;
mov x14 L0x4000829cd0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829e48; Value = 0x2379e4beef08c95a; PC = 0x274877984452 *)
mov x21 L0x4000829e48;
mov x22 L0x4000829e50;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a128; PC = 0x274877984460 *)
mov L0x400082a128 x15;
mov L0x400082a130 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829cd8; Value = 0x0000000000000000; PC = 0x274877984468 *)
mov x15 L0x4000829cd8;
mov x16 L0x4000829ce0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829e58; Value = 0xc536c3682291d78e; PC = 0x274877984476 *)
mov x23 L0x4000829e58;
mov x24 L0x4000829e60;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a138; PC = 0x274877984540 *)
mov L0x400082a138 x11;
mov L0x400082a140 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a148; PC = 0x274877984548 *)
mov L0x400082a148 x13;
mov L0x400082a150 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a158; PC = 0x274877984556 *)
mov L0x400082a158 x15;
mov L0x400082a160 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x002e00400000b81c; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* mov	x3, x19                                     #! PC = 0x274877954076 *)
mov x3 x19;
(* ldr	x2, [sp, #184]                              #! EA = L0x4000829a88; Value = 0x0000004000829e68; PC = 0x274877954080 *)
mov x2 L0x4000829a88;
(* ldr	x1, [sp, #160]                              #! EA = L0x4000829a70; Value = 0x0000004000829ce8; PC = 0x274877954084 *)
mov x1 L0x4000829a70;
(* mov	x0, x23                                     #! PC = 0x274877954088 *)
mov x0 x23;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954092 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954092 = 0x274877954092;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829ce8; Value = 0x6336672e1302db40; PC = 0x274877984384 *)
mov x11 L0x4000829ce8;
mov x12 L0x4000829cf0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829e68; Value = 0x0000000000000000; PC = 0x274877984388 *)
mov x19 L0x4000829e68;
mov x20 L0x4000829e70;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829cf8; Value = 0xc67c5f67f06bd820; PC = 0x274877984392 *)
mov x13 L0x4000829cf8;
mov x14 L0x4000829d00;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829e78; Value = 0xc6562cd81a828cc0; PC = 0x274877984400 *)
mov x21 L0x4000829e78;
mov x22 L0x4000829e80;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829d08; Value = 0x62d80a56e7525200; PC = 0x274877984408 *)
mov x15 L0x4000829d08;
mov x16 L0x4000829d10;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829e88; Value = 0xf37d72be3b7ae7c1; PC = 0x274877984416 *)
mov x23 L0x4000829e88;
mov x24 L0x4000829e90;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a168; PC = 0x274877984424 *)
mov L0x400082a168 x11;
mov L0x400082a170 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829d18; Value = 0x41643d0fb0412fe9; PC = 0x274877984432 *)
mov x11 L0x4000829d18;
mov x12 L0x4000829d20;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829e98; Value = 0xdacca68d537bfd43; PC = 0x274877984440 *)
mov x19 L0x4000829e98;
mov x20 L0x4000829ea0;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a178; PC = 0x274877984444 *)
mov L0x400082a178 x13;
mov L0x400082a180 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829d28; Value = 0x8a0b20b64e851610; PC = 0x274877984448 *)
mov x13 L0x4000829d28;
mov x14 L0x4000829d30;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829ea8; Value = 0xd230135609d8e44a; PC = 0x274877984452 *)
mov x21 L0x4000829ea8;
mov x22 L0x4000829eb0;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a188; PC = 0x274877984460 *)
mov L0x400082a188 x15;
mov L0x400082a190 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829d38; Value = 0x20b3fa400082dfe8; PC = 0x274877984468 *)
mov x15 L0x4000829d38;
mov x16 L0x4000829d40;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829eb8; Value = 0x8461d524876de6c9; PC = 0x274877984476 *)
mov x23 L0x4000829eb8;
mov x24 L0x4000829ec0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a198; PC = 0x274877984540 *)
mov L0x400082a198 x11;
mov L0x400082a1a0 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a1a8; PC = 0x274877984548 *)
mov L0x400082a1a8 x13;
mov L0x400082a1b0 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a1b8; PC = 0x274877984556 *)
mov L0x400082a1b8 x15;
mov L0x400082a1c0 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x004400400000b830; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

(* add_fp2x2(rx[1], t0[1], t1[0]) *)

assert true
    && and [eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                             L0x400082a120, L0x400082a128, L0x400082a130,
                             L0x400082a138, L0x400082a140, L0x400082a148,
                             L0x400082a150, L0x400082a158, L0x400082a160])
                  (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                             L0x4000829ca0, L0x4000829ca8, L0x4000829cb0, 
                             L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                             L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                   limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                             L0x4000829e20, L0x4000829e28, L0x4000829e30,
                             L0x4000829e38, L0x4000829e40, L0x4000829e48,
                             L0x4000829e50, L0x4000829e58, L0x4000829e60])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                             L0x400082a180, L0x400082a188, L0x400082a190,
                             L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                             L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
                  (limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                             L0x4000829d00, L0x4000829d08, L0x4000829d10, 
                             L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                             L0x4000829d30, L0x4000829d38, L0x4000829d40] +
                   limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                             L0x4000829e80, L0x4000829e88, L0x4000829e90,
                             L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                             L0x4000829eb0, L0x4000829eb8, L0x4000829ec0])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                             L0x400082a120, L0x400082a128, L0x400082a130,
                             L0x400082a138, L0x400082a140, L0x400082a148,
                             L0x400082a150, L0x400082a158, L0x400082a160])
                  (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                             L0x4000829ca0, L0x4000829ca8, L0x4000829cb0, 
                             L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                             L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                   limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                             L0x4000829e20, L0x4000829e28, L0x4000829e30,
                             L0x4000829e38, L0x4000829e40, L0x4000829e48,
                             L0x4000829e50, L0x4000829e58, L0x4000829e60])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                             L0x400082a180, L0x400082a188, L0x400082a190,
                             L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                             L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
                  (limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                             L0x4000829d00, L0x4000829d08, L0x4000829d10, 
                             L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                             L0x4000829d30, L0x4000829d38, L0x4000829d40] +
                   limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                             L0x4000829e80, L0x4000829e88, L0x4000829e90,
                             L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                             L0x4000829eb0, L0x4000829eb8, L0x4000829ec0])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])]
    && true;

(* mov	x3, x19                                     #! PC = 0x274877954096 *)
mov x3 x19;
(* ldr	x2, [sp, #192]                              #! EA = L0x4000829a90; Value = 0x0000004000829ec8; PC = 0x274877954100 *)
mov x2 L0x4000829a90;
(* ldr	x1, [sp, #168]                              #! EA = L0x4000829a78; Value = 0x0000004000829d48; PC = 0x274877954104 *)
mov x1 L0x4000829a78;
(* mov	x0, x22                                     #! PC = 0x274877954108 *)
mov x0 x22;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954112 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954112 = 0x274877954112;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;

rcut and [limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                    L0x400082a150, L0x400082a158, L0x400082a160] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                    L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                    L0x4000829d90, L0x4000829d98, L0x4000829da0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                    L0x4000829df0, L0x4000829df8, L0x4000829e00] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                    L0x4000829f10, L0x4000829f18, L0x4000829f20] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          limbs 64 [L0x4000829f58, L0x4000829f60, L0x4000829f68,
                    L0x4000829f70, L0x4000829f78, L0x4000829f80] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
         
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829d48; Value = 0xdef43a48ab390900; PC = 0x274877984384 *)
mov x11 L0x4000829d48;
mov x12 L0x4000829d50;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829ec8; Value = 0x0000000000000000; PC = 0x274877984388 *)
mov x19 L0x4000829ec8;
mov x20 L0x4000829ed0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829d58; Value = 0xbdd0e591ababaf7f; PC = 0x274877984392 *)
mov x13 L0x4000829d58;
mov x14 L0x4000829d60;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829ed8; Value = 0x0000000000000000; PC = 0x274877984400 *)
mov x21 L0x4000829ed8;
mov x22 L0x4000829ee0;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829d68; Value = 0x3ab9fa120e1054ff; PC = 0x274877984408 *)
mov x15 L0x4000829d68;
mov x16 L0x4000829d70;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829ee8; Value = 0xbcac7f37f572cb3f; PC = 0x274877984416 *)
mov x23 L0x4000829ee8;
mov x24 L0x4000829ef0;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a1c8; PC = 0x274877984424 *)
mov L0x400082a1c8 x11;
mov L0x400082a1d0 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829d78; Value = 0x83e9bbae2e2a34c0; PC = 0x274877984432 *)
mov x11 L0x4000829d78;
mov x12 L0x4000829d80;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829ef8; Value = 0x34e09190ffb552aa; PC = 0x274877984440 *)
mov x19 L0x4000829ef8;
mov x20 L0x4000829f00;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a1d8; PC = 0x274877984444 *)
mov L0x400082a1d8 x13;
mov L0x400082a1e0 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829d88; Value = 0x4164aed096250a00; PC = 0x274877984448 *)
mov x13 L0x4000829d88;
mov x14 L0x4000829d90;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829f08; Value = 0x672e6e5bf6089f6b; PC = 0x274877984452 *)
mov x21 L0x4000829f08;
mov x22 L0x4000829f10;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a1e8; PC = 0x274877984460 *)
mov L0x400082a1e8 x15;
mov L0x400082a1f0 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829d98; Value = 0x0000024004982e90; PC = 0x274877984468 *)
mov x15 L0x4000829d98;
mov x16 L0x4000829da0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829f18; Value = 0x4a59efe11241155f; PC = 0x274877984476 *)
mov x23 L0x4000829f18;
mov x24 L0x4000829f20;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a1f8; PC = 0x274877984540 *)
mov L0x400082a1f8 x11;
mov L0x400082a200 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a208; PC = 0x274877984548 *)
mov L0x400082a208 x13;
mov L0x400082a210 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a218; PC = 0x274877984556 *)
mov L0x400082a218 x15;
mov L0x400082a220 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x005100400000b844; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;
(* mov	x3, x19                                     #! PC = 0x274877954116 *)
mov x3 x19;
(* ldr	x2, [sp, #200]                              #! EA = L0x4000829a98; Value = 0x0000004000829f28; PC = 0x274877954120 *)
mov x2 L0x4000829a98;
(* ldr	x1, [sp, #176]                              #! EA = L0x4000829a80; Value = 0x0000004000829da8; PC = 0x274877954124 *)
mov x1 L0x4000829a80;
(* mov	x0, x21                                     #! PC = 0x274877954128 *)
mov x0 x21;
(* #bl	0x4000012e20 <add_mod_384x384>              #! PC = 0x274877954132 *)
#bl	0x4000012e20 <add_mod_384x384>              #! 0x274877954132 = 0x274877954132;
(* #paciasp                                         #! PC = 0x274877984288 *)
#paciasp                                         #! 0x274877984288 = 0x274877984288;
(* stp	x29, x30, [sp, #-64]!                       #! EA = L0x4000829990; PC = 0x274877984292 *)
mov L0x4000829990 x29;
mov L0x4000829998 x30;
(* mov	x29, sp                                     #! PC = 0x274877984296 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x40008299a0; PC = 0x274877984300 *)
mov L0x40008299a0 x19;
mov L0x40008299a8 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x40008299b0; PC = 0x274877984304 *)
mov L0x40008299b0 x21;
mov L0x40008299b8 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x40008299c0; PC = 0x274877984308 *)
mov L0x40008299c0 x23;
mov L0x40008299c8 x24;
(* ldp	x5, x6, [x3]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877984312 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x3, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877984316 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x3, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877984320 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000012e80 <__add_mod_384x384>            #! PC = 0x274877984324 *)
#bl	0x4000012e80 <__add_mod_384x384>            #! 0x274877984324 = 0x274877984324;
(* ldp	x11, x12, [x1]                              #! EA = L0x4000829da8; Value = 0x836519e12fffba00; PC = 0x274877984384 *)
mov x11 L0x4000829da8;
mov x12 L0x4000829db0;
(* ldp	x19, x20, [x2]                              #! EA = L0x4000829f28; Value = 0x0000000000000000; PC = 0x274877984388 *)
mov x19 L0x4000829f28;
mov x20 L0x4000829f30;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x4000829db8; Value = 0x6330224fb2222940; PC = 0x274877984392 *)
mov x13 L0x4000829db8;
mov x14 L0x4000829dc0;
(* adds	x11, x11, x19                              #! PC = 0x274877984396 *)
adds carry x11 x11 x19;
(* ldp	x21, x22, [x2, #16]                         #! EA = L0x4000829f38; Value = 0x41692ad9c1f81000; PC = 0x274877984400 *)
mov x21 L0x4000829f38;
mov x22 L0x4000829f40;
(* adcs	x12, x12, x20                              #! PC = 0x274877984404 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x4000829dc8; Value = 0x2f65b23adb954940; PC = 0x274877984408 *)
mov x15 L0x4000829dc8;
mov x16 L0x4000829dd0;
(* adcs	x13, x13, x21                              #! PC = 0x274877984412 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #32]                         #! EA = L0x4000829f48; Value = 0x4281815ad547e080; PC = 0x274877984416 *)
mov x23 L0x4000829f48;
mov x24 L0x4000829f50;
(* adcs	x14, x14, x22                              #! PC = 0x274877984420 *)
adcs carry x14 x14 x22 carry;
(* stp	x11, x12, [x0]                              #! EA = L0x400082a228; PC = 0x274877984424 *)
mov L0x400082a228 x11;
mov L0x400082a230 x12;
(* adcs	x15, x15, x23                              #! PC = 0x274877984428 *)
adcs carry x15 x15 x23 carry;
(* ldp	x11, x12, [x1, #48]                         #! EA = L0x4000829dd8; Value = 0x62d696e87a789771; PC = 0x274877984432 *)
mov x11 L0x4000829dd8;
mov x12 L0x4000829de0;
(* adcs	x16, x16, x24                              #! PC = 0x274877984436 *)
adcs carry x16 x16 x24 carry;
(* ldp	x19, x20, [x2, #48]                         #! EA = L0x4000829f58; Value = 0x850cbcc9ffd77778; PC = 0x274877984440 *)
mov x19 L0x4000829f58;
mov x20 L0x4000829f60;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082a238; PC = 0x274877984444 *)
mov L0x400082a238 x13;
mov L0x400082a240 x14;
(* ldp	x13, x14, [x1, #64]                         #! EA = L0x4000829de8; Value = 0x000000400082dfe8; PC = 0x274877984448 *)
mov x13 L0x4000829de8;
mov x14 L0x4000829df0;
(* ldp	x21, x22, [x2, #64]                         #! EA = L0x4000829f68; Value = 0xc7ffb492269e6d78; PC = 0x274877984452 *)
mov x21 L0x4000829f68;
mov x22 L0x4000829f70;
(* adcs	x11, x11, x19                              #! PC = 0x274877984456 *)
adcs carry x11 x11 x19 carry;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082a248; PC = 0x274877984460 *)
mov L0x400082a248 x15;
mov L0x400082a250 x16;
(* adcs	x12, x12, x20                              #! PC = 0x274877984464 *)
adcs carry x12 x12 x20 carry;
(* ldp	x15, x16, [x1, #80]                         #! EA = L0x4000829df8; Value = 0x0000000000001000; PC = 0x274877984468 *)
mov x15 L0x4000829df8;
mov x16 L0x4000829e00;
(* adcs	x13, x13, x21                              #! PC = 0x274877984472 *)
adcs carry x13 x13 x21 carry;
(* ldp	x23, x24, [x2, #80]                         #! EA = L0x4000829f78; Value = 0x85237479841202c0; PC = 0x274877984476 *)
mov x23 L0x4000829f78;
mov x24 L0x4000829f80;
(* adcs	x14, x14, x22                              #! PC = 0x274877984480 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877984484 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877984488 *)
adcs carry x16 x16 x24 carry;
(* adc	x17, xzr, xzr                               #! PC = 0x274877984492 *)
adc x17 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877984496 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877984500 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877984504 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877984508 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877984512 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877984516 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x17, xzr                              #! PC = 0x274877984520 *)
sbcs carry dontcare x17 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877984524 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877984528 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877984532 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877984536 *)
cmov x14 carry x22 x14;
(* stp	x11, x12, [x0, #48]                         #! EA = L0x400082a258; PC = 0x274877984540 *)
mov L0x400082a258 x11;
mov L0x400082a260 x12;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877984544 *)
cmov x15 carry x23 x15;
(* stp	x13, x14, [x0, #64]                         #! EA = L0x400082a268; PC = 0x274877984548 *)
mov L0x400082a268 x13;
mov L0x400082a270 x14;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877984552 *)
cmov x16 carry x24 x16;
(* stp	x15, x16, [x0, #80]                         #! EA = L0x400082a278; PC = 0x274877984556 *)
mov L0x400082a278 x15;
mov L0x400082a280 x16;
(* #ret                                            #! PC = 0x274877984560 *)
#ret                                            #! 0x274877984560 = 0x274877984560;
(* ldr	x30, [x29, #8]                              #! EA = L0x4000829998; Value = 0x002700400000b858; PC = 0x274877984328 *)
mov x30 L0x4000829998;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x40008299a0; Value = 0x0000004000016928; PC = 0x274877984332 *)
mov x19 L0x40008299a0;
mov x20 L0x40008299a8;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x40008299b0; Value = 0x000000400082a228; PC = 0x274877984336 *)
mov x21 L0x40008299b0;
mov x22 L0x40008299b8;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x40008299c0; Value = 0x000000400082a168; PC = 0x274877984340 *)
mov x23 L0x40008299c0;
mov x24 L0x40008299c8;
(* ldr	x29, [sp], #64                              #! EA = L0x4000829990; Value = 0x00000040008299d0; PC = 0x274877984344 *)
mov x29 L0x4000829990;
(* #autiasp                                         #! PC = 0x274877984348 *)
#autiasp                                         #! 0x274877984348 = 0x274877984348;
(* #ret                                            #! PC = 0x274877984352 *)
#ret                                            #! 0x274877984352 = 0x274877984352;

(* add_fp2x2(rx[2], t0[2], t1[1]) *)

assert true
    && and [eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                             L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                             L0x400082a1f8, L0x400082a200, L0x400082a208,
                             L0x400082a210, L0x400082a218, L0x400082a220])
                  (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                             L0x4000829d60, L0x4000829d68, L0x4000829d70, 
                             L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                             L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                   limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                             L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                             L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                             L0x4000829f10, L0x4000829f18, L0x4000829f20])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                             L0x400082a240, L0x400082a248, L0x400082a250,
                             L0x400082a258, L0x400082a260, L0x400082a268,
                             L0x400082a270, L0x400082a278, L0x400082a280])
                  (limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                             L0x4000829dc0, L0x4000829dc8, L0x4000829dd0, 
                             L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                             L0x4000829df0, L0x4000829df8, L0x4000829e00] +
                   limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                             L0x4000829f40, L0x4000829f48, L0x4000829f50,
                             L0x4000829f58, L0x4000829f60, L0x4000829f68,
                             L0x4000829f70, L0x4000829f78, L0x4000829f80])
                  (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                             m0, m1, m2, m3, m4, m5])];

assume and [eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                             L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                             L0x400082a1f8, L0x400082a200, L0x400082a208,
                             L0x400082a210, L0x400082a218, L0x400082a220])
                  (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                             L0x4000829d60, L0x4000829d68, L0x4000829d70, 
                             L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                             L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                   limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                             L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                             L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                             L0x4000829f10, L0x4000829f18, L0x4000829f20])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                             L0x400082a240, L0x400082a248, L0x400082a250,
                             L0x400082a258, L0x400082a260, L0x400082a268,
                             L0x400082a270, L0x400082a278, L0x400082a280])
                  (limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                             L0x4000829dc0, L0x4000829dc8, L0x4000829dd0, 
                             L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                             L0x4000829df0, L0x4000829df8, L0x4000829e00] +
                   limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                             L0x4000829f40, L0x4000829f48, L0x4000829f50,
                             L0x4000829f58, L0x4000829f60, L0x4000829f68,
                             L0x4000829f70, L0x4000829f78, L0x4000829f80])
                  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])]
    && true;

(* mov	x3, x27                                     #! PC = 0x274877954136 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877954140 *)
mov x2 x19;
(* mov	x1, x25                                     #! PC = 0x274877954144 *)
mov x1 x25;
(* mov	x0, x28                                     #! PC = 0x274877954148 *)
mov x0 x28;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877954152 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877954152 = 0x274877954152;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [rx00r, rx01r, rx02r, rx03r,rx04r, rx05r,
                          rx10r, rx11r, rx12r, rx13r,rx14r, rx15r] +
                limbs 64 [rx20r, rx21r, rx22r, rx23r,rx24r, rx25r,
                          rx30r, rx31r, rx32r, rx33r,rx34r, rx35r] * U)
               ((limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                           L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                           L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                           L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                 limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                           L0x400082a000, L0x400082a008, L0x400082a010,
                           L0x400082a018, L0x400082a020, L0x400082a028,
                           L0x400082a030, L0x400082a038, L0x400082a040] * U) *
                (1 + U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                          L0x400082a060, L0x400082a068, L0x400082a070,
                          L0x400082a078, L0x400082a080, L0x400082a088,
                          L0x400082a090, L0x400082a098, L0x400082a0a0] +
                limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                          L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                          L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                          L0x400082a0f0, L0x400082a0f8, L0x400082a100] * U)
               (limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                          L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                          L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                          L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                          L0x4000829c40, L0x4000829c48, L0x4000829c50,
                          L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                          L0x4000829c70, L0x4000829c78, L0x4000829c80] * U +
                limbs 64 [rx00r, rx01r, rx02r, rx03r, rx04r, rx05r,
                          rx10r, rx11r, rx12r, rx13r, rx14r, rx15r] +
                limbs 64 [rx20r, rx21r, rx22r, rx23r, rx24r, rx25r,
                          rx30r, rx31r, rx32r, rx33r, rx34r, rx35r] * U)
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                          L0x400082a120, L0x400082a128, L0x400082a130,
                          L0x400082a138, L0x400082a140, L0x400082a148,
                          L0x400082a150, L0x400082a158, L0x400082a160] +
                limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                          L0x400082a180, L0x400082a188, L0x400082a190,
                          L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                          L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] * U)
               (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                          L0x4000829ca0, L0x4000829ca8, L0x4000829cb0, 
                          L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                          L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                          L0x4000829d00, L0x4000829d08, L0x4000829d10, 
                          L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                          L0x4000829d30, L0x4000829d38, L0x4000829d40] * U +
                limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                          L0x4000829e20, L0x4000829e28, L0x4000829e30,
                          L0x4000829e38, L0x4000829e40, L0x4000829e48,
                          L0x4000829e50, L0x4000829e58, L0x4000829e60] +
                limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                          L0x4000829e80, L0x4000829e88, L0x4000829e90,
                          L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                          L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] * U)
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                          L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                          L0x400082a1f8, L0x400082a200, L0x400082a208,
                          L0x400082a210, L0x400082a218, L0x400082a220] +
                limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                          L0x400082a240, L0x400082a248, L0x400082a250,
                          L0x400082a258, L0x400082a260, L0x400082a268,
                          L0x400082a270, L0x400082a278, L0x400082a280] * U)
               (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                          L0x4000829d60, L0x4000829d68, L0x4000829d70, 
                          L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                          L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                          L0x4000829dc0, L0x4000829dc8, L0x4000829dd0, 
                          L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                          L0x4000829df0, L0x4000829df8, L0x4000829e00] * U +
                limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                          L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                          L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                          L0x4000829f10, L0x4000829f18, L0x4000829f20] +
                limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                          L0x4000829f40, L0x4000829f48, L0x4000829f50,
                          L0x4000829f58, L0x4000829f60, L0x4000829f68,
                          L0x4000829f70, L0x4000829f78, L0x4000829f80] * U)
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
    prove with precondition
 && and [limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                   L0x400082a210, L0x400082a218, L0x400082a220] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                   L0x400082a270, L0x400082a278, L0x400082a280] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],

         1@64 + m0 * x3 = 0@64,

         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a048; Value = 0x1745e7485c70d900; PC = 0x274877988288 *)
mov x11 L0x400082a048;
mov x12 L0x400082a050;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a058; Value = 0xb3467cc854eb02ff; PC = 0x274877988292 *)
mov x13 L0x400082a058;
mov x14 L0x400082a060;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a068; Value = 0x0bfcc4d2caec3f0e; PC = 0x274877988300 *)
mov x15 L0x400082a068;
mov x16 L0x400082a070;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                    L0x400082a090, L0x400082a098, L0x400082a0a0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a078; Value = 0x8d916ea89c384811; PC = 0x274877988928 *)
mov x19 L0x400082a078;
mov x20 L0x400082a080;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a088; Value = 0x97f324b6363574bb; PC = 0x274877988932 *)
mov x21 L0x400082a088;
mov x22 L0x400082a090;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a098; Value = 0xa54cb8bcd2d16f7e; PC = 0x274877988936 *)
mov x23 L0x400082a098;
mov x24 L0x400082a0a0;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082aa78; PC = 0x274877989020 *)
mov L0x400082aa78 x11;
mov L0x400082aa80 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082aa88; PC = 0x274877989024 *)
mov L0x400082aa88 x13;
mov L0x400082aa90 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082aa98; PC = 0x274877989028 *)
mov L0x400082aa98 x15;
mov L0x400082aaa0 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082aa78, L0x400082aa80, L0x400082aa88,
                        L0x400082aa90, L0x400082aa98, L0x400082aaa0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                        L0x400082a090, L0x400082a098, L0x400082a0a0])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082aa78, L0x400082aa80, L0x400082aa88,
                        L0x400082aa90, L0x400082aa98, L0x400082aaa0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a078, L0x400082a080, L0x400082a088,
                        L0x400082a090, L0x400082a098, L0x400082a0a0])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x000a00400000b86c; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877954156 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877954160 *)
mov x2 x19;
(* mov	x1, x20                                     #! PC = 0x274877954164 *)
mov x1 x20;
(* add	x0, x28, #0x30                              #! PC = 0x274877954168 *)
adds dontcare x0 x28 0x30@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877954172 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877954172 = 0x274877954172;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082aa78, L0x400082aa80, L0x400082aa88,
                          L0x400082aa90, L0x400082aa98, L0x400082aaa0])
               (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                          L0x400082a060, L0x400082a068, L0x400082a070,
                          L0x400082a078, L0x400082a080, L0x400082a088,
                          L0x400082a090, L0x400082a098, L0x400082a0a0])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082aa78, L0x400082aa80, L0x400082aa88,
                   L0x400082aa90, L0x400082aa98, L0x400082aaa0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a0a8; Value = 0x21ec20fce391c080; PC = 0x274877988288 *)
mov x11 L0x400082a0a8;
mov x12 L0x400082a0b0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a0b8; Value = 0xe539a8953f0a7dc0; PC = 0x274877988292 *)
mov x13 L0x400082a0b8;
mov x14 L0x400082a0c0;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a0c8; Value = 0x7c826aaa77dbe721; PC = 0x274877988300 *)
mov x15 L0x400082a0c8;
mov x16 L0x400082a0d0;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                    L0x400082a0f0, L0x400082a0f8, L0x400082a100] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a0d8; Value = 0x7599e5f4b95827b3; PC = 0x274877988928 *)
mov x19 L0x400082a0d8;
mov x20 L0x400082a0e0;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a0e8; Value = 0xf7be3967b4c552b9; PC = 0x274877988932 *)
mov x21 L0x400082a0e8;
mov x22 L0x400082a0f0;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a0f8; Value = 0x1fe9ccaad02ec391; PC = 0x274877988936 *)
mov x23 L0x400082a0f8;
mov x24 L0x400082a100;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082aaa8; PC = 0x274877989020 *)
mov L0x400082aaa8 x11;
mov L0x400082aab0 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082aab8; PC = 0x274877989024 *)
mov L0x400082aab8 x13;
mov L0x400082aac0 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082aac8; PC = 0x274877989028 *)
mov L0x400082aac8 x15;
mov L0x400082aad0 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082aaa8, L0x400082aab0, L0x400082aab8,
                        L0x400082aac0, L0x400082aac8, L0x400082aad0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                        L0x400082a0f0, L0x400082a0f8, L0x400082a100])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082aaa8, L0x400082aab0, L0x400082aab8,
                        L0x400082aac0, L0x400082aac8, L0x400082aad0])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                        L0x400082a0f0, L0x400082a0f8, L0x400082a100])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x002900400000b880; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877954176 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877954180 *)
mov x2 x19;
(* mov	x1, x24                                     #! PC = 0x274877954184 *)
mov x1 x24;
(* add	x0, x28, #0x60                              #! PC = 0x274877954188 *)
adds dontcare x0 x28 0x60@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877954192 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877954192 = 0x274877954192;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082aaa8, L0x400082aab0, L0x400082aab8,
                          L0x400082aac0, L0x400082aac8, L0x400082aad0])
               (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                          L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                          L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                          L0x400082a0f0, L0x400082a0f8, L0x400082a100])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082aaa8, L0x400082aab0, L0x400082aab8,
                   L0x400082aac0, L0x400082aac8, L0x400082aad0] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a108; Value = 0x39a0f70fcbd62680; PC = 0x274877988288 *)
mov x11 L0x400082a108;
mov x12 L0x400082a110;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a118; Value = 0x384ec41773dc447f; PC = 0x274877988292 *)
mov x13 L0x400082a118;
mov x14 L0x400082a120;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a128; Value = 0x8ba8c61d5f1bba3e; PC = 0x274877988300 *)
mov x15 L0x400082a128;
mov x16 L0x400082a130;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                    L0x400082a150, L0x400082a158, L0x400082a160] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a138; Value = 0xfa8c1e92e4d69548; PC = 0x274877988928 *)
mov x19 L0x400082a138;
mov x20 L0x400082a140;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a148; Value = 0xc0a01dcf75fc528a; PC = 0x274877988932 *)
mov x21 L0x400082a148;
mov x22 L0x400082a150;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a158; Value = 0xc536c3682291d78f; PC = 0x274877988936 *)
mov x23 L0x400082a158;
mov x24 L0x400082a160;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082aad8; PC = 0x274877989020 *)
mov L0x400082aad8 x11;
mov L0x400082aae0 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082aae8; PC = 0x274877989024 *)
mov L0x400082aae8 x13;
mov L0x400082aaf0 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082aaf8; PC = 0x274877989028 *)
mov L0x400082aaf8 x15;
mov L0x400082ab00 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082aad8, L0x400082aae0, L0x400082aae8,
                        L0x400082aaf0, L0x400082aaf8, L0x400082ab00])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                        L0x400082a150, L0x400082a158, L0x400082a160])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082aad8, L0x400082aae0, L0x400082aae8,
                        L0x400082aaf0, L0x400082aaf8, L0x400082ab00])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a138, L0x400082a140, L0x400082a148,
                        L0x400082a150, L0x400082a158, L0x400082a160])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x004900400000b894; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082aad8, L0x400082aae0, L0x400082aae8,
                          L0x400082aaf0, L0x400082aaf8, L0x400082ab00])
               (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                          L0x400082a120, L0x400082a128, L0x400082a130,
                          L0x400082a138, L0x400082a140, L0x400082a148,
                          L0x400082a150, L0x400082a158, L0x400082a160])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082aad8, L0x400082aae0, L0x400082aae8,
                   L0x400082aaf0, L0x400082aaf8, L0x400082ab00] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* mov	x3, x27                                     #! PC = 0x274877954196 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877954200 *)
mov x2 x19;
(* mov	x1, x23                                     #! PC = 0x274877954204 *)
mov x1 x23;
(* add	x0, x28, #0x90                              #! PC = 0x274877954208 *)
adds dontcare x0 x28 0x90@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877954212 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877954212 = 0x274877954212;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a168; Value = 0x6336672e1302db40; PC = 0x274877988288 *)
mov x11 L0x400082a168;
mov x12 L0x400082a170;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a178; Value = 0x8cd28c400aee64e1; PC = 0x274877988292 *)
mov x13 L0x400082a178;
mov x14 L0x400082a180;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a188; Value = 0x56557d1522cd39c1; PC = 0x274877988300 *)
mov x15 L0x400082a188;
mov x16 L0x400082a190;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                    L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a198; Value = 0x1c30e39d03bd2d2c; PC = 0x274877988928 *)
mov x19 L0x400082a198;
mov x20 L0x400082a1a0;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a1a8; Value = 0x5c3b340c585dfa5a; PC = 0x274877988932 *)
mov x21 L0x400082a1a8;
mov x22 L0x400082a1b0;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a1b8; Value = 0xa515cf6487f0c6b1; PC = 0x274877988936 *)
mov x23 L0x400082a1b8;
mov x24 L0x400082a1c0;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ab08; PC = 0x274877989020 *)
mov L0x400082ab08 x11;
mov L0x400082ab10 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ab18; PC = 0x274877989024 *)
mov L0x400082ab18 x13;
mov L0x400082ab20 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082ab28; PC = 0x274877989028 *)
mov L0x400082ab28 x15;
mov L0x400082ab30 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ab08, L0x400082ab10, L0x400082ab18,
                        L0x400082ab20, L0x400082ab28, L0x400082ab30])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                        L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ab08, L0x400082ab10, L0x400082ab18,
                        L0x400082ab20, L0x400082ab28, L0x400082ab30])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                        L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x005a00400000b8a8; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082ab08, L0x400082ab10, L0x400082ab18,
                          L0x400082ab20, L0x400082ab28, L0x400082ab30])
               (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                          L0x400082a180, L0x400082a188, L0x400082a190,
                          L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                          L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082ab08, L0x400082ab10, L0x400082ab18,
                   L0x400082ab20, L0x400082ab28, L0x400082ab30] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* mov	x3, x27                                     #! PC = 0x274877954216 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877954220 *)
mov x2 x19;
(* mov	x1, x22                                     #! PC = 0x274877954224 *)
mov x1 x22;
(* add	x0, x28, #0xc0                              #! PC = 0x274877954228 *)
adds dontcare x0 x28 0xc0@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877954232 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877954232 = 0x274877954232;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;
(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a1c8; Value = 0xdef43a48ab390900; PC = 0x274877988288 *)
mov x11 L0x400082a1c8;
mov x12 L0x400082a1d0;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a1d8; Value = 0xbdd0e591ababaf7f; PC = 0x274877988292 *)
mov x13 L0x400082a1d8;
mov x14 L0x400082a1e0;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a1e8; Value = 0xf766794a0383203e; PC = 0x274877988300 *)
mov x15 L0x400082a1e8;
mov x16 L0x400082a1f0;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                    L0x400082a210, L0x400082a218, L0x400082a220] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a1f8; Value = 0xb8ca4d3f2ddf876b; PC = 0x274877988928 *)
mov x19 L0x400082a1f8;
mov x20 L0x400082a200;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a208; Value = 0xa8931d2c8c2da96b; PC = 0x274877988932 *)
mov x21 L0x400082a208;
mov x22 L0x400082a210;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a218; Value = 0x4a59f22116d943ef; PC = 0x274877988936 *)
mov x23 L0x400082a218;
mov x24 L0x400082a220;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ab38; PC = 0x274877989020 *)
mov L0x400082ab38 x11;
mov L0x400082ab40 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ab48; PC = 0x274877989024 *)
mov L0x400082ab48 x13;
mov L0x400082ab50 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082ab58; PC = 0x274877989028 *)
mov L0x400082ab58 x15;
mov L0x400082ab60 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ab38, L0x400082ab40, L0x400082ab48,
                        L0x400082ab50, L0x400082ab58, L0x400082ab60])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                        L0x400082a210, L0x400082a218, L0x400082a220])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ab38, L0x400082ab40, L0x400082ab48,
                        L0x400082ab50, L0x400082ab58, L0x400082ab60])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a1f8, L0x400082a200, L0x400082a208,
                        L0x400082a210, L0x400082a218, L0x400082a220])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x007000400000b8bc; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;
(* mov	x3, x27                                     #! PC = 0x274877954236 *)
mov x3 x27;
(* mov	x2, x19                                     #! PC = 0x274877954240 *)
mov x2 x19;
(* mov	x1, x21                                     #! PC = 0x274877954244 *)
mov x1 x21;
(* add	x0, x28, #0xf0                              #! PC = 0x274877954248 *)
adds dontcare x0 x28 0xf0@uint64;
(* #bl	0x4000013cc0 <redc_mont_384>                #! PC = 0x274877954252 *)
#bl	0x4000013cc0 <redc_mont_384>                #! 0x274877954252 = 0x274877954252;
(* #paciasp                                         #! PC = 0x274877988032 *)
#paciasp                                         #! 0x274877988032 = 0x274877988032;

cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x400082ab38, L0x400082ab40, L0x400082ab48,
                          L0x400082ab50, L0x400082ab58, L0x400082ab60])
               (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                          L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                          L0x400082a1f8, L0x400082a200, L0x400082a208,
                          L0x400082a210, L0x400082a218, L0x400082a220])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (1 + m0 * x3) 0 (2**64),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x400082ab38, L0x400082ab40, L0x400082ab48,
                   L0x400082ab50, L0x400082ab58, L0x400082ab60] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         1@64 + m0 * x3 = 0@64,
 
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64];

(* stp	x29, x30, [sp, #-128]!                      #! EA = L0x4000829950; PC = 0x274877988036 *)
mov L0x4000829950 x29;
mov L0x4000829958 x30;
(* mov	x29, sp                                     #! PC = 0x274877988040 *)
mov x29 sp;
(* stp	x19, x20, [sp, #16]                         #! EA = L0x4000829960; PC = 0x274877988044 *)
mov L0x4000829960 x19;
mov L0x4000829968 x20;
(* stp	x21, x22, [sp, #32]                         #! EA = L0x4000829970; PC = 0x274877988048 *)
mov L0x4000829970 x21;
mov L0x4000829978 x22;
(* stp	x23, x24, [sp, #48]                         #! EA = L0x4000829980; PC = 0x274877988052 *)
mov L0x4000829980 x23;
mov L0x4000829988 x24;
(* stp	x25, x26, [sp, #64]                         #! EA = L0x4000829990; PC = 0x274877988056 *)
mov L0x4000829990 x25;
mov L0x4000829998 x26;
(* stp	x27, x28, [sp, #80]                         #! EA = L0x40008299a0; PC = 0x274877988060 *)
mov L0x40008299a0 x27;
mov L0x40008299a8 x28;
(* mov	x4, x3                                      #! PC = 0x274877988064 *)
mov x4 x3;
(* ldp	x5, x6, [x2]                                #! EA = L0x4000016928; Value = 0xb9feffffffffaaab; PC = 0x274877988068 *)
mov x5 L0x4000016928;
mov x6 L0x4000016930;
(* ldp	x7, x8, [x2, #16]                           #! EA = L0x4000016938; Value = 0x6730d2a0f6b0f624; PC = 0x274877988072 *)
mov x7 L0x4000016938;
mov x8 L0x4000016940;
(* ldp	x9, x10, [x2, #32]                          #! EA = L0x4000016948; Value = 0x4b1ba7b6434bacd7; PC = 0x274877988076 *)
mov x9 L0x4000016948;
mov x10 L0x4000016950;
(* #bl	0x4000013dc0 <__mul_by_1_mont_384>          #! PC = 0x274877988080 *)
#bl	0x4000013dc0 <__mul_by_1_mont_384>          #! 0x274877988080 = 0x274877988080;
(* ldp	x11, x12, [x1]                              #! EA = L0x400082a228; Value = 0x836519e12fffba00; PC = 0x274877988288 *)
mov x11 L0x400082a228;
mov x12 L0x400082a230;
(* ldp	x13, x14, [x1, #16]                         #! EA = L0x400082a238; Value = 0xa4994d29741a3940; PC = 0x274877988292 *)
mov x13 L0x400082a238;
mov x14 L0x400082a240;
(* mul	x26, x4, x11                                #! PC = 0x274877988296 *)
mull mulHx4x11 x26 x4 x11;
(* ldp	x15, x16, [x1, #32]                         #! EA = L0x400082a248; Value = 0x71e73395b0dd29c1; PC = 0x274877988300 *)
mov x15 L0x400082a248;
mov x16 L0x400082a250;
(* mul	x20, x6, x26                                #! PC = 0x274877988304 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988308 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988312 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988316 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988320 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988324 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988328 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988332 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988336 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988340 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988344 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988348 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988352 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988356 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988360 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988364 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988368 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988372 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988376 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988380 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988384 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988388 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988392 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988396 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988400 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988404 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988408 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988412 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988416 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988420 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988424 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988428 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988432 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988436 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988440 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988444 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988448 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988452 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988456 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988460 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988464 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988468 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988472 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988476 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988480 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988484 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988488 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988492 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988496 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988500 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988504 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988508 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988512 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988516 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988520 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988524 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988528 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988532 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988536 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988540 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988544 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988548 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988552 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988556 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988560 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988564 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988568 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988572 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988576 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988580 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988584 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988588 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988592 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988596 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988600 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988604 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988608 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988612 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988616 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988620 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988624 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988628 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988632 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988636 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988640 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988644 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988648 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988652 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988656 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988660 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988664 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988668 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988672 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988676 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988680 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988684 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988688 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988692 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988696 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988700 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988704 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988708 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988712 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988716 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988720 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988724 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988728 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988732 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988736 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988740 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988744 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988748 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988752 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988756 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988760 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988764 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988768 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988772 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988776 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988780 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988784 *)
adcs carry x13 x13 x22 carry;
(* mul	x26, x4, x11                                #! PC = 0x274877988788 *)
mull mulHx4x11 x26 x4 x11;
(* adcs	x14, x14, x23                              #! PC = 0x274877988792 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988796 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988800 *)
adc x16 x16 x25 carry;
(* mul	x20, x6, x26                                #! PC = 0x274877988804 *)
mull mulHx6x26 x20 x6 x26;
(* mul	x21, x7, x26                                #! PC = 0x274877988808 *)
mull mulHx7x26 x21 x7 x26;
(* mul	x22, x8, x26                                #! PC = 0x274877988812 *)
mull mulHx8x26 x22 x8 x26;
(* mul	x23, x9, x26                                #! PC = 0x274877988816 *)
mull mulHx9x26 x23 x9 x26;
(* mul	x24, x10, x26                               #! PC = 0x274877988820 *)
mull mulHx10x26 x24 x10 x26;
(* cmp	x11, #0x1                                   #! PC = 0x274877988824 *)
subc carry dontcare x11 1@uint64;
(* umulh	x11, x5, x26                              #! PC = 0x274877988828 *)
(* mov x11 mulHx5x26; *)
mull x11new mulLx5x26 x5 x26;
adds mycarry zeros mulLx5x26 x11;
assert eqmod zeros 0 (2**64) && true;
assume zeros=0 && zeros=0@64;
assert true && mycarry=carry;
assume mycarry=carry && true;
mov x11 x11new;
(* adcs	x20, x20, x12                              #! PC = 0x274877988832 *)
adcs carry x20 x20 x12 carry;
(* umulh	x12, x6, x26                              #! PC = 0x274877988836 *)
mov x12 mulHx6x26;
(* adcs	x21, x21, x13                              #! PC = 0x274877988840 *)
adcs carry x21 x21 x13 carry;
(* umulh	x13, x7, x26                              #! PC = 0x274877988844 *)
mov x13 mulHx7x26;
(* adcs	x22, x22, x14                              #! PC = 0x274877988848 *)
adcs carry x22 x22 x14 carry;
(* umulh	x14, x8, x26                              #! PC = 0x274877988852 *)
mov x14 mulHx8x26;
(* adcs	x23, x23, x15                              #! PC = 0x274877988856 *)
adcs carry x23 x23 x15 carry;
(* umulh	x15, x9, x26                              #! PC = 0x274877988860 *)
mov x15 mulHx9x26;
(* adcs	x24, x24, x16                              #! PC = 0x274877988864 *)
adcs carry x24 x24 x16 carry;
(* umulh	x16, x10, x26                             #! PC = 0x274877988868 *)
mov x16 mulHx10x26;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988872 *)
adc x25 0@uint64 0@uint64 carry;
(* adds	x11, x11, x20                              #! PC = 0x274877988876 *)
adds carry x11 x11 x20;
(* adcs	x12, x12, x21                              #! PC = 0x274877988880 *)
adcs carry x12 x12 x21 carry;
(* adcs	x13, x13, x22                              #! PC = 0x274877988884 *)
adcs carry x13 x13 x22 carry;
(* adcs	x14, x14, x23                              #! PC = 0x274877988888 *)
adcs carry x14 x14 x23 carry;
(* adcs	x15, x15, x24                              #! PC = 0x274877988892 *)
adcs carry x15 x15 x24 carry;
(* adc	x16, x16, x25                               #! PC = 0x274877988896 *)
adc x16 x16 x25 carry;
(* #ret                                            #! PC = 0x274877988900 *)
#ret                                            #! 0x274877988900 = 0x274877988900;

rcut and [limbs 64 [x11, x12, x13, x14, x15, x16] <=u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                    L0x400082a270, L0x400082a278, L0x400082a280] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          1@64 + m0 * x3 = 0@64,
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
     prove with all cuts;

mov x11o x11; mov x12o x12; mov x13o x13;
mov x14o x14; mov x15o x15; mov x16o x16;

(* #bl	0x4000014040 <__redc_tail_mont_384>         #! PC = 0x274877988084 *)
#bl	0x4000014040 <__redc_tail_mont_384>         #! 0x274877988084 = 0x274877988084;
(* ldp	x19, x20, [x1, #48]                         #! EA = L0x400082a258; Value = 0xe7e353b27a500ee9; PC = 0x274877988928 *)
mov x19 L0x400082a258;
mov x20 L0x400082a260;
(* ldp	x21, x22, [x1, #64]                         #! EA = L0x400082a268; Value = 0xc7ffb4d227214d60; PC = 0x274877988932 *)
mov x21 L0x400082a268;
mov x22 L0x400082a270;
(* ldp	x23, x24, [x1, #80]                         #! EA = L0x400082a278; Value = 0x85237479841212c1; PC = 0x274877988936 *)
mov x23 L0x400082a278;
mov x24 L0x400082a280;
(* adds	x11, x11, x19                              #! PC = 0x274877988940 *)
adds carry x11 x11 x19;
(* adcs	x12, x12, x20                              #! PC = 0x274877988944 *)
adcs carry x12 x12 x20 carry;
(* adcs	x13, x13, x21                              #! PC = 0x274877988948 *)
adcs carry x13 x13 x21 carry;
(* adcs	x14, x14, x22                              #! PC = 0x274877988952 *)
adcs carry x14 x14 x22 carry;
(* adcs	x15, x15, x23                              #! PC = 0x274877988956 *)
adcs carry x15 x15 x23 carry;
(* adcs	x16, x16, x24                              #! PC = 0x274877988960 *)
adcs carry x16 x16 x24 carry;
(* adc	x25, xzr, xzr                               #! PC = 0x274877988964 *)
adc x25 0@uint64 0@uint64 carry;
(* subs	x19, x11, x5                               #! PC = 0x274877988968 *)
subc carry x19 x11 x5;
(* sbcs	x20, x12, x6                               #! PC = 0x274877988972 *)
sbcs carry x20 x12 x6 carry;
(* sbcs	x21, x13, x7                               #! PC = 0x274877988976 *)
sbcs carry x21 x13 x7 carry;
(* sbcs	x22, x14, x8                               #! PC = 0x274877988980 *)
sbcs carry x22 x14 x8 carry;
(* sbcs	x23, x15, x9                               #! PC = 0x274877988984 *)
sbcs carry x23 x15 x9 carry;
(* sbcs	x24, x16, x10                              #! PC = 0x274877988988 *)
sbcs carry x24 x16 x10 carry;
(* sbcs	xzr, x25, xzr                              #! PC = 0x274877988992 *)
sbcs carry dontcare x25 0@uint64 carry;
(* csel	x11, x11, x19, cc  // cc = lo, ul, last    #! PC = 0x274877988996 *)
cmov x11 carry x19 x11;
(* csel	x12, x12, x20, cc  // cc = lo, ul, last    #! PC = 0x274877989000 *)
cmov x12 carry x20 x12;
(* csel	x13, x13, x21, cc  // cc = lo, ul, last    #! PC = 0x274877989004 *)
cmov x13 carry x21 x13;
(* csel	x14, x14, x22, cc  // cc = lo, ul, last    #! PC = 0x274877989008 *)
cmov x14 carry x22 x14;
(* csel	x15, x15, x23, cc  // cc = lo, ul, last    #! PC = 0x274877989012 *)
cmov x15 carry x23 x15;
(* csel	x16, x16, x24, cc  // cc = lo, ul, last    #! PC = 0x274877989016 *)
cmov x16 carry x24 x16;
(* stp	x11, x12, [x0]                              #! EA = L0x400082ab68; PC = 0x274877989020 *)
mov L0x400082ab68 x11;
mov L0x400082ab70 x12;
(* stp	x13, x14, [x0, #16]                         #! EA = L0x400082ab78; PC = 0x274877989024 *)
mov L0x400082ab78 x13;
mov L0x400082ab80 x14;
(* stp	x15, x16, [x0, #32]                         #! EA = L0x400082ab88; PC = 0x274877989028 *)
mov L0x400082ab88 x15;
mov L0x400082ab90 x16;
(* #ret                                            #! PC = 0x274877989032 *)
#ret                                            #! 0x274877989032 = 0x274877989032;

assert true
    && eqmod (limbs 64 [L0x400082ab68, L0x400082ab70, L0x400082ab78,
                        L0x400082ab80, L0x400082ab88, L0x400082ab90])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                        L0x400082a270, L0x400082a278, L0x400082a280])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x400082ab68, L0x400082ab70, L0x400082ab78,
                        L0x400082ab80, L0x400082ab88, L0x400082ab90])
             (limbs 64 [x11o, x12o, x13o, x14o, x15o, x16o] +
              limbs 64 [L0x400082a258, L0x400082a260, L0x400082a268,
                        L0x400082a270, L0x400082a278, L0x400082a280])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* ldr	x30, [x29, #8]                              #! EA = L0x4000829958; Value = 0x002000400000b8d0; PC = 0x274877988088 *)
mov x30 L0x4000829958;
(* ldp	x19, x20, [x29, #16]                        #! EA = L0x4000829960; Value = 0x0000004000016928; PC = 0x274877988092 *)
mov x19 L0x4000829960;
mov x20 L0x4000829968;
(* ldp	x21, x22, [x29, #32]                        #! EA = L0x4000829970; Value = 0x000000400082a228; PC = 0x274877988096 *)
mov x21 L0x4000829970;
mov x22 L0x4000829978;
(* ldp	x23, x24, [x29, #48]                        #! EA = L0x4000829980; Value = 0x000000400082a168; PC = 0x274877988100 *)
mov x23 L0x4000829980;
mov x24 L0x4000829988;
(* ldp	x25, x26, [x29, #64]                        #! EA = L0x4000829990; Value = 0x000000400082a048; PC = 0x274877988104 *)
mov x25 L0x4000829990;
mov x26 L0x4000829998;
(* ldp	x27, x28, [x29, #80]                        #! EA = L0x40008299a0; Value = 0x89f3fffcfffcfffd; PC = 0x274877988108 *)
mov x27 L0x40008299a0;
mov x28 L0x40008299a8;
(* ldr	x29, [sp], #128                             #! EA = L0x4000829950; Value = 0x00000040008299d0; PC = 0x274877988112 *)
mov x29 L0x4000829950;
(* #autiasp                                         #! PC = 0x274877988116 *)
#autiasp                                         #! 0x274877988116 = 0x274877988116;
(* #ret                                            #! PC = 0x274877988120 *)
#ret                                            #! 0x274877988120 = 0x274877988120;

(* redc_fp6x2(ret[0], rx) *)

ecut eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                      L0x400082ab68, L0x400082ab70, L0x400082ab78,
                      L0x400082ab80, L0x400082ab88, L0x400082ab90])
           (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                      L0x400082a240, L0x400082a248, L0x400082a250,
                      L0x400082a258, L0x400082a260, L0x400082a268,
                      L0x400082a270, L0x400082a278, L0x400082a280])
           (limbs 64 [m0, m1, m2, m3, m4, m5])
     prove with precondition;

(* ret[0] = a0*b0 + a1*b1*v *)

(* ldr	x0, [sp, #136]                              #! EA = L0x4000829a58; Value = 0x000000400085d6d0; PC = 0x274877954256 *)
mov x0 L0x4000829a58;
(* ldr	x1, [sp, #2232]                             #! EA = L0x400082a288; Value = 0x2e016ed0bbf5d500; PC = 0x274877954260 *)
mov x1 L0x400082a288;
(* ldr	x0, [x0]                                    #! EA = L0x400085d6d0; Value = 0x2e016ed0bbf5d500; PC = 0x274877954264 *)
mov x0 L0x400085d6d0;
(* eor	x0, x1, x0                                  #! PC = 0x274877954268 *)
xor x0@uint64 x1 x0;
(* #cbnz	x0, 0x400000b904 <mul_fp12+1024>          #! PC = 0x274877954272 *)
#cbnz	%%x0, 0x400000b904 <mul_fp12+1024>          #! 0x274877954272 = 0x274877954272;
(* ldp	x19, x20, [sp, #16]                         #! EA = L0x40008299e0; Value = 0x0000004000014ef8; PC = 0x274877954276 *)
mov x19 L0x40008299e0;
mov x20 L0x40008299e8;
(* ldp	x21, x22, [sp, #32]                         #! EA = L0x40008299f0; Value = 0x00000040000007c0; PC = 0x274877954280 *)
mov x21 L0x40008299f0;
mov x22 L0x40008299f8;
(* ldp	x23, x24, [sp, #48]                         #! EA = L0x4000829a00; Value = 0x0000000000000000; PC = 0x274877954284 *)
mov x23 L0x4000829a00;
mov x24 L0x4000829a08;
(* ldp	x25, x26, [sp, #64]                         #! EA = L0x4000829a10; Value = 0x0000000000000000; PC = 0x274877954288 *)
mov x25 L0x4000829a10;
mov x26 L0x4000829a18;
(* ldp	x27, x28, [sp, #80]                         #! EA = L0x4000829a20; Value = 0x0000000000000000; PC = 0x274877954292 *)
mov x27 L0x4000829a20;
mov x28 L0x4000829a28;
(* ldp	x29, x30, [sp]                              #! EA = L0x40008299d0; Value = 0x000000400082a290; PC = 0x274877954296 *)
mov x29 L0x40008299d0;
mov x30 L0x40008299d8;
(* add	sp, sp, #0x8c0                              #! PC = 0x274877954300 *)
(* adds dontcare sp sp 0x8c0@uint64; *)
(* #ret                                            #! PC = 0x274877954304 *)
#ret                                            #! 0x274877954304 = 0x274877954304;

mov c00 L0x400082aa78; mov c01 L0x400082aa80; mov c02 L0x400082aa88;
mov c03 L0x400082aa90; mov c04 L0x400082aa98; mov c05 L0x400082aaa0;
mov c10 L0x400082aaa8; mov c11 L0x400082aab0; mov c12 L0x400082aab8;
mov c13 L0x400082aac0; mov c14 L0x400082aac8; mov c15 L0x400082aad0;
mov c20 L0x400082aad8; mov c21 L0x400082aae0; mov c22 L0x400082aae8;
mov c23 L0x400082aaf0; mov c24 L0x400082aaf8; mov c25 L0x400082ab00;
mov c30 L0x400082ab08; mov c31 L0x400082ab10; mov c32 L0x400082ab18;
mov c33 L0x400082ab20; mov c34 L0x400082ab28; mov c35 L0x400082ab30;
mov c40 L0x400082ab38; mov c41 L0x400082ab40; mov c42 L0x400082ab48;
mov c43 L0x400082ab50; mov c44 L0x400082ab58; mov c45 L0x400082ab60;
mov c50 L0x400082ab68; mov c51 L0x400082ab70; mov c52 L0x400082ab78;
mov c53 L0x400082ab80; mov c54 L0x400082ab88; mov c55 L0x400082ab90;

mov c60 L0x400082ab98; mov c61 L0x400082aba0; mov c62 L0x400082aba8;
mov c63 L0x400082abb0; mov c64 L0x400082abb8; mov c65 L0x400082abc0;
mov c70 L0x400082abc8; mov c71 L0x400082abd0; mov c72 L0x400082abd8;
mov c73 L0x400082abe0; mov c74 L0x400082abe8; mov c75 L0x400082abf0;
mov c80 L0x400082abf8; mov c81 L0x400082ac00; mov c82 L0x400082ac08;
mov c83 L0x400082ac10; mov c84 L0x400082ac18; mov c85 L0x400082ac20;
mov c90 L0x400082ac28; mov c91 L0x400082ac30; mov c92 L0x400082ac38;
mov c93 L0x400082ac40; mov c94 L0x400082ac48; mov c95 L0x400082ac50;
mov ca0 L0x400082ac58; mov ca1 L0x400082ac60; mov ca2 L0x400082ac68;
mov ca3 L0x400082ac70; mov ca4 L0x400082ac78; mov ca5 L0x400082ac80;
mov cb0 L0x400082ac88; mov cb1 L0x400082ac90; mov cb2 L0x400082ac98;
mov cb3 L0x400082aca0; mov cb4 L0x400082aca8; mov cb5 L0x400082acb0;

(* summary of cuts *)

cut and [(* mul_fp6x2(t0, a[0], b[0]) *)
         eqmod (limbs 64 [LL0x4000829a48r00, LL0x4000829a50r00, LL0x4000829a58r00,
                          LL0x4000829a60r00, LL0x4000829a68r00, LL0x4000829a70r00] +
                limbs 64 [LL0x4000829a78r00, LL0x4000829a80r00, LL0x4000829a88r00,
                          LL0x4000829a90r00, LL0x4000829a98r00, LL0x4000829aa0r00] * U)
               ((limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r00, LL0x4000829ab0r00, LL0x4000829ab8r00,
                          LL0x4000829ac0r00, LL0x4000829ac8r00, LL0x4000829ad0r00] +
                limbs 64 [LL0x4000829ad8r00, LL0x4000829ae0r00, LL0x4000829ae8r00,
                          LL0x4000829af0r00, LL0x4000829af8r00, LL0x4000829b00r00] * U)
               ((limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                          L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                          L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                          L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38,
                          L0x4000829c40, L0x4000829c48, L0x4000829c50,
                          L0x4000829c58, L0x4000829c60, L0x4000829c68,
                          L0x4000829c70, L0x4000829c78, L0x4000829c80] * U)
               (((limbs 64 [LL0x4000829a48r00, LL0x4000829a50r00, LL0x4000829a58r00,
                            LL0x4000829a60r00, LL0x4000829a68r00, LL0x4000829a70r00] +
                  limbs 64 [LL0x4000829a78r00, LL0x4000829a80r00, LL0x4000829a88r00,
                            LL0x4000829a90r00, LL0x4000829a98r00, LL0x4000829aa0r00] * U) *
                 (limbs 64 [LL0x4000829aa8r00, LL0x4000829ab0r00, LL0x4000829ab8r00,
                            LL0x4000829ac0r00, LL0x4000829ac8r00, LL0x4000829ad0r00] +
                  limbs 64 [LL0x4000829ad8r00, LL0x4000829ae0r00, LL0x4000829ae8r00,
                            LL0x4000829af0r00, LL0x4000829af8r00, LL0x4000829b00r00] * U) -
                 (limbs 64 [a20, a21, a22, a23, a24, a25] +
                  limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                 (limbs 64 [b20, b21, b22, b23, b24, b25] +
                  limbs 64 [b30, b31, b32, b33, b34, b35] * U) -
                 (limbs 64 [a40, a41, a42, a43, a44, a45] +
                  limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                 (limbs 64 [b40, b41, b42, b43, b44, b45] +
                  limbs 64 [b50, b51, b52, b53, b54, b55] * U)) *
                (U + 1) +
                (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],
              
         eqmod (limbs 64 [LL0x4000829a48r10, LL0x4000829a50r10, LL0x4000829a58r10,
                          LL0x4000829a60r10, LL0x4000829a68r10, LL0x4000829a70r10] +
                limbs 64 [LL0x4000829a78r10, LL0x4000829a80r10, LL0x4000829a88r10,
                          LL0x4000829a90r10, LL0x4000829a98r10, LL0x4000829aa0r10] * U)
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                limbs 64 [a20, a21, a22, a23, a24, a25] +
                limbs 64 [a30, a31, a32, a33, a34, a35] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r10, LL0x4000829ab0r10, LL0x4000829ab8r10,
                          LL0x4000829ac0r10, LL0x4000829ac8r10, LL0x4000829ad0r10] +
                limbs 64 [LL0x4000829ad8r10, LL0x4000829ae0r10, LL0x4000829ae8r10,
                          LL0x4000829af0r10, LL0x4000829af8r10, LL0x4000829b00r10] * U)
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                limbs 64 [b20, b21, b22, b23, b24, b25] +
                limbs 64 [b30, b31, b32, b33, b34, b35] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98,
                          L0x4000829ca0, L0x4000829ca8, L0x4000829cb0,
                          L0x4000829cb8, L0x4000829cc0, L0x4000829cc8,
                          L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8,
                          L0x4000829d00, L0x4000829d08, L0x4000829d10,
                          L0x4000829d18, L0x4000829d20, L0x4000829d28,
                          L0x4000829d30, L0x4000829d38, L0x4000829d40] * U)
               ((limbs 64 [LL0x4000829a48r10, LL0x4000829a50r10, LL0x4000829a58r10,
                           LL0x4000829a60r10, LL0x4000829a68r10, LL0x4000829a70r10] +
                 limbs 64 [LL0x4000829a78r10, LL0x4000829a80r10, LL0x4000829a88r10,
                           LL0x4000829a90r10, LL0x4000829a98r10, LL0x4000829aa0r10] * U) *
                (limbs 64 [LL0x4000829aa8r10, LL0x4000829ab0r10, LL0x4000829ab8r10,
                           LL0x4000829ac0r10, LL0x4000829ac8r10, LL0x4000829ad0r10] +
                 limbs 64 [LL0x4000829ad8r10, LL0x4000829ae0r10, LL0x4000829ae8r10,
                           LL0x4000829af0r10, LL0x4000829af8r10, LL0x4000829b00r10] * U) -
                (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
                (limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                (limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U) *
                (U + 1))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],

         eqmod (limbs 64 [LL0x4000829a48r20, LL0x4000829a50r20, LL0x4000829a58r20,
                          LL0x4000829a60r20, LL0x4000829a68r20, LL0x4000829a70r20] +
                limbs 64 [LL0x4000829a78r20, LL0x4000829a80r20, LL0x4000829a88r20,
                          LL0x4000829a90r20, LL0x4000829a98r20, LL0x4000829aa0r20] * U)
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                limbs 64 [a40, a41, a42, a43, a44, a45] +
                limbs 64 [a50, a51, a52, a53, a54, a55] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r20, LL0x4000829ab0r20, LL0x4000829ab8r20,
                          LL0x4000829ac0r20, LL0x4000829ac8r20, LL0x4000829ad0r20] +
                limbs 64 [LL0x4000829ad8r20, LL0x4000829ae0r20, LL0x4000829ae8r20,
                          LL0x4000829af0r20, LL0x4000829af8r20, LL0x4000829b00r20] * U)
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                limbs 64 [b40, b41, b42, b43, b44, b45] +
                limbs 64 [b50, b51, b52, b53, b54, b55] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58,
                          L0x4000829d60, L0x4000829d68, L0x4000829d70,
                          L0x4000829d78, L0x4000829d80, L0x4000829d88,
                          L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8,
                          L0x4000829dc0, L0x4000829dc8, L0x4000829dd0,
                          L0x4000829dd8, L0x4000829de0, L0x4000829de8,
                          L0x4000829df0, L0x4000829df8, L0x4000829e00] * U)
               ((limbs 64 [LL0x4000829a48r20, LL0x4000829a50r20, LL0x4000829a58r20,
                           LL0x4000829a60r20, LL0x4000829a68r20, LL0x4000829a70r20] +
                 limbs 64 [LL0x4000829a78r20, LL0x4000829a80r20, LL0x4000829a88r20,
                           LL0x4000829a90r20, LL0x4000829a98r20, LL0x4000829aa0r20] * U) *
                (limbs 64 [LL0x4000829aa8r20, LL0x4000829ab0r20, LL0x4000829ab8r20,
                           LL0x4000829ac0r20, LL0x4000829ac8r20, LL0x4000829ad0r20] +
                 limbs 64 [LL0x4000829ad8r20, LL0x4000829ae0r20, LL0x4000829ae8r20,
                           LL0x4000829af0r20, LL0x4000829af8r20, LL0x4000829b00r20] * U) -
                (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U) +
                (limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                (limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],
                
         (* mul_fp6x2(t1, a[1], b[1]) *)
         eqmod (limbs 64 [LL0x4000829a48r01, LL0x4000829a50r01, LL0x4000829a58r01,
                          LL0x4000829a60r01, LL0x4000829a68r01, LL0x4000829a70r01] +
                limbs 64 [LL0x4000829a78r01, LL0x4000829a80r01, LL0x4000829a88r01,
                          LL0x4000829a90r01, LL0x4000829a98r01, LL0x4000829aa0r01] * U)
               ((limbs 64 [a80, a81, a82, a83, a84, a85] +
                 limbs 64 [a90, a91, a92, a93, a94, a95] * U) +
                (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                 limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r01, LL0x4000829ab0r01, LL0x4000829ab8r01,
                          LL0x4000829ac0r01, LL0x4000829ac8r01, LL0x4000829ad0r01] +
                limbs 64 [LL0x4000829ad8r01, LL0x4000829ae0r01, LL0x4000829ae8r01,
                          LL0x4000829af0r01, LL0x4000829af8r01, LL0x4000829b00r01] * U)
               ((limbs 64 [b80, b81, b82, b83, b84, b85] +
                 limbs 64 [b90, b91, b92, b93, b94, b95] * U) +
                (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                 limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                          L0x4000829e20, L0x4000829e28, L0x4000829e30,
                          L0x4000829e38, L0x4000829e40, L0x4000829e48,
                          L0x4000829e50, L0x4000829e58, L0x4000829e60] +
                limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                          L0x4000829e80, L0x4000829e88, L0x4000829e90,
                          L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                          L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] * U)
               (((limbs 64 [LL0x4000829a48r01, LL0x4000829a50r01, LL0x4000829a58r01,
                            LL0x4000829a60r01, LL0x4000829a68r01, LL0x4000829a70r01] +
                  limbs 64 [LL0x4000829a78r01, LL0x4000829a80r01, LL0x4000829a88r01,
                            LL0x4000829a90r01, LL0x4000829a98r01, LL0x4000829aa0r01] * U) *
                 (limbs 64 [LL0x4000829aa8r01, LL0x4000829ab0r01, LL0x4000829ab8r01,
                            LL0x4000829ac0r01, LL0x4000829ac8r01, LL0x4000829ad0r01] +
                  limbs 64 [LL0x4000829ad8r01, LL0x4000829ae0r01, LL0x4000829ae8r01,
                            LL0x4000829af0r01, LL0x4000829af8r01, LL0x4000829b00r01] * U) -
                 (limbs 64 [a80, a81, a82, a83, a84, a85] +
                  limbs 64 [a90, a91, a92, a93, a94, a95] * U) *
                 (limbs 64 [b80, b81, b82, b83, b84, b85] +
                  limbs 64 [b90, b91, b92, b93, b94, b95] * U) -
                 (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                  limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U) *
                 (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                  limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U)) *
                (U + 1) +
                (limbs 64 [a60, a61, a62, a63, a64, a65] +
                 limbs 64 [a70, a71, a72, a73, a74, a75] * U) *
                (limbs 64 [b60, b61, b62, b63, b64, b65] +
                 limbs 64 [b70, b71, b72, b73, b74, b75] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],
              
         eqmod (limbs 64 [LL0x4000829a48r11, LL0x4000829a50r11, LL0x4000829a58r11,
                          LL0x4000829a60r11, LL0x4000829a68r11, LL0x4000829a70r11] +
                limbs 64 [LL0x4000829a78r11, LL0x4000829a80r11, LL0x4000829a88r11,
                          LL0x4000829a90r11, LL0x4000829a98r11, LL0x4000829aa0r11] * U)
               (limbs 64 [a60, a61, a62, a63, a64, a65] +
                limbs 64 [a70, a71, a72, a73, a74, a75] * U +
                limbs 64 [a80, a81, a82, a83, a84, a85] +
                limbs 64 [a90, a91, a92, a93, a94, a95] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r11, LL0x4000829ab0r11, LL0x4000829ab8r11,
                          LL0x4000829ac0r11, LL0x4000829ac8r11, LL0x4000829ad0r11] +
                limbs 64 [LL0x4000829ad8r11, LL0x4000829ae0r11, LL0x4000829ae8r11,
                          LL0x4000829af0r11, LL0x4000829af8r11, LL0x4000829b00r11] * U)
               (limbs 64 [b60, b61, b62, b63, b64, b65] +
                limbs 64 [b70, b71, b72, b73, b74, b75] * U +
                limbs 64 [b80, b81, b82, b83, b84, b85] +
                limbs 64 [b90, b91, b92, b93, b94, b95] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                          L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                          L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                          L0x4000829f10, L0x4000829f18, L0x4000829f20] +
                limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                          L0x4000829f40, L0x4000829f48, L0x4000829f50,
                          L0x4000829f58, L0x4000829f60, L0x4000829f68,
                          L0x4000829f70, L0x4000829f78, L0x4000829f80] * U)
               ((limbs 64 [LL0x4000829a48r11, LL0x4000829a50r11, LL0x4000829a58r11,
                           LL0x4000829a60r11, LL0x4000829a68r11, LL0x4000829a70r11] +
                 limbs 64 [LL0x4000829a78r11, LL0x4000829a80r11, LL0x4000829a88r11,
                           LL0x4000829a90r11, LL0x4000829a98r11, LL0x4000829aa0r11] * U) *
                (limbs 64 [LL0x4000829aa8r11, LL0x4000829ab0r11, LL0x4000829ab8r11,
                           LL0x4000829ac0r11, LL0x4000829ac8r11, LL0x4000829ad0r11] +
                 limbs 64 [LL0x4000829ad8r11, LL0x4000829ae0r11, LL0x4000829ae8r11,
                           LL0x4000829af0r11, LL0x4000829af8r11, LL0x4000829b00r11] * U) -
                (limbs 64 [a60, a61, a62, a63, a64, a65] +
                 limbs 64 [a70, a71, a72, a73, a74, a75] * U) *
                (limbs 64 [b60, b61, b62, b63, b64, b65] +
                 limbs 64 [b70, b71, b72, b73, b74, b75] * U) -
                (limbs 64 [a80, a81, a82, a83, a84, a85] +
                 limbs 64 [a90, a91, a92, a93, a94, a95] * U) *
                (limbs 64 [b80, b81, b82, b83, b84, b85] +
                 limbs 64 [b90, b91, b92, b93, b94, b95] * U) +
                (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                 limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U) *
                (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                 limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U) *
                (U + 1))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],

         eqmod (limbs 64 [LL0x4000829a48r21, LL0x4000829a50r21, LL0x4000829a58r21,
                          LL0x4000829a60r21, LL0x4000829a68r21, LL0x4000829a70r21] +
                limbs 64 [LL0x4000829a78r21, LL0x4000829a80r21, LL0x4000829a88r21,
                          LL0x4000829a90r21, LL0x4000829a98r21, LL0x4000829aa0r21] * U)
               (limbs 64 [a60, a61, a62, a63, a64, a65] +
                limbs 64 [a70, a71, a72, a73, a74, a75] * U +
                limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r21, LL0x4000829ab0r21, LL0x4000829ab8r21,
                          LL0x4000829ac0r21, LL0x4000829ac8r21, LL0x4000829ad0r21] +
                limbs 64 [LL0x4000829ad8r21, LL0x4000829ae0r21, LL0x4000829ae8r21,
                          LL0x4000829af0r21, LL0x4000829af8r21, LL0x4000829b00r21] * U)
               (limbs 64 [b60, b61, b62, b63, b64, b65] +
                limbs 64 [b70, b71, b72, b73, b74, b75] * U +
                limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                          L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                          L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                          L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                          L0x400082a000, L0x400082a008, L0x400082a010,
                          L0x400082a018, L0x400082a020, L0x400082a028,
                          L0x400082a030, L0x400082a038, L0x400082a040] * U)
               ((limbs 64 [LL0x4000829a48r21, LL0x4000829a50r21, LL0x4000829a58r21,
                           LL0x4000829a60r21, LL0x4000829a68r21, LL0x4000829a70r21] +
                 limbs 64 [LL0x4000829a78r21, LL0x4000829a80r21, LL0x4000829a88r21,
                           LL0x4000829a90r21, LL0x4000829a98r21, LL0x4000829aa0r21] * U) *
                (limbs 64 [LL0x4000829aa8r21, LL0x4000829ab0r21, LL0x4000829ab8r21,
                           LL0x4000829ac0r21, LL0x4000829ac8r21, LL0x4000829ad0r21] +
                 limbs 64 [LL0x4000829ad8r21, LL0x4000829ae0r21, LL0x4000829ae8r21,
                           LL0x4000829af0r21, LL0x4000829af8r21, LL0x4000829b00r21] * U) -
                (limbs 64 [a60, a61, a62, a63, a64, a65] +
                 limbs 64 [a70, a71, a72, a73, a74, a75] * U) *
                (limbs 64 [b60, b61, b62, b63, b64, b65] +
                 limbs 64 [b70, b71, b72, b73, b74, b75] * U) -
                (limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5] +
                 limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5] * U) *
                (limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5] +
                 limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5] * U) +
                (limbs 64 [a80, a81, a82, a83, a84, a85] +
                 limbs 64 [a90, a91, a92, a93, a94, a95] * U) *
                (limbs 64 [b80, b81, b82, b83, b84, b85] +
                 limbs 64 [b90, b91, b92, b93, b94, b95] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],

         (* add_fp6(t2, a[0], a[1]) *)
         eqmod ((limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U) +
                (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) * V +
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U) * V**2)
               (((limbs 64 [a00, a01, a02, a03, a04, a05] +
                  limbs 64 [a60, a61, a62, a63, a64, a65]) +
                 (limbs 64 [a10, a11, a12, a13, a14, a15] +
                  limbs 64 [a70, a71, a72, a73, a74, a75]) * U) +
                ((limbs 64 [a20, a21, a22, a23, a24, a25] +
                  limbs 64 [a80, a81, a82, a83, a84, a85]) +
                 (limbs 64 [a30, a31, a32, a33, a34, a35] +
                  limbs 64 [a90, a91, a92, a93, a94, a95]) * U) * V +
                ((limbs 64 [a40, a41, a42, a43, a44, a45] +
                  limbs 64 [aa0, aa1, aa2, aa3, aa4, aa5]) +
                 (limbs 64 [a50, a51, a52, a53, a54, a55] +
                  limbs 64 [ab0, ab1, ab2, ab3, ab4, ab5]) * U) * V**2)
               [limbs 64 [m0, m1, m2, m3, m4, m5],
                U**2 + 1, V**3 - U - 1],

         (* add_fp6(ret[1], b[0], b[1]) *)
         eqmod ((limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) +
                 (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                            L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                  limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                            L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) * V +
                 (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                            L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                  limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                            L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) * V**2)
               (((limbs 64 [b00, b01, b02, b03, b04, b05] +
                  limbs 64 [b60, b61, b62, b63, b64, b65]) +
                 (limbs 64 [b10, b11, b12, b13, b14, b15] +
                  limbs 64 [b70, b71, b72, b73, b74, b75]) * U) +
                ((limbs 64 [b20, b21, b22, b23, b24, b25] +
                  limbs 64 [b80, b81, b82, b83, b84, b85]) +
                 (limbs 64 [b30, b31, b32, b33, b34, b35] +
                  limbs 64 [b90, b91, b92, b93, b94, b95]) * U) * V +
                ((limbs 64 [b40, b41, b42, b43, b44, b45] +
                  limbs 64 [ba0, ba1, ba2, ba3, ba4, ba5]) +
                 (limbs 64 [b50, b51, b52, b53, b54, b55] +
                  limbs 64 [bb0, bb1, bb2, bb3, bb4, bb5]) * U) * V**2)
               [limbs 64 [m0, m1, m2, m3, m4, m5],
                U**2 + 1, V**3 - U - 1],

         (* mul_fp6x2(rx, ret[1], t2) *)
         eqmod (limbs 64 [LL0x4000829a48r02, LL0x4000829a50r02, LL0x4000829a58r02,
                          LL0x4000829a60r02, LL0x4000829a68r02, LL0x4000829a70r02] +
                limbs 64 [LL0x4000829a78r02, LL0x4000829a80r02, LL0x4000829a88r02,
                          LL0x4000829a90r02, LL0x4000829a98r02, LL0x4000829aa0r02] * U)
               ((limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                           L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                 limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                           L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) +
                (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                           L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                 limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                           L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [LL0x4000829aa8r02, LL0x4000829ab0r02, LL0x4000829ab8r02,
                          LL0x4000829ac0r02, LL0x4000829ac8r02, LL0x4000829ad0r02] +
                limbs 64 [LL0x4000829ad8r02, LL0x4000829ae0r02, LL0x4000829ae8r02,
                          LL0x4000829af0r02, LL0x4000829af8r02, LL0x4000829b00r02] * U)
               ((limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) +
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [rx00o, rx01o, rx02o, rx03o, rx04o, rx05o,
                          rx06o, rx07o, rx08o, rx09o, rx0ao, rx0bo] +
                limbs 64 [rx10o, rx11o, rx12o, rx13o, rx14o, rx15o,
                          rx16o, rx17o, rx18o, rx19o, rx1ao, rx1bo] * U)
               (((limbs 64 [LL0x4000829a48r02, LL0x4000829a50r02, LL0x4000829a58r02,
                            LL0x4000829a60r02, LL0x4000829a68r02, LL0x4000829a70r02] +
                  limbs 64 [LL0x4000829a78r02, LL0x4000829a80r02, LL0x4000829a88r02,
                            LL0x4000829a90r02, LL0x4000829a98r02, LL0x4000829aa0r02] * U) *
                 (limbs 64 [LL0x4000829aa8r02, LL0x4000829ab0r02, LL0x4000829ab8r02,
                            LL0x4000829ac0r02, LL0x4000829ac8r02, LL0x4000829ad0r02] +
                  limbs 64 [LL0x4000829ad8r02, LL0x4000829ae0r02, LL0x4000829ae8r02,
                            LL0x4000829af0r02, LL0x4000829af8r02, LL0x4000829b00r02] * U) -
                 (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                            L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                  limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                            L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) *
                 (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                  limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) -
                 (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                            L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                  limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                            L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) *
                 (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                  limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U)) *
                (U + 1) +
                (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) *
                (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (limbs 64 [LL0x4000829a48r12, LL0x4000829a50r12, LL0x4000829a58r12,
                          LL0x4000829a60r12, LL0x4000829a68r12, LL0x4000829a70r12] +
                limbs 64 [LL0x4000829a78r12, LL0x4000829a80r12, LL0x4000829a88r12,
                          LL0x4000829a90r12, LL0x4000829a98r12, LL0x4000829aa0r12] * U)
               (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                          L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                          L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U +
                limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                          L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                          L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [LL0x4000829aa8r12, LL0x4000829ab0r12, LL0x4000829ab8r12,
                          LL0x4000829ac0r12, LL0x4000829ac8r12, LL0x4000829ad0r12] +
                limbs 64 [LL0x4000829ad8r12, LL0x4000829ae0r12, LL0x4000829ae8r12,
                          LL0x4000829af0r12, LL0x4000829af8r12, LL0x4000829b00r12] * U)
               (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U +
                limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [rx20o, rx21o, rx22o, rx23o, rx24o, rx25o,
                          rx26o, rx27o, rx28o, rx29o, rx2ao, rx2bo] +
                limbs 64 [rx30o, rx31o, rx32o, rx33o, rx34o, rx35o,
                          rx36o, rx37o, rx38o, rx39o, rx3ao, rx3bo] * U)
               ((limbs 64 [LL0x4000829a48r12, LL0x4000829a50r12, LL0x4000829a58r12,
                           LL0x4000829a60r12, LL0x4000829a68r12, LL0x4000829a70r12] +
                 limbs 64 [LL0x4000829a78r12, LL0x4000829a80r12, LL0x4000829a88r12,
                           LL0x4000829a90r12, LL0x4000829a98r12, LL0x4000829aa0r12] * U) *
                (limbs 64 [LL0x4000829aa8r12, LL0x4000829ab0r12, LL0x4000829ab8r12,
                           LL0x4000829ac0r12, LL0x4000829ac8r12, LL0x4000829ad0r12] +
                 limbs 64 [LL0x4000829ad8r12, LL0x4000829ae0r12, LL0x4000829ae8r12,
                           LL0x4000829af0r12, LL0x4000829af8r12, LL0x4000829b00r12] * U) -
                (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) *
                (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U) -
                (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                           L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                 limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                           L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) *
                (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U) +
                (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                           L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                 limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                           L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) *
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U) *
                (U + 1))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (limbs 64 [LL0x4000829a48r22, LL0x4000829a50r22, LL0x4000829a58r22,
                          LL0x4000829a60r22, LL0x4000829a68r22, LL0x4000829a70r22] +
                limbs 64 [LL0x4000829a78r22, LL0x4000829a80r22, LL0x4000829a88r22,
                          LL0x4000829a90r22, LL0x4000829a98r22, LL0x4000829aa0r22] * U)
               (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                          L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                          L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U +
                limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                          L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                          L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U**2 + 1],
         eqmod (limbs 64 [LL0x4000829aa8r22, LL0x4000829ab0r22, LL0x4000829ab8r22,
                          LL0x4000829ac0r22, LL0x4000829ac8r22, LL0x4000829ad0r22] +
                limbs 64 [LL0x4000829ad8r22, LL0x4000829ae0r22, LL0x4000829ae8r22,
                          LL0x4000829af0r22, LL0x4000829af8r22, LL0x4000829b00r22] * U)
               (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U +
                limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [rx40o, rx41o, rx42o, rx43o, rx44o, rx45o,
                          rx46o, rx47o, rx48o, rx49o, rx4ao, rx4bo] +
                limbs 64 [rx50o, rx51o, rx52o, rx53o, rx54o, rx55o,
                          rx56o, rx57o, rx58o, rx59o, rx5ao, rx5bo] * U)
               ((limbs 64 [LL0x4000829a48r22, LL0x4000829a50r22, LL0x4000829a58r22,
                           LL0x4000829a60r22, LL0x4000829a68r22, LL0x4000829a70r22] +
                 limbs 64 [LL0x4000829a78r22, LL0x4000829a80r22, LL0x4000829a88r22,
                           LL0x4000829a90r22, LL0x4000829a98r22, LL0x4000829aa0r22] * U) *
                (limbs 64 [LL0x4000829aa8r22, LL0x4000829ab0r22, LL0x4000829ab8r22,
                           LL0x4000829ac0r22, LL0x4000829ac8r22, LL0x4000829ad0r22] +
                 limbs 64 [LL0x4000829ad8r22, LL0x4000829ae0r22, LL0x4000829ae8r22,
                           LL0x4000829af0r22, LL0x4000829af8r22, LL0x4000829b00r22] * U) -
                (limbs 64 [L0x400082ab98o, L0x400082aba0o, L0x400082aba8o,
                           L0x400082abb0o, L0x400082abb8o, L0x400082abc0o] +
                 limbs 64 [L0x400082abc8o, L0x400082abd0o, L0x400082abd8o,
                           L0x400082abe0o, L0x400082abe8o, L0x400082abf0o] * U) *
                (limbs 64 [t2_00, t2_01, t2_02, t2_03, t2_04, t2_05] +
                 limbs 64 [t2_10, t2_11, t2_12, t2_13, t2_14, t2_15] * U) -
                (limbs 64 [L0x400082ac58o, L0x400082ac60o, L0x400082ac68o,
                           L0x400082ac70o, L0x400082ac78o, L0x400082ac80o] +
                 limbs 64 [L0x400082ac88o, L0x400082ac90o, L0x400082ac98o,
                           L0x400082aca0o, L0x400082aca8o, L0x400082acb0o] * U) *
                (limbs 64 [t2_40, t2_41, t2_42, t2_43, t2_44, t2_45] +
                 limbs 64 [t2_50, t2_51, t2_52, t2_53, t2_54, t2_55] * U) +
                (limbs 64 [L0x400082abf8o, L0x400082ac00o, L0x400082ac08o,
                           L0x400082ac10o, L0x400082ac18o, L0x400082ac20o] +
                 limbs 64 [L0x400082ac28o, L0x400082ac30o, L0x400082ac38o,
                           L0x400082ac40o, L0x400082ac48o, L0x400082ac50o] * U) *
                (limbs 64 [t2_20, t2_21, t2_22, t2_23, t2_24, t2_25] +
                 limbs 64 [t2_30, t2_31, t2_32, t2_33, t2_34, t2_35] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],

         (* sub_fp6x2(rx, rx, t0);
            sub_fp6x2(rx, rx, t1); *)
         eqmod ((limbs 64 [rx00q, rx01q, rx02q, rx03q, rx04q, rx05q,
                           rx06q, rx07q, rx08q, rx09q, rx0aq, rx0bq] +
                 limbs 64 [rx10q, rx11q, rx12q, rx13q, rx14q, rx15q,
                           rx16q, rx17q, rx18q, rx19q, rx1aq, rx1bq] * U) +
                (limbs 64 [rx20q, rx21q, rx22q, rx23q, rx24q, rx25q,
                           rx26q, rx27q, rx28q, rx29q, rx2aq, rx2bq] +
                 limbs 64 [rx30q, rx31q, rx32q, rx33q, rx34q, rx35q,
                           rx36q, rx37q, rx38q, rx39q, rx3aq, rx3bq] * U) * V +
                (limbs 64 [rx40q, rx41q, rx42q, rx43q, rx44q, rx45q,
                           rx46q, rx47q, rx48q, rx49q, rx4aq, rx4bq] +
                 limbs 64 [rx50q, rx51q, rx52q, rx53q, rx54q, rx55q,
                           rx56q, rx57q, rx58q, rx59q, rx5aq, rx5bq] * U) * V**2)
               (((limbs 64 [rx00o, rx01o, rx02o, rx03o, rx04o, rx05o,
                            rx06o, rx07o, rx08o, rx09o, rx0ao, rx0bo] +
                  limbs 64 [rx10o, rx11o, rx12o, rx13o, rx14o, rx15o,
                            rx16o, rx17o, rx18o, rx19o, rx1ao, rx1bo] * U) +
                 (limbs 64 [rx20o, rx21o, rx22o, rx23o, rx24o, rx25o,
                            rx26o, rx27o, rx28o, rx29o, rx2ao, rx2bo] +
                  limbs 64 [rx30o, rx31o, rx32o, rx33o, rx34o, rx35o,
                            rx36o, rx37o, rx38o, rx39o, rx3ao, rx3bo] * U) * V +
                 (limbs 64 [rx40o, rx41o, rx42o, rx43o, rx44o, rx45o,
                            rx46o, rx47o, rx48o, rx49o, rx4ao, rx4bo] +
                  limbs 64 [rx50o, rx51o, rx52o, rx53o, rx54o, rx55o,
                            rx56o, rx57o, rx58o, rx59o, rx5ao, rx5bo] * U) * V**2) -
                ((limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                            L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                            L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                            L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                  limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                            L0x4000829c40, L0x4000829c48, L0x4000829c50,
                            L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                            L0x4000829c70, L0x4000829c78, L0x4000829c80] * U) +
                 (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                            L0x4000829ca0, L0x4000829ca8, L0x4000829cb0,
                            L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                            L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                  limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                            L0x4000829d00, L0x4000829d08, L0x4000829d10,
                            L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                            L0x4000829d30, L0x4000829d38, L0x4000829d40] * U) * V +
                 (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                            L0x4000829d60, L0x4000829d68, L0x4000829d70,
                            L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                            L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                  limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                            L0x4000829dc0, L0x4000829dc8, L0x4000829dd0,
                            L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                            L0x4000829df0, L0x4000829df8, L0x4000829e00] * U) * V**2) -
                ((limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                            L0x4000829e20, L0x4000829e28, L0x4000829e30,
                            L0x4000829e38, L0x4000829e40, L0x4000829e48,
                            L0x4000829e50, L0x4000829e58, L0x4000829e60] +
                  limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                            L0x4000829e80, L0x4000829e88, L0x4000829e90,
                            L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                            L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] * U) +
                 (limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                            L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                            L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                            L0x4000829f10, L0x4000829f18, L0x4000829f20] +
                  limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                            L0x4000829f40, L0x4000829f48, L0x4000829f50,
                            L0x4000829f58, L0x4000829f60, L0x4000829f68,
                            L0x4000829f70, L0x4000829f78, L0x4000829f80] * U) * V +
                 (limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                            L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                            L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                            L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                  limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                            L0x400082a000, L0x400082a008, L0x400082a010,
                            L0x400082a018, L0x400082a020, L0x400082a028,
                            L0x400082a030, L0x400082a038, L0x400082a040] * U) * V**2))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1, V**3 - U - 1],

         (* redc_fp6x2(ret[1], rx) *)
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c60, c61, c62, c63, c64, c65])
               (limbs 64 [rx00q, rx01q, rx02q, rx03q, rx04q, rx05q,
                          rx06q, rx07q, rx08q, rx09q, rx0aq, rx0bq])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c70, c71, c72, c73, c74, c75])
               (limbs 64 [rx10q, rx11q, rx12q, rx13q, rx14q, rx15q,
                          rx16q, rx17q, rx18q, rx19q, rx1aq, rx1bq])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c80, c81, c82, c83, c84, c85])
               (limbs 64 [rx20q, rx21q, rx22q, rx23q, rx24q, rx25q,
                          rx26q, rx27q, rx28q, rx29q, rx2aq, rx2bq])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c90, c91, c92, c93, c94, c95])
               (limbs 64 [rx30q, rx31q, rx32q, rx33q, rx34q, rx35q,
                          rx36q, rx37q, rx38q, rx39q, rx3aq, rx3bq])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          ca0, ca1, ca2, ca3, ca4, ca5])
               (limbs 64 [rx40q, rx41q, rx42q, rx43q, rx44q, rx45q,
                          rx46q, rx47q, rx48q, rx49q, rx4aq, rx4bq])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          cb0, cb1, cb2, cb3, cb4, cb5])
               (limbs 64 [rx50q, rx51q, rx52q, rx53q, rx54q, rx55q,
                          rx56q, rx57q, rx58q, rx59q, rx5aq, rx5bq])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         (* mul_by_u_plus_1_fp2x2(rx[0], t1[2]) *)
         eqmod (limbs 64 [rx00r, rx01r, rx02r, rx03r,rx04r, rx05r,
                          rx10r, rx11r, rx12r, rx13r,rx14r, rx15r] +
                limbs 64 [rx20r, rx21r, rx22r, rx23r,rx24r, rx25r,
                          rx30r, rx31r, rx32r, rx33r,rx34r, rx35r] * U)
               ((limbs 64 [L0x4000829f88, L0x4000829f90, L0x4000829f98,
                           L0x4000829fa0, L0x4000829fa8, L0x4000829fb0,
                           L0x4000829fb8, L0x4000829fc0, L0x4000829fc8,
                           L0x4000829fd0, L0x4000829fd8, L0x4000829fe0] +
                 limbs 64 [L0x4000829fe8, L0x4000829ff0, L0x4000829ff8,
                           L0x400082a000, L0x400082a008, L0x400082a010,
                           L0x400082a018, L0x400082a020, L0x400082a028,
                           L0x400082a030, L0x400082a038, L0x400082a040] * U) *
                (1 + U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],

         (* add_fp2x2(rx[0], t0[0], rx[0])
            add_fp2x2(rx[1], t0[1], t1[0])
            add_fp2x2(rx[2], t0[2], t1[1]) *)
         eqmod (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                          L0x400082a060, L0x400082a068, L0x400082a070,
                          L0x400082a078, L0x400082a080, L0x400082a088,
                          L0x400082a090, L0x400082a098, L0x400082a0a0] +
                limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                          L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                          L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                          L0x400082a0f0, L0x400082a0f8, L0x400082a100] * U)
               (limbs 64 [L0x4000829bc8, L0x4000829bd0, L0x4000829bd8,
                          L0x4000829be0, L0x4000829be8, L0x4000829bf0,
                          L0x4000829bf8, L0x4000829c00, L0x4000829c08,
                          L0x4000829c10, L0x4000829c18, L0x4000829c20] +
                limbs 64 [L0x4000829c28, L0x4000829c30, L0x4000829c38, 
                          L0x4000829c40, L0x4000829c48, L0x4000829c50,
                          L0x4000829c58, L0x4000829c60, L0x4000829c68, 
                          L0x4000829c70, L0x4000829c78, L0x4000829c80] * U +
                limbs 64 [rx00r, rx01r, rx02r, rx03r, rx04r, rx05r,
                          rx10r, rx11r, rx12r, rx13r, rx14r, rx15r] +
                limbs 64 [rx20r, rx21r, rx22r, rx23r, rx24r, rx25r,
                          rx30r, rx31r, rx32r, rx33r, rx34r, rx35r] * U)
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                          L0x400082a120, L0x400082a128, L0x400082a130,
                          L0x400082a138, L0x400082a140, L0x400082a148,
                          L0x400082a150, L0x400082a158, L0x400082a160] +
                limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                          L0x400082a180, L0x400082a188, L0x400082a190,
                          L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                          L0x400082a1b0, L0x400082a1b8, L0x400082a1c0] * U)
               (limbs 64 [L0x4000829c88, L0x4000829c90, L0x4000829c98, 
                          L0x4000829ca0, L0x4000829ca8, L0x4000829cb0, 
                          L0x4000829cb8, L0x4000829cc0, L0x4000829cc8, 
                          L0x4000829cd0, L0x4000829cd8, L0x4000829ce0] +
                limbs 64 [L0x4000829ce8, L0x4000829cf0, L0x4000829cf8, 
                          L0x4000829d00, L0x4000829d08, L0x4000829d10, 
                          L0x4000829d18, L0x4000829d20, L0x4000829d28, 
                          L0x4000829d30, L0x4000829d38, L0x4000829d40] * U +
                limbs 64 [L0x4000829e08, L0x4000829e10, L0x4000829e18,
                          L0x4000829e20, L0x4000829e28, L0x4000829e30,
                          L0x4000829e38, L0x4000829e40, L0x4000829e48,
                          L0x4000829e50, L0x4000829e58, L0x4000829e60] +
                limbs 64 [L0x4000829e68, L0x4000829e70, L0x4000829e78,
                          L0x4000829e80, L0x4000829e88, L0x4000829e90,
                          L0x4000829e98, L0x4000829ea0, L0x4000829ea8,
                          L0x4000829eb0, L0x4000829eb8, L0x4000829ec0] * U)
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],
         eqmod (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                          L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                          L0x400082a1f8, L0x400082a200, L0x400082a208,
                          L0x400082a210, L0x400082a218, L0x400082a220] +
                limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                          L0x400082a240, L0x400082a248, L0x400082a250,
                          L0x400082a258, L0x400082a260, L0x400082a268,
                          L0x400082a270, L0x400082a278, L0x400082a280] * U)
               (limbs 64 [L0x4000829d48, L0x4000829d50, L0x4000829d58, 
                          L0x4000829d60, L0x4000829d68, L0x4000829d70, 
                          L0x4000829d78, L0x4000829d80, L0x4000829d88, 
                          L0x4000829d90, L0x4000829d98, L0x4000829da0] +
                limbs 64 [L0x4000829da8, L0x4000829db0, L0x4000829db8, 
                          L0x4000829dc0, L0x4000829dc8, L0x4000829dd0, 
                          L0x4000829dd8, L0x4000829de0, L0x4000829de8, 
                          L0x4000829df0, L0x4000829df8, L0x4000829e00] * U +
                limbs 64 [L0x4000829ec8, L0x4000829ed0, L0x4000829ed8,
                          L0x4000829ee0, L0x4000829ee8, L0x4000829ef0,
                          L0x4000829ef8, L0x4000829f00, L0x4000829f08,
                          L0x4000829f10, L0x4000829f18, L0x4000829f20] +
                limbs 64 [L0x4000829f28, L0x4000829f30, L0x4000829f38,
                          L0x4000829f40, L0x4000829f48, L0x4000829f50,
                          L0x4000829f58, L0x4000829f60, L0x4000829f68,
                          L0x4000829f70, L0x4000829f78, L0x4000829f80] * U)
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U**2 + 1],

         (* redc_fp6x2(ret[0], rx) *)
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c00, c01, c02, c03, c04, c05])
               (limbs 64 [L0x400082a048, L0x400082a050, L0x400082a058,
                          L0x400082a060, L0x400082a068, L0x400082a070,
                          L0x400082a078, L0x400082a080, L0x400082a088,
                          L0x400082a090, L0x400082a098, L0x400082a0a0])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c10, c11, c12, c13, c14, c15])
               (limbs 64 [L0x400082a0a8, L0x400082a0b0, L0x400082a0b8,
                          L0x400082a0c0, L0x400082a0c8, L0x400082a0d0,
                          L0x400082a0d8, L0x400082a0e0, L0x400082a0e8,
                          L0x400082a0f0, L0x400082a0f8, L0x400082a100])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c20, c21, c22, c23, c24, c25])
               (limbs 64 [L0x400082a108, L0x400082a110, L0x400082a118,
                          L0x400082a120, L0x400082a128, L0x400082a130,
                          L0x400082a138, L0x400082a140, L0x400082a148,
                          L0x400082a150, L0x400082a158, L0x400082a160])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c30, c31, c32, c33, c34, c35])
               (limbs 64 [L0x400082a168, L0x400082a170, L0x400082a178,
                          L0x400082a180, L0x400082a188, L0x400082a190,
                          L0x400082a198, L0x400082a1a0, L0x400082a1a8,
                          L0x400082a1b0, L0x400082a1b8, L0x400082a1c0])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c40, c41, c42, c43, c44, c45])
               (limbs 64 [L0x400082a1c8, L0x400082a1d0, L0x400082a1d8,
                          L0x400082a1e0, L0x400082a1e8, L0x400082a1f0,
                          L0x400082a1f8, L0x400082a200, L0x400082a208,
                          L0x400082a210, L0x400082a218, L0x400082a220])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          c50, c51, c52, c53, c54, c55])
               (limbs 64 [L0x400082a228, L0x400082a230, L0x400082a238,
                          L0x400082a240, L0x400082a248, L0x400082a250,
                          L0x400082a258, L0x400082a260, L0x400082a268,
                          L0x400082a270, L0x400082a278, L0x400082a280])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
    prove with all cuts
 && and [limbs 64 [c00,c01,c02,c03,c04,c05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c10,c11,c12,c13,c14,c15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c20,c21,c22,c23,c24,c25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c30,c31,c32,c33,c34,c35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c40,c41,c42,c43,c44,c45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c50,c51,c52,c53,c54,c55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c60,c61,c62,c63,c64,c65] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c70,c71,c72,c73,c74,c75] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c80,c81,c82,c83,c84,c85] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [c90,c91,c92,c93,c94,c95] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [ca0,ca1,ca2,ca3,ca4,ca5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
         limbs 64 [cb0,cb1,cb2,cb3,cb4,cb5] <u limbs 64 [m0,m1,m2,m3,m4,m5]]
    prove with all cuts;

{
  eqmod (((limbs 64 [0,0,0,0,0,0,c00,c01,c02,c03,c04,c05] +
           limbs 64 [0,0,0,0,0,0,c10,c11,c12,c13,c14,c15] * U) +
          (limbs 64 [0,0,0,0,0,0,c20,c21,c22,c23,c24,c25] +
           limbs 64 [0,0,0,0,0,0,c30,c31,c32,c33,c34,c35] * U) * V +
          (limbs 64 [0,0,0,0,0,0,c40,c41,c42,c43,c44,c45] +
           limbs 64 [0,0,0,0,0,0,c50,c51,c52,c53,c54,c55] * U) * V**2) +
         ((limbs 64 [0,0,0,0,0,0,c60,c61,c62,c63,c64,c65] +
           limbs 64 [0,0,0,0,0,0,c70,c71,c72,c73,c74,c75] * U) +
          (limbs 64 [0,0,0,0,0,0,c80,c81,c82,c83,c84,c85] +
           limbs 64 [0,0,0,0,0,0,c90,c91,c92,c93,c94,c95] * U) * V +
          (limbs 64 [0,0,0,0,0,0,ca0,ca1,ca2,ca3,ca4,ca5] +
           limbs 64 [0,0,0,0,0,0,cb0,cb1,cb2,cb3,cb4,cb5] * U) * V**2) * W)
        ((((limbs 64 [a00,a01,a02,a03,a04,a05] +
            limbs 64 [a10,a11,a12,a13,a14,a15] * U) +
           (limbs 64 [a20,a21,a22,a23,a24,a25] +
            limbs 64 [a30,a31,a32,a33,a34,a35] * U) * V +
           (limbs 64 [a40,a41,a42,a43,a44,a45] +
            limbs 64 [a50,a51,a52,a53,a54,a55] * U) * V**2) +
          ((limbs 64 [a60,a61,a62,a63,a64,a65] +
            limbs 64 [a70,a71,a72,a73,a74,a75] * U) +
           (limbs 64 [a80,a81,a82,a83,a84,a85] +
            limbs 64 [a90,a91,a92,a93,a94,a95] * U) * V +
           (limbs 64 [aa0,aa1,aa2,aa3,aa4,aa5] +
            limbs 64 [ab0,ab1,ab2,ab3,ab4,ab5] * U) * V**2) * W) *
         (((limbs 64 [b00,b01,b02,b03,b04,b05] +
            limbs 64 [b10,b11,b12,b13,b14,b15] * U) +
           (limbs 64 [b20,b21,b22,b23,b24,b25] +
            limbs 64 [b30,b31,b32,b33,b34,b35] * U) * V +
           (limbs 64 [b40,b41,b42,b43,b44,b45] +
            limbs 64 [b50,b51,b52,b53,b54,b55] * U) * V**2) +
          ((limbs 64 [b60,b61,b62,b63,b64,b65] +
            limbs 64 [b70,b71,b72,b73,b74,b75] * U) +
           (limbs 64 [b80,b81,b82,b83,b84,b85] +
            limbs 64 [b90,b91,b92,b93,b94,b95] * U) * V +
           (limbs 64 [ba0,ba1,ba2,ba3,ba4,ba5] +
            limbs 64 [bb0,bb1,bb2,bb3,bb4,bb5] * U) * V**2) * W))
        [limbs 64 [m0, m1, m2, m3, m4, m5],
         U**2 + 1, V**3 - U - 1, W**2 - V]
&&
  and [limbs 64 [c00,c01,c02,c03,c04,c05] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c10,c11,c12,c13,c14,c15] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c20,c21,c22,c23,c24,c25] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c30,c31,c32,c33,c34,c35] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c40,c41,c42,c43,c44,c45] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c50,c51,c52,c53,c54,c55] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c60,c61,c62,c63,c64,c65] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c70,c71,c72,c73,c74,c75] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c80,c81,c82,c83,c84,c85] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [c90,c91,c92,c93,c94,c95] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [ca0,ca1,ca2,ca3,ca4,ca5] <u limbs 64 [m0,m1,m2,m3,m4,m5],
       limbs 64 [cb0,cb1,cb2,cb3,cb4,cb5] <u limbs 64 [m0,m1,m2,m3,m4,m5]]
}

