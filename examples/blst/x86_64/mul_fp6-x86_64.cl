(* quine:  -v -isafety -jobs 10 -no_carry_constraint -slicing -qfbv_args '-SE minisat' mul_fp6-x86_64.cl
Parsing Cryptoline file:                [OK]            0.145261 seconds
Checking well-formedness:               [OK]            0.032994 seconds
Transforming to SSA form:               [OK]            0.017771 seconds
Rewriting assignments:                  [OK]            5.059065 seconds
Verifying program safety:               [OK]            0.013990 seconds
Verifying range assertions:             [OK]            975.570876 seconds
Verifying range specification:          [OK]            2081.161389 seconds
Rewriting value-preserved casting:      [OK]            0.000414 seconds
Verifying algebraic assertions:         [OK]            150.449319 seconds
Verifying algebraic specification:      [OK]            573.188207 seconds
Verification result:                    [OK]            3785.649260 seconds
*)

proc mul_fp6x2 (uint64 a00, uint64 a01, uint64 a02,
           uint64 a03, uint64 a04, uint64 a05,
           uint64 a10, uint64 a11, uint64 a12,
           uint64 a13, uint64 a14, uint64 a15,
           uint64 a20, uint64 a21, uint64 a22,
           uint64 a23, uint64 a24, uint64 a25,
           uint64 a30, uint64 a31, uint64 a32,
           uint64 a33, uint64 a34, uint64 a35,
           uint64 a40, uint64 a41, uint64 a42,
           uint64 a43, uint64 a44, uint64 a45,
           uint64 a50, uint64 a51, uint64 a52,
           uint64 a53, uint64 a54, uint64 a55,

           uint64 b00, uint64 b01, uint64 b02,
           uint64 b03, uint64 b04, uint64 b05,
           uint64 b10, uint64 b11, uint64 b12,
           uint64 b13, uint64 b14, uint64 b15,
           uint64 b20, uint64 b21, uint64 b22,
           uint64 b23, uint64 b24, uint64 b25,
           uint64 b30, uint64 b31, uint64 b32,
           uint64 b33, uint64 b34, uint64 b35,
           uint64 b40, uint64 b41, uint64 b42,
           uint64 b43, uint64 b44, uint64 b45,
           uint64 b50, uint64 b51, uint64 b52,
           uint64 b53, uint64 b54, uint64 b55,

           uint64  m0, uint64  m1, uint64  m2,
           uint64  m3, uint64  m4, uint64  m5,

           uint64   U, uint64   V, uint64  W) =
{
  and [
    m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
    m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
    m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a
  ]
&&
  and [
    m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
    m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
    m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
    limbs 64 [a00, a01, a02, a03, a04, a05] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a10, a11, a12, a13, a14, a15] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a20, a21, a22, a23, a24, a25] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a30, a31, a32, a33, a34, a35] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a40, a41, a42, a43, a44, a45] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a50, a51, a52, a53, a54, a55] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b00, b01, b02, b03, b04, b05] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b10, b11, b12, b13, b14, b15] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b20, b21, b22, b23, b24, b25] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b30, b31, b32, b33, b34, b35] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b40, b41, b42, b43, b44, b45] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b50, b51, b52, b53, b54, b55] <u limbs 64 [m0, m1, m2, m3, m4, m5]
  ]
}

mov L0x55555556c740 m0; mov L0x55555556c748 m1; mov L0x55555556c750 m2; 
mov L0x55555556c758 m3; mov L0x55555556c760 m4; mov L0x55555556c768 m5; 

mov L0x7fffffffcf90 a00; mov L0x7fffffffcf98 a01; mov L0x7fffffffcfa0 a02;
mov L0x7fffffffcfa8 a03; mov L0x7fffffffcfb0 a04; mov L0x7fffffffcfb8 a05;
mov L0x7fffffffcfc0 a10; mov L0x7fffffffcfc8 a11; mov L0x7fffffffcfd0 a12;
mov L0x7fffffffcfd8 a13; mov L0x7fffffffcfe0 a14; mov L0x7fffffffcfe8 a15;
mov L0x7fffffffcff0 a20; mov L0x7fffffffcff8 a21; mov L0x7fffffffd000 a22;
mov L0x7fffffffd008 a23; mov L0x7fffffffd010 a24; mov L0x7fffffffd018 a25;
mov L0x7fffffffd020 a30; mov L0x7fffffffd028 a31; mov L0x7fffffffd030 a32; 
mov L0x7fffffffd038 a33; mov L0x7fffffffd040 a34; mov L0x7fffffffd048 a35; 
mov L0x7fffffffd050 a40; mov L0x7fffffffd058 a41; mov L0x7fffffffd060 a42;
mov L0x7fffffffd068 a43; mov L0x7fffffffd070 a44; mov L0x7fffffffd078 a45;
mov L0x7fffffffd080 a50; mov L0x7fffffffd088 a51; mov L0x7fffffffd090 a52;
mov L0x7fffffffd098 a53; mov L0x7fffffffd0a0 a54; mov L0x7fffffffd0a8 a55;

mov L0x7fffffffd0b0 b00; mov L0x7fffffffd0b8 b01; mov L0x7fffffffd0c0 b02; 
mov L0x7fffffffd0c8 b03; mov L0x7fffffffd0d0 b04; mov L0x7fffffffd0d8 b05; 
mov L0x7fffffffd0e0 b10; mov L0x7fffffffd0e8 b11; mov L0x7fffffffd0f0 b12; 
mov L0x7fffffffd0f8 b13; mov L0x7fffffffd100 b14; mov L0x7fffffffd108 b15; 
mov L0x7fffffffd110 b20; mov L0x7fffffffd118 b21; mov L0x7fffffffd120 b22;
mov L0x7fffffffd128 b23; mov L0x7fffffffd130 b24; mov L0x7fffffffd138 b25;
mov L0x7fffffffd140 b30; mov L0x7fffffffd148 b31; mov L0x7fffffffd150 b32;
mov L0x7fffffffd158 b33; mov L0x7fffffffd160 b34; mov L0x7fffffffd168 b35;
mov L0x7fffffffd170 b40; mov L0x7fffffffd178 b41; mov L0x7fffffffd180 b42;
mov L0x7fffffffd188 b43; mov L0x7fffffffd190 b44; mov L0x7fffffffd198 b45;
mov L0x7fffffffd1a0 b50; mov L0x7fffffffd1a8 b51; mov L0x7fffffffd1b0 b52; 
mov L0x7fffffffd1b8 b53; mov L0x7fffffffd1c0 b54; mov L0x7fffffffd1c8 b55;




(* #! -> SP = 0x7fffffffccf8 *)
#! 0x7fffffffccf8 = 0x7fffffffccf8;
(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f614 *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f614 = 0x55555555f614;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcf90; Value = 0x0000000000000000; PC = 0x5555555687ac *)
mov r8 L0x7fffffffcf90;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcf98; Value = 0x0000000000000000; PC = 0x5555555687af *)
mov r9 L0x7fffffffcf98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x5555555687b3 *)
mov r10 L0x7fffffffcfa0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x5555555687b7 *)
mov r11 L0x7fffffffcfa8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x5555555687bb *)
mov r12 L0x7fffffffcfb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x5555555687bf *)
mov r13 L0x7fffffffcfb8;
(* add    0x30(%rsi),%r8                           #! EA = L0x7fffffffcfc0; Value = 0x0000ffffefd91330; PC = 0x5555555687c3 *)
adds carry r8 L0x7fffffffcfc0 r8;
(* adc    0x38(%rsi),%r9                           #! EA = L0x7fffffffcfc8; Value = 0x000080005f5d9ca5; PC = 0x5555555687c7 *)
adcs carry r9 L0x7fffffffcfc8 r9 carry;
(* adc    0x40(%rsi),%r10                          #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x5555555687cb *)
adcs carry r10 L0x7fffffffcfd0 r10 carry;
(* adc    0x48(%rsi),%r11                          #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x5555555687cf *)
adcs carry r11 L0x7fffffffcfd8 r11 carry;
(* adc    0x50(%rsi),%r12                          #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x5555555687d3 *)
adcs carry r12 L0x7fffffffcfe0 r12 carry;
(* adc    0x58(%rsi),%r13                          #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x5555555687d7 *)
adcs carry r13 L0x7fffffffcfe8 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x20(%rsp)                           #! EA = L0x7fffffffc890; PC = 0x5555555687db *)
mov L0x7fffffffc890 r8;
(* mov    %r9,0x28(%rsp)                           #! EA = L0x7fffffffc898; PC = 0x5555555687e0 *)
mov L0x7fffffffc898 r9;
(* mov    %r10,0x30(%rsp)                          #! EA = L0x7fffffffc8a0; PC = 0x5555555687e5 *)
mov L0x7fffffffc8a0 r10;
(* mov    %r11,0x38(%rsp)                          #! EA = L0x7fffffffc8a8; PC = 0x5555555687ea *)
mov L0x7fffffffc8a8 r11;
(* mov    %r12,0x40(%rsp)                          #! EA = L0x7fffffffc8b0; PC = 0x5555555687ef *)
mov L0x7fffffffc8b0 r12;
(* mov    %r13,0x48(%rsp)                          #! EA = L0x7fffffffc8b8; PC = 0x5555555687f4 *)
mov L0x7fffffffc8b8 r13;
(* mov    (%rdx),%r8                               #! EA = L0x7fffffffd0b0; Value = 0x00000000019dfe69; PC = 0x5555555687f9 *)
mov r8 L0x7fffffffd0b0;
(* mov    0x8(%rdx),%r9                            #! EA = L0x7fffffffd0b8; Value = 0x0000000008046284; PC = 0x5555555687fc *)
mov r9 L0x7fffffffd0b8;
(* mov    0x10(%rdx),%r10                          #! EA = L0x7fffffffd0c0; Value = 0xfffffffffffffffd; PC = 0x555555568800 *)
mov r10 L0x7fffffffd0c0;
(* mov    0x18(%rdx),%r11                          #! EA = L0x7fffffffd0c8; Value = 0x00007fffffffd86f; PC = 0x555555568804 *)
mov r11 L0x7fffffffd0c8;
(* mov    0x20(%rdx),%r12                          #! EA = L0x7fffffffd0d0; Value = 0x0000ffffeff86580; PC = 0x555555568808 *)
mov r12 L0x7fffffffd0d0;
(* mov    0x28(%rdx),%r13                          #! EA = L0x7fffffffd0d8; Value = 0x00007fffffffd860; PC = 0x55555556880c *)
mov r13 L0x7fffffffd0d8;
(* add    0x30(%rdx),%r8                           #! EA = L0x7fffffffd0e0; Value = 0x00007ffff97ba199; PC = 0x555555568810 *)
adds carry r8 L0x7fffffffd0e0 r8;
(* adc    0x38(%rdx),%r9                           #! EA = L0x7fffffffd0e8; Value = 0x00017fffefd94f0a; PC = 0x555555568814 *)
adcs carry r9 L0x7fffffffd0e8 r9 carry;
(* adc    0x40(%rdx),%r10                          #! EA = L0x7fffffffd0f0; Value = 0x00007ffff7ffd9eb; PC = 0x555555568818 *)
adcs carry r10 L0x7fffffffd0f0 r10 carry;
(* adc    0x48(%rdx),%r11                          #! EA = L0x7fffffffd0f8; Value = 0x00007fffffffd870; PC = 0x55555556881c *)
adcs carry r11 L0x7fffffffd0f8 r11 carry;
(* adc    0x50(%rdx),%r12                          #! EA = L0x7fffffffd100; Value = 0x0000fffff7fccb50; PC = 0x555555568820 *)
adcs carry r12 L0x7fffffffd100 r12 carry;
(* adc    0x58(%rdx),%r13                          #! EA = L0x7fffffffd108; Value = 0x00007fffffffdc60; PC = 0x555555568824 *)
adcs carry r13 L0x7fffffffd108 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x50(%rsp)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568828 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x58(%rsp)                           #! EA = L0x7fffffffc8c8; PC = 0x55555556882d *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x60(%rsp)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568832 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x68(%rsp)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568837 *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x70(%rsp)                          #! EA = L0x7fffffffc8e0; PC = 0x55555556883c *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x78(%rsp)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568841 *)
mov L0x7fffffffc8e8 r13;
(* #lea    0x20(%rsp),%rsi                          #! PC = 0x555555568846 *)
#lea    %%EA,%%rsi                          #! 0x555555568846 = 0x555555568846;
(* #lea    0x50(%rsp),%rbx                          #! PC = 0x55555556884b *)
#lea    %%EA,%%rbx                          #! 0x55555556884b = 0x55555556884b;


(* t0 *)
assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8] =
       (limbs 64 [a00, a01, a02, a03, a04, a05] +
        limbs 64 [a10, a11, a12, a13, a14, a15])
    && true;

(* t1 *)
assert limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       (limbs 64 [b00, b01, b02, b03, b04, b05] +
        limbs 64 [b10, b11, b12, b13, b14, b15])
    && true;


(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568850 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568850 = 0x555555568850;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffc8c0; Value = 0x00007ffffb19a002; PC = 0x555555568a64 *)
mov rdx L0x7fffffffc8c0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc890; Value = 0x0000ffffefd91330; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc890;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc898; Value = 0x000080005f5d9ca5; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc898;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf68; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc8a0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x00007ffff7fb79b8; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc8a8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x00017fffefd7e928; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc8b0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x0000ffffeffb50e6; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc8b8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcad0; PC = 0x555555568a95 *)
mov L0x7fffffffcad0 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffc8c8; Value = 0x00017ffff7ddb18e; PC = 0x555555568abe *)
mov rdx L0x7fffffffc8c8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;

mov OF 0@uint1;

(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcad8; PC = 0x555555568adf *)
mov L0x7fffffffcad8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf68; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007ffff7fb79b8; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffefd7e928; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x0000ffffeffb50e6; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffc8d0; Value = 0x00007ffff7ffd9e8; PC = 0x555555568b3c *)
mov rdx L0x7fffffffc8d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcae0; PC = 0x555555568b63 *)
mov L0x7fffffffcae0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf68; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007ffff7fb79b8; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffefd7e928; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x0000ffffeffb50e6; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffc8d8; Value = 0x0000ffffffffb0e0; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffc8d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcae8; PC = 0x555555568be7 *)
mov L0x7fffffffcae8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf68; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007ffff7fb79b8; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffefd7e928; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x0000ffffeffb50e6; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffc8e0; Value = 0x0001ffffe7f530d0; PC = 0x555555568c44 *)
mov rdx L0x7fffffffc8e0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcaf0; PC = 0x555555568c6b *)
mov L0x7fffffffcaf0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf68; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007ffff7fb79b8; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffefd7e928; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x0000ffffeffb50e6; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffc8e8; Value = 0x0000ffffffffb4c0; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffc8e8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcaf8; PC = 0x555555568cef *)
mov L0x7fffffffcaf8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf68; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007ffff7fb79b8; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffefd7e928; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x0000ffffeffb50e6; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcb00; PC = 0x555555568d61 *)
mov L0x7fffffffcb00 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcb08; PC = 0x555555568d65 *)
mov L0x7fffffffcb08 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcb10; PC = 0x555555568d69 *)
mov L0x7fffffffcb10 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcb18; PC = 0x555555568d6d *)
mov L0x7fffffffcb18 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcb20; PC = 0x555555568d71 *)
mov L0x7fffffffcb20 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcb28; PC = 0x555555568d75 *)
mov L0x7fffffffcb28 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->im, t0, t1) *)

assert limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                 L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                 L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                 L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] =
       (((limbs 64 [a00, a01, a02, a03, a04, a05]) +
         (limbs 64 [a10, a11, a12, a13, a14, a15])) *
        ((limbs 64 [b00, b01, b02, b03, b04, b05]) +
         (limbs 64 [b10, b11, b12, b13, b14, b15])))
    && limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                 L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #mov    (%rsp),%rsi                              #! EA = L0x7fffffffc870; Value = 0x00007fffffffcf90; PC = 0x555555568855 *)
#mov    %%L0x7fffffffc870,%%rsi                              #! L0x7fffffffc870 = L0x7fffffffc870; 0x00007fffffffcf90 = 0x00007fffffffcf90; 0x555555568855 = 0x555555568855;
(* #mov    0x8(%rsp),%rbx                           #! EA = L0x7fffffffc878; Value = 0x00007fffffffd0b0; PC = 0x555555568859 *)
#mov    %%L0x7fffffffc878,%%rbx                           #! L0x7fffffffc878 = L0x7fffffffc878; 0x00007fffffffd0b0 = 0x00007fffffffd0b0; 0x555555568859 = 0x555555568859;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x55555556885e *)
#lea    -%%EA,%%rdi                         #! 0x55555556885e = 0x55555556885e;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568862 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568862 = 0x555555568862;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffd0b0; Value = 0x00000000019dfe69; PC = 0x555555568a64 *)
mov rdx L0x7fffffffd0b0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffcf90; Value = 0x0000000000000000; PC = 0x555555568a67 *)
mov r14 L0x7fffffffcf90;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffcf98; Value = 0x0000000000000000; PC = 0x555555568a6a *)
mov r15 L0x7fffffffcf98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffcfa0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x555555568a72 *)
mov r11 L0x7fffffffcfa8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555568a76 *)
mov r12 L0x7fffffffcfb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555568a7a *)
mov r13 L0x7fffffffcfb8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffca70; PC = 0x555555568a95 *)
mov L0x7fffffffca70 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffd0b8; Value = 0x0000000008046284; PC = 0x555555568abe *)
mov rdx L0x7fffffffd0b8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffca78; PC = 0x555555568adf *)
mov L0x7fffffffca78 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffcfa0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffcfa8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffcfb0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffcfb8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffd0c0; Value = 0xfffffffffffffffd; PC = 0x555555568b3c *)
mov rdx L0x7fffffffd0c0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffca80; PC = 0x555555568b63 *)
mov L0x7fffffffca80 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffcfa0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffcfa8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffcfb0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffcfb8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffd0c8; Value = 0x00007fffffffd86f; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffd0c8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffca88; PC = 0x555555568be7 *)
mov L0x7fffffffca88 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffcfa0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffcfa8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffcfb0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffcfb8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffd0d0; Value = 0x0000ffffeff86580; PC = 0x555555568c44 *)
mov rdx L0x7fffffffd0d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffca90; PC = 0x555555568c6b *)
mov L0x7fffffffca90 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffcfa0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffcfa8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffcfb0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffcfb8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffd0d8; Value = 0x00007fffffffd860; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffd0d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffca98; PC = 0x555555568cef *)
mov L0x7fffffffca98 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffcfa0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffcfa8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffcfb0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffcfb8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcaa0; PC = 0x555555568d61 *)
mov L0x7fffffffcaa0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcaa8; PC = 0x555555568d65 *)
mov L0x7fffffffcaa8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcab0; PC = 0x555555568d69 *)
mov L0x7fffffffcab0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcab8; PC = 0x555555568d6d *)
mov L0x7fffffffcab8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcac0; PC = 0x555555568d71 *)
mov L0x7fffffffcac0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcac8; PC = 0x555555568d75 *)
mov L0x7fffffffcac8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->re, a->re, b->re) *)

assert limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                 L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                 L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                 L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] =
       ((limbs 64 [a00, a01, a02, a03, a04, a05]) *
        (limbs 64 [b00, b01, b02, b03, b04, b05]))
    && limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
		 L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    0xb0(%rsi),%rsi                          #! PC = 0x555555568867 *)
#lea    %%EA,%%rsi                          #! 0x555555568867 = 0x555555568867;
(* #lea    0x30(%rbx),%rbx                          #! PC = 0x55555556886e *)
#lea    %%EA,%%rbx                          #! 0x55555556886e = 0x55555556886e;
(* #lea    0x20(%rsp),%rdi                          #! PC = 0x555555568872 *)
#lea    %%EA,%%rdi                          #! 0x555555568872 = 0x555555568872;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568877 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568877 = 0x555555568877;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffd0e0; Value = 0x00007ffff97ba199; PC = 0x555555568a64 *)
mov rdx L0x7fffffffd0e0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffcfc0; Value = 0x0000ffffefd91330; PC = 0x555555568a67 *)
mov r14 L0x7fffffffcfc0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffcfc8; Value = 0x000080005f5d9ca5; PC = 0x555555568a6a *)
mov r15 L0x7fffffffcfc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x555555568a6e *)
mov r10 L0x7fffffffcfd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x555555568a72 *)
mov r11 L0x7fffffffcfd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555568a76 *)
mov r12 L0x7fffffffcfe0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555568a7a *)
mov r13 L0x7fffffffcfe8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffc890; PC = 0x555555568a95 *)
mov L0x7fffffffc890 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffd0e8; Value = 0x00017fffefd94f0a; PC = 0x555555568abe *)
mov rdx L0x7fffffffd0e8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffc898; PC = 0x555555568adf *)
mov L0x7fffffffc898 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffcfd0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffcfd8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffcfe0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffcfe8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffd0f0; Value = 0x00007ffff7ffd9eb; PC = 0x555555568b3c *)
mov rdx L0x7fffffffd0f0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffc8a0; PC = 0x555555568b63 *)
mov L0x7fffffffc8a0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffcfd0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffcfd8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffcfe0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffcfe8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffd0f8; Value = 0x00007fffffffd870; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffd0f8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffc8a8; PC = 0x555555568be7 *)
mov L0x7fffffffc8a8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffcfd0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffcfd8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffcfe0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffcfe8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffd100; Value = 0x0000fffff7fccb50; PC = 0x555555568c44 *)
mov rdx L0x7fffffffd100;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffc8b0; PC = 0x555555568c6b *)
mov L0x7fffffffc8b0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffcfd0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffcfd8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffcfe0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffcfe8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffd108; Value = 0x00007fffffffdc60; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffd108;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffc8b8; PC = 0x555555568cef *)
mov L0x7fffffffc8b8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffcfd0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffcfd8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffcfe0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffcfe8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;
(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)

assert true && OF = 0@1;
assume OF = 0 && true;

adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568d61 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffc8c8; PC = 0x555555568d65 *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568d69 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568d6d *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffc8e0; PC = 0x555555568d71 *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568d75 *)
mov L0x7fffffffc8e8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(tx, a->im, b->im) *)

assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                 L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       ((limbs 64 [a10, a11, a12, a13, a14, a15]) *
        (limbs 64 [b10, b11, b12, b13, b14, b15]))
    && limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
		 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


rcut and [limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                    L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;

ghost L0x7fffffffcad0o@uint64, L0x7fffffffcad8o@uint64, L0x7fffffffcae0o@uint64,
      L0x7fffffffcae8o@uint64, L0x7fffffffcaf0o@uint64, L0x7fffffffcaf8o@uint64,
      L0x7fffffffcb00o@uint64, L0x7fffffffcb08o@uint64, L0x7fffffffcb10o@uint64,
      L0x7fffffffcb18o@uint64, L0x7fffffffcb20o@uint64, L0x7fffffffcb28o@uint64 :
      and [L0x7fffffffcad0o=L0x7fffffffcad0, L0x7fffffffcad8o=L0x7fffffffcad8,
           L0x7fffffffcae0o=L0x7fffffffcae0, L0x7fffffffcae8o=L0x7fffffffcae8,
           L0x7fffffffcaf0o=L0x7fffffffcaf0, L0x7fffffffcaf8o=L0x7fffffffcaf8,
           L0x7fffffffcb00o=L0x7fffffffcb00, L0x7fffffffcb08o=L0x7fffffffcb08,
           L0x7fffffffcb10o=L0x7fffffffcb10, L0x7fffffffcb18o=L0x7fffffffcb18,
           L0x7fffffffcb20o=L0x7fffffffcb20, L0x7fffffffcb28o=L0x7fffffffcb28]
   && and [L0x7fffffffcad0o=L0x7fffffffcad0, L0x7fffffffcad8o=L0x7fffffffcad8,
           L0x7fffffffcae0o=L0x7fffffffcae0, L0x7fffffffcae8o=L0x7fffffffcae8,
           L0x7fffffffcaf0o=L0x7fffffffcaf0, L0x7fffffffcaf8o=L0x7fffffffcaf8,
           L0x7fffffffcb00o=L0x7fffffffcb00, L0x7fffffffcb08o=L0x7fffffffcb08,
           L0x7fffffffcb10o=L0x7fffffffcb10, L0x7fffffffcb18o=L0x7fffffffcb18,
           L0x7fffffffcb20o=L0x7fffffffcb20, L0x7fffffffcb28o=L0x7fffffffcb28];


(* #mov    0x10(%rsp),%rsi                          #! EA = L0x7fffffffc880; Value = 0x00007fffffffcad0; PC = 0x55555556887c *)
#mov    %%L0x7fffffffc880,%%rsi                          #! L0x7fffffffc880 = L0x7fffffffc880; 0x00007fffffffcad0 = 0x00007fffffffcad0; 0x55555556887c = 0x55555556887c;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x555555568881 *)
#lea    %%EA,%%rdx                          #! 0x555555568881 = 0x555555568881;
(* #mov    0x18(%rsp),%rcx                          #! EA = L0x7fffffffc888; Value = 0x000055555556c740; PC = 0x555555568886 *)
#mov    %%L0x7fffffffc888,%%rcx                          #! L0x7fffffffc888 = L0x7fffffffc888; 0x000055555556c740 = 0x000055555556c740; 0x555555568886 = 0x555555568886;
(* #mov    %rsi,%rdi                                #! PC = 0x55555556888b *)
#mov    %%rsi,%%rdi                                #! 0x55555556888b = 0x55555556888b;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556888e *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556888e = 0x55555556888e;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcad0; Value = 0x29e924ba7b602660; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcad0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcad8; Value = 0xeb599935d4dc20f0; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcad8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcae0; Value = 0xacbc7ae3b23bb7b4; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcae0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcae8; Value = 0xf28c11ee7f56f1a7; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcae8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcaf0; Value = 0x8467b4eb022fb8ea; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcaf0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcaf8; Value = 0x6c5d4984fcaff149; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcaf8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcb00; Value = 0x01a86e3ab493f844; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcb00;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x2b9a4393c5dda7b0; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcb08; Value = 0x0613f4d4bec3c7fa; PC = 0x555555568302 *)
mov r15 L0x7fffffffcb08;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x89885ea38dd3e4e5; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcb10; Value = 0xf2ea781b5d843783; PC = 0x55555556830a *)
mov rax L0x7fffffffcb10;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x7a31d0e405b4b7b5; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcb18; Value = 0x4c6522545a317c75; PC = 0x555555568312 *)
mov rbx L0x7fffffffcb18;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x2f5a666fff549ede; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcb20; Value = 0x05a604b8e0781c43; PC = 0x55555556831a *)
mov rbp L0x7fffffffcb20;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x98a7817093ca69eb; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcb28; Value = 0x00000000ffffeffb; PC = 0x555555568322 *)
mov rsi L0x7fffffffcb28;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0xfc0db0f08e6d52d4; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcad0; PC = 0x55555556832a *)
mov L0x7fffffffcad0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x4264395b05fbe5a0; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcad8; PC = 0x555555568334 *)
mov L0x7fffffffcad8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0xfc32d53220f92a2b; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcae0; PC = 0x555555568340 *)
mov L0x7fffffffcae0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0xb24238aa618e25c4; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcae8; PC = 0x55555556834c *)
mov L0x7fffffffcae8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x2b662d6c16930ff5; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcaf0; PC = 0x555555568358 *)
mov L0x7fffffffcaf0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0xc475011e52dd3baa; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcaf8; PC = 0x555555568364 *)
mov L0x7fffffffcaf8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x000000003ffffbfe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcb00; PC = 0x55555556838b *)
mov L0x7fffffffcb00 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcb08; PC = 0x555555568392 *)
mov L0x7fffffffcb08 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcb10; PC = 0x555555568399 *)
mov L0x7fffffffcb10 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcb18; PC = 0x5555555683a0 *)
mov L0x7fffffffcb18 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcb20; PC = 0x5555555683a7 *)
mov L0x7fffffffcb20 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcb28; PC = 0x5555555683ab *)
mov L0x7fffffffcb28 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                         L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                         L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                         L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcad0o, L0x7fffffffcad8o, L0x7fffffffcae0o,
                        L0x7fffffffcae8o, L0x7fffffffcaf0o, L0x7fffffffcaf8o,
                        L0x7fffffffcb00o, L0x7fffffffcb08o, L0x7fffffffcb10o,
                        L0x7fffffffcb18o, L0x7fffffffcb20o, L0x7fffffffcb28o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                         L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                         L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                         L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcad0o, L0x7fffffffcad8o, L0x7fffffffcae0o,
                        L0x7fffffffcae8o, L0x7fffffffcaf0o, L0x7fffffffcaf8o,
                        L0x7fffffffcb00o, L0x7fffffffcb08o, L0x7fffffffcb10o,
                        L0x7fffffffcb18o, L0x7fffffffcb20o, L0x7fffffffcb28o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

ghost L0x7fffffffcad0p@uint64, L0x7fffffffcad8p@uint64, L0x7fffffffcae0p@uint64,
      L0x7fffffffcae8p@uint64, L0x7fffffffcaf0p@uint64, L0x7fffffffcaf8p@uint64,
      L0x7fffffffcb00p@uint64, L0x7fffffffcb08p@uint64, L0x7fffffffcb10p@uint64,
      L0x7fffffffcb18p@uint64, L0x7fffffffcb20p@uint64, L0x7fffffffcb28p@uint64 :
      and [L0x7fffffffcad0p=L0x7fffffffcad0, L0x7fffffffcad8p=L0x7fffffffcad8,
           L0x7fffffffcae0p=L0x7fffffffcae0, L0x7fffffffcae8p=L0x7fffffffcae8,
           L0x7fffffffcaf0p=L0x7fffffffcaf0, L0x7fffffffcaf8p=L0x7fffffffcaf8,
           L0x7fffffffcb00p=L0x7fffffffcb00, L0x7fffffffcb08p=L0x7fffffffcb08,
           L0x7fffffffcb10p=L0x7fffffffcb10, L0x7fffffffcb18p=L0x7fffffffcb18,
           L0x7fffffffcb20p=L0x7fffffffcb20, L0x7fffffffcb28p=L0x7fffffffcb28]
   && and [L0x7fffffffcad0p=L0x7fffffffcad0, L0x7fffffffcad8p=L0x7fffffffcad8,
           L0x7fffffffcae0p=L0x7fffffffcae0, L0x7fffffffcae8p=L0x7fffffffcae8,
           L0x7fffffffcaf0p=L0x7fffffffcaf0, L0x7fffffffcaf8p=L0x7fffffffcaf8,
           L0x7fffffffcb00p=L0x7fffffffcb00, L0x7fffffffcb08p=L0x7fffffffcb08,
           L0x7fffffffcb10p=L0x7fffffffcb10, L0x7fffffffcb18p=L0x7fffffffcb18,
           L0x7fffffffcb20p=L0x7fffffffcb20, L0x7fffffffcb28p=L0x7fffffffcb28];



(* #lea    (%rdi),%rsi                              #! PC = 0x555555568893 *)
#lea    %%EA,%%rsi                              #! 0x555555568893 = 0x555555568893;
(* #lea    -0x60(%rdi),%rdx                         #! PC = 0x555555568896 *)
#lea    -%%EA,%%rdx                         #! 0x555555568896 = 0x555555568896;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556889a *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556889a = 0x55555556889a;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcad0; Value = 0xfe4ee126b5827eb0; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcad0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcad8; Value = 0x61d13a9247083c0a; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcad8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcae0; Value = 0x328aa9ffac86ffff; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcae0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcae8; Value = 0xc331ab7e800252c9; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcae8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcaf0; Value = 0xebc0337a6e654eff; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcaf0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcaf8; Value = 0x704f98946e429e74; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcaf8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcb00; Value = 0xbf4434dfae9812a3; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcb00;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffca70; Value = 0x0000000000000000; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffca70;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcb08; Value = 0x09e11fa29dca9dce; PC = 0x555555568302 *)
mov r15 L0x7fffffffcb08;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffca78; Value = 0x0000000000000000; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffca78 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcb10; Value = 0x40a83f70fbf611be; PC = 0x55555556830a *)
mov rax L0x7fffffffcb10;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffca80; Value = 0x0000000000000000; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffca80 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcb18; Value = 0x20fef4e8439e6c80; PC = 0x555555568312 *)
mov rbx L0x7fffffffcb18;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffca88; Value = 0x0000000000000000; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffca88 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcb20; Value = 0x4131039a8d9ae099; PC = 0x55555556831a *)
mov rbp L0x7fffffffcb20;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffca90; Value = 0xff2788abdf40f000; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffca90 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcb28; Value = 0x00000000bffff3fc; PC = 0x555555568322 *)
mov rsi L0x7fffffffcb28;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffca98; Value = 0x30294494670d728a; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffca98 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcad0; PC = 0x55555556832a *)
mov L0x7fffffffcad0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcaa0; Value = 0x31004a048131ac41; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffcaa0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcad8; PC = 0x555555568334 *)
mov L0x7fffffffcad8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcaa8; Value = 0xa436813d4c8816ee; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffcaa8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcae0; PC = 0x555555568340 *)
mov L0x7fffffffcae0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcab0; Value = 0x61a68733ce31843d; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffcab0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcae8; PC = 0x55555556834c *)
mov L0x7fffffffcae8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcab8; Value = 0x7bcc63dea29465f6; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffcab8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcaf0; PC = 0x555555568358 *)
mov L0x7fffffffcaf0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcac0; Value = 0xbe5e013e1d6f2e77; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffcac0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcaf8; PC = 0x555555568364 *)
mov L0x7fffffffcaf8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcac8; Value = 0x000000003ffffbfe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffcac8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcb00; PC = 0x55555556838b *)
mov L0x7fffffffcb00 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcb08; PC = 0x555555568392 *)
mov L0x7fffffffcb08 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcb10; PC = 0x555555568399 *)
mov L0x7fffffffcb10 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcb18; PC = 0x5555555683a0 *)
mov L0x7fffffffcb18 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcb20; PC = 0x5555555683a7 *)
mov L0x7fffffffcb20 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcb28; PC = 0x5555555683ab *)
mov L0x7fffffffcb28 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                         L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                         L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                         L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]) +
              (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                         L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                         L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                         L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
             (limbs 64 [L0x7fffffffcad0p, L0x7fffffffcad8p, L0x7fffffffcae0p,
                        L0x7fffffffcae8p, L0x7fffffffcaf0p, L0x7fffffffcaf8p,
                        L0x7fffffffcb00p, L0x7fffffffcb08p, L0x7fffffffcb10p,
                        L0x7fffffffcb18p, L0x7fffffffcb20p, L0x7fffffffcb28p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                         L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                         L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                         L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]) +
              (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                         L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                         L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                         L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
             (limbs 64 [L0x7fffffffcad0p, L0x7fffffffcad8p, L0x7fffffffcae0p,
                        L0x7fffffffcae8p, L0x7fffffffcaf0p, L0x7fffffffcaf8p,
                        L0x7fffffffcb00p, L0x7fffffffcb08p, L0x7fffffffcb10p,
                        L0x7fffffffcb18p, L0x7fffffffcb20p, L0x7fffffffcb28p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                    L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
          limbs 64[a00,a01,a02,a03,a04,a05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a10,a11,a12,a13,a14,a15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a20,a21,a22,a23,a24,a25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a30,a31,a32,a33,a34,a35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a40,a41,a42,a43,a44,a45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a50,a51,a52,a53,a54,a55] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b00,b01,b02,b03,b04,b05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b10,b11,b12,b13,b14,b15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b20,b21,b22,b23,b24,b25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b30,b31,b32,b33,b34,b35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b40,b41,b42,b43,b44,b45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b50,b51,b52,b53,b54,b55] <u limbs 64[m0,m1,m2,m3,m4,m5]
     ] prove with all cuts, precondition;

ghost L0x7fffffffca70o@uint64, L0x7fffffffca78o@uint64, L0x7fffffffca80o@uint64,
      L0x7fffffffca88o@uint64, L0x7fffffffca90o@uint64, L0x7fffffffca98o@uint64,
      L0x7fffffffcaa0o@uint64, L0x7fffffffcaa8o@uint64, L0x7fffffffcab0o@uint64,
      L0x7fffffffcab8o@uint64, L0x7fffffffcac0o@uint64, L0x7fffffffcac8o@uint64 :
      and [L0x7fffffffca70o=L0x7fffffffca70, L0x7fffffffca78o=L0x7fffffffca78,
           L0x7fffffffca80o=L0x7fffffffca80, L0x7fffffffca88o=L0x7fffffffca88,
           L0x7fffffffca90o=L0x7fffffffca90, L0x7fffffffca98o=L0x7fffffffca98,
           L0x7fffffffcaa0o=L0x7fffffffcaa0, L0x7fffffffcaa8o=L0x7fffffffcaa8,
           L0x7fffffffcab0o=L0x7fffffffcab0, L0x7fffffffcab8o=L0x7fffffffcab8,
           L0x7fffffffcac0o=L0x7fffffffcac0, L0x7fffffffcac8o=L0x7fffffffcac8]
   && and [L0x7fffffffca70o=L0x7fffffffca70, L0x7fffffffca78o=L0x7fffffffca78,
           L0x7fffffffca80o=L0x7fffffffca80, L0x7fffffffca88o=L0x7fffffffca88,
           L0x7fffffffca90o=L0x7fffffffca90, L0x7fffffffca98o=L0x7fffffffca98,
           L0x7fffffffcaa0o=L0x7fffffffcaa0, L0x7fffffffcaa8o=L0x7fffffffcaa8,
           L0x7fffffffcab0o=L0x7fffffffcab0, L0x7fffffffcab8o=L0x7fffffffcab8,
           L0x7fffffffcac0o=L0x7fffffffcac0, L0x7fffffffcac8o=L0x7fffffffcac8];



(* #lea    -0x60(%rdi),%rsi                         #! PC = 0x55555556889f *)
#lea    -%%EA,%%rsi                         #! 0x55555556889f = 0x55555556889f;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x5555555688a3 *)
#lea    %%EA,%%rdx                          #! 0x5555555688a3 = 0x5555555688a3;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x5555555688a8 *)
#lea    -%%EA,%%rdi                         #! 0x5555555688a8 = 0x5555555688a8;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x5555555688ac *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x5555555688ac = 0x5555555688ac;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffca70; Value = 0x0000000000000000; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffca70;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffca78; Value = 0x0000000000000000; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffca78;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffca80; Value = 0x0000000000000000; PC = 0x5555555682eb *)
mov r10 L0x7fffffffca80;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffca88; Value = 0x0000000000000000; PC = 0x5555555682ef *)
mov r11 L0x7fffffffca88;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffca90; Value = 0xff2788abdf40f000; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffca90;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffca98; Value = 0x30294494670d728a; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffca98;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcaa0; Value = 0x31004a048131ac41; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcaa0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x2b9a4393c5dda7b0; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcaa8; Value = 0xa436813d4c8816ee; PC = 0x555555568302 *)
mov r15 L0x7fffffffcaa8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x89885ea38dd3e4e5; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcab0; Value = 0x61a68733ce31843d; PC = 0x55555556830a *)
mov rax L0x7fffffffcab0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x7a31d0e405b4b7b5; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcab8; Value = 0x7bcc63dea29465f6; PC = 0x555555568312 *)
mov rbx L0x7fffffffcab8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x2f5a666fff549ede; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcac0; Value = 0xbe5e013e1d6f2e77; PC = 0x55555556831a *)
mov rbp L0x7fffffffcac0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x98a7817093ca69eb; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcac8; Value = 0x000000003ffffbfe; PC = 0x555555568322 *)
mov rsi L0x7fffffffcac8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0xfc0db0f08e6d52d4; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca70; PC = 0x55555556832a *)
mov L0x7fffffffca70 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x4264395b05fbe5a0; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca78; PC = 0x555555568334 *)
mov L0x7fffffffca78 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0xfc32d53220f92a2b; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca80; PC = 0x555555568340 *)
mov L0x7fffffffca80 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0xb24238aa618e25c4; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca88; PC = 0x55555556834c *)
mov L0x7fffffffca88 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x2b662d6c16930ff5; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca90; PC = 0x555555568358 *)
mov L0x7fffffffca90 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0xc475011e52dd3baa; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca98; PC = 0x555555568364 *)
mov L0x7fffffffca98 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x000000003ffffbfe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcaa0; PC = 0x55555556838b *)
mov L0x7fffffffcaa0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcaa8; PC = 0x555555568392 *)
mov L0x7fffffffcaa8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcab0; PC = 0x555555568399 *)
mov L0x7fffffffcab0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcab8; PC = 0x5555555683a0 *)
mov L0x7fffffffcab8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcac0; PC = 0x5555555683a7 *)
mov L0x7fffffffcac0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcac8; PC = 0x5555555683ab *)
mov L0x7fffffffcac8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                         L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                         L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                         L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffca70o, L0x7fffffffca78o, L0x7fffffffca80o,
                        L0x7fffffffca88o, L0x7fffffffca90o, L0x7fffffffca98o,
                        L0x7fffffffcaa0o, L0x7fffffffcaa8o, L0x7fffffffcab0o,
                        L0x7fffffffcab8o, L0x7fffffffcac0o, L0x7fffffffcac8o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                         L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                         L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                         L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffca70o, L0x7fffffffca78o, L0x7fffffffca80o,
                        L0x7fffffffca88o, L0x7fffffffca90o, L0x7fffffffca98o,
                        L0x7fffffffcaa0o, L0x7fffffffcaa8o, L0x7fffffffcab0o,
                        L0x7fffffffcab8o, L0x7fffffffcac0o, L0x7fffffffcac8o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;



(* mul_382x(t0, a[0], b[0]) *)

assert eqmod ((limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                         L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                         L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                         L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]) +
              (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                         L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                         L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                         L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]) * U)
             ((limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
    && true;

(* #lea    0x88(%rsp),%r8                           #! PC = 0x5555555688b1 *)
#lea    %%EA,%%r8                           #! 0x5555555688b1 = 0x5555555688b1;
(* #! <- SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #repz retq                                      #! PC = 0x5555555688d4 *)
#repz retq                                      #! 0x5555555688d4 = 0x5555555688d4;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #retq                                           #! PC = 0x55555555d7c8 *)
#retq                                           #! 0x55555555d7c8 = 0x55555555d7c8;
(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f637 *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f637 = 0x55555555f637;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcff0; Value = 0x00007ffff7ffdaab; PC = 0x5555555687ac *)
mov r8 L0x7fffffffcff0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcff8; Value = 0x00007ffff7dda330; PC = 0x5555555687af *)
mov r9 L0x7fffffffcff8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x5555555687b3 *)
mov r10 L0x7fffffffd000;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x5555555687b7 *)
mov r11 L0x7fffffffd008;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x5555555687bb *)
mov r12 L0x7fffffffd010;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x5555555687bf *)
mov r13 L0x7fffffffd018;
(* add    0x30(%rsi),%r8                           #! EA = L0x7fffffffd020; Value = 0x00007ffff7dda330; PC = 0x5555555687c3 *)
adds carry r8 L0x7fffffffd020 r8;
(* adc    0x38(%rsi),%r9                           #! EA = L0x7fffffffd028; Value = 0x0000000000000000; PC = 0x5555555687c7 *)
adcs carry r9 L0x7fffffffd028 r9 carry;
(* adc    0x40(%rsi),%r10                          #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x5555555687cb *)
adcs carry r10 L0x7fffffffd030 r10 carry;
(* adc    0x48(%rsi),%r11                          #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x5555555687cf *)
adcs carry r11 L0x7fffffffd038 r11 carry;
(* adc    0x50(%rsi),%r12                          #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x5555555687d3 *)
adcs carry r12 L0x7fffffffd040 r12 carry;
(* adc    0x58(%rsi),%r13                          #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x5555555687d7 *)
adcs carry r13 L0x7fffffffd048 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x20(%rsp)                           #! EA = L0x7fffffffc890; PC = 0x5555555687db *)
mov L0x7fffffffc890 r8;
(* mov    %r9,0x28(%rsp)                           #! EA = L0x7fffffffc898; PC = 0x5555555687e0 *)
mov L0x7fffffffc898 r9;
(* mov    %r10,0x30(%rsp)                          #! EA = L0x7fffffffc8a0; PC = 0x5555555687e5 *)
mov L0x7fffffffc8a0 r10;
(* mov    %r11,0x38(%rsp)                          #! EA = L0x7fffffffc8a8; PC = 0x5555555687ea *)
mov L0x7fffffffc8a8 r11;
(* mov    %r12,0x40(%rsp)                          #! EA = L0x7fffffffc8b0; PC = 0x5555555687ef *)
mov L0x7fffffffc8b0 r12;
(* mov    %r13,0x48(%rsp)                          #! EA = L0x7fffffffc8b8; PC = 0x5555555687f4 *)
mov L0x7fffffffc8b8 r13;
(* mov    (%rdx),%r8                               #! EA = L0x7fffffffd110; Value = 0x00007ffff7ffd9e8; PC = 0x5555555687f9 *)
mov r8 L0x7fffffffd110;
(* mov    0x8(%rdx),%r9                            #! EA = L0x7fffffffd118; Value = 0x0000000000000000; PC = 0x5555555687fc *)
mov r9 L0x7fffffffd118;
(* mov    0x10(%rdx),%r10                          #! EA = L0x7fffffffd120; Value = 0x0000000000000000; PC = 0x555555568800 *)
mov r10 L0x7fffffffd120;
(* mov    0x18(%rdx),%r11                          #! EA = L0x7fffffffd128; Value = 0x0000000000000000; PC = 0x555555568804 *)
mov r11 L0x7fffffffd128;
(* mov    0x20(%rdx),%r12                          #! EA = L0x7fffffffd130; Value = 0x0000000000000000; PC = 0x555555568808 *)
mov r12 L0x7fffffffd130;
(* mov    0x28(%rdx),%r13                          #! EA = L0x7fffffffd138; Value = 0x00007ffff7fda45c; PC = 0x55555556880c *)
mov r13 L0x7fffffffd138;
(* add    0x30(%rdx),%r8                           #! EA = L0x7fffffffd140; Value = 0x00007ffff7fb7000; PC = 0x555555568810 *)
adds carry r8 L0x7fffffffd140 r8;
(* adc    0x38(%rdx),%r9                           #! EA = L0x7fffffffd148; Value = 0x00000000677f9a5f; PC = 0x555555568814 *)
adcs carry r9 L0x7fffffffd148 r9 carry;
(* adc    0x40(%rdx),%r10                          #! EA = L0x7fffffffd150; Value = 0x00007ffff7fcf580; PC = 0x555555568818 *)
adcs carry r10 L0x7fffffffd150 r10 carry;
(* adc    0x48(%rdx),%r11                          #! EA = L0x7fffffffd158; Value = 0x00007ffff7fb79b8; PC = 0x55555556881c *)
adcs carry r11 L0x7fffffffd158 r11 carry;
(* adc    0x50(%rdx),%r12                          #! EA = L0x7fffffffd160; Value = 0x00007ffff7dca358; PC = 0x555555568820 *)
adcs carry r12 L0x7fffffffd160 r12 carry;
(* adc    0x58(%rdx),%r13                          #! EA = L0x7fffffffd168; Value = 0x00007ffff7fda88a; PC = 0x555555568824 *)
adcs carry r13 L0x7fffffffd168 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x50(%rsp)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568828 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x58(%rsp)                           #! EA = L0x7fffffffc8c8; PC = 0x55555556882d *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x60(%rsp)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568832 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x68(%rsp)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568837 *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x70(%rsp)                          #! EA = L0x7fffffffc8e0; PC = 0x55555556883c *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x78(%rsp)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568841 *)
mov L0x7fffffffc8e8 r13;
(* #lea    0x20(%rsp),%rsi                          #! PC = 0x555555568846 *)
#lea    %%EA,%%rsi                          #! 0x555555568846 = 0x555555568846;
(* #lea    0x50(%rsp),%rbx                          #! PC = 0x55555556884b *)
#lea    %%EA,%%rbx                          #! 0x55555556884b = 0x55555556884b;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568850 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568850 = 0x555555568850;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;


(* t0 *)
assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8] =
       (limbs 64 [a20, a21, a22, a23, a24, a25] +
        limbs 64 [a30, a31, a32, a33, a34, a35])
    && true;

(* t1 *)
assert limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       (limbs 64 [b20, b21, b22, b23, b24, b25] +
        limbs 64 [b30, b31, b32, b33, b34, b35])
    && true;




(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffc8c0; Value = 0x0000ffffeffb49e8; PC = 0x555555568a64 *)
mov rdx L0x7fffffffc8c0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc890; Value = 0x0000ffffefdd7ddb; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc890;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc898; Value = 0x00007ffff7dda330; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc898;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc8a0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc8a8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x0000fffff7fcd165; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc8b0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x00000000677f9a5f; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc8b8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcb90; PC = 0x555555568a95 *)
mov L0x7fffffffcb90 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffc8c8; Value = 0x00000000677f9a5f; PC = 0x555555568abe *)
mov rdx L0x7fffffffc8c8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcb98; PC = 0x555555568adf *)
mov L0x7fffffffcb98 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0000fffff7fcd165; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00000000677f9a5f; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffc8d0; Value = 0x00007ffff7fcf580; PC = 0x555555568b3c *)
mov rdx L0x7fffffffc8d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcba0; PC = 0x555555568b63 *)
mov L0x7fffffffcba0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0000fffff7fcd165; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00000000677f9a5f; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffc8d8; Value = 0x00007ffff7fb79b8; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffc8d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcba8; PC = 0x555555568be7 *)
mov L0x7fffffffcba8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0000fffff7fcd165; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00000000677f9a5f; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffc8e0; Value = 0x00007ffff7dca358; PC = 0x555555568c44 *)
mov rdx L0x7fffffffc8e0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcbb0; PC = 0x555555568c6b *)
mov L0x7fffffffcbb0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0000fffff7fcd165; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00000000677f9a5f; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffc8e8; Value = 0x0000ffffeffb4ce6; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffc8e8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcbb8; PC = 0x555555568cef *)
mov L0x7fffffffcbb8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0000fffff7fcd165; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00000000677f9a5f; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcbc0; PC = 0x555555568d61 *)
mov L0x7fffffffcbc0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcbc8; PC = 0x555555568d65 *)
mov L0x7fffffffcbc8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcbd0; PC = 0x555555568d69 *)
mov L0x7fffffffcbd0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcbd8; PC = 0x555555568d6d *)
mov L0x7fffffffcbd8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcbe0; PC = 0x555555568d71 *)
mov L0x7fffffffcbe0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcbe8; PC = 0x555555568d75 *)
mov L0x7fffffffcbe8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;



(* mul_384(ret->im, t0, t1) *)

assert limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                 L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                 L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                 L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] =
       (((limbs 64 [a20, a21, a22, a23, a24, a25]) +
         (limbs 64 [a30, a31, a32, a33, a34, a35])) *
        ((limbs 64 [b20, b21, b22, b23, b24, b25]) +
         (limbs 64 [b30, b31, b32, b33, b34, b35])))
    && limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbc0,
                 L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x55555556885e *)
#lea    -%%EA,%%rdi                         #! 0x55555556885e = 0x55555556885e;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568862 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568862 = 0x555555568862;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffd110; Value = 0x00007ffff7ffd9e8; PC = 0x555555568a64 *)
mov rdx L0x7fffffffd110;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffcff0; Value = 0x00007ffff7ffdaab; PC = 0x555555568a67 *)
mov r14 L0x7fffffffcff0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffcff8; Value = 0x00007ffff7dda330; PC = 0x555555568a6a *)
mov r15 L0x7fffffffcff8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffd000;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x555555568a72 *)
mov r11 L0x7fffffffd008;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555568a76 *)
mov r12 L0x7fffffffd010;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555568a7a *)
mov r13 L0x7fffffffd018;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcb30; PC = 0x555555568a95 *)
mov L0x7fffffffcb30 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffd118; Value = 0x0000000000000000; PC = 0x555555568abe *)
mov rdx L0x7fffffffd118;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcb38; PC = 0x555555568adf *)
mov L0x7fffffffcb38 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffd000 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffd008 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffd010 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffd018 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffd120; Value = 0x0000000000000000; PC = 0x555555568b3c *)
mov rdx L0x7fffffffd120;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcb40; PC = 0x555555568b63 *)
mov L0x7fffffffcb40 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffd000 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffd008 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffd010 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffd018 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffd128; Value = 0x0000000000000000; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffd128;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcb48; PC = 0x555555568be7 *)
mov L0x7fffffffcb48 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffd000 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffd008 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffd010 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffd018 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffd130; Value = 0x0000000000000000; PC = 0x555555568c44 *)
mov rdx L0x7fffffffd130;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcb50; PC = 0x555555568c6b *)
mov L0x7fffffffcb50 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffd000 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffd008 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffd010 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffd018 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffd138; Value = 0x00007ffff7fda45c; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffd138;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcb58; PC = 0x555555568cef *)
mov L0x7fffffffcb58 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffd000 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffd008 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffd010 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffd018 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcb60; PC = 0x555555568d61 *)
mov L0x7fffffffcb60 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcb68; PC = 0x555555568d65 *)
mov L0x7fffffffcb68 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcb70; PC = 0x555555568d69 *)
mov L0x7fffffffcb70 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcb78; PC = 0x555555568d6d *)
mov L0x7fffffffcb78 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcb80; PC = 0x555555568d71 *)
mov L0x7fffffffcb80 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcb88; PC = 0x555555568d75 *)
mov L0x7fffffffcb88 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;



(* mul_384(ret->re, a->re, b->re) *)

assert limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                 L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                 L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                 L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] =
       ((limbs 64 [a20, a21, a22, a23, a24, a25]) *
        (limbs 64 [b20, b21, b22, b23, b24, b25]))
    && limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
		 L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];






(* #lea    0xb0(%rsi),%rsi                          #! PC = 0x555555568867 *)
#lea    %%EA,%%rsi                          #! 0x555555568867 = 0x555555568867;
(* #lea    0x30(%rbx),%rbx                          #! PC = 0x55555556886e *)
#lea    %%EA,%%rbx                          #! 0x55555556886e = 0x55555556886e;
(* #lea    0x20(%rsp),%rdi                          #! PC = 0x555555568872 *)
#lea    %%EA,%%rdi                          #! 0x555555568872 = 0x555555568872;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568877 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568877 = 0x555555568877;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffd140; Value = 0x00007ffff7fb7000; PC = 0x555555568a64 *)
mov rdx L0x7fffffffd140;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffd020; Value = 0x00007ffff7dda330; PC = 0x555555568a67 *)
mov r14 L0x7fffffffd020;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffd028; Value = 0x0000000000000000; PC = 0x555555568a6a *)
mov r15 L0x7fffffffd028;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffd030;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x555555568a72 *)
mov r11 L0x7fffffffd038;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555568a76 *)
mov r12 L0x7fffffffd040;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555568a7a *)
mov r13 L0x7fffffffd048;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffc890; PC = 0x555555568a95 *)
mov L0x7fffffffc890 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffd148; Value = 0x00000000677f9a5f; PC = 0x555555568abe *)
mov rdx L0x7fffffffd148;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffc898; PC = 0x555555568adf *)
mov L0x7fffffffc898 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffd030 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffd038 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffd040 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffd048 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffd150; Value = 0x00007ffff7fcf580; PC = 0x555555568b3c *)
mov rdx L0x7fffffffd150;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffc8a0; PC = 0x555555568b63 *)
mov L0x7fffffffc8a0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffd030 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffd038 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffd040 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffd048 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffd158; Value = 0x00007ffff7fb79b8; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffd158;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffc8a8; PC = 0x555555568be7 *)
mov L0x7fffffffc8a8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffd030 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffd038 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffd040 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffd048 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffd160; Value = 0x00007ffff7dca358; PC = 0x555555568c44 *)
mov rdx L0x7fffffffd160;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffc8b0; PC = 0x555555568c6b *)
mov L0x7fffffffc8b0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffd030 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffd038 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffd040 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffd048 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffd168; Value = 0x00007ffff7fda88a; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffd168;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffc8b8; PC = 0x555555568cef *)
mov L0x7fffffffc8b8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffd030 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffd038 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffd040 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffd048 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568d61 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffc8c8; PC = 0x555555568d65 *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568d69 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568d6d *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffc8e0; PC = 0x555555568d71 *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568d75 *)
mov L0x7fffffffc8e8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(tx, a->im, b->im) *)

assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                 L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       ((limbs 64 [a30, a31, a32, a33, a34, a35]) *
        (limbs 64 [b30, b31, b32, b33, b34, b35]))
    && limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
		 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


rcut and [limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u 
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                    L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                    L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;

ghost L0x7fffffffcb90o@uint64, L0x7fffffffcb98o@uint64, L0x7fffffffcba0o@uint64,
      L0x7fffffffcba8o@uint64, L0x7fffffffcbb0o@uint64, L0x7fffffffcbb8o@uint64,
      L0x7fffffffcbc0o@uint64, L0x7fffffffcbc8o@uint64, L0x7fffffffcbd0o@uint64,
      L0x7fffffffcbd8o@uint64, L0x7fffffffcbe0o@uint64, L0x7fffffffcbe8o@uint64 :
      and [L0x7fffffffcb90o=L0x7fffffffcb90, L0x7fffffffcb98o=L0x7fffffffcb98,
           L0x7fffffffcba0o=L0x7fffffffcba0, L0x7fffffffcba8o=L0x7fffffffcba8,
           L0x7fffffffcbb0o=L0x7fffffffcbb0, L0x7fffffffcbb8o=L0x7fffffffcbb8,
           L0x7fffffffcbc0o=L0x7fffffffcbc0, L0x7fffffffcbc8o=L0x7fffffffcbc8,
           L0x7fffffffcbd0o=L0x7fffffffcbd0, L0x7fffffffcbd8o=L0x7fffffffcbd8,
           L0x7fffffffcbe0o=L0x7fffffffcbe0, L0x7fffffffcbe8o=L0x7fffffffcbe8]
   && and [L0x7fffffffcb90o=L0x7fffffffcb90, L0x7fffffffcb98o=L0x7fffffffcb98,
           L0x7fffffffcba0o=L0x7fffffffcba0, L0x7fffffffcba8o=L0x7fffffffcba8,
           L0x7fffffffcbb0o=L0x7fffffffcbb0, L0x7fffffffcbb8o=L0x7fffffffcbb8,
           L0x7fffffffcbc0o=L0x7fffffffcbc0, L0x7fffffffcbc8o=L0x7fffffffcbc8,
           L0x7fffffffcbd0o=L0x7fffffffcbd0, L0x7fffffffcbd8o=L0x7fffffffcbd8,
           L0x7fffffffcbe0o=L0x7fffffffcbe0, L0x7fffffffcbe8o=L0x7fffffffcbe8];




(* #lea    0x20(%rsp),%rdx                          #! PC = 0x555555568881 *)
#lea    %%EA,%%rdx                          #! 0x555555568881 = 0x555555568881;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556888e *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556888e = 0x55555556888e;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcb90; Value = 0xc8c5742664568178; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcb90;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcb98; Value = 0xdc7f5eea7200e59d; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcb98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcba0; Value = 0x9448d29d6bcdcaaa; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcba0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcba8; Value = 0x370c10351953cd8c; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcba8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcbb0; Value = 0xd760508f5411dfcf; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcbb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcbb8; Value = 0xd3a5fbb5da870a00; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcbb8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcbc0; Value = 0xa4ce6ba03f02f6fc; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcbc0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x89d9380347750000; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcbc8; Value = 0xb5a2afb615ed8a44; PC = 0x555555568302 *)
mov r15 L0x7fffffffcbc8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0xc9e59eb4d43a66bc; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcbd0; Value = 0xc095c020f3f6701d; PC = 0x55555556830a *)
mov rax L0x7fffffffcbd0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x4c992ba2ff3ebbbf; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcbd8; Value = 0xe8b08fd81a20b9d8; PC = 0x555555568312 *)
mov rbx L0x7fffffffcbd8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0xa99a76aaf566726d; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcbe0; Value = 0x93e51ff3ea9e0111; PC = 0x55555556831a *)
mov rbp L0x7fffffffcbe0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x228c3448c5298e10; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcbe8; Value = 0x000000000000677f; PC = 0x555555568322 *)
mov rsi L0x7fffffffcbe8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x17a74da6a39e8018; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcb90; PC = 0x55555556832a *)
mov L0x7fffffffcb90 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x4179dd0a095c2fdb; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcb98; PC = 0x555555568334 *)
mov L0x7fffffffcb98 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0xb8813e7aab896ee1; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcba0; PC = 0x555555568340 *)
mov L0x7fffffffcba0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0xcfe98f4b514c5508; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcba8; PC = 0x55555556834c *)
mov L0x7fffffffcba8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x1b4ae23a62cdfb4b; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcbb0; PC = 0x555555568358 *)
mov L0x7fffffffcbb0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0xc9f290d200fabaf3; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcbb8; PC = 0x555555568364 *)
mov L0x7fffffffcbb8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x00000000000033bf; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcbc0; PC = 0x55555556838b *)
mov L0x7fffffffcbc0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcbc8; PC = 0x555555568392 *)
mov L0x7fffffffcbc8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcbd0; PC = 0x555555568399 *)
mov L0x7fffffffcbd0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcbd8; PC = 0x5555555683a0 *)
mov L0x7fffffffcbd8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcbe0; PC = 0x5555555683a7 *)
mov L0x7fffffffcbe0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcbe8; PC = 0x5555555683ab *)
mov L0x7fffffffcbe8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                         L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                         L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                         L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcb90o, L0x7fffffffcb98o, L0x7fffffffcba0o,
                        L0x7fffffffcba8o, L0x7fffffffcbb0o, L0x7fffffffcbb8o,
                        L0x7fffffffcbc0o, L0x7fffffffcbc8o, L0x7fffffffcbd0o,
                        L0x7fffffffcbd8o, L0x7fffffffcbe0o, L0x7fffffffcbe8o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                         L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                         L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                         L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcb90o, L0x7fffffffcb98o, L0x7fffffffcba0o,
                        L0x7fffffffcba8o, L0x7fffffffcbb0o, L0x7fffffffcbb8o,
                        L0x7fffffffcbc0o, L0x7fffffffcbc8o, L0x7fffffffcbd0o,
                        L0x7fffffffcbd8o, L0x7fffffffcbe0o, L0x7fffffffcbe8o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

ghost L0x7fffffffcb90p@uint64, L0x7fffffffcb98p@uint64, L0x7fffffffcba0p@uint64,
      L0x7fffffffcba8p@uint64, L0x7fffffffcbb0p@uint64, L0x7fffffffcbb8p@uint64,
      L0x7fffffffcbc0p@uint64, L0x7fffffffcbc8p@uint64, L0x7fffffffcbd0p@uint64,
      L0x7fffffffcbd8p@uint64, L0x7fffffffcbe0p@uint64, L0x7fffffffcbe8p@uint64 :
      and [L0x7fffffffcb90p=L0x7fffffffcb90, L0x7fffffffcb98p=L0x7fffffffcb98,
           L0x7fffffffcba0p=L0x7fffffffcba0, L0x7fffffffcba8p=L0x7fffffffcba8,
           L0x7fffffffcbb0p=L0x7fffffffcbb0, L0x7fffffffcbb8p=L0x7fffffffcbb8,
           L0x7fffffffcbc0p=L0x7fffffffcbc0, L0x7fffffffcbc8p=L0x7fffffffcbc8,
           L0x7fffffffcbd0p=L0x7fffffffcbd0, L0x7fffffffcbd8p=L0x7fffffffcbd8,
           L0x7fffffffcbe0p=L0x7fffffffcbe0, L0x7fffffffcbe8p=L0x7fffffffcbe8]
   && and [L0x7fffffffcb90p=L0x7fffffffcb90, L0x7fffffffcb98p=L0x7fffffffcb98,
           L0x7fffffffcba0p=L0x7fffffffcba0, L0x7fffffffcba8p=L0x7fffffffcba8,
           L0x7fffffffcbb0p=L0x7fffffffcbb0, L0x7fffffffcbb8p=L0x7fffffffcbb8,
           L0x7fffffffcbc0p=L0x7fffffffcbc0, L0x7fffffffcbc8p=L0x7fffffffcbc8,
           L0x7fffffffcbd0p=L0x7fffffffcbd0, L0x7fffffffcbd8p=L0x7fffffffcbd8,
           L0x7fffffffcbe0p=L0x7fffffffcbe0, L0x7fffffffcbe8p=L0x7fffffffcbe8];



(* #lea    (%rdi),%rsi                              #! PC = 0x555555568893 *)
#lea    %%EA,%%rsi                              #! 0x555555568893 = 0x555555568893;
(* #lea    -0x60(%rdi),%rdx                         #! PC = 0x555555568896 *)
#lea    -%%EA,%%rdx                         #! 0x555555568896 = 0x555555568896;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556889a *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556889a = 0x55555556889a;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcb90; Value = 0x3eec3c231ce18178; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcb90;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcb98; Value = 0x1299c0359dc67ee1; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcb98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcba0; Value = 0x47afa6fa6c8f0eeb; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcba0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcba8; Value = 0x8d71998a23ed5b1f; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcba8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcbb0; Value = 0xb4d41c468ee851be; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcbb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcbb8; Value = 0xbbfeae0f36e889e8; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcbb8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcbc0; Value = 0x63548e9635a6c721; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcbc0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcb30; Value = 0xda89825b6d8e1df8; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffcb30;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcbc8; Value = 0xfd21713b6a641b63; PC = 0x555555568302 *)
mov r15 L0x7fffffffcbc8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb38; Value = 0xbecd141c9cff8b7f; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffcb38 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcbd0; Value = 0xf0ac30d5a2aa1b14; PC = 0x55555556830a *)
mov rax L0x7fffffffcbd0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcb40; Value = 0xa53425b1adcd77ee; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffcb40 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcbd8; Value = 0xcd65ad9db752be8c; PC = 0x555555568312 *)
mov rbx L0x7fffffffcbd8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcb48; Value = 0xd8c801430600d03d; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffcb48 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcbe0; Value = 0xc9f28f21e9a3461e; PC = 0x55555556831a *)
mov rbp L0x7fffffffcbe0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcb50; Value = 0xd8c6014326016c9f; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffcb50 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcbe8; Value = 0x00000000000033bf; PC = 0x555555568322 *)
mov rsi L0x7fffffffcbe8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcb58; Value = 0xbfc3940860071d73; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffcb58 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcb90; PC = 0x55555556832a *)
mov L0x7fffffffcb90 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb60; Value = 0xa4072614e6a15d3e; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffcb60 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcb98; PC = 0x555555568334 *)
mov L0x7fffffffcb98 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb68; Value = 0x8a6e3768221c37ed; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffcb68 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcba0; PC = 0x555555568340 *)
mov L0x7fffffffcba0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb70; Value = 0xbe0201435f21185c; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffcb70 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcba8; PC = 0x55555556834c *)
mov L0x7fffffffcba8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb78; Value = 0xbe0001437f2a8aee; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffcb78 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcbb0; PC = 0x555555568358 *)
mov L0x7fffffffcbb0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb80; Value = 0x000000003ffffbfe; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffcb80 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcbb8; PC = 0x555555568364 *)
mov L0x7fffffffcbb8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb88; Value = 0x0000000000000000; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffcb88 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcbc0; PC = 0x55555556838b *)
mov L0x7fffffffcbc0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcbc8; PC = 0x555555568392 *)
mov L0x7fffffffcbc8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcbd0; PC = 0x555555568399 *)
mov L0x7fffffffcbd0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcbd8; PC = 0x5555555683a0 *)
mov L0x7fffffffcbd8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcbe0; PC = 0x5555555683a7 *)
mov L0x7fffffffcbe0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcbe8; PC = 0x5555555683ab *)
mov L0x7fffffffcbe8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                         L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                         L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                         L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]) +
              (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                         L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                         L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                         L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
             (limbs 64 [L0x7fffffffcb90p, L0x7fffffffcb98p, L0x7fffffffcba0p,
                        L0x7fffffffcba8p, L0x7fffffffcbb0p, L0x7fffffffcbb8p,
                        L0x7fffffffcbc0p, L0x7fffffffcbc8p, L0x7fffffffcbd0p,
                        L0x7fffffffcbd8p, L0x7fffffffcbe0p, L0x7fffffffcbe8p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                         L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                         L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                         L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]) +
              (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                         L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                         L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                         L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
             (limbs 64 [L0x7fffffffcb90p, L0x7fffffffcb98p, L0x7fffffffcba0p,
                        L0x7fffffffcba8p, L0x7fffffffcbb0p, L0x7fffffffcbb8p,
                        L0x7fffffffcbc0p, L0x7fffffffcbc8p, L0x7fffffffcbd0p,
                        L0x7fffffffcbd8p, L0x7fffffffcbe0p, L0x7fffffffcbe8p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;

rcut and [limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u 
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                    L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
          limbs 64[a00,a01,a02,a03,a04,a05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a10,a11,a12,a13,a14,a15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a20,a21,a22,a23,a24,a25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a30,a31,a32,a33,a34,a35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a40,a41,a42,a43,a44,a45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a50,a51,a52,a53,a54,a55] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b00,b01,b02,b03,b04,b05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b10,b11,b12,b13,b14,b15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b20,b21,b22,b23,b24,b25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b30,b31,b32,b33,b34,b35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b40,b41,b42,b43,b44,b45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b50,b51,b52,b53,b54,b55] <u limbs 64[m0,m1,m2,m3,m4,m5]
     ] prove with all cuts, precondition;

ghost L0x7fffffffcb30o@uint64, L0x7fffffffcb38o@uint64, L0x7fffffffcb40o@uint64,
      L0x7fffffffcb48o@uint64, L0x7fffffffcb50o@uint64, L0x7fffffffcb58o@uint64,
      L0x7fffffffcb60o@uint64, L0x7fffffffcb68o@uint64, L0x7fffffffcb70o@uint64,
      L0x7fffffffcb78o@uint64, L0x7fffffffcb80o@uint64, L0x7fffffffcb88o@uint64 :
      and [L0x7fffffffcb30o=L0x7fffffffcb30, L0x7fffffffcb38o=L0x7fffffffcb38,
           L0x7fffffffcb40o=L0x7fffffffcb40, L0x7fffffffcb48o=L0x7fffffffcb48,
           L0x7fffffffcb50o=L0x7fffffffcb50, L0x7fffffffcb58o=L0x7fffffffcb58,
           L0x7fffffffcb60o=L0x7fffffffcb60, L0x7fffffffcb68o=L0x7fffffffcb68,
           L0x7fffffffcb70o=L0x7fffffffcb70, L0x7fffffffcb78o=L0x7fffffffcb78,
           L0x7fffffffcb80o=L0x7fffffffcb80, L0x7fffffffcb88o=L0x7fffffffcb88]
   && and [L0x7fffffffcb30o=L0x7fffffffcb30, L0x7fffffffcb38o=L0x7fffffffcb38,
           L0x7fffffffcb40o=L0x7fffffffcb40, L0x7fffffffcb48o=L0x7fffffffcb48,
           L0x7fffffffcb50o=L0x7fffffffcb50, L0x7fffffffcb58o=L0x7fffffffcb58,
           L0x7fffffffcb60o=L0x7fffffffcb60, L0x7fffffffcb68o=L0x7fffffffcb68,
           L0x7fffffffcb70o=L0x7fffffffcb70, L0x7fffffffcb78o=L0x7fffffffcb78,
           L0x7fffffffcb80o=L0x7fffffffcb80, L0x7fffffffcb88o=L0x7fffffffcb88];



(* #lea    -0x60(%rdi),%rsi                         #! PC = 0x55555556889f *)
#lea    -%%EA,%%rsi                         #! 0x55555556889f = 0x55555556889f;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x5555555688a3 *)
#lea    %%EA,%%rdx                          #! 0x5555555688a3 = 0x5555555688a3;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x5555555688a8 *)
#lea    -%%EA,%%rdi                         #! 0x5555555688a8 = 0x5555555688a8;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x5555555688ac *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x5555555688ac = 0x5555555688ac;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcb30; Value = 0xda89825b6d8e1df8; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcb30;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcb38; Value = 0xbecd141c9cff8b7f; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcb38;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcb40; Value = 0xa53425b1adcd77ee; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcb40;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcb48; Value = 0xd8c801430600d03d; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcb48;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcb50; Value = 0xd8c6014326016c9f; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcb50;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcb58; Value = 0xbfc3940860071d73; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcb58;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcb60; Value = 0xa4072614e6a15d3e; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcb60;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x89d9380347750000; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcb68; Value = 0x8a6e3768221c37ed; PC = 0x555555568302 *)
mov r15 L0x7fffffffcb68;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0xc9e59eb4d43a66bc; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcb70; Value = 0xbe0201435f21185c; PC = 0x55555556830a *)
mov rax L0x7fffffffcb70;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x4c992ba2ff3ebbbf; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcb78; Value = 0xbe0001437f2a8aee; PC = 0x555555568312 *)
mov rbx L0x7fffffffcb78;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0xa99a76aaf566726d; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcb80; Value = 0x000000003ffffbfe; PC = 0x55555556831a *)
mov rbp L0x7fffffffcb80;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x228c3448c5298e10; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcb88; Value = 0x0000000000000000; PC = 0x555555568322 *)
mov rsi L0x7fffffffcb88;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x17a74da6a39e8018; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcb30; PC = 0x55555556832a *)
mov L0x7fffffffcb30 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x4179dd0a095c2fdb; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcb38; PC = 0x555555568334 *)
mov L0x7fffffffcb38 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0xb8813e7aab896ee1; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcb40; PC = 0x555555568340 *)
mov L0x7fffffffcb40 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0xcfe98f4b514c5508; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcb48; PC = 0x55555556834c *)
mov L0x7fffffffcb48 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x1b4ae23a62cdfb4b; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcb50; PC = 0x555555568358 *)
mov L0x7fffffffcb50 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0xc9f290d200fabaf3; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcb58; PC = 0x555555568364 *)
mov L0x7fffffffcb58 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x00000000000033bf; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcb60; PC = 0x55555556838b *)
mov L0x7fffffffcb60 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcb68; PC = 0x555555568392 *)
mov L0x7fffffffcb68 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcb70; PC = 0x555555568399 *)
mov L0x7fffffffcb70 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcb78; PC = 0x5555555683a0 *)
mov L0x7fffffffcb78 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcb80; PC = 0x5555555683a7 *)
mov L0x7fffffffcb80 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcb88; PC = 0x5555555683ab *)
mov L0x7fffffffcb88 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                         L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                         L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                         L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcb30o, L0x7fffffffcb38o, L0x7fffffffcb40o,
                        L0x7fffffffcb48o, L0x7fffffffcb50o, L0x7fffffffcb58o,
                        L0x7fffffffcb60o, L0x7fffffffcb68o, L0x7fffffffcb70o,
                        L0x7fffffffcb78o, L0x7fffffffcb80o, L0x7fffffffcb88o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                         L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                         L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                         L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcb30o, L0x7fffffffcb38o, L0x7fffffffcb40o,
                        L0x7fffffffcb48o, L0x7fffffffcb50o, L0x7fffffffcb58o,
                        L0x7fffffffcb60o, L0x7fffffffcb68o, L0x7fffffffcb70o,
                        L0x7fffffffcb78o, L0x7fffffffcb80o, L0x7fffffffcb88o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


(* mul_382x(t1, a[1], b[1]) *)

assert eqmod ((limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                         L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                         L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                         L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]) +
              (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                         L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                         L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                         L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]) * U)
             ((limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
              (limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
    && true;



(* #lea    0x88(%rsp),%r8                           #! PC = 0x5555555688b1 *)
#lea    %%EA,%%r8                           #! 0x5555555688b1 = 0x5555555688b1;
(* #lea    0x30(%r8),%rsp                           #! PC = 0x5555555688d0 *)
#lea    %%EA,%rsp                           #! 0x5555555688d0 = 0x5555555688d0;
(* #! <- SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #repz retq                                      #! PC = 0x5555555688d4 *)
#repz retq                                      #! 0x5555555688d4 = 0x5555555688d4;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #retq                                           #! PC = 0x55555555d7c8 *)
#retq                                           #! 0x55555555d7c8 = 0x55555555d7c8;
(* #lea    0xc0(%rbx),%rdx                          #! PC = 0x55555555f641 *)
#lea    %%EA,%%rdx                          #! 0x55555555f641 = 0x55555555f641;
(* #lea    0xc0(%r15),%r9                           #! PC = 0x55555555f64d *)
#lea    %%EA,%%r9                           #! 0x55555555f64d = 0x55555555f64d;
(* #lea    0x2b0(%rsp),%r12                         #! PC = 0x55555555f654 *)
#lea    %%EA,%%r12                         #! 0x55555555f654 = 0x55555555f654;
(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f66c *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f66c = 0x55555555f66c;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #lea    0xef81(%rip),%rcx        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555d7b8 *)
#lea    0xef81(%rip),%%rcx        # 0x55555556c740 <BLS12_381_P>#! 0x55555555d7b8 = 0x55555555d7b8;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #endbr64                                         #! PC = 0x555555568780 *)
#endbr64                                         #! 0x555555568780 = 0x555555568780;
(* #lea    0x60(%rdi),%rdi                          #! PC = 0x555555568795 *)
#lea    %%EA,%%rdi                          #! 0x555555568795 = 0x555555568795;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd050; Value = 0x00000000019dfe69; PC = 0x5555555687ac *)
mov r8 L0x7fffffffd050;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd058; Value = 0x00007fffffffd7a4; PC = 0x5555555687af *)
mov r9 L0x7fffffffd058;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x5555555687b3 *)
mov r10 L0x7fffffffd060;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x5555555687b7 *)
mov r11 L0x7fffffffd068;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x5555555687bb *)
mov r12 L0x7fffffffd070;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x5555555687bf *)
mov r13 L0x7fffffffd078;
(* add    0x30(%rsi),%r8                           #! EA = L0x7fffffffd080; Value = 0x0000000000000000; PC = 0x5555555687c3 *)
adds carry r8 L0x7fffffffd080 r8;
(* adc    0x38(%rsi),%r9                           #! EA = L0x7fffffffd088; Value = 0x00007ffff7fb7520; PC = 0x5555555687c7 *)
adcs carry r9 L0x7fffffffd088 r9 carry;
(* adc    0x40(%rsi),%r10                          #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x5555555687cb *)
adcs carry r10 L0x7fffffffd090 r10 carry;
(* adc    0x48(%rsi),%r11                          #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x5555555687cf *)
adcs carry r11 L0x7fffffffd098 r11 carry;
(* adc    0x50(%rsi),%r12                          #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x5555555687d3 *)
adcs carry r12 L0x7fffffffd0a0 r12 carry;
(* adc    0x58(%rsi),%r13                          #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x5555555687d7 *)
adcs carry r13 L0x7fffffffd0a8 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x20(%rsp)                           #! EA = L0x7fffffffc890; PC = 0x5555555687db *)
mov L0x7fffffffc890 r8;
(* mov    %r9,0x28(%rsp)                           #! EA = L0x7fffffffc898; PC = 0x5555555687e0 *)
mov L0x7fffffffc898 r9;
(* mov    %r10,0x30(%rsp)                          #! EA = L0x7fffffffc8a0; PC = 0x5555555687e5 *)
mov L0x7fffffffc8a0 r10;
(* mov    %r11,0x38(%rsp)                          #! EA = L0x7fffffffc8a8; PC = 0x5555555687ea *)
mov L0x7fffffffc8a8 r11;
(* mov    %r12,0x40(%rsp)                          #! EA = L0x7fffffffc8b0; PC = 0x5555555687ef *)
mov L0x7fffffffc8b0 r12;
(* mov    %r13,0x48(%rsp)                          #! EA = L0x7fffffffc8b8; PC = 0x5555555687f4 *)
mov L0x7fffffffc8b8 r13;
(* mov    (%rdx),%r8                               #! EA = L0x7fffffffd170; Value = 0x00000000000000c3; PC = 0x5555555687f9 *)
mov r8 L0x7fffffffd170;
(* mov    0x8(%rdx),%r9                            #! EA = L0x7fffffffd178; Value = 0x00007ffff7dda330; PC = 0x5555555687fc *)
mov r9 L0x7fffffffd178;
(* mov    0x10(%rdx),%r10                          #! EA = L0x7fffffffd180; Value = 0x00007ffff7fb7000; PC = 0x555555568800 *)
mov r10 L0x7fffffffd180;
(* mov    0x18(%rdx),%r11                          #! EA = L0x7fffffffd188; Value = 0x00007fffffffd7a8; PC = 0x555555568804 *)
mov r11 L0x7fffffffd188;
(* mov    0x20(%rdx),%r12                          #! EA = L0x7fffffffd190; Value = 0x00007fffffffd7a4; PC = 0x555555568808 *)
mov r12 L0x7fffffffd190;
(* mov    0x28(%rdx),%r13                          #! EA = L0x7fffffffd198; Value = 0x0000000000000000; PC = 0x55555556880c *)
mov r13 L0x7fffffffd198;
(* add    0x30(%rdx),%r8                           #! EA = L0x7fffffffd1a0; Value = 0x00007ffff7dda330; PC = 0x555555568810 *)
adds carry r8 L0x7fffffffd1a0 r8;
(* adc    0x38(%rdx),%r9                           #! EA = L0x7fffffffd1a8; Value = 0x0000000000000000; PC = 0x555555568814 *)
adcs carry r9 L0x7fffffffd1a8 r9 carry;
(* adc    0x40(%rdx),%r10                          #! EA = L0x7fffffffd1b0; Value = 0x0000000000000000; PC = 0x555555568818 *)
adcs carry r10 L0x7fffffffd1b0 r10 carry;
(* adc    0x48(%rdx),%r11                          #! EA = L0x7fffffffd1b8; Value = 0x00007ffff7dcc548; PC = 0x55555556881c *)
adcs carry r11 L0x7fffffffd1b8 r11 carry;
(* adc    0x50(%rdx),%r12                          #! EA = L0x7fffffffd1c0; Value = 0x00007ffff7fcf9c1; PC = 0x555555568820 *)
adcs carry r12 L0x7fffffffd1c0 r12 carry;
(* adc    0x58(%rdx),%r13                          #! EA = L0x7fffffffd1c8; Value = 0x00000000677f9a5f; PC = 0x555555568824 *)
adcs carry r13 L0x7fffffffd1c8 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x50(%rsp)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568828 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x58(%rsp)                           #! EA = L0x7fffffffc8c8; PC = 0x55555556882d *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x60(%rsp)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568832 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x68(%rsp)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568837 *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x70(%rsp)                          #! EA = L0x7fffffffc8e0; PC = 0x55555556883c *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x78(%rsp)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568841 *)
mov L0x7fffffffc8e8 r13;
(* #lea    0x20(%rsp),%rsi                          #! PC = 0x555555568846 *)
#lea    %%EA,%%rsi                          #! 0x555555568846 = 0x555555568846;
(* #lea    0x50(%rsp),%rbx                          #! PC = 0x55555556884b *)
#lea    %%EA,%%rbx                          #! 0x55555556884b = 0x55555556884b;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568850 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568850 = 0x555555568850;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;


(* t0 *)
assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8] =
       (limbs 64 [a40, a41, a42, a43, a44, a45] +
        limbs 64 [a50, a51, a52, a53, a54, a55])
    && true;

(* t1 *)
assert limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       (limbs 64 [b40, b41, b42, b43, b44, b45] +
        limbs 64 [b50, b51, b52, b53, b54, b55])
    && true;


(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffc8c0; Value = 0x00007ffff7dda3f3; PC = 0x555555568a64 *)
mov rdx L0x7fffffffc8c0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc890; Value = 0x00000000019dfe69; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc890;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc898; Value = 0x0000fffff7fb4cc4; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc898;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x0000000000000003; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc8a0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x00007fffffffd870; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc8a8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x00007ffff7fcf580; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc8b0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x00007fffffffd860; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc8b8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcc50; PC = 0x555555568a95 *)
mov L0x7fffffffcc50 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffc8c8; Value = 0x00007ffff7dda330; PC = 0x555555568abe *)
mov rdx L0x7fffffffc8c8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcc58; PC = 0x555555568adf *)
mov L0x7fffffffcc58 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000000000000003; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007fffffffd870; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00007ffff7fcf580; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00007fffffffd860; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffc8d0; Value = 0x00007ffff7fb7000; PC = 0x555555568b3c *)
mov rdx L0x7fffffffc8d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcc60; PC = 0x555555568b63 *)
mov L0x7fffffffcc60 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000000000000003; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007fffffffd870; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00007ffff7fcf580; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00007fffffffd860; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffc8d8; Value = 0x0000fffff7dc9cf0; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffc8d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcc68; PC = 0x555555568be7 *)
mov L0x7fffffffcc68 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000000000000003; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007fffffffd870; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00007ffff7fcf580; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00007fffffffd860; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffc8e0; Value = 0x0000fffff7fcd165; PC = 0x555555568c44 *)
mov rdx L0x7fffffffc8e0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcc70; PC = 0x555555568c6b *)
mov L0x7fffffffcc70 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000000000000003; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007fffffffd870; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00007ffff7fcf580; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00007fffffffd860; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffc8e8; Value = 0x00000000677f9a5f; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffc8e8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcc78; PC = 0x555555568cef *)
mov L0x7fffffffcc78 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000000000000003; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00007fffffffd870; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00007ffff7fcf580; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00007fffffffd860; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcc80; PC = 0x555555568d61 *)
mov L0x7fffffffcc80 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcc88; PC = 0x555555568d65 *)
mov L0x7fffffffcc88 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcc90; PC = 0x555555568d69 *)
mov L0x7fffffffcc90 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcc98; PC = 0x555555568d6d *)
mov L0x7fffffffcc98 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcca0; PC = 0x555555568d71 *)
mov L0x7fffffffcca0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcca8; PC = 0x555555568d75 *)
mov L0x7fffffffcca8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->im, t0, t1) *)

assert limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                 L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                 L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                 L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] =
       (((limbs 64 [a40, a41, a42, a43, a44, a45]) +
         (limbs 64 [a50, a51, a52, a53, a54, a55])) *
        ((limbs 64 [b40, b41, b42, b43, b44, b45]) +
         (limbs 64 [b50, b51, b52, b53, b54, b55])))
    && limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                 L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x55555556885e *)
#lea    -%%EA,%%rdi                         #! 0x55555556885e = 0x55555556885e;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568862 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568862 = 0x555555568862;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffd170; Value = 0x00000000000000c3; PC = 0x555555568a64 *)
mov rdx L0x7fffffffd170;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffd050; Value = 0x00000000019dfe69; PC = 0x555555568a67 *)
mov r14 L0x7fffffffd050;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffd058; Value = 0x00007fffffffd7a4; PC = 0x555555568a6a *)
mov r15 L0x7fffffffd058;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffd060;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x555555568a72 *)
mov r11 L0x7fffffffd068;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x555555568a76 *)
mov r12 L0x7fffffffd070;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x555555568a7a *)
mov r13 L0x7fffffffd078;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcbf0; PC = 0x555555568a95 *)
mov L0x7fffffffcbf0 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffd178; Value = 0x00007ffff7dda330; PC = 0x555555568abe *)
mov rdx L0x7fffffffd178;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcbf8; PC = 0x555555568adf *)
mov L0x7fffffffcbf8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffd060 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffd068 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffd070 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffd078 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffd180; Value = 0x00007ffff7fb7000; PC = 0x555555568b3c *)
mov rdx L0x7fffffffd180;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcc00; PC = 0x555555568b63 *)
mov L0x7fffffffcc00 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffd060 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffd068 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffd070 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffd078 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffd188; Value = 0x00007fffffffd7a8; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffd188;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcc08; PC = 0x555555568be7 *)
mov L0x7fffffffcc08 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffd060 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffd068 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffd070 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffd078 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffd190; Value = 0x00007fffffffd7a4; PC = 0x555555568c44 *)
mov rdx L0x7fffffffd190;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcc10; PC = 0x555555568c6b *)
mov L0x7fffffffcc10 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffd060 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffd068 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffd070 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffd078 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffd198; Value = 0x0000000000000000; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffd198;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcc18; PC = 0x555555568cef *)
mov L0x7fffffffcc18 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffd060 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffd068 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffd070 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffd078 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcc20; PC = 0x555555568d61 *)
mov L0x7fffffffcc20 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcc28; PC = 0x555555568d65 *)
mov L0x7fffffffcc28 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcc30; PC = 0x555555568d69 *)
mov L0x7fffffffcc30 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcc38; PC = 0x555555568d6d *)
mov L0x7fffffffcc38 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcc40; PC = 0x555555568d71 *)
mov L0x7fffffffcc40 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcc48; PC = 0x555555568d75 *)
mov L0x7fffffffcc48 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->re, a->re, b->re) *)

assert limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                 L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                 L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                 L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] =
       ((limbs 64 [a40, a41, a42, a43, a44, a45]) *
        (limbs 64 [b40, b41, b42, b43, b44, b45]))
    && limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                 L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    0xb0(%rsi),%rsi                          #! PC = 0x555555568867 *)
#lea    %%EA,%%rsi                          #! 0x555555568867 = 0x555555568867;
(* #lea    0x30(%rbx),%rbx                          #! PC = 0x55555556886e *)
#lea    %%EA,%%rbx                          #! 0x55555556886e = 0x55555556886e;
(* #lea    0x20(%rsp),%rdi                          #! PC = 0x555555568872 *)
#lea    %%EA,%%rdi                          #! 0x555555568872 = 0x555555568872;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568877 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568877 = 0x555555568877;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffd1a0; Value = 0x00007ffff7dda330; PC = 0x555555568a64 *)
mov rdx L0x7fffffffd1a0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffd080; Value = 0x0000000000000000; PC = 0x555555568a67 *)
mov r14 L0x7fffffffd080;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffd088; Value = 0x00007ffff7fb7520; PC = 0x555555568a6a *)
mov r15 L0x7fffffffd088;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x555555568a6e *)
mov r10 L0x7fffffffd090;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x555555568a72 *)
mov r11 L0x7fffffffd098;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x555555568a76 *)
mov r12 L0x7fffffffd0a0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x555555568a7a *)
mov r13 L0x7fffffffd0a8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffc890; PC = 0x555555568a95 *)
mov L0x7fffffffc890 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffd1a8; Value = 0x0000000000000000; PC = 0x555555568abe *)
mov rdx L0x7fffffffd1a8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffc898; PC = 0x555555568adf *)
mov L0x7fffffffc898 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffd090 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffd098 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffd0a0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffd0a8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffd1b0; Value = 0x0000000000000000; PC = 0x555555568b3c *)
mov rdx L0x7fffffffd1b0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffc8a0; PC = 0x555555568b63 *)
mov L0x7fffffffc8a0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffd090 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffd098 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffd0a0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffd0a8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffd1b8; Value = 0x00007ffff7dcc548; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffd1b8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffc8a8; PC = 0x555555568be7 *)
mov L0x7fffffffc8a8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffd090 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffd098 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffd0a0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffd0a8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffd1c0; Value = 0x00007ffff7fcf9c1; PC = 0x555555568c44 *)
mov rdx L0x7fffffffd1c0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffc8b0; PC = 0x555555568c6b *)
mov L0x7fffffffc8b0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffd090 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffd098 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffd0a0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffd0a8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffd1c8; Value = 0x00000000677f9a5f; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffd1c8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffc8b8; PC = 0x555555568cef *)
mov L0x7fffffffc8b8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffd090 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffd098 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffd0a0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffd0a8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568d61 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffc8c8; PC = 0x555555568d65 *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568d69 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568d6d *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffc8e0; PC = 0x555555568d71 *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568d75 *)
mov L0x7fffffffc8e8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(tx, a->im, b->im) *)

assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                 L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       ((limbs 64 [a50, a51, a52, a53, a54, a55]) *
        (limbs 64 [b50, b51, b52, b53, b54, b55]))
    && limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
		 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


rcut and [limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                    L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                    L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;

ghost L0x7fffffffcc50o@uint64, L0x7fffffffcc58o@uint64, L0x7fffffffcc60o@uint64,
      L0x7fffffffcc68o@uint64, L0x7fffffffcc70o@uint64, L0x7fffffffcc78o@uint64,
      L0x7fffffffcc80o@uint64, L0x7fffffffcc88o@uint64, L0x7fffffffcc90o@uint64,
      L0x7fffffffcc98o@uint64, L0x7fffffffcca0o@uint64, L0x7fffffffcca8o@uint64 :
      and [L0x7fffffffcc50o=L0x7fffffffcc50, L0x7fffffffcc58o=L0x7fffffffcc58,
           L0x7fffffffcc60o=L0x7fffffffcc60, L0x7fffffffcc68o=L0x7fffffffcc68,
           L0x7fffffffcc70o=L0x7fffffffcc70, L0x7fffffffcc78o=L0x7fffffffcc78,
           L0x7fffffffcc80o=L0x7fffffffcc80, L0x7fffffffcc88o=L0x7fffffffcc88,
           L0x7fffffffcc90o=L0x7fffffffcc90, L0x7fffffffcc98o=L0x7fffffffcc98,
           L0x7fffffffcca0o=L0x7fffffffcca0, L0x7fffffffcca8o=L0x7fffffffcca8]
   && and [L0x7fffffffcc50o=L0x7fffffffcc50, L0x7fffffffcc58o=L0x7fffffffcc58,
           L0x7fffffffcc60o=L0x7fffffffcc60, L0x7fffffffcc68o=L0x7fffffffcc68,
           L0x7fffffffcc70o=L0x7fffffffcc70, L0x7fffffffcc78o=L0x7fffffffcc78,
           L0x7fffffffcc80o=L0x7fffffffcc80, L0x7fffffffcc88o=L0x7fffffffcc88,
           L0x7fffffffcc90o=L0x7fffffffcc90, L0x7fffffffcc98o=L0x7fffffffcc98,
           L0x7fffffffcca0o=L0x7fffffffcca0, L0x7fffffffcca8o=L0x7fffffffcca8];


(* #lea    0x20(%rsp),%rdx                          #! PC = 0x555555568881 *)
#lea    %%EA,%%rdx                          #! 0x555555568881 = 0x555555568881;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556888e *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556888e = 0x55555556888e;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcc50; Value = 0xff27587c119a58ab; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcc50;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcc58; Value = 0x49bd91969ce0398a; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcc58;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcc60; Value = 0x48fc41ce290d0143; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcc60;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcc68; Value = 0xd33122444516defa; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcc68;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcc70; Value = 0xf31d791f6d8c2f32; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcc70;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcc78; Value = 0xce0e4cf8b359a78c; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcc78;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcc80; Value = 0xaed45c1ff52693bc; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcc80;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x0000000000000000; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcc88; Value = 0x298bb65505ed22a5; PC = 0x555555568302 *)
mov r15 L0x7fffffffcc88;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x8c6937d997595600; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcc90; Value = 0x527a2317972452f7; PC = 0x55555556830a *)
mov rax L0x7fffffffcc90;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x000180002798e17c; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcc98; Value = 0x0b04c9adfb24fc09; PC = 0x555555568312 *)
mov rbx L0x7fffffffcc98;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x0000000000000000; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcca0; Value = 0xcd2f6ffb5fbb3b5e; PC = 0x55555556831a *)
mov rbp L0x7fffffffcca0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x1d753eccc75a9100; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcca8; Value = 0x00000000000033bf; PC = 0x555555568322 *)
mov rsi L0x7fffffffcca8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x37b23c96dc95b4e4; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcc50; PC = 0x55555556832a *)
mov L0x7fffffffcc50 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0xc9f32d096d9c9c1f; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcc58; PC = 0x555555568334 *)
mov L0x7fffffffcc58 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0x00000001367f02dc; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcc60; PC = 0x555555568340 *)
mov L0x7fffffffcc60 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0x0000000000000000; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcc68; PC = 0x55555556834c *)
mov L0x7fffffffcc68 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x0000000000000000; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcc70; PC = 0x555555568358 *)
mov L0x7fffffffcc70 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0x0000000000000000; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcc78; PC = 0x555555568364 *)
mov L0x7fffffffcc78 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x0000000000000000; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcc80; PC = 0x55555556838b *)
mov L0x7fffffffcc80 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcc88; PC = 0x555555568392 *)
mov L0x7fffffffcc88 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcc90; PC = 0x555555568399 *)
mov L0x7fffffffcc90 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcc98; PC = 0x5555555683a0 *)
mov L0x7fffffffcc98 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcca0; PC = 0x5555555683a7 *)
mov L0x7fffffffcca0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcca8; PC = 0x5555555683ab *)
mov L0x7fffffffcca8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                         L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                         L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                         L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcc50o, L0x7fffffffcc58o, L0x7fffffffcc60o,
                        L0x7fffffffcc68o, L0x7fffffffcc70o, L0x7fffffffcc78o,
                        L0x7fffffffcc80o, L0x7fffffffcc88o, L0x7fffffffcc90o,
                        L0x7fffffffcc98o, L0x7fffffffcca0o, L0x7fffffffcca8o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                         L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                         L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                         L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcc50o, L0x7fffffffcc58o, L0x7fffffffcc60o,
                        L0x7fffffffcc68o, L0x7fffffffcc70o, L0x7fffffffcc78o,
                        L0x7fffffffcc80o, L0x7fffffffcc88o, L0x7fffffffcc90o,
                        L0x7fffffffcc98o, L0x7fffffffcca0o, L0x7fffffffcca8o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

ghost L0x7fffffffcc50p@uint64, L0x7fffffffcc58p@uint64, L0x7fffffffcc60p@uint64,
      L0x7fffffffcc68p@uint64, L0x7fffffffcc70p@uint64, L0x7fffffffcc78p@uint64,
      L0x7fffffffcc80p@uint64, L0x7fffffffcc88p@uint64, L0x7fffffffcc90p@uint64,
      L0x7fffffffcc98p@uint64, L0x7fffffffcca0p@uint64, L0x7fffffffcca8p@uint64 :
      and [L0x7fffffffcc50p=L0x7fffffffcc50, L0x7fffffffcc58p=L0x7fffffffcc58,
           L0x7fffffffcc60p=L0x7fffffffcc60, L0x7fffffffcc68p=L0x7fffffffcc68,
           L0x7fffffffcc70p=L0x7fffffffcc70, L0x7fffffffcc78p=L0x7fffffffcc78,
           L0x7fffffffcc80p=L0x7fffffffcc80, L0x7fffffffcc88p=L0x7fffffffcc88,
           L0x7fffffffcc90p=L0x7fffffffcc90, L0x7fffffffcc98p=L0x7fffffffcc98,
           L0x7fffffffcca0p=L0x7fffffffcca0, L0x7fffffffcca8p=L0x7fffffffcca8]
   && and [L0x7fffffffcc50p=L0x7fffffffcc50, L0x7fffffffcc58p=L0x7fffffffcc58,
           L0x7fffffffcc60p=L0x7fffffffcc60, L0x7fffffffcc68p=L0x7fffffffcc68,
           L0x7fffffffcc70p=L0x7fffffffcc70, L0x7fffffffcc78p=L0x7fffffffcc78,
           L0x7fffffffcc80p=L0x7fffffffcc80, L0x7fffffffcc88p=L0x7fffffffcc88,
           L0x7fffffffcc90p=L0x7fffffffcc90, L0x7fffffffcc98p=L0x7fffffffcc98,
           L0x7fffffffcca0p=L0x7fffffffcca0, L0x7fffffffcca8p=L0x7fffffffcca8];


(* #lea    (%rdi),%rsi                              #! PC = 0x555555568893 *)
#lea    %%EA,%%rsi                              #! 0x555555568893 = 0x555555568893;
(* #lea    -0x60(%rdi),%rdx                         #! PC = 0x555555568896 *)
#lea    -%%EA,%%rdx                         #! 0x555555568896 = 0x555555568896;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556889a *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556889a = 0x55555556889a;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcc50; Value = 0xff27587c119a58ab; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcc50;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcc58; Value = 0xbd5459bd0586e38a; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcc58;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcc60; Value = 0x48fac1ce01741fc6; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcc60;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcc68; Value = 0xd33122444516defa; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcc68;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcc70; Value = 0xd5a83a52a6319e32; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcc70;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcc78; Value = 0x965c1061d6c3f2a8; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcc78;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcc80; Value = 0xe4e12f168789f79d; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcc80;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcbf0; Value = 0x000000013b58c9fb; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffcbf0;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcc88; Value = 0x298bb653cf6e1fc8; PC = 0x555555568302 *)
mov r15 L0x7fffffffcc88;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcbf8; Value = 0xff88d87ad622d09c; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffcbf8 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcc90; Value = 0x527a2317972452f7; PC = 0x55555556830a *)
mov rax L0x7fffffffcc90;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc00; Value = 0xbc9189f42a1acb8e; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffcc00 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcc98; Value = 0x0b04c9adfb24fc09; PC = 0x555555568312 *)
mov rbx L0x7fffffffcc98;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc08; Value = 0xa368010299f5bdf5; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffcc08 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcca0; Value = 0xcd2f6ffb5fbb3b5e; PC = 0x55555556831a *)
mov rbp L0x7fffffffcca0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc10; Value = 0x950c00fab6fb4c30; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffcc10 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcca8; Value = 0x00000000000033bf; PC = 0x555555568322 *)
mov rsi L0x7fffffffcca8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc18; Value = 0xc8d6ace0b9fe36ed; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffcc18 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcc50; PC = 0x55555556832a *)
mov L0x7fffffffcc50 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc20; Value = 0xc8d43e24f7c1bf6a; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffcc20 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcc58; PC = 0x555555568334 *)
mov L0x7fffffffcc58 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc28; Value = 0xe2ce0281b5b647aa; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffcc28 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcc60; PC = 0x555555568340 *)
mov L0x7fffffffcc60 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc30; Value = 0x3e96014420fa5cfb; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffcc30 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcc68; PC = 0x55555556834c *)
mov L0x7fffffffcc68 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc38; Value = 0xd8020000863f397e; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffcc38 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcc70; PC = 0x555555568358 *)
mov L0x7fffffffcc70 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcc40; Value = 0x000000003fffffff; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffcc40 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcc78; PC = 0x555555568364 *)
mov L0x7fffffffcc78 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcc48; Value = 0x0000000000000000; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffcc48 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcc80; PC = 0x55555556838b *)
mov L0x7fffffffcc80 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcc88; PC = 0x555555568392 *)
mov L0x7fffffffcc88 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcc90; PC = 0x555555568399 *)
mov L0x7fffffffcc90 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcc98; PC = 0x5555555683a0 *)
mov L0x7fffffffcc98 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcca0; PC = 0x5555555683a7 *)
mov L0x7fffffffcca0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcca8; PC = 0x5555555683ab *)
mov L0x7fffffffcca8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                         L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                         L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                         L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]) +
              (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                         L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                         L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                         L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]))
             (limbs 64 [L0x7fffffffcc50p, L0x7fffffffcc58p, L0x7fffffffcc60p,
                        L0x7fffffffcc68p, L0x7fffffffcc70p, L0x7fffffffcc78p,
                        L0x7fffffffcc80p, L0x7fffffffcc88p, L0x7fffffffcc90p,
                        L0x7fffffffcc98p, L0x7fffffffcca0p, L0x7fffffffcca8p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                         L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                         L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                         L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]) +
              (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                         L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                         L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                         L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]))
             (limbs 64 [L0x7fffffffcc50p, L0x7fffffffcc58p, L0x7fffffffcc60p,
                        L0x7fffffffcc68p, L0x7fffffffcc70p, L0x7fffffffcc78p,
                        L0x7fffffffcc80p, L0x7fffffffcc88p, L0x7fffffffcc90p,
                        L0x7fffffffcc98p, L0x7fffffffcca0p, L0x7fffffffcca8p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                    L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

	  limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          
	  m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
          limbs 64[a00,a01,a02,a03,a04,a05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a10,a11,a12,a13,a14,a15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a20,a21,a22,a23,a24,a25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a30,a31,a32,a33,a34,a35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a40,a41,a42,a43,a44,a45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a50,a51,a52,a53,a54,a55] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b00,b01,b02,b03,b04,b05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b10,b11,b12,b13,b14,b15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b20,b21,b22,b23,b24,b25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b30,b31,b32,b33,b34,b35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b40,b41,b42,b43,b44,b45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b50,b51,b52,b53,b54,b55] <u limbs 64[m0,m1,m2,m3,m4,m5]
     ] prove with all cuts, precondition;

ghost L0x7fffffffcbf0o@uint64, L0x7fffffffcbf8o@uint64, L0x7fffffffcc00o@uint64,
      L0x7fffffffcc08o@uint64, L0x7fffffffcc10o@uint64, L0x7fffffffcc18o@uint64,
      L0x7fffffffcc20o@uint64, L0x7fffffffcc28o@uint64, L0x7fffffffcc30o@uint64,
      L0x7fffffffcc38o@uint64, L0x7fffffffcc40o@uint64, L0x7fffffffcc48o@uint64 :
      and [L0x7fffffffcbf0o=L0x7fffffffcbf0, L0x7fffffffcbf8o=L0x7fffffffcbf8,
           L0x7fffffffcc00o=L0x7fffffffcc00, L0x7fffffffcc08o=L0x7fffffffcc08,
           L0x7fffffffcc10o=L0x7fffffffcc10, L0x7fffffffcc18o=L0x7fffffffcc18,
           L0x7fffffffcc20o=L0x7fffffffcc20, L0x7fffffffcc28o=L0x7fffffffcc28,
           L0x7fffffffcc30o=L0x7fffffffcc30, L0x7fffffffcc38o=L0x7fffffffcc38,
           L0x7fffffffcc40o=L0x7fffffffcc40, L0x7fffffffcc48o=L0x7fffffffcc48]
   && and [L0x7fffffffcbf0o=L0x7fffffffcbf0, L0x7fffffffcbf8o=L0x7fffffffcbf8,
           L0x7fffffffcc00o=L0x7fffffffcc00, L0x7fffffffcc08o=L0x7fffffffcc08,
           L0x7fffffffcc10o=L0x7fffffffcc10, L0x7fffffffcc18o=L0x7fffffffcc18,
           L0x7fffffffcc20o=L0x7fffffffcc20, L0x7fffffffcc28o=L0x7fffffffcc28,
           L0x7fffffffcc30o=L0x7fffffffcc30, L0x7fffffffcc38o=L0x7fffffffcc38,
           L0x7fffffffcc40o=L0x7fffffffcc40, L0x7fffffffcc48o=L0x7fffffffcc48];



(* #lea    -0x60(%rdi),%rsi                         #! PC = 0x55555556889f *)
#lea    -%%EA,%%rsi                         #! 0x55555556889f = 0x55555556889f;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x5555555688a3 *)
#lea    %%EA,%%rdx                          #! 0x5555555688a3 = 0x5555555688a3;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x5555555688a8 *)
#lea    -%%EA,%%rdi                         #! 0x5555555688a8 = 0x5555555688a8;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x5555555688ac *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x5555555688ac = 0x5555555688ac;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcbf0; Value = 0x000000013b58c9fb; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcbf0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcbf8; Value = 0xff88d87ad622d09c; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcbf8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcc00; Value = 0xbc9189f42a1acb8e; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcc00;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcc08; Value = 0xa368010299f5bdf5; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcc08;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcc10; Value = 0x950c00fab6fb4c30; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcc10;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcc18; Value = 0xc8d6ace0b9fe36ed; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcc18;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcc20; Value = 0xc8d43e24f7c1bf6a; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcc20;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x0000000000000000; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcc28; Value = 0xe2ce0281b5b647aa; PC = 0x555555568302 *)
mov r15 L0x7fffffffcc28;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x8c6937d997595600; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcc30; Value = 0x3e96014420fa5cfb; PC = 0x55555556830a *)
mov rax L0x7fffffffcc30;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x000180002798e17c; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcc38; Value = 0xd8020000863f397e; PC = 0x555555568312 *)
mov rbx L0x7fffffffcc38;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x0000000000000000; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcc40; Value = 0x000000003fffffff; PC = 0x55555556831a *)
mov rbp L0x7fffffffcc40;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x1d753eccc75a9100; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcc48; Value = 0x0000000000000000; PC = 0x555555568322 *)
mov rsi L0x7fffffffcc48;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x37b23c96dc95b4e4; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcbf0; PC = 0x55555556832a *)
mov L0x7fffffffcbf0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0xc9f32d096d9c9c1f; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcbf8; PC = 0x555555568334 *)
mov L0x7fffffffcbf8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0x00000001367f02dc; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcc00; PC = 0x555555568340 *)
mov L0x7fffffffcc00 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0x0000000000000000; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcc08; PC = 0x55555556834c *)
mov L0x7fffffffcc08 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x0000000000000000; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcc10; PC = 0x555555568358 *)
mov L0x7fffffffcc10 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0x0000000000000000; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcc18; PC = 0x555555568364 *)
mov L0x7fffffffcc18 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x0000000000000000; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcc20; PC = 0x55555556838b *)
mov L0x7fffffffcc20 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcc28; PC = 0x555555568392 *)
mov L0x7fffffffcc28 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcc30; PC = 0x555555568399 *)
mov L0x7fffffffcc30 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcc38; PC = 0x5555555683a0 *)
mov L0x7fffffffcc38 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcc40; PC = 0x5555555683a7 *)
mov L0x7fffffffcc40 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcc48; PC = 0x5555555683ab *)
mov L0x7fffffffcc48 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                         L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                         L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                         L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcbf0o, L0x7fffffffcbf8o, L0x7fffffffcc00o,
                        L0x7fffffffcc08o, L0x7fffffffcc10o, L0x7fffffffcc18o,
                        L0x7fffffffcc20o, L0x7fffffffcc28o, L0x7fffffffcc30o,
                        L0x7fffffffcc38o, L0x7fffffffcc40o, L0x7fffffffcc48o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                         L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                         L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                         L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcbf0o, L0x7fffffffcbf8o, L0x7fffffffcc00o,
                        L0x7fffffffcc08o, L0x7fffffffcc10o, L0x7fffffffcc18o,
                        L0x7fffffffcc20o, L0x7fffffffcc28o, L0x7fffffffcc30o,
                        L0x7fffffffcc38o, L0x7fffffffcc40o, L0x7fffffffcc48o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;



(* mul_382x(t2, a[2], b[2]) *)

assert eqmod ((limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                         L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                         L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                         L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]) +
              (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                         L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                         L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                         L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]) * U)
             ((limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
    && true;


rcut and [limbs 64 [L0x7fffffffcff0, L0x7fffffffcff8, L0x7fffffffd000,
                    L0x7fffffffd008, L0x7fffffffd010, L0x7fffffffd018] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd020, L0x7fffffffd028, L0x7fffffffd030,
                    L0x7fffffffd038, L0x7fffffffd040, L0x7fffffffd048] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd050, L0x7fffffffd058, L0x7fffffffd060,
                    L0x7fffffffd068, L0x7fffffffd070, L0x7fffffffd078] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd080, L0x7fffffffd088, L0x7fffffffd090,
                    L0x7fffffffd098, L0x7fffffffd0a0, L0x7fffffffd0a8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd110, L0x7fffffffd118, L0x7fffffffd120,
                    L0x7fffffffd128, L0x7fffffffd130, L0x7fffffffd138] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd140, L0x7fffffffd148, L0x7fffffffd150,
                    L0x7fffffffd158, L0x7fffffffd160, L0x7fffffffd168] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd170, L0x7fffffffd178, L0x7fffffffd180,
                    L0x7fffffffd188, L0x7fffffffd190, L0x7fffffffd198] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffd1a0, L0x7fffffffd1a8, L0x7fffffffd1b0,
                    L0x7fffffffd1b8, L0x7fffffffd1c0, L0x7fffffffd1c8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                    L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;


(* #lea    0x88(%rsp),%r8                           #! PC = 0x5555555688b1 *)
#lea    %%EA,%%r8                           #! 0x5555555688b1 = 0x5555555688b1;
(* #lea    0x30(%r8),%rsp                           #! PC = 0x5555555688d0 *)
#lea    %%EA,%rsp                           #! 0x5555555688d0 = 0x5555555688d0;
(* #! <- SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #repz retq                                      #! PC = 0x5555555688d4 *)
#repz retq                                      #! 0x5555555688d4 = 0x5555555688d4;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #retq                                           #! PC = 0x55555555d7c8 *)
#retq                                           #! 0x55555555d7c8 = 0x55555555d7c8;
(* #lea    0x70(%rsp),%r15                          #! PC = 0x55555555f671 *)
#lea    %%EA,%%r15                          #! 0x55555555f671 = 0x55555555f671;
(* #lea    0xd0c3(%rip),%rbx        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555f676 *)
#lea    0xd0c3(%rip),%%rbx        # 0x55555556c740 <BLS12_381_P>#! 0x55555555f676 = 0x55555555f676;
(* #callq  0x555555566920 <add_mod_384x>           #! PC = 0x55555555f68d *)
#callq  0x555555566920 <add_mod_384x>           #! 0x55555555f68d = 0x55555555f68d;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555566920 *)
#endbr64                                         #! 0x555555566920 = 0x555555566920;
(* #lea    0x30(%rsi),%rsi                          #! PC = 0x55555556693b *)
#lea    %%EA,%%rsi                          #! 0x55555556693b = 0x55555556693b;
(* #lea    0x30(%rdx),%rdx                          #! PC = 0x55555556693f *)
#lea    %%EA,%%rdx                          #! 0x55555556693f = 0x55555556693f;
(* #lea    0x30(%rdi),%rdi                          #! PC = 0x555555566943 *)
#lea    %%EA,%%rdi                          #! 0x555555566943 = 0x555555566943;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566947 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566947 = 0x555555566947;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd020; Value = 0x00007ffff7dda330; PC = 0x555555566884 *)
mov r8 L0x7fffffffd020;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd028; Value = 0x0000000000000000; PC = 0x555555566887 *)
mov r9 L0x7fffffffd028;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x55555556688b *)
mov r10 L0x7fffffffd030;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x55555556688f *)
mov r11 L0x7fffffffd038;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x555555566893 *)
mov r12 L0x7fffffffd040;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x555555566897 *)
mov r13 L0x7fffffffd048;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd080; Value = 0x0000000000000000; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd080 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd088; Value = 0x00007ffff7fb7520; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd088 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd090 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd098 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd0a0 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd0a8 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffc9e0; PC = 0x5555555668ee *)
mov L0x7fffffffc9e0 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffc9e8; PC = 0x5555555668f5 *)
mov L0x7fffffffc9e8 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffc9f0; PC = 0x5555555668fd *)
mov L0x7fffffffc9f0 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffc9f8; PC = 0x555555566905 *)
mov L0x7fffffffc9f8 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca00; PC = 0x555555566909 *)
mov L0x7fffffffca00 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca08; PC = 0x55555556690d *)
mov L0x7fffffffca08 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    -0x30(%rdi),%rdi                         #! PC = 0x555555566955 *)
#lea    -%%EA,%%rdi                         #! 0x555555566955 = 0x555555566955;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566959 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566959 = 0x555555566959;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcff0; Value = 0x00007ffff7ffdaab; PC = 0x555555566884 *)
mov r8 L0x7fffffffcff0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcff8; Value = 0x00007ffff7dda330; PC = 0x555555566887 *)
mov r9 L0x7fffffffcff8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x55555556688b *)
mov r10 L0x7fffffffd000;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x55555556688f *)
mov r11 L0x7fffffffd008;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x555555566893 *)
mov r12 L0x7fffffffd010;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x555555566897 *)
mov r13 L0x7fffffffd018;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd050; Value = 0x00000000019dfe69; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd050 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd058; Value = 0x00007fffffffd7a4; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd058 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd060 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd068 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd070 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd078 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffc9b0; PC = 0x5555555668ee *)
mov L0x7fffffffc9b0 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffc9b8; PC = 0x5555555668f5 *)
mov L0x7fffffffc9b8 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffc9c0; PC = 0x5555555668fd *)
mov L0x7fffffffc9c0 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffc9c8; PC = 0x555555566905 *)
mov L0x7fffffffc9c8 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffc9d0; PC = 0x555555566909 *)
mov L0x7fffffffc9d0 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffc9d8; PC = 0x55555556690d *)
mov L0x7fffffffc9d8 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;


(* add_fp2(aa, a[1], a[2]) *)

assert true
    && eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8])
             (limbs 64 [a20, a21, a22, a23, a24, a25] +
              limbs 64 [a40, a41, a42, a43, a44, a45])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8])
             (limbs 64 [a20, a21, a22, a23, a24, a25] +
              limbs 64 [a40, a41, a42, a43, a44, a45])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
             (limbs 64 [a30, a31, a32, a33, a34, a35] +
              limbs 64 [a50, a51, a52, a53, a54, a55])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
             (limbs 64 [a30, a31, a32, a33, a34, a35] +
              limbs 64 [a50, a51, a52, a53, a54, a55])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

 


(* #lea    0x48(%rsp),%rsp                          #! PC = 0x55555556697c *)
#lea    %%EA,%rsp                          #! 0x55555556697c = 0x55555556697c;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x555555566981 *)
#repz retq                                      #! 0x555555566981 = 0x555555566981;
(* #lea    0xd0(%rsp),%rax                          #! PC = 0x55555555f692 *)
#lea    %%EA,%%rax                          #! 0x55555555f692 = 0x55555555f692;
(* #callq  0x555555566920 <add_mod_384x>           #! PC = 0x55555555f6b0 *)
#callq  0x555555566920 <add_mod_384x>           #! 0x55555555f6b0 = 0x55555555f6b0;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555566920 *)
#endbr64                                         #! 0x555555566920 = 0x555555566920;
(* #lea    0x30(%rsi),%rsi                          #! PC = 0x55555556693b *)
#lea    %%EA,%%rsi                          #! 0x55555556693b = 0x55555556693b;
(* #lea    0x30(%rdx),%rdx                          #! PC = 0x55555556693f *)
#lea    %%EA,%%rdx                          #! 0x55555556693f = 0x55555556693f;
(* #lea    0x30(%rdi),%rdi                          #! PC = 0x555555566943 *)
#lea    %%EA,%%rdi                          #! 0x555555566943 = 0x555555566943;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566947 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566947 = 0x555555566947;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd140; Value = 0x00007ffff7fb7000; PC = 0x555555566884 *)
mov r8 L0x7fffffffd140;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd148; Value = 0x00000000677f9a5f; PC = 0x555555566887 *)
mov r9 L0x7fffffffd148;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd150; Value = 0x00007ffff7fcf580; PC = 0x55555556688b *)
mov r10 L0x7fffffffd150;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd158; Value = 0x00007ffff7fb79b8; PC = 0x55555556688f *)
mov r11 L0x7fffffffd158;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd160; Value = 0x00007ffff7dca358; PC = 0x555555566893 *)
mov r12 L0x7fffffffd160;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd168; Value = 0x00007ffff7fda88a; PC = 0x555555566897 *)
mov r13 L0x7fffffffd168;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd1a0; Value = 0x00007ffff7dda330; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd1a0 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd1a8; Value = 0x0000000000000000; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd1a8 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd1b0; Value = 0x0000000000000000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd1b0 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd1b8; Value = 0x00007ffff7dcc548; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd1b8 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd1c0; Value = 0x00007ffff7fcf9c1; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd1c0 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd1c8; Value = 0x00000000677f9a5f; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd1c8 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca40; PC = 0x5555555668ee *)
mov L0x7fffffffca40 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca48; PC = 0x5555555668f5 *)
mov L0x7fffffffca48 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca50; PC = 0x5555555668fd *)
mov L0x7fffffffca50 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca58; PC = 0x555555566905 *)
mov L0x7fffffffca58 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca60; PC = 0x555555566909 *)
mov L0x7fffffffca60 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca68; PC = 0x55555556690d *)
mov L0x7fffffffca68 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    -0x30(%rdi),%rdi                         #! PC = 0x555555566955 *)
#lea    -%%EA,%%rdi                         #! 0x555555566955 = 0x555555566955;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566959 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566959 = 0x555555566959;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd110; Value = 0x00007ffff7ffd9e8; PC = 0x555555566884 *)
mov r8 L0x7fffffffd110;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd118; Value = 0x0000000000000000; PC = 0x555555566887 *)
mov r9 L0x7fffffffd118;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd120; Value = 0x0000000000000000; PC = 0x55555556688b *)
mov r10 L0x7fffffffd120;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd128; Value = 0x0000000000000000; PC = 0x55555556688f *)
mov r11 L0x7fffffffd128;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd130; Value = 0x0000000000000000; PC = 0x555555566893 *)
mov r12 L0x7fffffffd130;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd138; Value = 0x00007ffff7fda45c; PC = 0x555555566897 *)
mov r13 L0x7fffffffd138;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd170; Value = 0x00000000000000c3; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd170 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd178; Value = 0x00007ffff7dda330; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd178 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd180; Value = 0x00007ffff7fb7000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd180 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd188; Value = 0x00007fffffffd7a8; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd188 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd190; Value = 0x00007fffffffd7a4; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd190 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd198; Value = 0x0000000000000000; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd198 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca10; PC = 0x5555555668ee *)
mov L0x7fffffffca10 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca18; PC = 0x5555555668f5 *)
mov L0x7fffffffca18 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca20; PC = 0x5555555668fd *)
mov L0x7fffffffca20 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca28; PC = 0x555555566905 *)
mov L0x7fffffffca28 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca30; PC = 0x555555566909 *)
mov L0x7fffffffca30 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca38; PC = 0x55555556690d *)
mov L0x7fffffffca38 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    0x48(%rsp),%rsp                          #! PC = 0x55555556697c *)
#lea    %%EA,%rsp                          #! 0x55555556697c = 0x55555556697c;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x555555566981 *)
#repz retq                                      #! 0x555555566981 = 0x555555566981;


(* add_fp2(bb, b[1], b[2]) *)

assert true
    && eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38])
             (limbs 64 [b20, b21, b22, b23, b24, b25] +
              limbs 64 [b40, b41, b42, b43, b44, b45])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38])
             (limbs 64 [b20, b21, b22, b23, b24, b25] +
              limbs 64 [b40, b41, b42, b43, b44, b45])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
             (limbs 64 [b30, b31, b32, b33, b34, b35] +
              limbs 64 [b50, b51, b52, b53, b54, b55])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
             (limbs 64 [b30, b31, b32, b33, b34, b35] +
              limbs 64 [b50, b51, b52, b53, b54, b55])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;


(* add_fp2(aa, a[1], a[2]) *)

assert eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
              limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U)
             ((limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;

(* add_fp2(bb, b[1], b[2]) *)

assert eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
              limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U)
             ((limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;   

rcut and [limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                    L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                    L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                    L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                    L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;    

ghost L0x7fffffffc9b0r0@uint64, L0x7fffffffc9b8r0@uint64, L0x7fffffffc9c0r0@uint64,
      L0x7fffffffc9c8r0@uint64, L0x7fffffffc9d0r0@uint64, L0x7fffffffc9d8r0@uint64,  
      L0x7fffffffc9e0r0@uint64, L0x7fffffffc9e8r0@uint64, L0x7fffffffc9f0r0@uint64,
      L0x7fffffffc9f8r0@uint64, L0x7fffffffca00r0@uint64, L0x7fffffffca08r0@uint64,
      L0x7fffffffca10r0@uint64, L0x7fffffffca18r0@uint64, L0x7fffffffca20r0@uint64,
      L0x7fffffffca28r0@uint64, L0x7fffffffca30r0@uint64, L0x7fffffffca38r0@uint64,
      L0x7fffffffca40r0@uint64, L0x7fffffffca48r0@uint64, L0x7fffffffca50r0@uint64,
      L0x7fffffffca58r0@uint64, L0x7fffffffca60r0@uint64, L0x7fffffffca68r0@uint64 :
      and[L0x7fffffffc9b0r0=L0x7fffffffc9b0, L0x7fffffffc9b8r0=L0x7fffffffc9b8,
	  L0x7fffffffc9c0r0=L0x7fffffffc9c0, L0x7fffffffc9c8r0=L0x7fffffffc9c8,
	  L0x7fffffffc9d0r0=L0x7fffffffc9d0, L0x7fffffffc9d8r0=L0x7fffffffc9d8,
	  L0x7fffffffc9e0r0=L0x7fffffffc9e0, L0x7fffffffc9e8r0=L0x7fffffffc9e8,
	  L0x7fffffffc9f0r0=L0x7fffffffc9f0, L0x7fffffffc9f8r0=L0x7fffffffc9f8,
	  L0x7fffffffca00r0=L0x7fffffffca00, L0x7fffffffca08r0=L0x7fffffffca08,
	  L0x7fffffffca10r0=L0x7fffffffca10, L0x7fffffffca18r0=L0x7fffffffca18,
	  L0x7fffffffca20r0=L0x7fffffffca20, L0x7fffffffca28r0=L0x7fffffffca28,
	  L0x7fffffffca30r0=L0x7fffffffca30, L0x7fffffffca38r0=L0x7fffffffca38,
	  L0x7fffffffca40r0=L0x7fffffffca40, L0x7fffffffca48r0=L0x7fffffffca48,
	  L0x7fffffffca50r0=L0x7fffffffca50, L0x7fffffffca58r0=L0x7fffffffca58,
	  L0x7fffffffca60r0=L0x7fffffffca60, L0x7fffffffca68r0=L0x7fffffffca68]
   && and[L0x7fffffffc9b0r0=L0x7fffffffc9b0, L0x7fffffffc9b8r0=L0x7fffffffc9b8,
	  L0x7fffffffc9c0r0=L0x7fffffffc9c0, L0x7fffffffc9c8r0=L0x7fffffffc9c8,
	  L0x7fffffffc9d0r0=L0x7fffffffc9d0, L0x7fffffffc9d8r0=L0x7fffffffc9d8,
	  L0x7fffffffc9e0r0=L0x7fffffffc9e0, L0x7fffffffc9e8r0=L0x7fffffffc9e8,
	  L0x7fffffffc9f0r0=L0x7fffffffc9f0, L0x7fffffffc9f8r0=L0x7fffffffc9f8,
	  L0x7fffffffca00r0=L0x7fffffffca00, L0x7fffffffca08r0=L0x7fffffffca08,
	  L0x7fffffffca10r0=L0x7fffffffca10, L0x7fffffffca18r0=L0x7fffffffca18,
	  L0x7fffffffca20r0=L0x7fffffffca20, L0x7fffffffca28r0=L0x7fffffffca28,
	  L0x7fffffffca30r0=L0x7fffffffca30, L0x7fffffffca38r0=L0x7fffffffca38,
	  L0x7fffffffca40r0=L0x7fffffffca40, L0x7fffffffca48r0=L0x7fffffffca48,
	  L0x7fffffffca50r0=L0x7fffffffca50, L0x7fffffffca58r0=L0x7fffffffca58,
	  L0x7fffffffca60r0=L0x7fffffffca60, L0x7fffffffca68r0=L0x7fffffffca68];
	  


(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f6c3 *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f6c3 = 0x55555555f6c3;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #lea    0xef81(%rip),%rcx        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555d7b8 *)
#lea    0xef81(%rip),%%rcx        # 0x55555556c740 <BLS12_381_P>#! 0x55555555d7b8 = 0x55555555d7b8;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #endbr64                                         #! PC = 0x555555568780 *)
#endbr64                                         #! 0x555555568780 = 0x555555568780;
(* #lea    0x60(%rdi),%rdi                          #! PC = 0x555555568795 *)
#lea    %%EA,%%rdi                          #! 0x555555568795 = 0x555555568795;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffc9b0; Value = 0x00007ffff99dd914; PC = 0x5555555687ac *)
mov r8 L0x7fffffffc9b0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffc9b8; Value = 0x0000fffff7dd7ad4; PC = 0x5555555687af *)
mov r9 L0x7fffffffc9b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x5555555687b3 *)
mov r10 L0x7fffffffc9c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x5555555687b7 *)
mov r11 L0x7fffffffc9c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x5555555687bb *)
mov r12 L0x7fffffffc9d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x5555555687bf *)
mov r13 L0x7fffffffc9d8;
(* add    0x30(%rsi),%r8                           #! EA = L0x7fffffffc9e0; Value = 0x00007ffff7dda330; PC = 0x5555555687c3 *)
adds carry r8 L0x7fffffffc9e0 r8;
(* adc    0x38(%rsi),%r9                           #! EA = L0x7fffffffc9e8; Value = 0x00007ffff7fb7520; PC = 0x5555555687c7 *)
adcs carry r9 L0x7fffffffc9e8 r9 carry;
(* adc    0x40(%rsi),%r10                          #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x5555555687cb *)
adcs carry r10 L0x7fffffffc9f0 r10 carry;
(* adc    0x48(%rsi),%r11                          #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x5555555687cf *)
adcs carry r11 L0x7fffffffc9f8 r11 carry;
(* adc    0x50(%rsi),%r12                          #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x5555555687d3 *)
adcs carry r12 L0x7fffffffca00 r12 carry;
(* adc    0x58(%rsi),%r13                          #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x5555555687d7 *)
adcs carry r13 L0x7fffffffca08 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x20(%rsp)                           #! EA = L0x7fffffffc890; PC = 0x5555555687db *)
mov L0x7fffffffc890 r8;
(* mov    %r9,0x28(%rsp)                           #! EA = L0x7fffffffc898; PC = 0x5555555687e0 *)
mov L0x7fffffffc898 r9;
(* mov    %r10,0x30(%rsp)                          #! EA = L0x7fffffffc8a0; PC = 0x5555555687e5 *)
mov L0x7fffffffc8a0 r10;
(* mov    %r11,0x38(%rsp)                          #! EA = L0x7fffffffc8a8; PC = 0x5555555687ea *)
mov L0x7fffffffc8a8 r11;
(* mov    %r12,0x40(%rsp)                          #! EA = L0x7fffffffc8b0; PC = 0x5555555687ef *)
mov L0x7fffffffc8b0 r12;
(* mov    %r13,0x48(%rsp)                          #! EA = L0x7fffffffc8b8; PC = 0x5555555687f4 *)
mov L0x7fffffffc8b8 r13;
(* mov    (%rdx),%r8                               #! EA = L0x7fffffffca10; Value = 0x00007ffff7ffdaab; PC = 0x5555555687f9 *)
mov r8 L0x7fffffffca10;
(* mov    0x8(%rdx),%r9                            #! EA = L0x7fffffffca18; Value = 0x00007ffff7dda330; PC = 0x5555555687fc *)
mov r9 L0x7fffffffca18;
(* mov    0x10(%rdx),%r10                          #! EA = L0x7fffffffca20; Value = 0x00007ffff7fb7000; PC = 0x555555568800 *)
mov r10 L0x7fffffffca20;
(* mov    0x18(%rdx),%r11                          #! EA = L0x7fffffffca28; Value = 0x00007fffffffd7a8; PC = 0x555555568804 *)
mov r11 L0x7fffffffca28;
(* mov    0x20(%rdx),%r12                          #! EA = L0x7fffffffca30; Value = 0x00007fffffffd7a4; PC = 0x555555568808 *)
mov r12 L0x7fffffffca30;
(* mov    0x28(%rdx),%r13                          #! EA = L0x7fffffffca38; Value = 0x00007ffff7fda45c; PC = 0x55555556880c *)
mov r13 L0x7fffffffca38;
(* add    0x30(%rdx),%r8                           #! EA = L0x7fffffffca40; Value = 0x0000ffffefd91330; PC = 0x555555568810 *)
adds carry r8 L0x7fffffffca40 r8;
(* adc    0x38(%rdx),%r9                           #! EA = L0x7fffffffca48; Value = 0x00000000677f9a5f; PC = 0x555555568814 *)
adcs carry r9 L0x7fffffffca48 r9 carry;
(* adc    0x40(%rdx),%r10                          #! EA = L0x7fffffffca50; Value = 0x00007ffff7fcf580; PC = 0x555555568818 *)
adcs carry r10 L0x7fffffffca50 r10 carry;
(* adc    0x48(%rdx),%r11                          #! EA = L0x7fffffffca58; Value = 0x0000ffffefd83f00; PC = 0x55555556881c *)
adcs carry r11 L0x7fffffffca58 r11 carry;
(* adc    0x50(%rdx),%r12                          #! EA = L0x7fffffffca60; Value = 0x0000ffffefd99d19; PC = 0x555555568820 *)
adcs carry r12 L0x7fffffffca60 r12 carry;
(* adc    0x58(%rdx),%r13                          #! EA = L0x7fffffffca68; Value = 0x000080005f7d42e9; PC = 0x555555568824 *)
adcs carry r13 L0x7fffffffca68 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x50(%rsp)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568828 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x58(%rsp)                           #! EA = L0x7fffffffc8c8; PC = 0x55555556882d *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x60(%rsp)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568832 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x68(%rsp)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568837 *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x70(%rsp)                          #! EA = L0x7fffffffc8e0; PC = 0x55555556883c *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x78(%rsp)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568841 *)
mov L0x7fffffffc8e8 r13;
(* #lea    0x20(%rsp),%rsi                          #! PC = 0x555555568846 *)
#lea    %%EA,%%rsi                          #! 0x555555568846 = 0x555555568846;
(* #lea    0x50(%rsp),%rbx                          #! PC = 0x55555556884b *)
#lea    %%EA,%%rbx                          #! 0x55555556884b = 0x55555556884b;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568850 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568850 = 0x555555568850;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;


(* t0 = aa->re + aa->im *)
assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8] =
       (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                  L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
        limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                  L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
    && true;

(* t1 = bb->re + bb->im *)
assert limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                  L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
        limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                  L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
    && true;


(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffc8c0; Value = 0x00017fffe7d8eddb; PC = 0x555555568a64 *)
mov rdx L0x7fffffffc8c0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc890; Value = 0x0000fffff17b7c44; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc890;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc898; Value = 0x00017fffefd8eff4; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc898;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7003; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc8a0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x00017ffff7dc7560; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc8a8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x00017fffeff9c6e5; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc8b0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x00008000677f72bf; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc8b8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcd60; PC = 0x555555568a95 *)
mov L0x7fffffffcd60 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffc8c8; Value = 0x000080005f5d3d8f; PC = 0x555555568abe *)
mov rdx L0x7fffffffc8c8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcd68; PC = 0x555555568adf *)
mov L0x7fffffffcd68 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7003; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017ffff7dc7560; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffeff9c6e5; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00008000677f72bf; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffc8d0; Value = 0x0000ffffeff86580; PC = 0x555555568b3c *)
mov rdx L0x7fffffffc8d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcd70; PC = 0x555555568b63 *)
mov L0x7fffffffcd70 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7003; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017ffff7dc7560; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffeff9c6e5; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00008000677f72bf; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffc8d8; Value = 0x00017fffefd816a8; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffc8d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcd78; PC = 0x555555568be7 *)
mov L0x7fffffffcd78 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7003; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017ffff7dc7560; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffeff9c6e5; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00008000677f72bf; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffc8e0; Value = 0x00017fffefd974bd; PC = 0x555555568c44 *)
mov rdx L0x7fffffffc8e0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcd80; PC = 0x555555568c6b *)
mov L0x7fffffffcd80 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7003; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017ffff7dc7560; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffeff9c6e5; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00008000677f72bf; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffc8e8; Value = 0x00010000577ae745; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffc8e8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcd88; PC = 0x555555568cef *)
mov L0x7fffffffcd88 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00007ffff7fb7003; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017ffff7dc7560; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00017fffeff9c6e5; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00008000677f72bf; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcd90; PC = 0x555555568d61 *)
mov L0x7fffffffcd90 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcd98; PC = 0x555555568d65 *)
mov L0x7fffffffcd98 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcda0; PC = 0x555555568d69 *)
mov L0x7fffffffcda0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcda8; PC = 0x555555568d6d *)
mov L0x7fffffffcda8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcdb0; PC = 0x555555568d71 *)
mov L0x7fffffffcdb0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcdb8; PC = 0x555555568d75 *)
mov L0x7fffffffcdb8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->im, t0, t1) *)

assert limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                 L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                 L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                 L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] =
       ((limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8]) *
        (limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
    && limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                 L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x55555556885e *)
#lea    -%%EA,%%rdi                         #! 0x55555556885e = 0x55555556885e;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568862 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568862 = 0x555555568862;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffca10; Value = 0x00007ffff7ffdaab; PC = 0x555555568a64 *)
mov rdx L0x7fffffffca10;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc9b0; Value = 0x00007ffff99dd914; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc9b0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc9b8; Value = 0x0000fffff7dd7ad4; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc9b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc9c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc9c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc9d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc9d8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcd00; PC = 0x555555568a95 *)
mov L0x7fffffffcd00 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffca18; Value = 0x00007ffff7dda330; PC = 0x555555568abe *)
mov rdx L0x7fffffffca18;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcd08; PC = 0x555555568adf *)
mov L0x7fffffffcd08 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffca20; Value = 0x00007ffff7fb7000; PC = 0x555555568b3c *)
mov rdx L0x7fffffffca20;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcd10; PC = 0x555555568b63 *)
mov L0x7fffffffcd10 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffca28; Value = 0x00007fffffffd7a8; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffca28;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcd18; PC = 0x555555568be7 *)
mov L0x7fffffffcd18 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffca30; Value = 0x00007fffffffd7a4; PC = 0x555555568c44 *)
mov rdx L0x7fffffffca30;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcd20; PC = 0x555555568c6b *)
mov L0x7fffffffcd20 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffca38; Value = 0x00007ffff7fda45c; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffca38;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcd28; PC = 0x555555568cef *)
mov L0x7fffffffcd28 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x0000ffffffffb018; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fccd24; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007fffffffd860; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcd30; PC = 0x555555568d61 *)
mov L0x7fffffffcd30 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcd38; PC = 0x555555568d65 *)
mov L0x7fffffffcd38 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcd40; PC = 0x555555568d69 *)
mov L0x7fffffffcd40 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcd48; PC = 0x555555568d6d *)
mov L0x7fffffffcd48 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcd50; PC = 0x555555568d71 *)
mov L0x7fffffffcd50 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcd58; PC = 0x555555568d75 *)
mov L0x7fffffffcd58 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->re, aa->re, bb->re) *)

assert limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                 L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                 L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                 L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] =
       ((limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                   L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8]) *
        (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                   L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38]))
    && limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                 L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    0xb0(%rsi),%rsi                          #! PC = 0x555555568867 *)
#lea    %%EA,%%rsi                          #! 0x555555568867 = 0x555555568867;
(* #lea    0x30(%rbx),%rbx                          #! PC = 0x55555556886e *)
#lea    %%EA,%%rbx                          #! 0x55555556886e = 0x55555556886e;
(* #lea    0x20(%rsp),%rdi                          #! PC = 0x555555568872 *)
#lea    %%EA,%%rdi                          #! 0x555555568872 = 0x555555568872;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568877 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568877 = 0x555555568877;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffca40; Value = 0x0000ffffefd91330; PC = 0x555555568a64 *)
mov rdx L0x7fffffffca40;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc9e0; Value = 0x00007ffff7dda330; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc9e0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc9e8; Value = 0x00007ffff7fb7520; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc9e8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc9f0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc9f8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x555555568a76 *)
mov r12 L0x7fffffffca00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x555555568a7a *)
mov r13 L0x7fffffffca08;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffc890; PC = 0x555555568a95 *)
mov L0x7fffffffc890 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffca48; Value = 0x00000000677f9a5f; PC = 0x555555568abe *)
mov rdx L0x7fffffffca48;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffc898; PC = 0x555555568adf *)
mov L0x7fffffffc898 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffca50; Value = 0x00007ffff7fcf580; PC = 0x555555568b3c *)
mov rdx L0x7fffffffca50;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffc8a0; PC = 0x555555568b63 *)
mov L0x7fffffffc8a0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffca58; Value = 0x0000ffffefd83f00; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffca58;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffc8a8; PC = 0x555555568be7 *)
mov L0x7fffffffc8a8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffca60; Value = 0x0000ffffefd99d19; PC = 0x555555568c44 *)
mov rdx L0x7fffffffca60;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffc8b0; PC = 0x555555568c6b *)
mov L0x7fffffffc8b0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffca68; Value = 0x000080005f7d42e9; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffca68;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffc8b8; PC = 0x555555568cef *)
mov L0x7fffffffc8b8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000000000000003; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7dcc548; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00007ffff7fcf9c1; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00000000677f9a5f; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568d61 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffc8c8; PC = 0x555555568d65 *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568d69 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568d6d *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffc8e0; PC = 0x555555568d71 *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568d75 *)
mov L0x7fffffffc8e8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(tx, aa->im, bb->im) *)

assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                 L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       ((limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                   L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08]) *
        (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                   L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68]))
    && limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
		 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


rcut and [limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                    L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;

ghost L0x7fffffffcd60o@uint64, L0x7fffffffcd68o@uint64, L0x7fffffffcd70o@uint64,
      L0x7fffffffcd78o@uint64, L0x7fffffffcd80o@uint64, L0x7fffffffcd88o@uint64,
      L0x7fffffffcd90o@uint64, L0x7fffffffcd98o@uint64, L0x7fffffffcda0o@uint64,
      L0x7fffffffcda8o@uint64, L0x7fffffffcdb0o@uint64, L0x7fffffffcdb8o@uint64 :
      and [L0x7fffffffcd60o=L0x7fffffffcd60, L0x7fffffffcd68o=L0x7fffffffcd68,
           L0x7fffffffcd70o=L0x7fffffffcd70, L0x7fffffffcd78o=L0x7fffffffcd78,
           L0x7fffffffcd80o=L0x7fffffffcd80, L0x7fffffffcd88o=L0x7fffffffcd88,
           L0x7fffffffcd90o=L0x7fffffffcd90, L0x7fffffffcd98o=L0x7fffffffcd98,
           L0x7fffffffcda0o=L0x7fffffffcda0, L0x7fffffffcda8o=L0x7fffffffcda8,
           L0x7fffffffcdb0o=L0x7fffffffcdb0, L0x7fffffffcdb8o=L0x7fffffffcdb8]
   && and [L0x7fffffffcd60o=L0x7fffffffcd60, L0x7fffffffcd68o=L0x7fffffffcd68,
           L0x7fffffffcd70o=L0x7fffffffcd70, L0x7fffffffcd78o=L0x7fffffffcd78,
           L0x7fffffffcd80o=L0x7fffffffcd80, L0x7fffffffcd88o=L0x7fffffffcd88,
           L0x7fffffffcd90o=L0x7fffffffcd90, L0x7fffffffcd98o=L0x7fffffffcd98,
           L0x7fffffffcda0o=L0x7fffffffcda0, L0x7fffffffcda8o=L0x7fffffffcda8,
           L0x7fffffffcdb0o=L0x7fffffffcdb0, L0x7fffffffcdb8o=L0x7fffffffcdb8];




(* #lea    0x20(%rsp),%rdx                          #! PC = 0x555555568881 *)
#lea    %%EA,%%rdx                          #! 0x555555568881 = 0x555555568881;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556888e *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556888e = 0x55555556888e;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd60; Value = 0x299fa3911c0e422c; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcd60;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd68; Value = 0xc4852a16d7e499ca; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcd68;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd70; Value = 0xd0ac7c5c98f7d882; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcd70;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd78; Value = 0x4498ed73b71884be; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcd78;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd80; Value = 0x02e1539697cf7376; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcd80;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd88; Value = 0x8bb6fa510dc2750a; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcd88;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd90; Value = 0xd9a54f1473178f98; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcd90;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x2d4b626d105b2900; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd98; Value = 0x2cf1650b71d97259; PC = 0x555555568302 *)
mov r15 L0x7fffffffcd98;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0xc91f1f7a6531b49a; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcda0; Value = 0xd8dfb6e78a61c3c9; PC = 0x55555556830a *)
mov rax L0x7fffffffcda0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x168dd8ac946f9c17; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcda8; Value = 0xfc4824c6eaeb5fb8; PC = 0x555555568312 *)
mov rbx L0x7fffffffcda8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x48271652a08b504a; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcdb0; Value = 0x09bf803dbdeb4cd8; PC = 0x55555556831a *)
mov rbp L0x7fffffffcdb0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x552292b4cc16a4a7; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcdb8; Value = 0x000000008000933d; PC = 0x555555568322 *)
mov rsi L0x7fffffffcdb8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0xefa38784321f0a9a; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd60; PC = 0x55555556832a *)
mov L0x7fffffffcd60 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x600df9b58d611ced; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd68; PC = 0x555555568334 *)
mov L0x7fffffffcd68 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0x780e2360d268e1c5; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd70; PC = 0x555555568340 *)
mov L0x7fffffffcd70 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0x5db549b4279253d3; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd78; PC = 0x55555556834c *)
mov L0x7fffffffcd78 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0xaf2f768a2889ec06; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd80; PC = 0x555555568358 *)
mov L0x7fffffffcd80 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0xf3ca7ea4fa5391b3; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd88; PC = 0x555555568364 *)
mov L0x7fffffffcd88 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x00000000000033bf; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd90; PC = 0x55555556838b *)
mov L0x7fffffffcd90 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd98; PC = 0x555555568392 *)
mov L0x7fffffffcd98 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcda0; PC = 0x555555568399 *)
mov L0x7fffffffcda0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcda8; PC = 0x5555555683a0 *)
mov L0x7fffffffcda8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcdb0; PC = 0x5555555683a7 *)
mov L0x7fffffffcdb0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcdb8; PC = 0x5555555683ab *)
mov L0x7fffffffcdb8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                         L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                         L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                         L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcd60o, L0x7fffffffcd68o, L0x7fffffffcd70o,
                        L0x7fffffffcd78o, L0x7fffffffcd80o, L0x7fffffffcd88o,
                        L0x7fffffffcd90o, L0x7fffffffcd98o, L0x7fffffffcda0o,
                        L0x7fffffffcda8o, L0x7fffffffcdb0o, L0x7fffffffcdb8o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                         L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                         L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                         L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcd60o, L0x7fffffffcd68o, L0x7fffffffcd70o,
                        L0x7fffffffcd78o, L0x7fffffffcd80o, L0x7fffffffcd88o,
                        L0x7fffffffcd90o, L0x7fffffffcd98o, L0x7fffffffcda0o,
                        L0x7fffffffcda8o, L0x7fffffffcdb0o, L0x7fffffffcdb8o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];


ghost L0x7fffffffcd60p@uint64, L0x7fffffffcd68p@uint64, L0x7fffffffcd70p@uint64,
      L0x7fffffffcd78p@uint64, L0x7fffffffcd80p@uint64, L0x7fffffffcd88p@uint64,
      L0x7fffffffcd90p@uint64, L0x7fffffffcd98p@uint64, L0x7fffffffcda0p@uint64,
      L0x7fffffffcda8p@uint64, L0x7fffffffcdb0p@uint64, L0x7fffffffcdb8p@uint64 :
      and [L0x7fffffffcd60p=L0x7fffffffcd60, L0x7fffffffcd68p=L0x7fffffffcd68,
           L0x7fffffffcd70p=L0x7fffffffcd70, L0x7fffffffcd78p=L0x7fffffffcd78,
           L0x7fffffffcd80p=L0x7fffffffcd80, L0x7fffffffcd88p=L0x7fffffffcd88,
           L0x7fffffffcd90p=L0x7fffffffcd90, L0x7fffffffcd98p=L0x7fffffffcd98,
           L0x7fffffffcda0p=L0x7fffffffcda0, L0x7fffffffcda8p=L0x7fffffffcda8,
           L0x7fffffffcdb0p=L0x7fffffffcdb0, L0x7fffffffcdb8p=L0x7fffffffcdb8]
   && and [L0x7fffffffcd60p=L0x7fffffffcd60, L0x7fffffffcd68p=L0x7fffffffcd68,
           L0x7fffffffcd70p=L0x7fffffffcd70, L0x7fffffffcd78p=L0x7fffffffcd78,
           L0x7fffffffcd80p=L0x7fffffffcd80, L0x7fffffffcd88p=L0x7fffffffcd88,
           L0x7fffffffcd90p=L0x7fffffffcd90, L0x7fffffffcd98p=L0x7fffffffcd98,
           L0x7fffffffcda0p=L0x7fffffffcda0, L0x7fffffffcda8p=L0x7fffffffcda8,
           L0x7fffffffcdb0p=L0x7fffffffcdb0, L0x7fffffffcdb8p=L0x7fffffffcdb8];


(* #lea    (%rdi),%rsi                              #! PC = 0x555555568893 *)
#lea    %%EA,%%rsi                              #! 0x555555568893 = 0x555555568893;
(* #lea    -0x60(%rdi),%rdx                         #! PC = 0x555555568896 *)
#lea    -%%EA,%%rdx                         #! 0x555555568896 = 0x555555568896;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556889a *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556889a = 0x55555556889a;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd60; Value = 0xfc5441240bb3192c; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcd60;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd68; Value = 0xfb660a9c72b2e52f; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcd68;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd70; Value = 0xba1ea3b004883c6a; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcd70;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd78; Value = 0xfc71d721168d3474; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcd78;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd80; Value = 0xadbec0e1cbb8cece; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcd80;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd88; Value = 0x9c1372ccdba36a6f; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcd88;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd90; Value = 0x7997555ee5b672aa; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcd90;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcd00; Value = 0xda129225ae37085c; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffcd00;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd98; Value = 0xb4e341aa9f709094; PC = 0x555555568302 *)
mov r15 L0x7fffffffcd98;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcd08; Value = 0x56ac01ea51c9fc2a; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffcd08 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcda0; Value = 0x7b2a6d3362cf6ff5; PC = 0x55555556830a *)
mov rax L0x7fffffffcda0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcd10; Value = 0xab2effb557a8806c; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffcd10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcda8; Value = 0x4d18ae3cc26173b2; PC = 0x555555568312 *)
mov rbx L0x7fffffffcda8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcd18; Value = 0x429974cbfa86f5be; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffcd18 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcdb0; Value = 0x15f50198c397bb25; PC = 0x55555556831a *)
mov rbp L0x7fffffffcdb0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcd20; Value = 0x9a6768ac1c396021; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffcd20 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcdb8; Value = 0x0000000080005f7d; PC = 0x555555568322 *)
mov rsi L0x7fffffffcdb8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcd28; Value = 0x2361d37b6e491674; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffcd28 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd60; PC = 0x55555556832a *)
mov L0x7fffffffcd60 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcd30; Value = 0x4a2768059430b681; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffcd30 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd68; PC = 0x555555568334 *)
mov L0x7fffffffcd68 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcd38; Value = 0x1c8839eae48af2d2; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffcd38 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd70; PC = 0x555555568340 *)
mov L0x7fffffffcd70 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcd40; Value = 0x92a203c4e3c1dea8; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffcd40 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd78; PC = 0x55555556834c *)
mov L0x7fffffffcd78 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcd48; Value = 0xe3302c7cd117fa6b; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffcd48 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd80; PC = 0x555555568358 *)
mov L0x7fffffffcd80 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcd50; Value = 0xbe5e013e1d6f367b; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffcd50 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd88; PC = 0x555555568364 *)
mov L0x7fffffffcd88 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcd58; Value = 0x000000003ffffbfe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffcd58 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd90; PC = 0x55555556838b *)
mov L0x7fffffffcd90 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd98; PC = 0x555555568392 *)
mov L0x7fffffffcd98 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcda0; PC = 0x555555568399 *)
mov L0x7fffffffcda0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcda8; PC = 0x5555555683a0 *)
mov L0x7fffffffcda8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcdb0; PC = 0x5555555683a7 *)
mov L0x7fffffffcdb0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcdb8; PC = 0x5555555683ab *)
mov L0x7fffffffcdb8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                         L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                         L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                         L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
              (limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                         L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                         L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                         L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]))
             (limbs 64 [L0x7fffffffcd60p, L0x7fffffffcd68p, L0x7fffffffcd70p,
                        L0x7fffffffcd78p, L0x7fffffffcd80p, L0x7fffffffcd88p,
                        L0x7fffffffcd90p, L0x7fffffffcd98p, L0x7fffffffcda0p,
                        L0x7fffffffcda8p, L0x7fffffffcdb0p, L0x7fffffffcdb8p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                         L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                         L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                         L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
              (limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                         L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                         L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                         L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]))
             (limbs 64 [L0x7fffffffcd60p, L0x7fffffffcd68p, L0x7fffffffcd70p,
                        L0x7fffffffcd78p, L0x7fffffffcd80p, L0x7fffffffcd88p,
                        L0x7fffffffcd90p, L0x7fffffffcd98p, L0x7fffffffcda0p,
                        L0x7fffffffcda8p, L0x7fffffffcdb0p, L0x7fffffffcdb8p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;

rcut and [limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                    L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;

ghost L0x7fffffffcd00o@uint64, L0x7fffffffcd08o@uint64, L0x7fffffffcd10o@uint64,
      L0x7fffffffcd18o@uint64, L0x7fffffffcd20o@uint64, L0x7fffffffcd28o@uint64,
      L0x7fffffffcd30o@uint64, L0x7fffffffcd38o@uint64, L0x7fffffffcd40o@uint64,
      L0x7fffffffcd48o@uint64, L0x7fffffffcd50o@uint64, L0x7fffffffcd58o@uint64 :
      and [L0x7fffffffcd00o=L0x7fffffffcd00, L0x7fffffffcd08o=L0x7fffffffcd08,
           L0x7fffffffcd10o=L0x7fffffffcd10, L0x7fffffffcd18o=L0x7fffffffcd18,
           L0x7fffffffcd20o=L0x7fffffffcd20, L0x7fffffffcd28o=L0x7fffffffcd28,
           L0x7fffffffcd30o=L0x7fffffffcd30, L0x7fffffffcd38o=L0x7fffffffcd38,
           L0x7fffffffcd40o=L0x7fffffffcd40, L0x7fffffffcd48o=L0x7fffffffcd48,
           L0x7fffffffcd50o=L0x7fffffffcd50, L0x7fffffffcd58o=L0x7fffffffcd58]
   && and [L0x7fffffffcd00o=L0x7fffffffcd00, L0x7fffffffcd08o=L0x7fffffffcd08,
           L0x7fffffffcd10o=L0x7fffffffcd10, L0x7fffffffcd18o=L0x7fffffffcd18,
           L0x7fffffffcd20o=L0x7fffffffcd20, L0x7fffffffcd28o=L0x7fffffffcd28,
           L0x7fffffffcd30o=L0x7fffffffcd30, L0x7fffffffcd38o=L0x7fffffffcd38,
           L0x7fffffffcd40o=L0x7fffffffcd40, L0x7fffffffcd48o=L0x7fffffffcd48,
           L0x7fffffffcd50o=L0x7fffffffcd50, L0x7fffffffcd58o=L0x7fffffffcd58];



(* #lea    -0x60(%rdi),%rsi                         #! PC = 0x55555556889f *)
#lea    -%%EA,%%rsi                         #! 0x55555556889f = 0x55555556889f;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x5555555688a3 *)
#lea    %%EA,%%rdx                          #! 0x5555555688a3 = 0x5555555688a3;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x5555555688a8 *)
#lea    -%%EA,%%rdi                         #! 0x5555555688a8 = 0x5555555688a8;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x5555555688ac *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x5555555688ac = 0x5555555688ac;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd00; Value = 0xda129225ae37085c; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcd00;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd08; Value = 0x56ac01ea51c9fc2a; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcd08;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd10; Value = 0xab2effb557a8806c; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcd10;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd18; Value = 0x429974cbfa86f5be; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcd18;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd20; Value = 0x9a6768ac1c396021; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcd20;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd28; Value = 0x2361d37b6e491674; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcd28;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd30; Value = 0x4a2768059430b681; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcd30;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x2d4b626d105b2900; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd38; Value = 0x1c8839eae48af2d2; PC = 0x555555568302 *)
mov r15 L0x7fffffffcd38;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0xc91f1f7a6531b49a; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcd40; Value = 0x92a203c4e3c1dea8; PC = 0x55555556830a *)
mov rax L0x7fffffffcd40;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x168dd8ac946f9c17; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcd48; Value = 0xe3302c7cd117fa6b; PC = 0x555555568312 *)
mov rbx L0x7fffffffcd48;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x48271652a08b504a; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcd50; Value = 0xbe5e013e1d6f367b; PC = 0x55555556831a *)
mov rbp L0x7fffffffcd50;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x552292b4cc16a4a7; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcd58; Value = 0x000000003ffffbfe; PC = 0x555555568322 *)
mov rsi L0x7fffffffcd58;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0xefa38784321f0a9a; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd00; PC = 0x55555556832a *)
mov L0x7fffffffcd00 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x600df9b58d611ced; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd08; PC = 0x555555568334 *)
mov L0x7fffffffcd08 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0x780e2360d268e1c5; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd10; PC = 0x555555568340 *)
mov L0x7fffffffcd10 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0x5db549b4279253d3; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd18; PC = 0x55555556834c *)
mov L0x7fffffffcd18 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0xaf2f768a2889ec06; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd20; PC = 0x555555568358 *)
mov L0x7fffffffcd20 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0xf3ca7ea4fa5391b3; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd28; PC = 0x555555568364 *)
mov L0x7fffffffcd28 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x00000000000033bf; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd30; PC = 0x55555556838b *)
mov L0x7fffffffcd30 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd38; PC = 0x555555568392 *)
mov L0x7fffffffcd38 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcd40; PC = 0x555555568399 *)
mov L0x7fffffffcd40 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcd48; PC = 0x5555555683a0 *)
mov L0x7fffffffcd48 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcd50; PC = 0x5555555683a7 *)
mov L0x7fffffffcd50 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcd58; PC = 0x5555555683ab *)
mov L0x7fffffffcd58 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                         L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                         L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                         L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcd00o, L0x7fffffffcd08o, L0x7fffffffcd10o,
                        L0x7fffffffcd18o, L0x7fffffffcd20o, L0x7fffffffcd28o,
                        L0x7fffffffcd30o, L0x7fffffffcd38o, L0x7fffffffcd40o,
                        L0x7fffffffcd48o, L0x7fffffffcd50o, L0x7fffffffcd58o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                         L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                         L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                         L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcd00o, L0x7fffffffcd08o, L0x7fffffffcd10o,
                        L0x7fffffffcd18o, L0x7fffffffcd20o, L0x7fffffffcd28o,
                        L0x7fffffffcd30o, L0x7fffffffcd38o, L0x7fffffffcd40o,
                        L0x7fffffffcd48o, L0x7fffffffcd50o, L0x7fffffffcd58o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;



(* mul_382x(ret[0], aa, bb) *)

assert and [eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
                   (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) * U)
                  ((limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                              L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
	            limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                              L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U) *
      	           (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                              L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
                    limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                              L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                             L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
                   limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                             L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U)
	          (limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a30, a31, a32, a33, a34, a35] * U +
                   limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [a50, a51, a52, a53, a54, a55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
	    eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                             L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
                   limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                             L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U)
	          (limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b30, b31, b32, b33, b34, b35] * U +
                   limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [b50, b51, b52, b53, b54, b55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]]
    && true;


rcut and [limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                    L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                    L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;

ghost L0x7fffffffcd00q@uint64, L0x7fffffffcd08q@uint64, L0x7fffffffcd10q@uint64,
      L0x7fffffffcd18q@uint64, L0x7fffffffcd20q@uint64, L0x7fffffffcd28q@uint64,
      L0x7fffffffcd30q@uint64, L0x7fffffffcd38q@uint64, L0x7fffffffcd40q@uint64,
      L0x7fffffffcd48q@uint64, L0x7fffffffcd50q@uint64, L0x7fffffffcd58q@uint64,
      L0x7fffffffcd60q@uint64, L0x7fffffffcd68q@uint64, L0x7fffffffcd70q@uint64,
      L0x7fffffffcd78q@uint64, L0x7fffffffcd80q@uint64, L0x7fffffffcd88q@uint64,
      L0x7fffffffcd90q@uint64, L0x7fffffffcd98q@uint64, L0x7fffffffcda0q@uint64,
      L0x7fffffffcda8q@uint64, L0x7fffffffcdb0q@uint64, L0x7fffffffcdb8q@uint64 :
      and[L0x7fffffffcd00q=L0x7fffffffcd00, L0x7fffffffcd08q=L0x7fffffffcd08,
          L0x7fffffffcd10q=L0x7fffffffcd10, L0x7fffffffcd18q=L0x7fffffffcd18,
          L0x7fffffffcd20q=L0x7fffffffcd20, L0x7fffffffcd28q=L0x7fffffffcd28,
          L0x7fffffffcd30q=L0x7fffffffcd30, L0x7fffffffcd38q=L0x7fffffffcd38,
          L0x7fffffffcd40q=L0x7fffffffcd40, L0x7fffffffcd48q=L0x7fffffffcd48,
          L0x7fffffffcd50q=L0x7fffffffcd50, L0x7fffffffcd58q=L0x7fffffffcd58,
          L0x7fffffffcd60q=L0x7fffffffcd60, L0x7fffffffcd68q=L0x7fffffffcd68,
          L0x7fffffffcd70q=L0x7fffffffcd70, L0x7fffffffcd78q=L0x7fffffffcd78,
          L0x7fffffffcd80q=L0x7fffffffcd80, L0x7fffffffcd88q=L0x7fffffffcd88,
          L0x7fffffffcd90q=L0x7fffffffcd90, L0x7fffffffcd98q=L0x7fffffffcd98,
          L0x7fffffffcda0q=L0x7fffffffcda0, L0x7fffffffcda8q=L0x7fffffffcda8,
          L0x7fffffffcdb0q=L0x7fffffffcdb0, L0x7fffffffcdb8q=L0x7fffffffcdb8]
   && and[L0x7fffffffcd00q=L0x7fffffffcd00, L0x7fffffffcd08q=L0x7fffffffcd08,
          L0x7fffffffcd10q=L0x7fffffffcd10, L0x7fffffffcd18q=L0x7fffffffcd18,
          L0x7fffffffcd20q=L0x7fffffffcd20, L0x7fffffffcd28q=L0x7fffffffcd28,
          L0x7fffffffcd30q=L0x7fffffffcd30, L0x7fffffffcd38q=L0x7fffffffcd38,
          L0x7fffffffcd40q=L0x7fffffffcd40, L0x7fffffffcd48q=L0x7fffffffcd48,
          L0x7fffffffcd50q=L0x7fffffffcd50, L0x7fffffffcd58q=L0x7fffffffcd58,
          L0x7fffffffcd60q=L0x7fffffffcd60, L0x7fffffffcd68q=L0x7fffffffcd68,
          L0x7fffffffcd70q=L0x7fffffffcd70, L0x7fffffffcd78q=L0x7fffffffcd78,
          L0x7fffffffcd80q=L0x7fffffffcd80, L0x7fffffffcd88q=L0x7fffffffcd88,
          L0x7fffffffcd90q=L0x7fffffffcd90, L0x7fffffffcd98q=L0x7fffffffcd98,
          L0x7fffffffcda0q=L0x7fffffffcda0, L0x7fffffffcda8q=L0x7fffffffcda8,
          L0x7fffffffcdb0q=L0x7fffffffcdb0, L0x7fffffffcdb8q=L0x7fffffffcdb8];


(* #lea    0x88(%rsp),%r8                           #! PC = 0x5555555688b1 *)
#lea    %%EA,%%r8                           #! 0x5555555688b1 = 0x5555555688b1;
(* #lea    0x30(%r8),%rsp                           #! PC = 0x5555555688d0 *)
#lea    %%EA,%rsp                           #! 0x5555555688d0 = 0x5555555688d0;
(* #! <- SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #repz retq                                      #! PC = 0x5555555688d4 *)
#repz retq                                      #! 0x5555555688d4 = 0x5555555688d4;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #retq                                           #! PC = 0x55555555d7c8 *)
#retq                                           #! 0x55555555d7c8 = 0x55555555d7c8;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f6d9 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f6d9 = 0x55555555f6d9;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd00; Value = 0xacc72fb89ddbdf5c; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcd00;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd08; Value = 0x8d8ce26fec984790; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcd08;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd10; Value = 0x94a12708c338e454; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcd10;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd18; Value = 0xfa725e7959fba574; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcd18;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd20; Value = 0x4544d5f75022bb79; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcd20;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd28; Value = 0x33be4bf73c2a0bda; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcd28;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd30; Value = 0xea196e5006cf9993; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcd30;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcb30; Value = 0x50b04a5826191df8; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcb30;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd38; Value = 0xa47a168a1222110c; PC = 0x555555567602 *)
mov r15 L0x7fffffffcd38;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb38; Value = 0xf4e77567c8c524c3; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcb38 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcd40; Value = 0x34ecba10bc2f8ad4; PC = 0x55555556760a *)
mov rax L0x7fffffffcd40;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcb40; Value = 0x589afa0eae8ebc2e; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcb40 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcd48; Value = 0x3400b5f2a88e0e65; PC = 0x555555567612 *)
mov rbx L0x7fffffffcd48;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcb48; Value = 0x2f2d8a98109a5dd0; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcb48 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcd50; Value = 0xca938299231ba4c8; PC = 0x55555556761a *)
mov rbp L0x7fffffffcd50;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcb50; Value = 0xb639ccfa60d7de8f; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcb50 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcd58; Value = 0x000000003fffc83e; PC = 0x555555567622 *)
mov rsi L0x7fffffffcd58;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcb58; Value = 0xa81c4661bc689d5b; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcb58 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd00; PC = 0x55555556762a *)
mov L0x7fffffffcd00 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb60; Value = 0x1c8c490add44d80e; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcb60 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd08; PC = 0x555555567634 *)
mov L0x7fffffffcd08 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb68; Value = 0xf098f8ec27e6c90c; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcb68 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd10; PC = 0x555555567640 *)
mov L0x7fffffffcd10 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb70; Value = 0x554944990485b977; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcb70 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd18; PC = 0x55555556764c *)
mov L0x7fffffffcd18 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb78; Value = 0x072c6a8e0fe1a262; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcb78 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd20; PC = 0x555555567658 *)
mov L0x7fffffffcd20 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb80; Value = 0x812916e48250ede3; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcb80 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd28; PC = 0x555555567664 *)
mov L0x7fffffffcd28 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb88; Value = 0x1a0111ea397fb2da; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcb88 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd30; PC = 0x55555556768b *)
mov L0x7fffffffcd30 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd38; PC = 0x555555567692 *)
mov L0x7fffffffcd38 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcd40; PC = 0x555555567699 *)
mov L0x7fffffffcd40 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcd48; PC = 0x5555555676a0 *)
mov L0x7fffffffcd48 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcd50; PC = 0x5555555676a7 *)
mov L0x7fffffffcd50 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcd58; PC = 0x5555555676ab *)
mov L0x7fffffffcd58 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #lea    0x60(%rbp),%r14                          #! PC = 0x55555555f6de *)
#lea    0x60(%%rbp),%%r14                          #! 0x55555555f6de = 0x55555555f6de;
(* #lea    0x250(%rsp),%rcx                         #! PC = 0x55555555f6e2 *)
#lea    %%EA,%%rcx                         #! 0x55555555f6e2 = 0x55555555f6e2;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f6fe *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f6fe = 0x55555555f6fe;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd60; Value = 0x2241aefe5d7c10d0; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcd60;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd68; Value = 0xa4ba08b220e8e905; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcd68;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd70; Value = 0x0eefa3faacdfbbfe; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcd70;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd78; Value = 0xb9d862551c063eb6; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcd78;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd80; Value = 0x13575835af7f6ead; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcd80;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd88; Value = 0x78b19f516d5a53fb; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcd88;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd90; Value = 0x2f6fed595185bc29; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcd90;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcb90; Value = 0x6462b9c7af536380; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcb90;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd98; Value = 0x985b07bfbae59dc2; PC = 0x555555567602 *)
mov r15 L0x7fffffffcd98;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb98; Value = 0x53ccac1900c6f361; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcb98 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcda0; Value = 0xe888696e7f0d914d; PC = 0x55555556760a *)
mov rax L0x7fffffffcda0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcba0; Value = 0xa27b8148bec196fc; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcba0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcda8; Value = 0x69e881bff1497946; PC = 0x555555567612 *)
mov rbx L0x7fffffffcda8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcba8; Value = 0xb4a998471dec8ae1; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcba8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcdb0; Value = 0x5797005aa62884a9; PC = 0x55555556761a *)
mov rbp L0x7fffffffcdb0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcbb0; Value = 0xdc0e1b0368e6e51e; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcbb0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcdb8; Value = 0x000000004000637e; PC = 0x555555567622 *)
mov rsi L0x7fffffffcdb8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcbb8; Value = 0xfc3b1a06d6e16c74; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcbb8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd60; PC = 0x55555556762a *)
mov L0x7fffffffcd60 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcbc0; Value = 0xbf4d68814f0569e2; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcbc0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd68; PC = 0x555555567634 *)
mov L0x7fffffffcd68 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcbc8; Value = 0x72b339d34847e375; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcbc8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd70; PC = 0x555555567640 *)
mov L0x7fffffffcd70 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcbd0; Value = 0x32aa2f92438902b8; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcbd0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd78; PC = 0x55555556764c *)
mov L0x7fffffffcd78 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcbd8; Value = 0x0f65ac5a3828339e; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcbd8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd80; PC = 0x555555567658 *)
mov L0x7fffffffcd80 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcbe0; Value = 0xc9f28f21a9a34a20; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcbe0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd88; PC = 0x555555567664 *)
mov L0x7fffffffcd88 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcbe8; Value = 0x00000000000033bf; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcbe8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd90; PC = 0x55555556768b *)
mov L0x7fffffffcd90 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd98; PC = 0x555555567692 *)
mov L0x7fffffffcd98 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcda0; PC = 0x555555567699 *)
mov L0x7fffffffcda0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcda8; PC = 0x5555555676a0 *)
mov L0x7fffffffcda8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcdb0; PC = 0x5555555676a7 *)
mov L0x7fffffffcdb0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcdb8; PC = 0x5555555676ab *)
mov L0x7fffffffcdb8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f714 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f714 = 0x55555555f714;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;

(* sub_fp2x2(ret[0], ret[0], t1 *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
		   (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                              L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                              L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                              L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
	 	   (limbs 64 [L0x7fffffffcd00q, L0x7fffffffcd08q, L0x7fffffffcd10q,
                              L0x7fffffffcd18q, L0x7fffffffcd20q, L0x7fffffffcd28q,
                              L0x7fffffffcd30q, L0x7fffffffcd38q, L0x7fffffffcd40q,
                              L0x7fffffffcd48q, L0x7fffffffcd50q, L0x7fffffffcd58q])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
		   (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                              L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                              L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                              L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]))
	           (limbs 64 [L0x7fffffffcd60q, L0x7fffffffcd68q, L0x7fffffffcd70q,
                              L0x7fffffffcd78q, L0x7fffffffcd80q, L0x7fffffffcd88q,
                              L0x7fffffffcd90q, L0x7fffffffcd98q, L0x7fffffffcda0q,
                              L0x7fffffffcda8q, L0x7fffffffcdb0q, L0x7fffffffcdb8q])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];
		   
assume and [eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
		   (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                              L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                              L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                              L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
	 	   (limbs 64 [L0x7fffffffcd00q, L0x7fffffffcd08q, L0x7fffffffcd10q,
                              L0x7fffffffcd18q, L0x7fffffffcd20q, L0x7fffffffcd28q,
                              L0x7fffffffcd30q, L0x7fffffffcd38q, L0x7fffffffcd40q,
                              L0x7fffffffcd48q, L0x7fffffffcd50q, L0x7fffffffcd58q])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
		   (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                              L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                              L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                              L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]))
	           (limbs 64 [L0x7fffffffcd60q, L0x7fffffffcd68q, L0x7fffffffcd70q,
                              L0x7fffffffcd78q, L0x7fffffffcd80q, L0x7fffffffcd88q,
                              L0x7fffffffcd90q, L0x7fffffffcd98q, L0x7fffffffcda0q,
                              L0x7fffffffcda8q, L0x7fffffffcdb0q, L0x7fffffffcdb8q])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;


rcut and [limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                    L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                    L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;

ghost L0x7fffffffcd00r@uint64, L0x7fffffffcd08r@uint64, L0x7fffffffcd10r@uint64,
      L0x7fffffffcd18r@uint64, L0x7fffffffcd20r@uint64, L0x7fffffffcd28r@uint64,
      L0x7fffffffcd30r@uint64, L0x7fffffffcd38r@uint64, L0x7fffffffcd40r@uint64,
      L0x7fffffffcd48r@uint64, L0x7fffffffcd50r@uint64, L0x7fffffffcd58r@uint64,
      L0x7fffffffcd60r@uint64, L0x7fffffffcd68r@uint64, L0x7fffffffcd70r@uint64,
      L0x7fffffffcd78r@uint64, L0x7fffffffcd80r@uint64, L0x7fffffffcd88r@uint64,
      L0x7fffffffcd90r@uint64, L0x7fffffffcd98r@uint64, L0x7fffffffcda0r@uint64,
      L0x7fffffffcda8r@uint64, L0x7fffffffcdb0r@uint64, L0x7fffffffcdb8r@uint64 :
      and[L0x7fffffffcd00r=L0x7fffffffcd00, L0x7fffffffcd08r=L0x7fffffffcd08,
          L0x7fffffffcd10r=L0x7fffffffcd10, L0x7fffffffcd18r=L0x7fffffffcd18,
          L0x7fffffffcd20r=L0x7fffffffcd20, L0x7fffffffcd28r=L0x7fffffffcd28,
          L0x7fffffffcd30r=L0x7fffffffcd30, L0x7fffffffcd38r=L0x7fffffffcd38,
          L0x7fffffffcd40r=L0x7fffffffcd40, L0x7fffffffcd48r=L0x7fffffffcd48,
          L0x7fffffffcd50r=L0x7fffffffcd50, L0x7fffffffcd58r=L0x7fffffffcd58,
          L0x7fffffffcd60r=L0x7fffffffcd60, L0x7fffffffcd68r=L0x7fffffffcd68,
          L0x7fffffffcd70r=L0x7fffffffcd70, L0x7fffffffcd78r=L0x7fffffffcd78,
          L0x7fffffffcd80r=L0x7fffffffcd80, L0x7fffffffcd88r=L0x7fffffffcd88,
          L0x7fffffffcd90r=L0x7fffffffcd90, L0x7fffffffcd98r=L0x7fffffffcd98,
          L0x7fffffffcda0r=L0x7fffffffcda0, L0x7fffffffcda8r=L0x7fffffffcda8,
          L0x7fffffffcdb0r=L0x7fffffffcdb0, L0x7fffffffcdb8r=L0x7fffffffcdb8]
   && and[L0x7fffffffcd00r=L0x7fffffffcd00, L0x7fffffffcd08r=L0x7fffffffcd08,
          L0x7fffffffcd10r=L0x7fffffffcd10, L0x7fffffffcd18r=L0x7fffffffcd18,
          L0x7fffffffcd20r=L0x7fffffffcd20, L0x7fffffffcd28r=L0x7fffffffcd28,
          L0x7fffffffcd30r=L0x7fffffffcd30, L0x7fffffffcd38r=L0x7fffffffcd38,
          L0x7fffffffcd40r=L0x7fffffffcd40, L0x7fffffffcd48r=L0x7fffffffcd48,
          L0x7fffffffcd50r=L0x7fffffffcd50, L0x7fffffffcd58r=L0x7fffffffcd58,
          L0x7fffffffcd60r=L0x7fffffffcd60, L0x7fffffffcd68r=L0x7fffffffcd68,
          L0x7fffffffcd70r=L0x7fffffffcd70, L0x7fffffffcd78r=L0x7fffffffcd78,
          L0x7fffffffcd80r=L0x7fffffffcd80, L0x7fffffffcd88r=L0x7fffffffcd88,
          L0x7fffffffcd90r=L0x7fffffffcd90, L0x7fffffffcd98r=L0x7fffffffcd98,
          L0x7fffffffcda0r=L0x7fffffffcda0, L0x7fffffffcda8r=L0x7fffffffcda8,
          L0x7fffffffcdb0r=L0x7fffffffcdb0, L0x7fffffffcdb8r=L0x7fffffffcdb8];






(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd00; Value = 0x5c16e56077c2c164; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcd00;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd08; Value = 0x98a56d0823d322cd; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcd08;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd10; Value = 0x3c062cfa14aa2825; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcd10;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd18; Value = 0xcb44d3e1496147a4; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcd18;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd20; Value = 0x8f0b08fcef4adcea; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcd20;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd28; Value = 0x8ba205957fc16e7e; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcd28;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd30; Value = 0x878c2545298a6c2f; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcd30;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcbf0; Value = 0x000000013b58c9fb; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcbf0;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd38; Value = 0xd28d1d9c9b8f4800; PC = 0x555555567602 *)
mov r15 L0x7fffffffcd38;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcbf8; Value = 0x731fa0a13ec97a9c; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcbf8 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcd40; Value = 0x46d44818ae5ac780; PC = 0x55555556760a *)
mov rax L0x7fffffffcd40;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc00; Value = 0xbc9009f40281ea12; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcc00 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcd48; Value = 0x914b96e98c317ec2; PC = 0x555555567612 *)
mov rbx L0x7fffffffcd48;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc08; Value = 0xa368010299f5bdf5; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcc08 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcd50; Value = 0x9486136ae41663bc; PC = 0x55555556761a *)
mov rbp L0x7fffffffcd50;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc10; Value = 0x7796c22defa0bb30; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcc10 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcd58; Value = 0x000000003ffffbfe; PC = 0x555555567622 *)
mov rsi L0x7fffffffcd58;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc18; Value = 0x91247049dd688209; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcc18 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd00; PC = 0x55555556762a *)
mov L0x7fffffffcd00 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc20; Value = 0xfee1111b8a25234b; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcc20 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd08; PC = 0x555555567634 *)
mov L0x7fffffffcd08 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc28; Value = 0xe2ce02807f3744cd; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcc28 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd10; PC = 0x555555567640 *)
mov L0x7fffffffcd10 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc30; Value = 0x3e96014420fa5cfb; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcc30 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd18; PC = 0x55555556764c *)
mov L0x7fffffffcd18 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc38; Value = 0xd8020000863f397e; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcc38 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd20; PC = 0x555555567658 *)
mov L0x7fffffffcd20 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcc40; Value = 0x000000003fffffff; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcc40 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd28; PC = 0x555555567664 *)
mov L0x7fffffffcd28 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcc48; Value = 0x0000000000000000; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcc48 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd30; PC = 0x55555556768b *)
mov L0x7fffffffcd30 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd38; PC = 0x555555567692 *)
mov L0x7fffffffcd38 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcd40; PC = 0x555555567699 *)
mov L0x7fffffffcd40 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcd48; PC = 0x5555555676a0 *)
mov L0x7fffffffcd48 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcd50; PC = 0x5555555676a7 *)
mov L0x7fffffffcd50 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcd58; PC = 0x5555555676ab *)
mov L0x7fffffffcd58 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #lea    0x310(%rsp),%rcx                         #! PC = 0x55555555f719 *)
#lea    %%EA,%%rcx                         #! 0x55555555f719 = 0x55555555f719;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f735 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f735 = 0x55555555f735;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd60; Value = 0xbddef536ae28ad50; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcd60;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd68; Value = 0x50ed5c992021f5a3; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcd68;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd70; Value = 0x6c7422b1ee1e2502; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcd70;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd78; Value = 0x052eca0dfe19b3d4; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcd78;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd80; Value = 0x37493d324698898f; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcd80;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd88; Value = 0x7c76854a9678e786; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcd88;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd90; Value = 0x702284d802805246; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcd90;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcc50; Value = 0xff27587ad6418eb0; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcc50;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd98; Value = 0x25a7cdec729dba4c; PC = 0x555555567602 *)
mov r15 L0x7fffffffcd98;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcc58; Value = 0xbdcb81422f6412ee; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcc58 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcda0; Value = 0xb5de39dc3b848e95; PC = 0x55555556760a *)
mov rax L0x7fffffffcda0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc60; Value = 0x8c6937d9d7595437; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcc60 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcda8; Value = 0x5a82d565b92145a8; PC = 0x555555567612 *)
mov rbx L0x7fffffffcda8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc68; Value = 0x2fc92141ab212104; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcc68 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcdb0; Value = 0x8da47138fc853a89; PC = 0x55555556761a *)
mov rbp L0x7fffffffcdb0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc70; Value = 0x409c3957ef365202; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcc70 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcdb8; Value = 0x0000000040002fbe; PC = 0x555555567622 *)
mov rsi L0x7fffffffcdb8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc78; Value = 0xcd8563811cc5bbbb; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcc78 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd60; PC = 0x55555556762a *)
mov L0x7fffffffcd60 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc80; Value = 0x1c0cf0f18fc83832; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcc80 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd68; PC = 0x555555567634 *)
mov L0x7fffffffcd68 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc88; Value = 0x46bdb3d219b7d81e; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcc88 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd70; PC = 0x555555567640 *)
mov L0x7fffffffcd70 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc90; Value = 0x13e421d37629f5fb; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcc90 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd78; PC = 0x55555556764c *)
mov L0x7fffffffcd78 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc98; Value = 0x3302c9ad74e5c28b; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcc98 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd80; PC = 0x555555567658 *)
mov L0x7fffffffcd80 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcca0; Value = 0xcd2f6ffb1fbb3b5e; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcca0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd88; PC = 0x555555567664 *)
mov L0x7fffffffcd88 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcca8; Value = 0x00000000000033bf; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcca8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd90; PC = 0x55555556768b *)
mov L0x7fffffffcd90 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd98; PC = 0x555555567692 *)
mov L0x7fffffffcd98 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcda0; PC = 0x555555567699 *)
mov L0x7fffffffcda0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcda8; PC = 0x5555555676a0 *)
mov L0x7fffffffcda8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcdb0; PC = 0x5555555676a7 *)
mov L0x7fffffffcdb0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcdb8; PC = 0x5555555676ab *)
mov L0x7fffffffcdb8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #lea    0xc0(%rbp),%r12                          #! PC = 0x55555555f73a *)
#lea    0xc0(%%rbp),%%r12                          #! 0x55555555f73a = 0x55555555f73a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f74d *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f74d = 0x55555555f74d;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;


(* sub_fp2x2(ret[0], ret[0], t2) *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
		   (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]))
	 	   (limbs 64 [L0x7fffffffcd00r, L0x7fffffffcd08r, L0x7fffffffcd10r,
                              L0x7fffffffcd18r, L0x7fffffffcd20r, L0x7fffffffcd28r,
                              L0x7fffffffcd30r, L0x7fffffffcd38r, L0x7fffffffcd40r,
                              L0x7fffffffcd48r, L0x7fffffffcd50r, L0x7fffffffcd58r])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
		   (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	           (limbs 64 [L0x7fffffffcd60r, L0x7fffffffcd68r, L0x7fffffffcd70r,
                              L0x7fffffffcd78r, L0x7fffffffcd80r, L0x7fffffffcd88r,
                              L0x7fffffffcd90r, L0x7fffffffcd98r, L0x7fffffffcda0r,
                              L0x7fffffffcda8r, L0x7fffffffcdb0r, L0x7fffffffcdb8r])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
		   (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]))
	 	   (limbs 64 [L0x7fffffffcd00r, L0x7fffffffcd08r, L0x7fffffffcd10r,
                              L0x7fffffffcd18r, L0x7fffffffcd20r, L0x7fffffffcd28r,
                              L0x7fffffffcd30r, L0x7fffffffcd38r, L0x7fffffffcd40r,
                              L0x7fffffffcd48r, L0x7fffffffcd50r, L0x7fffffffcd58r])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) +
		   (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	           (limbs 64 [L0x7fffffffcd60r, L0x7fffffffcd68r, L0x7fffffffcd70r,
                              L0x7fffffffcd78r, L0x7fffffffcd80r, L0x7fffffffcd88r,
                              L0x7fffffffcd90r, L0x7fffffffcd98r, L0x7fffffffcda0r,
                              L0x7fffffffcda8r, L0x7fffffffcdb0r, L0x7fffffffcdb8r])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd00; Value = 0x5c16e55f3c69f769; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcd00;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd08; Value = 0x2585cc66e509a831; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcd08;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd10; Value = 0x7f76230612283e13; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcd10;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd18; Value = 0x27dcd2deaf6b89ae; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcd18;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd20; Value = 0x177446ceffaa21ba; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcd20;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd28; Value = 0xfa7d954ba258ec75; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcd28;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd30; Value = 0x88ab14299f6548e3; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcd30;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcd60; Value = 0xbeb79cbbd7e71ea0; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcd60;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd38; Value = 0xefbf1b1c1c580332; PC = 0x555555567602 *)
mov r15 L0x7fffffffcd38;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcd68; Value = 0x9321db56f0bde2b4; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcd68 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcd40; Value = 0x083e46d48d606a84; PC = 0x55555556760a *)
mov rax L0x7fffffffcd40;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcd70; Value = 0xe00aead816c4d0ca; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcd70 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcd48; Value = 0xb94996e905f24544; PC = 0x555555567612 *)
mov rbx L0x7fffffffcd48;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcd78; Value = 0xd565a8cc52f892cf; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcd78 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcd50; Value = 0x9486136aa41663bc; PC = 0x55555556761a *)
mov rbp L0x7fffffffcd50;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcd80; Value = 0xf6ad03da5762378c; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcd80 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcd58; Value = 0x000000003ffffbfe; PC = 0x555555567622 *)
mov rsi L0x7fffffffcd58;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcd88; Value = 0xaef121c979b32bca; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcd88 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcdc0; PC = 0x55555556762a *)
mov L0x7fffffffcdc0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcd90; Value = 0x541593e672b81a13; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcd90 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcdc8; PC = 0x555555567634 *)
mov L0x7fffffffcdc8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcd98; Value = 0xdeea1a1a58e5e22e; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcd98 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcdd0; PC = 0x555555567640 *)
mov L0x7fffffffcdd0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcda0; Value = 0xa1fa1808c55a9899; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcda0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcdd8; PC = 0x55555556764c *)
mov L0x7fffffffcdd8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcda8; Value = 0x27800bb8443b831d; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcda8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcde0; PC = 0x555555567658 *)
mov L0x7fffffffcde0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcdb0; Value = 0xc075013ddcc9ff2b; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcdb0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcde8; PC = 0x555555567664 *)
mov L0x7fffffffcde8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcdb8; Value = 0x000000003ffffbfe; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcdb8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcdf0; PC = 0x55555556768b *)
mov L0x7fffffffcdf0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcdf8; PC = 0x555555567692 *)
mov L0x7fffffffcdf8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce00; PC = 0x555555567699 *)
mov L0x7fffffffce00 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce08; PC = 0x5555555676a0 *)
mov L0x7fffffffce08 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce10; PC = 0x5555555676a7 *)
mov L0x7fffffffce10 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce18; PC = 0x5555555676ab *)
mov L0x7fffffffce18 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #lea    0x120(%rbp),%r13                         #! PC = 0x55555555f752 *)
#lea    0x120(%%rbp),%%r13                         #! 0x55555555f752 = 0x55555555f752;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f765 *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f765 = 0x55555555f765;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd00; Value = 0x5c16e55f3c69f769; PC = 0x555555567504 *)
mov r8 L0x7fffffffcd00;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd08; Value = 0x2585cc66e509a831; PC = 0x555555567507 *)
mov r9 L0x7fffffffcd08;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd10; Value = 0x7f76230612283e13; PC = 0x55555556750b *)
mov r10 L0x7fffffffcd10;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd18; Value = 0x27dcd2deaf6b89ae; PC = 0x55555556750f *)
mov r11 L0x7fffffffcd18;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd20; Value = 0x177446ceffaa21ba; PC = 0x555555567513 *)
mov r12 L0x7fffffffcd20;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd28; Value = 0xfa7d954ba258ec75; PC = 0x555555567517 *)
mov r13 L0x7fffffffcd28;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd30; Value = 0x88ab14299f6548e3; PC = 0x55555556751b *)
mov r14 L0x7fffffffcd30;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcd60; Value = 0xbeb79cbbd7e71ea0; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffcd60 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd38; Value = 0xefbf1b1c1c580332; PC = 0x555555567522 *)
mov r15 L0x7fffffffcd38;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcd68; Value = 0x9321db56f0bde2b4; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffcd68 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcd40; Value = 0x083e46d48d606a84; PC = 0x55555556752a *)
mov rax L0x7fffffffcd40;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffcd70; Value = 0xe00aead816c4d0ca; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffcd70 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcd48; Value = 0xb94996e905f24544; PC = 0x555555567532 *)
mov rbx L0x7fffffffcd48;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffcd78; Value = 0xd565a8cc52f892cf; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffcd78 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcd50; Value = 0x9486136aa41663bc; PC = 0x55555556753a *)
mov rbp L0x7fffffffcd50;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcd80; Value = 0xf6ad03da5762378c; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcd80 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcd58; Value = 0x000000003ffffbfe; PC = 0x555555567542 *)
mov rsi L0x7fffffffcd58;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcd88; Value = 0xaef121c979b32bca; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcd88 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x55555556754a *)
mov L0x7fffffffce20 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcd90; Value = 0x541593e672b81a13; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcd90 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce28; PC = 0x555555567551 *)
mov L0x7fffffffce28 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcd98; Value = 0xdeea1a1a58e5e22e; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcd98 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555567559 *)
mov L0x7fffffffce30 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcda0; Value = 0xa1fa1808c55a9899; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcda0 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555567561 *)
mov L0x7fffffffce40 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcda8; Value = 0x27800bb8443b831d; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcda8 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x55555556756c *)
mov L0x7fffffffce38 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcdb0; Value = 0xc075013ddcc9ff2b; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcdb0 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555567577 *)
mov L0x7fffffffce48 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcdb8; Value = 0x000000003ffffbfe; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcdb8 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffce50; PC = 0x5555555675b5 *)
mov L0x7fffffffce50 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffce58; PC = 0x5555555675bd *)
mov L0x7fffffffce58 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x5555555675c5 *)
mov L0x7fffffffce60 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x5555555675cd *)
mov L0x7fffffffce68 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x5555555675d1 *)
mov L0x7fffffffce70 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x5555555675d5 *)
mov L0x7fffffffce78 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f778 *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f778 = 0x55555555f778;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;


(* mul_by_u_plus_1_fp2x2(ret[1], ret[0]) *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]))
	 	   (limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod  (limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78])
		  ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
	           (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]))
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]))
	 	   (limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod  (limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78])
		  ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
	           (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]))
		  (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                    L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;




(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcdc0; Value = 0x9d5f48a36482d8c9; PC = 0x555555567504 *)
mov r8 L0x7fffffffcdc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcdc8; Value = 0x9263f10ff44bc57c; PC = 0x555555567507 *)
mov r9 L0x7fffffffcdc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcdd0; Value = 0x9f6b382dfb636d48; PC = 0x55555556750b *)
mov r10 L0x7fffffffcdd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcdd8; Value = 0x52772a125c72f6de; PC = 0x55555556750f *)
mov r11 L0x7fffffffcdd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcde0; Value = 0x20c742f4a847ea2d; PC = 0x555555567513 *)
mov r12 L0x7fffffffcde0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcde8; Value = 0x4b8c738228a5c0aa; PC = 0x555555567517 *)
mov r13 L0x7fffffffcde8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcdf0; Value = 0xee9480432cacd97b; PC = 0x55555556751b *)
mov r14 L0x7fffffffcdf0;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffca70; Value = 0xd465bc6c3a225850; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffca70 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcdf8; Value = 0x2f81010074c62103; PC = 0x555555567522 *)
mov r15 L0x7fffffffcdf8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffca78; Value = 0x7677a15c722c1b1a; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffca78 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce00; Value = 0xcd75016cbeb6c80f; PC = 0x55555556752a *)
mov rax L0x7fffffffce00;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffca80; Value = 0x85ce2f1bfa4b484a; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffca80 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce08; Value = 0xf640d6b5b53bd4e5; PC = 0x555555567532 *)
mov rbx L0x7fffffffce08;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffca88; Value = 0xd0a5999000ab6121; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffca88 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce10; Value = 0x1f2cb9e30a981168; PC = 0x55555556753a *)
mov rbp L0x7fffffffce10;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffca90; Value = 0x6680073b4b768614; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffca90 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce18; Value = 0x1a0111ea397fe69a; PC = 0x555555567542 *)
mov rsi L0x7fffffffce18;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffca98; Value = 0x341b93a3d8a01fb6; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffca98 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd00; PC = 0x55555556754a *)
mov L0x7fffffffcd00 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcaa0; Value = 0xa89b10a97b35714b; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcaa0 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd08; PC = 0x555555567551 *)
mov L0x7fffffffcd08 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcaa8; Value = 0xc6afac09dce2ecc2; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcaa8 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd10; PC = 0x555555567559 *)
mov L0x7fffffffcd10 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcab0; Value = 0x1695212a6354549c; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcab0 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd20; PC = 0x555555567561 *)
mov L0x7fffffffcd20 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcab8; Value = 0xb4dd81f77f8668c0; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcab8 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd18; PC = 0x55555556756c *)
mov L0x7fffffffcd18 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcac0; Value = 0x4504a7d60ddd9fa4; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcac0 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd28; PC = 0x555555567577 *)
mov L0x7fffffffcd28 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcac8; Value = 0x1a0111ea397fe69a; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcac8 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd30; PC = 0x5555555675b5 *)
mov L0x7fffffffcd30 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd38; PC = 0x5555555675bd *)
mov L0x7fffffffcd38 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcd40; PC = 0x5555555675c5 *)
mov L0x7fffffffcd40 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcd48; PC = 0x5555555675cd *)
mov L0x7fffffffcd48 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcd50; PC = 0x5555555675d1 *)
mov L0x7fffffffcd50 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcd58; PC = 0x5555555675d5 *)
mov L0x7fffffffcd58 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;
(* #lea    0x190(%rsp),%rcx                         #! PC = 0x55555555f77d *)
#lea    %%EA,%%rcx                         #! 0x55555555f77d = 0x55555555f77d;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f799 *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f799 = 0x55555555f799;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce20; Value = 0x1ace821b14511609; PC = 0x555555567504 *)
mov r8 L0x7fffffffce20;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce28; Value = 0xb8a7a7bdd5c78ae6; PC = 0x555555567507 *)
mov r9 L0x7fffffffce28;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce30; Value = 0x5f810dde28ed0edd; PC = 0x55555556750b *)
mov r10 L0x7fffffffce30;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce38; Value = 0xfd427bab02641c7e; PC = 0x55555556750f *)
mov r11 L0x7fffffffce38;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce40; Value = 0x0e214aa9570c5946; PC = 0x555555567513 *)
mov r12 L0x7fffffffce40;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce48; Value = 0xa96eb7151c0c1840; PC = 0x555555567517 *)
mov r13 L0x7fffffffce48;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffce50; Value = 0xdcc0a810121d62f7; PC = 0x55555556751b *)
mov r14 L0x7fffffffce50;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcad0; Value = 0xfe4ee126b5827eb0; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffcad0 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffce58; Value = 0xcea93536753de560; PC = 0x555555567522 *)
mov r15 L0x7fffffffce58;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcad8; Value = 0x61d13a9247083c0a; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffcad8 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce60; Value = 0xaa385edd52bb031e; PC = 0x55555556752a *)
mov rax L0x7fffffffce60;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffcae0; Value = 0x328aa9ffac86ffff; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffcae0 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce68; Value = 0xe0c9a2a14a2dc861; PC = 0x555555567532 *)
mov rbx L0x7fffffffce68;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffcae8; Value = 0xc331ab7e800252c9; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffcae8 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce70; Value = 0x54fb14a880e062e7; PC = 0x55555556753a *)
mov rbp L0x7fffffffce70;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcaf0; Value = 0xec98aace8f245eff; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcaf0 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce78; Value = 0x000000007ffff7fd; PC = 0x555555567542 *)
mov rsi L0x7fffffffce78;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcaf8; Value = 0x4026540007352be9; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcaf8 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcd60; PC = 0x55555556754a *)
mov L0x7fffffffcd60 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb00; Value = 0x8e43eadb2d666662; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcb00 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcd68; PC = 0x555555567551 *)
mov L0x7fffffffcd68 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb08; Value = 0x65aa9e65514286e0; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcb08 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcd70; PC = 0x555555567559 *)
mov L0x7fffffffcd70 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb10; Value = 0xdf01b83d2dc48d80; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcb10 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcd80; PC = 0x555555567561 *)
mov L0x7fffffffcd80 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb18; Value = 0xa5329109a10a0689; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcb18 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcd78; PC = 0x55555556756c *)
mov L0x7fffffffcd78 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb20; Value = 0x82d3025c702bb221; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcb20 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcd88; PC = 0x555555567577 *)
mov L0x7fffffffcd88 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb28; Value = 0x000000007ffff7fd; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcb28 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcd90; PC = 0x5555555675b5 *)
mov L0x7fffffffcd90 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcd98; PC = 0x5555555675bd *)
mov L0x7fffffffcd98 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcda0; PC = 0x5555555675c5 *)
mov L0x7fffffffcda0 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcda8; PC = 0x5555555675cd *)
mov L0x7fffffffcda8 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcdb0; PC = 0x5555555675d1 *)
mov L0x7fffffffcdb0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcdb8; PC = 0x5555555675d5 *)
mov L0x7fffffffcdb8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;


(* add_fp2x2(ret[0], ret[1], t0) *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                              L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                              L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                              L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
	 	   (limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
		   (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                              L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                              L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                              L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]))
	           (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];


assume and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                              L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                              L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                              L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
	 	   (limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                              L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                              L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                              L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
		   (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                              L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                              L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                              L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]))
	           (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                              L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                              L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                              L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                    L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
	  limbs 64 [a00, a01, a02, a03, a04, a05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a10, a11, a12, a13, a14, a15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a20, a21, a22, a23, a24, a25] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a30, a31, a32, a33, a34, a35] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b00, b01, b02, b03, b04, b05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b10, b11, b12, b13, b14, b15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b20, b21, b22, b23, b24, b25] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b30, b31, b32, b33, b34, b35] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;



(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;
(* #callq  0x555555566920 <add_mod_384x>           #! PC = 0x55555555f7ae *)
#callq  0x555555566920 <add_mod_384x>           #! 0x55555555f7ae = 0x55555555f7ae;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555566920 *)
#endbr64                                         #! 0x555555566920 = 0x555555566920;
(* #lea    0x30(%rsi),%rsi                          #! PC = 0x55555556693b *)
#lea    %%EA,%%rsi                          #! 0x55555556693b = 0x55555556693b;
(* #lea    0x30(%rdx),%rdx                          #! PC = 0x55555556693f *)
#lea    %%EA,%%rdx                          #! 0x55555556693f = 0x55555556693f;
(* #lea    0x30(%rdi),%rdi                          #! PC = 0x555555566943 *)
#lea    %%EA,%%rdi                          #! 0x555555566943 = 0x555555566943;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566947 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566947 = 0x555555566947;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcfc0; Value = 0x0000ffffefd91330; PC = 0x555555566884 *)
mov r8 L0x7fffffffcfc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcfc8; Value = 0x000080005f5d9ca5; PC = 0x555555566887 *)
mov r9 L0x7fffffffcfc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x55555556688b *)
mov r10 L0x7fffffffcfd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x55555556688f *)
mov r11 L0x7fffffffcfd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555566893 *)
mov r12 L0x7fffffffcfe0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555566897 *)
mov r13 L0x7fffffffcfe8;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd020; Value = 0x00007ffff7dda330; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd020 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd028; Value = 0x0000000000000000; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd028 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd030; Value = 0x0000000000000000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd030 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd038; Value = 0x00007ffff7dcc548; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd038 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd040; Value = 0x00007ffff7fcf9c1; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd040 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd048; Value = 0x00000000677f9a5f; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd048 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffc9e0; PC = 0x5555555668ee *)
mov L0x7fffffffc9e0 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffc9e8; PC = 0x5555555668f5 *)
mov L0x7fffffffc9e8 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffc9f0; PC = 0x5555555668fd *)
mov L0x7fffffffc9f0 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffc9f8; PC = 0x555555566905 *)
mov L0x7fffffffc9f8 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca00; PC = 0x555555566909 *)
mov L0x7fffffffca00 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca08; PC = 0x55555556690d *)
mov L0x7fffffffca08 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    -0x30(%rdi),%rdi                         #! PC = 0x555555566955 *)
#lea    -%%EA,%%rdi                         #! 0x555555566955 = 0x555555566955;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566959 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566959 = 0x555555566959;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcf90; Value = 0x0000000000000000; PC = 0x555555566884 *)
mov r8 L0x7fffffffcf90;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcf98; Value = 0x0000000000000000; PC = 0x555555566887 *)
mov r9 L0x7fffffffcf98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x55555556688b *)
mov r10 L0x7fffffffcfa0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x55555556688f *)
mov r11 L0x7fffffffcfa8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555566893 *)
mov r12 L0x7fffffffcfb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555566897 *)
mov r13 L0x7fffffffcfb8;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcff0; Value = 0x00007ffff7ffdaab; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffcff0 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcff8; Value = 0x00007ffff7dda330; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffcff8 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd000; Value = 0x00007ffff7fb7000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd000 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd008; Value = 0x00007fffffffd7a8; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd008 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd010; Value = 0x00007fffffffd7a4; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd010 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd018; Value = 0x0000000000000000; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd018 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffc9b0; PC = 0x5555555668ee *)
mov L0x7fffffffc9b0 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffc9b8; PC = 0x5555555668f5 *)
mov L0x7fffffffc9b8 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffc9c0; PC = 0x5555555668fd *)
mov L0x7fffffffc9c0 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffc9c8; PC = 0x555555566905 *)
mov L0x7fffffffc9c8 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffc9d0; PC = 0x555555566909 *)
mov L0x7fffffffc9d0 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffc9d8; PC = 0x55555556690d *)
mov L0x7fffffffc9d8 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;


(* add_fp2(aa, a[0], a[1]) *)

assert true
    && eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8])
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a20, a21, a22, a23, a24, a25])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8])
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a20, a21, a22, a23, a24, a25])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
             (limbs 64 [a10, a11, a12, a13, a14, a15] +
              limbs 64 [a30, a31, a32, a33, a34, a35])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
             (limbs 64 [a10, a11, a12, a13, a14, a15] +
              limbs 64 [a30, a31, a32, a33, a34, a35])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;



(* #lea    0x48(%rsp),%rsp                          #! PC = 0x55555556697c *)
#lea    %%EA,%rsp                          #! 0x55555556697c = 0x55555556697c;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x555555566981 *)
#repz retq                                      #! 0x555555566981 = 0x555555566981;
(* #callq  0x555555566920 <add_mod_384x>           #! PC = 0x55555555f7c8 *)
#callq  0x555555566920 <add_mod_384x>           #! 0x55555555f7c8 = 0x55555555f7c8;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555566920 *)
#endbr64                                         #! 0x555555566920 = 0x555555566920;
(* #lea    0x30(%rsi),%rsi                          #! PC = 0x55555556693b *)
#lea    %%EA,%%rsi                          #! 0x55555556693b = 0x55555556693b;
(* #lea    0x30(%rdx),%rdx                          #! PC = 0x55555556693f *)
#lea    %%EA,%%rdx                          #! 0x55555556693f = 0x55555556693f;
(* #lea    0x30(%rdi),%rdi                          #! PC = 0x555555566943 *)
#lea    %%EA,%%rdi                          #! 0x555555566943 = 0x555555566943;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566947 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566947 = 0x555555566947;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd0e0; Value = 0x00007ffff97ba199; PC = 0x555555566884 *)
mov r8 L0x7fffffffd0e0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd0e8; Value = 0x00017fffefd94f0a; PC = 0x555555566887 *)
mov r9 L0x7fffffffd0e8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd0f0; Value = 0x00007ffff7ffd9eb; PC = 0x55555556688b *)
mov r10 L0x7fffffffd0f0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd0f8; Value = 0x00007fffffffd870; PC = 0x55555556688f *)
mov r11 L0x7fffffffd0f8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd100; Value = 0x0000fffff7fccb50; PC = 0x555555566893 *)
mov r12 L0x7fffffffd100;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd108; Value = 0x00007fffffffdc60; PC = 0x555555566897 *)
mov r13 L0x7fffffffd108;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd140; Value = 0x00007ffff7fb7000; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd140 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd148; Value = 0x00000000677f9a5f; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd148 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd150; Value = 0x00007ffff7fcf580; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd150 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd158; Value = 0x00007ffff7fb79b8; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd158 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd160; Value = 0x00007ffff7dca358; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd160 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd168; Value = 0x00007ffff7fda88a; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd168 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca40; PC = 0x5555555668ee *)
mov L0x7fffffffca40 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca48; PC = 0x5555555668f5 *)
mov L0x7fffffffca48 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca50; PC = 0x5555555668fd *)
mov L0x7fffffffca50 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca58; PC = 0x555555566905 *)
mov L0x7fffffffca58 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca60; PC = 0x555555566909 *)
mov L0x7fffffffca60 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca68; PC = 0x55555556690d *)
mov L0x7fffffffca68 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    -0x30(%rdi),%rdi                         #! PC = 0x555555566955 *)
#lea    -%%EA,%%rdi                         #! 0x555555566955 = 0x555555566955;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566959 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566959 = 0x555555566959;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd0b0; Value = 0x00000000019dfe69; PC = 0x555555566884 *)
mov r8 L0x7fffffffd0b0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd0b8; Value = 0x0000000008046284; PC = 0x555555566887 *)
mov r9 L0x7fffffffd0b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd0c0; Value = 0xfffffffffffffffd; PC = 0x55555556688b *)
mov r10 L0x7fffffffd0c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd0c8; Value = 0x00007fffffffd86f; PC = 0x55555556688f *)
mov r11 L0x7fffffffd0c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd0d0; Value = 0x0000ffffeff86580; PC = 0x555555566893 *)
mov r12 L0x7fffffffd0d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd0d8; Value = 0x00007fffffffd860; PC = 0x555555566897 *)
mov r13 L0x7fffffffd0d8;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd110; Value = 0x00007ffff7ffd9e8; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd110 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd118; Value = 0x0000000000000000; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd118 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd120; Value = 0x0000000000000000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd120 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd128; Value = 0x0000000000000000; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd128 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd130; Value = 0x0000000000000000; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd130 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd138; Value = 0x00007ffff7fda45c; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd138 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca10; PC = 0x5555555668ee *)
mov L0x7fffffffca10 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca18; PC = 0x5555555668f5 *)
mov L0x7fffffffca18 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca20; PC = 0x5555555668fd *)
mov L0x7fffffffca20 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca28; PC = 0x555555566905 *)
mov L0x7fffffffca28 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca30; PC = 0x555555566909 *)
mov L0x7fffffffca30 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca38; PC = 0x55555556690d *)
mov L0x7fffffffca38 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;


(* add_fp2(bb, b[0], b[1]) *)

assert true
    && eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38])
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b20, b21, b22, b23, b24, b25])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38])
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b20, b21, b22, b23, b24, b25])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
             (limbs 64 [b10, b11, b12, b13, b14, b15] +
              limbs 64 [b30, b31, b32, b33, b34, b35])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
             (limbs 64 [b10, b11, b12, b13, b14, b15] +
              limbs 64 [b30, b31, b32, b33, b34, b35])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* add_fp2(aa, a[0], a[1]) *)

assert eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
              limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U)
             ((limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) +
              (limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;

(* add_fp2(bb, b[0], b[1]) *)

assert eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
              limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U)
             ((limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U) +
              (limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;   

rcut and [limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                    L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                    L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                    L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                    L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;    

ghost L0x7fffffffc9b0r1@uint64, L0x7fffffffc9b8r1@uint64, L0x7fffffffc9c0r1@uint64,
      L0x7fffffffc9c8r1@uint64, L0x7fffffffc9d0r1@uint64, L0x7fffffffc9d8r1@uint64,  
      L0x7fffffffc9e0r1@uint64, L0x7fffffffc9e8r1@uint64, L0x7fffffffc9f0r1@uint64,
      L0x7fffffffc9f8r1@uint64, L0x7fffffffca00r1@uint64, L0x7fffffffca08r1@uint64,
      L0x7fffffffca10r1@uint64, L0x7fffffffca18r1@uint64, L0x7fffffffca20r1@uint64,
      L0x7fffffffca28r1@uint64, L0x7fffffffca30r1@uint64, L0x7fffffffca38r1@uint64,
      L0x7fffffffca40r1@uint64, L0x7fffffffca48r1@uint64, L0x7fffffffca50r1@uint64,
      L0x7fffffffca58r1@uint64, L0x7fffffffca60r1@uint64, L0x7fffffffca68r1@uint64 :
      and[L0x7fffffffc9b0r1=L0x7fffffffc9b0, L0x7fffffffc9b8r1=L0x7fffffffc9b8,
	  L0x7fffffffc9c0r1=L0x7fffffffc9c0, L0x7fffffffc9c8r1=L0x7fffffffc9c8,
	  L0x7fffffffc9d0r1=L0x7fffffffc9d0, L0x7fffffffc9d8r1=L0x7fffffffc9d8,
	  L0x7fffffffc9e0r1=L0x7fffffffc9e0, L0x7fffffffc9e8r1=L0x7fffffffc9e8,
	  L0x7fffffffc9f0r1=L0x7fffffffc9f0, L0x7fffffffc9f8r1=L0x7fffffffc9f8,
	  L0x7fffffffca00r1=L0x7fffffffca00, L0x7fffffffca08r1=L0x7fffffffca08,
	  L0x7fffffffca10r1=L0x7fffffffca10, L0x7fffffffca18r1=L0x7fffffffca18,
	  L0x7fffffffca20r1=L0x7fffffffca20, L0x7fffffffca28r1=L0x7fffffffca28,
	  L0x7fffffffca30r1=L0x7fffffffca30, L0x7fffffffca38r1=L0x7fffffffca38,
	  L0x7fffffffca40r1=L0x7fffffffca40, L0x7fffffffca48r1=L0x7fffffffca48,
	  L0x7fffffffca50r1=L0x7fffffffca50, L0x7fffffffca58r1=L0x7fffffffca58,
	  L0x7fffffffca60r1=L0x7fffffffca60, L0x7fffffffca68r1=L0x7fffffffca68]
   && and[L0x7fffffffc9b0r1=L0x7fffffffc9b0, L0x7fffffffc9b8r1=L0x7fffffffc9b8,
	  L0x7fffffffc9c0r1=L0x7fffffffc9c0, L0x7fffffffc9c8r1=L0x7fffffffc9c8,
	  L0x7fffffffc9d0r1=L0x7fffffffc9d0, L0x7fffffffc9d8r1=L0x7fffffffc9d8,
	  L0x7fffffffc9e0r1=L0x7fffffffc9e0, L0x7fffffffc9e8r1=L0x7fffffffc9e8,
	  L0x7fffffffc9f0r1=L0x7fffffffc9f0, L0x7fffffffc9f8r1=L0x7fffffffc9f8,
	  L0x7fffffffca00r1=L0x7fffffffca00, L0x7fffffffca08r1=L0x7fffffffca08,
	  L0x7fffffffca10r1=L0x7fffffffca10, L0x7fffffffca18r1=L0x7fffffffca18,
	  L0x7fffffffca20r1=L0x7fffffffca20, L0x7fffffffca28r1=L0x7fffffffca28,
	  L0x7fffffffca30r1=L0x7fffffffca30, L0x7fffffffca38r1=L0x7fffffffca38,
	  L0x7fffffffca40r1=L0x7fffffffca40, L0x7fffffffca48r1=L0x7fffffffca48,
	  L0x7fffffffca50r1=L0x7fffffffca50, L0x7fffffffca58r1=L0x7fffffffca58,
	  L0x7fffffffca60r1=L0x7fffffffca60, L0x7fffffffca68r1=L0x7fffffffca68];
	  

(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f6c3 *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f6c3 = 0x55555555f6c3;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #lea    0xef81(%rip),%rcx        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555d7b8 *)
#lea    0xef81(%rip),%%rcx        # 0x55555556c740 <BLS12_381_P>#! 0x55555555d7b8 = 0x55555555d7b8;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
(* #lea    0x48(%rsp),%rsp                          #! PC = 0x55555556697c *)
#lea    %%EA,%rsp                          #! 0x55555556697c = 0x55555556697c;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x555555566981 *)
#repz retq                                      #! 0x555555566981 = 0x555555566981;
(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f7db *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f7db = 0x55555555f7db;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #lea    0xef81(%rip),%rcx        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555d7b8 *)
#lea    0xef81(%rip),%%rcx        # 0x55555556c740 <BLS12_381_P>#! 0x55555555d7b8 = 0x55555555d7b8;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #endbr64                                         #! PC = 0x555555568780 *)
#endbr64                                         #! 0x555555568780 = 0x555555568780;
(* #lea    0x60(%rdi),%rdi                          #! PC = 0x555555568795 *)
#lea    %%EA,%%rdi                          #! 0x555555568795 = 0x555555568795;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffc9b0; Value = 0x00007ffff7ffdaab; PC = 0x5555555687ac *)
mov r8 L0x7fffffffc9b0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffc9b8; Value = 0x00007ffff7dda330; PC = 0x5555555687af *)
mov r9 L0x7fffffffc9b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x5555555687b3 *)
mov r10 L0x7fffffffc9c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x5555555687b7 *)
mov r11 L0x7fffffffc9c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x5555555687bb *)
mov r12 L0x7fffffffc9d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x5555555687bf *)
mov r13 L0x7fffffffc9d8;
(* add    0x30(%rsi),%r8                           #! EA = L0x7fffffffc9e0; Value = 0x00017fffe7b6b660; PC = 0x5555555687c3 *)
adds carry r8 L0x7fffffffc9e0 r8;
(* adc    0x38(%rsi),%r9                           #! EA = L0x7fffffffc9e8; Value = 0x000080005f5d9ca5; PC = 0x5555555687c7 *)
adcs carry r9 L0x7fffffffc9e8 r9 carry;
(* adc    0x40(%rsi),%r10                          #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x5555555687cb *)
adcs carry r10 L0x7fffffffc9f0 r10 carry;
(* adc    0x48(%rsi),%r11                          #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x5555555687cf *)
adcs carry r11 L0x7fffffffc9f8 r11 carry;
(* adc    0x50(%rsi),%r12                          #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x5555555687d3 *)
adcs carry r12 L0x7fffffffca00 r12 carry;
(* adc    0x58(%rsi),%r13                          #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x5555555687d7 *)
adcs carry r13 L0x7fffffffca08 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x20(%rsp)                           #! EA = L0x7fffffffc890; PC = 0x5555555687db *)
mov L0x7fffffffc890 r8;
(* mov    %r9,0x28(%rsp)                           #! EA = L0x7fffffffc898; PC = 0x5555555687e0 *)
mov L0x7fffffffc898 r9;
(* mov    %r10,0x30(%rsp)                          #! EA = L0x7fffffffc8a0; PC = 0x5555555687e5 *)
mov L0x7fffffffc8a0 r10;
(* mov    %r11,0x38(%rsp)                          #! EA = L0x7fffffffc8a8; PC = 0x5555555687ea *)
mov L0x7fffffffc8a8 r11;
(* mov    %r12,0x40(%rsp)                          #! EA = L0x7fffffffc8b0; PC = 0x5555555687ef *)
mov L0x7fffffffc8b0 r12;
(* mov    %r13,0x48(%rsp)                          #! EA = L0x7fffffffc8b8; PC = 0x5555555687f4 *)
mov L0x7fffffffc8b8 r13;
(* mov    (%rdx),%r8                               #! EA = L0x7fffffffca10; Value = 0x00007ffff99dd851; PC = 0x5555555687f9 *)
mov r8 L0x7fffffffca10;
(* mov    0x8(%rdx),%r9                            #! EA = L0x7fffffffca18; Value = 0x0000000008046284; PC = 0x5555555687fc *)
mov r9 L0x7fffffffca18;
(* mov    0x10(%rdx),%r10                          #! EA = L0x7fffffffca20; Value = 0xfffffffffffffffd; PC = 0x555555568800 *)
mov r10 L0x7fffffffca20;
(* mov    0x18(%rdx),%r11                          #! EA = L0x7fffffffca28; Value = 0x00007fffffffd86f; PC = 0x555555568804 *)
mov r11 L0x7fffffffca28;
(* mov    0x20(%rdx),%r12                          #! EA = L0x7fffffffca30; Value = 0x0000ffffeff86580; PC = 0x555555568808 *)
mov r12 L0x7fffffffca30;
(* mov    0x28(%rdx),%r13                          #! EA = L0x7fffffffca38; Value = 0x0000fffff7fd7cbc; PC = 0x55555556880c *)
mov r13 L0x7fffffffca38;
(* add    0x30(%rdx),%r8                           #! EA = L0x7fffffffca40; Value = 0x0000fffff1771199; PC = 0x555555568810 *)
adds carry r8 L0x7fffffffca40 r8;
(* adc    0x38(%rdx),%r9                           #! EA = L0x7fffffffca48; Value = 0x000180005758e969; PC = 0x555555568814 *)
adcs carry r9 L0x7fffffffca48 r9 carry;
(* adc    0x40(%rdx),%r10                          #! EA = L0x7fffffffca50; Value = 0x0000ffffeffccf6b; PC = 0x555555568818 *)
adcs carry r10 L0x7fffffffca50 r10 carry;
(* adc    0x48(%rdx),%r11                          #! EA = L0x7fffffffca58; Value = 0x0000fffff7fb5228; PC = 0x55555556881c *)
adcs carry r11 L0x7fffffffca58 r11 carry;
(* adc    0x50(%rdx),%r12                          #! EA = L0x7fffffffca60; Value = 0x00017fffefd96ea8; PC = 0x555555568820 *)
adcs carry r12 L0x7fffffffca60 r12 carry;
(* adc    0x58(%rdx),%r13                          #! EA = L0x7fffffffca68; Value = 0x0000fffff7fd84ea; PC = 0x555555568824 *)
adcs carry r13 L0x7fffffffca68 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x50(%rsp)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568828 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x58(%rsp)                           #! EA = L0x7fffffffc8c8; PC = 0x55555556882d *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x60(%rsp)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568832 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x68(%rsp)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568837 *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x70(%rsp)                          #! EA = L0x7fffffffc8e0; PC = 0x55555556883c *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x78(%rsp)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568841 *)
mov L0x7fffffffc8e8 r13;
(* #lea    0x20(%rsp),%rsi                          #! PC = 0x555555568846 *)
#lea    %%EA,%%rsi                          #! 0x555555568846 = 0x555555568846;
(* #lea    0x50(%rsp),%rbx                          #! PC = 0x55555556884b *)
#lea    %%EA,%%rbx                          #! 0x55555556884b = 0x55555556884b;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568850 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568850 = 0x555555568850;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;


(* t0 = aa->re + aa->im *)
assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8] =
       (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                  L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
        limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                  L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
    && true;

(* t1 = bb->re + bb->im *)
assert limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                  L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
        limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                  L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
    && true;



(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffc8c0; Value = 0x00017fffeb14e9ea; PC = 0x555555568a64 *)
mov rdx L0x7fffffffc8c0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc890; Value = 0x0001ffffdfb6910b; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc890;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc898; Value = 0x00010000573b3fd5; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc898;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x00017fffe7f83f68; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc8a0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x00017fffefd816a8; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc8a8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x00027fffe7d4ba8d; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc8b0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x00010000577aeb45; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc8b8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x555555568a95 *)
mov L0x7fffffffce20 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffc8c8; Value = 0x000180005f5d4bed; PC = 0x555555568abe *)
mov rdx L0x7fffffffc8c8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffce28; PC = 0x555555568adf *)
mov L0x7fffffffce28 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00017fffe7f83f68; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017fffefd816a8; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00027fffe7d4ba8d; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00010000577aeb45; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffc8d0; Value = 0x0000ffffeffccf68; PC = 0x555555568b3c *)
mov rdx L0x7fffffffc8d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555568b63 *)
mov L0x7fffffffce30 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00017fffe7f83f68; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017fffefd816a8; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00027fffe7d4ba8d; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00010000577aeb45; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffc8d8; Value = 0x00017ffff7fb2a98; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffc8d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x555555568be7 *)
mov L0x7fffffffce38 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00017fffe7f83f68; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017fffefd816a8; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00027fffe7d4ba8d; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00010000577aeb45; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffc8e0; Value = 0x00027fffdfd1d428; PC = 0x555555568c44 *)
mov rdx L0x7fffffffc8e0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555568c6b *)
mov L0x7fffffffce40 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00017fffe7f83f68; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017fffefd816a8; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00027fffe7d4ba8d; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00010000577aeb45; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffc8e8; Value = 0x0001ffffeffb01a6; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffc8e8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555568cef *)
mov L0x7fffffffce48 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x00017fffe7f83f68; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x00017fffefd816a8; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x00027fffe7d4ba8d; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00010000577aeb45; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffce50; PC = 0x555555568d61 *)
mov L0x7fffffffce50 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffce58; PC = 0x555555568d65 *)
mov L0x7fffffffce58 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x555555568d69 *)
mov L0x7fffffffce60 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x555555568d6d *)
mov L0x7fffffffce68 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x555555568d71 *)
mov L0x7fffffffce70 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x555555568d75 *)
mov L0x7fffffffce78 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->im, t0, t1) *)

assert limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                 L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                 L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                 L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] =
       ((limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                   L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8]) *
        (limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                   L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
    && limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                 L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];





(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x55555556885e *)
#lea    -%%EA,%%rdi                         #! 0x55555556885e = 0x55555556885e;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568862 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568862 = 0x555555568862;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffca10; Value = 0x00007ffff99dd851; PC = 0x555555568a64 *)
mov rdx L0x7fffffffca10;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc9b0; Value = 0x00007ffff7ffdaab; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc9b0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc9b8; Value = 0x00007ffff7dda330; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc9b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc9c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc9c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc9d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc9d8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcdc0; PC = 0x555555568a95 *)
mov L0x7fffffffcdc0 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffca18; Value = 0x0000000008046284; PC = 0x555555568abe *)
mov rdx L0x7fffffffca18;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcdc8; PC = 0x555555568adf *)
mov L0x7fffffffcdc8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffca20; Value = 0xfffffffffffffffd; PC = 0x555555568b3c *)
mov rdx L0x7fffffffca20;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcdd0; PC = 0x555555568b63 *)
mov L0x7fffffffcdd0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffca28; Value = 0x00007fffffffd86f; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffca28;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcdd8; PC = 0x555555568be7 *)
mov L0x7fffffffcdd8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffca30; Value = 0x0000ffffeff86580; PC = 0x555555568c44 *)
mov rdx L0x7fffffffca30;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcde0; PC = 0x555555568c6b *)
mov L0x7fffffffcde0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffca38; Value = 0x0000fffff7fd7cbc; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffca38;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcde8; PC = 0x555555568cef *)
mov L0x7fffffffcde8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x00007ffff7fb7000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd7a8; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000fffff7fb47a4; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x00007ffff7fda45c; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcdf0; PC = 0x555555568d61 *)
mov L0x7fffffffcdf0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcdf8; PC = 0x555555568d65 *)
mov L0x7fffffffcdf8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffce00; PC = 0x555555568d69 *)
mov L0x7fffffffce00 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffce08; PC = 0x555555568d6d *)
mov L0x7fffffffce08 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffce10; PC = 0x555555568d71 *)
mov L0x7fffffffce10 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffce18; PC = 0x555555568d75 *)
mov L0x7fffffffce18 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->re, aa->re, bb->re) *)

assert limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                 L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                 L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                 L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] =
       ((limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                   L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8]) *
        (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                   L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38]))
    && limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                 L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];





(* #lea    0xb0(%rsi),%rsi                          #! PC = 0x555555568867 *)
#lea    %%EA,%%rsi                          #! 0x555555568867 = 0x555555568867;
(* #lea    0x30(%rbx),%rbx                          #! PC = 0x55555556886e *)
#lea    %%EA,%%rbx                          #! 0x55555556886e = 0x55555556886e;
(* #lea    0x20(%rsp),%rdi                          #! PC = 0x555555568872 *)
#lea    %%EA,%%rdi                          #! 0x555555568872 = 0x555555568872;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568877 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568877 = 0x555555568877;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffca40; Value = 0x0000fffff1771199; PC = 0x555555568a64 *)
mov rdx L0x7fffffffca40;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc9e0; Value = 0x00017fffe7b6b660; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc9e0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc9e8; Value = 0x000080005f5d9ca5; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc9e8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc9f0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc9f8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x555555568a76 *)
mov r12 L0x7fffffffca00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x555555568a7a *)
mov r13 L0x7fffffffca08;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffc890; PC = 0x555555568a95 *)
mov L0x7fffffffc890 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffca48; Value = 0x000180005758e969; PC = 0x555555568abe *)
mov rdx L0x7fffffffca48;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffc898; PC = 0x555555568adf *)
mov L0x7fffffffc898 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffca50; Value = 0x0000ffffeffccf6b; PC = 0x555555568b3c *)
mov rdx L0x7fffffffca50;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffc8a0; PC = 0x555555568b63 *)
mov L0x7fffffffc8a0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffca58; Value = 0x0000fffff7fb5228; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffca58;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffc8a8; PC = 0x555555568be7 *)
mov L0x7fffffffc8a8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffca60; Value = 0x00017fffefd96ea8; PC = 0x555555568c44 *)
mov rdx L0x7fffffffca60;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffc8b0; PC = 0x555555568c6b *)
mov L0x7fffffffc8b0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffca68; Value = 0x0000fffff7fd84ea; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffca68;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffc8b8; PC = 0x555555568cef *)
mov L0x7fffffffc8b8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf68; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x0000ffffefd83f00; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x00017fffefd972e9; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x000080005f7d46e9; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568d61 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffc8c8; PC = 0x555555568d65 *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568d69 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568d6d *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffc8e0; PC = 0x555555568d71 *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568d75 *)
mov L0x7fffffffc8e8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(tx, aa->im, bb->im) *)

assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                 L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       ((limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                   L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08]) *
        (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                   L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68]))
    && limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
		 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


rcut and [limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;

ghost L0x7fffffffce20o@uint64, L0x7fffffffce28o@uint64, L0x7fffffffce30o@uint64,
      L0x7fffffffce38o@uint64, L0x7fffffffce40o@uint64, L0x7fffffffce48o@uint64,
      L0x7fffffffce50o@uint64, L0x7fffffffce58o@uint64, L0x7fffffffce60o@uint64,
      L0x7fffffffce68o@uint64, L0x7fffffffce70o@uint64, L0x7fffffffce78o@uint64 :
      and [L0x7fffffffce20o=L0x7fffffffce20, L0x7fffffffce28o=L0x7fffffffce28,
           L0x7fffffffce30o=L0x7fffffffce30, L0x7fffffffce38o=L0x7fffffffce38,
           L0x7fffffffce40o=L0x7fffffffce40, L0x7fffffffce48o=L0x7fffffffce48,
           L0x7fffffffce50o=L0x7fffffffce50, L0x7fffffffce58o=L0x7fffffffce58,
           L0x7fffffffce60o=L0x7fffffffce60, L0x7fffffffce68o=L0x7fffffffce68,
           L0x7fffffffce70o=L0x7fffffffce70, L0x7fffffffce78o=L0x7fffffffce78]
   && and [L0x7fffffffce20o=L0x7fffffffce20, L0x7fffffffce28o=L0x7fffffffce28,
           L0x7fffffffce30o=L0x7fffffffce30, L0x7fffffffce38o=L0x7fffffffce38,
           L0x7fffffffce40o=L0x7fffffffce40, L0x7fffffffce48o=L0x7fffffffce48,
           L0x7fffffffce50o=L0x7fffffffce50, L0x7fffffffce58o=L0x7fffffffce58,
           L0x7fffffffce60o=L0x7fffffffce60, L0x7fffffffce68o=L0x7fffffffce68,
           L0x7fffffffce70o=L0x7fffffffce70, L0x7fffffffce78o=L0x7fffffffce78];




(* #lea    0x20(%rsp),%rdx                          #! PC = 0x555555568881 *)
#lea    %%EA,%%rdx                          #! 0x555555568881 = 0x555555568881;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556888e *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556888e = 0x55555556888e;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce20; Value = 0xb007e2dd14bf970e; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffce20;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce28; Value = 0x27ec3fae8b665b9c; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffce28;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce30; Value = 0x3dfcf142ccf5e9f3; PC = 0x5555555682eb *)
mov r10 L0x7fffffffce30;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce38; Value = 0x03c46f2865c83d62; PC = 0x5555555682ef *)
mov r11 L0x7fffffffce38;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce40; Value = 0x070c2a072f94bdfe; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffce40;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce48; Value = 0x0f02ab847db0ecfc; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffce48;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffce50; Value = 0x4e0073c8a04e50c6; PC = 0x5555555682fb *)
mov r14 L0x7fffffffce50;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x52267f93c4ef5f60; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffce58; Value = 0xb3f7646e5b2124a8; PC = 0x555555568302 *)
mov r15 L0x7fffffffce58;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x876b878a82fa92e6; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce60; Value = 0xa15c15b3cbffb45a; PC = 0x55555556830a *)
mov rax L0x7fffffffce60;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0xd1250eb5433bdaa5; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce68; Value = 0x1011889818492132; PC = 0x555555568312 *)
mov rbx L0x7fffffffce68;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x1d545d795ef0ef7d; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce70; Value = 0xd2b69c7ccc4735e0; PC = 0x55555556831a *)
mov rbp L0x7fffffffce70;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x6c43188857e85c30; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce78; Value = 0x0000000200009ef0; PC = 0x555555568322 *)
mov rsi L0x7fffffffce78;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x9b88bf80388417f0; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x55555556832a *)
mov L0x7fffffffce20 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0xbf41265572bc6983; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce28; PC = 0x555555568334 *)
mov L0x7fffffffce28 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0x3a4b275b2615db9c; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555568340 *)
mov L0x7fffffffce30 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0x04c914d1a576ce36; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x55555556834c *)
mov L0x7fffffffce38 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x5674a53f9c77e6bf; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555568358 *)
mov L0x7fffffffce40 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0x066128e704585ff8; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555568364 *)
mov L0x7fffffffce48 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x0000000080005b7c; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffce50; PC = 0x55555556838b *)
mov L0x7fffffffce50 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffce58; PC = 0x555555568392 *)
mov L0x7fffffffce58 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x555555568399 *)
mov L0x7fffffffce60 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x5555555683a0 *)
mov L0x7fffffffce68 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x5555555683a7 *)
mov L0x7fffffffce70 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x5555555683ab *)
mov L0x7fffffffce78 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                         L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                         L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                         L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffce20o, L0x7fffffffce28o, L0x7fffffffce30o,
                        L0x7fffffffce38o, L0x7fffffffce40o, L0x7fffffffce48o,
                        L0x7fffffffce50o, L0x7fffffffce58o, L0x7fffffffce60o,
                        L0x7fffffffce68o, L0x7fffffffce70o, L0x7fffffffce78o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                         L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                         L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                         L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffce20o, L0x7fffffffce28o, L0x7fffffffce30o,
                        L0x7fffffffce38o, L0x7fffffffce40o, L0x7fffffffce48o,
                        L0x7fffffffce50o, L0x7fffffffce58o, L0x7fffffffce60o,
                        L0x7fffffffce68o, L0x7fffffffce70o, L0x7fffffffce78o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

ghost L0x7fffffffce20p@uint64, L0x7fffffffce28p@uint64, L0x7fffffffce30p@uint64,
      L0x7fffffffce38p@uint64, L0x7fffffffce40p@uint64, L0x7fffffffce48p@uint64,
      L0x7fffffffce50p@uint64, L0x7fffffffce58p@uint64, L0x7fffffffce60p@uint64,
      L0x7fffffffce68p@uint64, L0x7fffffffce70p@uint64, L0x7fffffffce78p@uint64 :
      and [L0x7fffffffce20p=L0x7fffffffce20, L0x7fffffffce28p=L0x7fffffffce28,
           L0x7fffffffce30p=L0x7fffffffce30, L0x7fffffffce38p=L0x7fffffffce38,
           L0x7fffffffce40p=L0x7fffffffce40, L0x7fffffffce48p=L0x7fffffffce48,
           L0x7fffffffce50p=L0x7fffffffce50, L0x7fffffffce58p=L0x7fffffffce58,
           L0x7fffffffce60p=L0x7fffffffce60, L0x7fffffffce68p=L0x7fffffffce68,
           L0x7fffffffce70p=L0x7fffffffce70, L0x7fffffffce78p=L0x7fffffffce78]
   && and [L0x7fffffffce20p=L0x7fffffffce20, L0x7fffffffce28p=L0x7fffffffce28,
           L0x7fffffffce30p=L0x7fffffffce30, L0x7fffffffce38p=L0x7fffffffce38,
           L0x7fffffffce40p=L0x7fffffffce40, L0x7fffffffce48p=L0x7fffffffce48,
           L0x7fffffffce50p=L0x7fffffffce50, L0x7fffffffce58p=L0x7fffffffce58,
           L0x7fffffffce60p=L0x7fffffffce60, L0x7fffffffce68p=L0x7fffffffce68,
           L0x7fffffffce70p=L0x7fffffffce70, L0x7fffffffce78p=L0x7fffffffce78];



(* #lea    (%rdi),%rsi                              #! PC = 0x555555568893 *)
#lea    %%EA,%%rsi                              #! 0x555555568893 = 0x555555568893;
(* #lea    -0x60(%rdi),%rdx                         #! PC = 0x555555568896 *)
#lea    -%%EA,%%rdx                         #! 0x555555568896 = 0x555555568896;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556889a *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556889a = 0x55555556889a;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce20; Value = 0x5de163494fd037ae; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffce20;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce28; Value = 0xa080b824086bc8b6; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffce28;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce30; Value = 0x6cd7e28d89ba0f4d; PC = 0x5555555682eb *)
mov r10 L0x7fffffffce30;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce38; Value = 0xe67011af06d74de4; PC = 0x5555555682ef *)
mov r11 L0x7fffffffce38;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce40; Value = 0x9ac9117ed7ac61cd; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffce40;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce48; Value = 0x7379ec04452cd50b; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffce48;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffce50; Value = 0x8ebf4d732d91e742; PC = 0x5555555682fb *)
mov r14 L0x7fffffffce50;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcdc0; Value = 0xd9b1122bc653781b; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffcdc0;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffce58; Value = 0x79ac3d13350b490b; PC = 0x555555568302 *)
mov r15 L0x7fffffffce58;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcdc8; Value = 0xeef64858078f512a; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffcdc8 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce60; Value = 0x9c9300e22688e624; PC = 0x55555556830a *)
mov rax L0x7fffffffce60;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcdd0; Value = 0xd55af7cc588f617e; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffcdd0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce68; Value = 0xb99ce3587bd13a73; PC = 0x555555568312 *)
mov rbx L0x7fffffffce68;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcdd8; Value = 0xe28a3a9644a2c236; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffcdd8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce70; Value = 0xcc557395c7eed5e7; PC = 0x55555556831a *)
mov rbp L0x7fffffffce70;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcde0; Value = 0x7951ee885101ebd4; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffcde0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce78; Value = 0x0000000180004374; PC = 0x555555568322 *)
mov rsi L0x7fffffffce78;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcde8; Value = 0x34bf5188f0eba9d0; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffcde8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x55555556832a *)
mov L0x7fffffffce20 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcdf0; Value = 0x0e1a7753b09531ec; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffcdf0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce28; PC = 0x555555568334 *)
mov L0x7fffffffce28 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcdf8; Value = 0xb546bc6adc6c0e82; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffcdf8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555568340 *)
mov L0x7fffffffce30 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffce00; Value = 0x02108aff2670b593; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffce00 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x55555556834c *)
mov L0x7fffffffce38 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffce08; Value = 0x9c3c9c8aca1a6661; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffce08 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555568358 *)
mov L0x7fffffffce40 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffce10; Value = 0x62fa26feaccd2382; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffce10 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555568364 *)
mov L0x7fffffffce48 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffce18; Value = 0x000000007ffff3fc; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffce18 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffce50; PC = 0x55555556838b *)
mov L0x7fffffffce50 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffce58; PC = 0x555555568392 *)
mov L0x7fffffffce58 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x555555568399 *)
mov L0x7fffffffce60 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x5555555683a0 *)
mov L0x7fffffffce68 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x5555555683a7 *)
mov L0x7fffffffce70 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x5555555683ab *)
mov L0x7fffffffce78 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                         L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                         L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                         L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
              (limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                         L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                         L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                         L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]))
             (limbs 64 [L0x7fffffffce20p, L0x7fffffffce28p, L0x7fffffffce30p,
                        L0x7fffffffce38p, L0x7fffffffce40p, L0x7fffffffce48p,
                        L0x7fffffffce50p, L0x7fffffffce58p, L0x7fffffffce60p,
                        L0x7fffffffce68p, L0x7fffffffce70p, L0x7fffffffce78p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                         L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                         L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                         L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
              (limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                         L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                         L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                         L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]))
             (limbs 64 [L0x7fffffffce20p, L0x7fffffffce28p, L0x7fffffffce30p,
                        L0x7fffffffce38p, L0x7fffffffce40p, L0x7fffffffce48p,
                        L0x7fffffffce50p, L0x7fffffffce58p, L0x7fffffffce60p,
                        L0x7fffffffce68p, L0x7fffffffce70p, L0x7fffffffce78p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
          limbs 64[a00,a01,a02,a03,a04,a05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a10,a11,a12,a13,a14,a15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a20,a21,a22,a23,a24,a25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a30,a31,a32,a33,a34,a35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a40,a41,a42,a43,a44,a45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[a50,a51,a52,a53,a54,a55] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b00,b01,b02,b03,b04,b05] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b10,b11,b12,b13,b14,b15] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b20,b21,b22,b23,b24,b25] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b30,b31,b32,b33,b34,b35] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b40,b41,b42,b43,b44,b45] <u limbs 64[m0,m1,m2,m3,m4,m5],
          limbs 64[b50,b51,b52,b53,b54,b55] <u limbs 64[m0,m1,m2,m3,m4,m5]
     ] prove with all cuts, precondition;

ghost L0x7fffffffcdc0o@uint64, L0x7fffffffcdc8o@uint64, L0x7fffffffcdd0o@uint64,
      L0x7fffffffcdd8o@uint64, L0x7fffffffcde0o@uint64, L0x7fffffffcde8o@uint64,
      L0x7fffffffcdf0o@uint64, L0x7fffffffcdf8o@uint64, L0x7fffffffce00o@uint64,
      L0x7fffffffce08o@uint64, L0x7fffffffce10o@uint64, L0x7fffffffce18o@uint64 :
      and [L0x7fffffffcdc0o=L0x7fffffffcdc0, L0x7fffffffcdc8o=L0x7fffffffcdc8,
           L0x7fffffffcdd0o=L0x7fffffffcdd0, L0x7fffffffcdd8o=L0x7fffffffcdd8,
           L0x7fffffffcde0o=L0x7fffffffcde0, L0x7fffffffcde8o=L0x7fffffffcde8,
           L0x7fffffffcdf0o=L0x7fffffffcdf0, L0x7fffffffcdf8o=L0x7fffffffcdf8,
           L0x7fffffffce00o=L0x7fffffffce00, L0x7fffffffce08o=L0x7fffffffce08,
           L0x7fffffffce10o=L0x7fffffffce10, L0x7fffffffce18o=L0x7fffffffce18]
   && and [L0x7fffffffcdc0o=L0x7fffffffcdc0, L0x7fffffffcdc8o=L0x7fffffffcdc8,
           L0x7fffffffcdd0o=L0x7fffffffcdd0, L0x7fffffffcdd8o=L0x7fffffffcdd8,
           L0x7fffffffcde0o=L0x7fffffffcde0, L0x7fffffffcde8o=L0x7fffffffcde8,
           L0x7fffffffcdf0o=L0x7fffffffcdf0, L0x7fffffffcdf8o=L0x7fffffffcdf8,
           L0x7fffffffce00o=L0x7fffffffce00, L0x7fffffffce08o=L0x7fffffffce08,
           L0x7fffffffce10o=L0x7fffffffce10, L0x7fffffffce18o=L0x7fffffffce18];


(* #lea    -0x60(%rdi),%rsi                         #! PC = 0x55555556889f *)
#lea    -%%EA,%%rsi                         #! 0x55555556889f = 0x55555556889f;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x5555555688a3 *)
#lea    %%EA,%%rdx                          #! 0x5555555688a3 = 0x5555555688a3;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x5555555688a8 *)
#lea    -%%EA,%%rdi                         #! 0x5555555688a8 = 0x5555555688a8;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x5555555688ac *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x5555555688ac = 0x5555555688ac;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcdc0; Value = 0xd9b1122bc653781b; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcdc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcdc8; Value = 0xeef64858078f512a; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcdc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcdd0; Value = 0xd55af7cc588f617e; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcdd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcdd8; Value = 0xe28a3a9644a2c236; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcdd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcde0; Value = 0x7951ee885101ebd4; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcde0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcde8; Value = 0x34bf5188f0eba9d0; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcde8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcdf0; Value = 0x0e1a7753b09531ec; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcdf0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x52267f93c4ef5f60; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcdf8; Value = 0xb546bc6adc6c0e82; PC = 0x555555568302 *)
mov r15 L0x7fffffffcdf8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x876b878a82fa92e6; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce00; Value = 0x02108aff2670b593; PC = 0x55555556830a *)
mov rax L0x7fffffffce00;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0xd1250eb5433bdaa5; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce08; Value = 0x9c3c9c8aca1a6661; PC = 0x555555568312 *)
mov rbx L0x7fffffffce08;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x1d545d795ef0ef7d; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce10; Value = 0x62fa26feaccd2382; PC = 0x55555556831a *)
mov rbp L0x7fffffffce10;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x6c43188857e85c30; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce18; Value = 0x000000007ffff3fc; PC = 0x555555568322 *)
mov rsi L0x7fffffffce18;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x9b88bf80388417f0; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcdc0; PC = 0x55555556832a *)
mov L0x7fffffffcdc0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0xbf41265572bc6983; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcdc8; PC = 0x555555568334 *)
mov L0x7fffffffcdc8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0x3a4b275b2615db9c; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcdd0; PC = 0x555555568340 *)
mov L0x7fffffffcdd0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0x04c914d1a576ce36; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcdd8; PC = 0x55555556834c *)
mov L0x7fffffffcdd8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x5674a53f9c77e6bf; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcde0; PC = 0x555555568358 *)
mov L0x7fffffffcde0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0x066128e704585ff8; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcde8; PC = 0x555555568364 *)
mov L0x7fffffffcde8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x0000000080005b7c; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcdf0; PC = 0x55555556838b *)
mov L0x7fffffffcdf0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcdf8; PC = 0x555555568392 *)
mov L0x7fffffffcdf8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce00; PC = 0x555555568399 *)
mov L0x7fffffffce00 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce08; PC = 0x5555555683a0 *)
mov L0x7fffffffce08 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce10; PC = 0x5555555683a7 *)
mov L0x7fffffffce10 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce18; PC = 0x5555555683ab *)
mov L0x7fffffffce18 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                         L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                         L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                         L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcdc0o, L0x7fffffffcdc8o, L0x7fffffffcdd0o,
                        L0x7fffffffcdd8o, L0x7fffffffcde0o, L0x7fffffffcde8o,
                        L0x7fffffffcdf0o, L0x7fffffffcdf8o, L0x7fffffffce00o,
                        L0x7fffffffce08o, L0x7fffffffce10o, L0x7fffffffce18o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                         L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                         L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                         L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcdc0o, L0x7fffffffcdc8o, L0x7fffffffcdd0o,
                        L0x7fffffffcdd8o, L0x7fffffffcde0o, L0x7fffffffcde8o,
                        L0x7fffffffcdf0o, L0x7fffffffcdf8o, L0x7fffffffce00o,
                        L0x7fffffffce08o, L0x7fffffffce10o, L0x7fffffffce18o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;



(* mul_382x(ret[1], aa, bb) *)

assert and [eqmod (limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                             L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                             L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                             L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] +
                   limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                             L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                             L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                             L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] * U)
                  ((limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                              L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
                    limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                              L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U) *
                   (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                              L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] + 
                    limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                              L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                   U * U + 1],
            eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                             L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
                   limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                             L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U)
                  (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                   limbs 64 [a20, a21, a22, a23, a24, a25] +
                   limbs 64 [a30, a31, a32, a33, a34, a35] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                             L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
                   limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                             L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U)
                  (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                   limbs 64 [b20, b21, b22, b23, b24, b25] +
                   limbs 64 [b30, b31, b32, b33, b34, b35] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
       ]
    && true;


rcut and [limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                    L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;


ghost L0x7fffffffcdc0q@uint64, L0x7fffffffcdc8q@uint64, L0x7fffffffcdd0q@uint64,
      L0x7fffffffcdd8q@uint64, L0x7fffffffcde0q@uint64, L0x7fffffffcde8q@uint64,
      L0x7fffffffcdf0q@uint64, L0x7fffffffcdf8q@uint64, L0x7fffffffce00q@uint64,
      L0x7fffffffce08q@uint64, L0x7fffffffce10q@uint64, L0x7fffffffce18q@uint64,
      L0x7fffffffce20q@uint64, L0x7fffffffce28q@uint64, L0x7fffffffce30q@uint64,
      L0x7fffffffce38q@uint64, L0x7fffffffce40q@uint64, L0x7fffffffce48q@uint64,
      L0x7fffffffce50q@uint64, L0x7fffffffce58q@uint64, L0x7fffffffce60q@uint64,
      L0x7fffffffce68q@uint64, L0x7fffffffce70q@uint64, L0x7fffffffce78q@uint64 :
      and [L0x7fffffffcdc0q=L0x7fffffffcdc0, L0x7fffffffcdc8q=L0x7fffffffcdc8,
           L0x7fffffffcdd0q=L0x7fffffffcdd0, L0x7fffffffcdd8q=L0x7fffffffcdd8,
           L0x7fffffffcde0q=L0x7fffffffcde0, L0x7fffffffcde8q=L0x7fffffffcde8,
           L0x7fffffffcdf0q=L0x7fffffffcdf0, L0x7fffffffcdf8q=L0x7fffffffcdf8,
           L0x7fffffffce00q=L0x7fffffffce00, L0x7fffffffce08q=L0x7fffffffce08,
           L0x7fffffffce10q=L0x7fffffffce10, L0x7fffffffce18q=L0x7fffffffce18,
           L0x7fffffffce20q=L0x7fffffffce20, L0x7fffffffce28q=L0x7fffffffce28,
           L0x7fffffffce30q=L0x7fffffffce30, L0x7fffffffce38q=L0x7fffffffce38,
           L0x7fffffffce40q=L0x7fffffffce40, L0x7fffffffce48q=L0x7fffffffce48,
           L0x7fffffffce50q=L0x7fffffffce50, L0x7fffffffce58q=L0x7fffffffce58,
           L0x7fffffffce60q=L0x7fffffffce60, L0x7fffffffce68q=L0x7fffffffce68,
           L0x7fffffffce70q=L0x7fffffffce70, L0x7fffffffce78q=L0x7fffffffce78]
   && and [L0x7fffffffcdc0q=L0x7fffffffcdc0, L0x7fffffffcdc8q=L0x7fffffffcdc8,
           L0x7fffffffcdd0q=L0x7fffffffcdd0, L0x7fffffffcdd8q=L0x7fffffffcdd8,
           L0x7fffffffcde0q=L0x7fffffffcde0, L0x7fffffffcde8q=L0x7fffffffcde8,
           L0x7fffffffcdf0q=L0x7fffffffcdf0, L0x7fffffffcdf8q=L0x7fffffffcdf8,
           L0x7fffffffce00q=L0x7fffffffce00, L0x7fffffffce08q=L0x7fffffffce08,
           L0x7fffffffce10q=L0x7fffffffce10, L0x7fffffffce18q=L0x7fffffffce18,
           L0x7fffffffce20q=L0x7fffffffce20, L0x7fffffffce28q=L0x7fffffffce28,
           L0x7fffffffce30q=L0x7fffffffce30, L0x7fffffffce38q=L0x7fffffffce38,
           L0x7fffffffce40q=L0x7fffffffce40, L0x7fffffffce48q=L0x7fffffffce48,
           L0x7fffffffce50q=L0x7fffffffce50, L0x7fffffffce58q=L0x7fffffffce58,
           L0x7fffffffce60q=L0x7fffffffce60, L0x7fffffffce68q=L0x7fffffffce68,
           L0x7fffffffce70q=L0x7fffffffce70, L0x7fffffffce78q=L0x7fffffffce78];




(* #lea    0x88(%rsp),%r8                           #! PC = 0x5555555688b1 *)
#lea    %%EA,%%r8                           #! 0x5555555688b1 = 0x5555555688b1;
(* #lea    0x30(%r8),%rsp                           #! PC = 0x5555555688d0 *)
#lea    %%EA,%rsp                           #! 0x5555555688d0 = 0x5555555688d0;
(* #! <- SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #repz retq                                      #! PC = 0x5555555688d4 *)
#repz retq                                      #! 0x5555555688d4 = 0x5555555688d4;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #retq                                           #! PC = 0x55555555d7c8 *)
#retq                                           #! 0x55555555d7c8 = 0x55555555d7c8;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f7ee *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f7ee = 0x55555555f7ee;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcdc0; Value = 0x878a9298016418bb; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcdc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcdc8; Value = 0x678ac0cd8494be44; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcdc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcdd0; Value = 0x0435e917155386d9; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcdd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcdd8; Value = 0xc535dd1ce5b1d2b9; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcdd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcde0; Value = 0x0d0ed5fff9198fa4; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcde0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcde8; Value = 0x99369208b86791e0; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcde8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcdf0; Value = 0x08d850fe3dd87313; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcdf0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffca70; Value = 0xd465bc6c3a225850; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffca70;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcdf8; Value = 0x99a7950e67aa32e5; PC = 0x555555567602 *)
mov r15 L0x7fffffffcdf8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffca78; Value = 0x7677a15c722c1b1a; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffca78 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce00; Value = 0x647848ce77aadd81; PC = 0x55555556760a *)
mov rax L0x7fffffffce00;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffca80; Value = 0x85ce2f1bfa4b484a; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffca80 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce08; Value = 0xaa3f42d021279261; PC = 0x555555567612 *)
mov rbx L0x7fffffffce08;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffca88; Value = 0xd0a5999000ab6121; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffca88 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce10; Value = 0xa7b4a5cdebc07061; PC = 0x55555556761a *)
mov rbp L0x7fffffffce10;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffca90; Value = 0x6680073b4b768614; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffca90 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce18; Value = 0x1a0111ea397f7f1a; PC = 0x555555567622 *)
mov rsi L0x7fffffffce18;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffca98; Value = 0x341b93a3d8a01fb6; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffca98 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcdc0; PC = 0x55555556762a *)
mov L0x7fffffffcdc0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcaa0; Value = 0xa89b10a97b35714b; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcaa0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcdc8; PC = 0x555555567634 *)
mov L0x7fffffffcdc8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcaa8; Value = 0xc6afac09dce2ecc2; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcaa8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcdd0; PC = 0x555555567640 *)
mov L0x7fffffffcdd0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcab0; Value = 0x1695212a6354549c; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcab0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcdd8; PC = 0x55555556764c *)
mov L0x7fffffffcdd8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcab8; Value = 0xb4dd81f77f8668c0; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcab8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcde0; PC = 0x555555567658 *)
mov L0x7fffffffcde0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcac0; Value = 0x4504a7d60ddd9fa4; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcac0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcde8; PC = 0x555555567664 *)
mov L0x7fffffffcde8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcac8; Value = 0x1a0111ea397fe69a; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcac8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcdf0; PC = 0x55555556768b *)
mov L0x7fffffffcdf0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcdf8; PC = 0x555555567692 *)
mov L0x7fffffffcdf8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce00; PC = 0x555555567699 *)
mov L0x7fffffffce00 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce08; PC = 0x5555555676a0 *)
mov L0x7fffffffce08 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce10; PC = 0x5555555676a7 *)
mov L0x7fffffffce10 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce18; PC = 0x5555555676ab *)
mov L0x7fffffffce18 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f801 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f801 = 0x55555555f801;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce20; Value = 0x8430511d897cbf93; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffce20;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce28; Value = 0xb18a6fcc00dc778b; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffce28;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce30; Value = 0x977ceac1312aadce; PC = 0x5555555675eb *)
mov r10 L0x7fffffffce30;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce38; Value = 0x03e5d718c2348bad; PC = 0x5555555675ef *)
mov r11 L0x7fffffffce38;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce40; Value = 0x217722f686aa75f9; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffce40;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce48; Value = 0x3eba9a7b54412b3b; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffce48;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffce50; Value = 0x80a4d61f7cfcb556; PC = 0x5555555675fb *)
mov r14 L0x7fffffffce50;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcad0; Value = 0xfe4ee126b5827eb0; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcad0;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffce58; Value = 0xc46580a8589f3a89; PC = 0x555555567602 *)
mov r15 L0x7fffffffce58;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcad8; Value = 0x61d13a9247083c0a; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcad8 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce60; Value = 0x9a8275e300183090; PC = 0x55555556760a *)
mov rax L0x7fffffffce60;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcae0; Value = 0x328aa9ffac86ffff; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcae0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce68; Value = 0x1d6046cdb1b6d412; PC = 0x555555567612 *)
mov rbx L0x7fffffffce68;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcae8; Value = 0xc331ab7e800252c9; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcae8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce70; Value = 0x695b4c971b21b265; PC = 0x55555556761a *)
mov rbp L0x7fffffffce70;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcaf0; Value = 0xec98aace8f245eff; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcaf0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce78; Value = 0x0000000100004f78; PC = 0x555555567622 *)
mov rsi L0x7fffffffce78;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcaf8; Value = 0x4026540007352be9; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcaf8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x55555556762a *)
mov L0x7fffffffce20 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb00; Value = 0x8e43eadb2d666662; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcb00 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce28; PC = 0x555555567634 *)
mov L0x7fffffffce28 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb08; Value = 0x65aa9e65514286e0; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcb08 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555567640 *)
mov L0x7fffffffce30 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb10; Value = 0xdf01b83d2dc48d80; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcb10 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x55555556764c *)
mov L0x7fffffffce38 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb18; Value = 0xa5329109a10a0689; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcb18 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555567658 *)
mov L0x7fffffffce40 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb20; Value = 0x82d3025c702bb221; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcb20 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555567664 *)
mov L0x7fffffffce48 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb28; Value = 0x000000007ffff7fd; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcb28 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffce50; PC = 0x55555556768b *)
mov L0x7fffffffce50 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffce58; PC = 0x555555567692 *)
mov L0x7fffffffce58 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x555555567699 *)
mov L0x7fffffffce60 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x5555555676a0 *)
mov L0x7fffffffce68 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x5555555676a7 *)
mov L0x7fffffffce70 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x5555555676ab *)
mov L0x7fffffffce78 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;


(* sub_fp2x2(ret[1], ret[1], t0 *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                              L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                              L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                              L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
	 	   (limbs 64 [L0x7fffffffcdc0q, L0x7fffffffcdc8q, L0x7fffffffcdd0q,
                              L0x7fffffffcdd8q, L0x7fffffffcde0q, L0x7fffffffcde8q,
                              L0x7fffffffcdf0q, L0x7fffffffcdf8q, L0x7fffffffce00q,
                              L0x7fffffffce08q, L0x7fffffffce10q, L0x7fffffffce18q])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
		   (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                              L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                              L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                              L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]))
	           (limbs 64 [L0x7fffffffce20q, L0x7fffffffce28q, L0x7fffffffce30q,
                              L0x7fffffffce38q, L0x7fffffffce40q, L0x7fffffffce48q,
                              L0x7fffffffce50q, L0x7fffffffce58q, L0x7fffffffce60q,
                              L0x7fffffffce68q, L0x7fffffffce70q, L0x7fffffffce78q])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];
		   
assume and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                              L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                              L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                              L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
	 	   (limbs 64 [L0x7fffffffcdc0q, L0x7fffffffcdc8q, L0x7fffffffcdd0q,
                              L0x7fffffffcdd8q, L0x7fffffffcde0q, L0x7fffffffcde8q,
                              L0x7fffffffcdf0q, L0x7fffffffcdf8q, L0x7fffffffce00q,
                              L0x7fffffffce08q, L0x7fffffffce10q, L0x7fffffffce18q])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
		   (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                              L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                              L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                              L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]))
	           (limbs 64 [L0x7fffffffce20q, L0x7fffffffce28q, L0x7fffffffce30q,
                              L0x7fffffffce38q, L0x7fffffffce40q, L0x7fffffffce48q,
                              L0x7fffffffce50q, L0x7fffffffce58q, L0x7fffffffce60q,
                              L0x7fffffffce68q, L0x7fffffffce70q, L0x7fffffffce78q])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                    L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;

ghost L0x7fffffffcdc0r@uint64, L0x7fffffffcdc8r@uint64, L0x7fffffffcdd0r@uint64,
      L0x7fffffffcdd8r@uint64, L0x7fffffffcde0r@uint64, L0x7fffffffcde8r@uint64,
      L0x7fffffffcdf0r@uint64, L0x7fffffffcdf8r@uint64, L0x7fffffffce00r@uint64,
      L0x7fffffffce08r@uint64, L0x7fffffffce10r@uint64, L0x7fffffffce18r@uint64,
      L0x7fffffffce20r@uint64, L0x7fffffffce28r@uint64, L0x7fffffffce30r@uint64,
      L0x7fffffffce38r@uint64, L0x7fffffffce40r@uint64, L0x7fffffffce48r@uint64,
      L0x7fffffffce50r@uint64, L0x7fffffffce58r@uint64, L0x7fffffffce60r@uint64,
      L0x7fffffffce68r@uint64, L0x7fffffffce70r@uint64, L0x7fffffffce78r@uint64 :
      and [L0x7fffffffcdc0r=L0x7fffffffcdc0, L0x7fffffffcdc8r=L0x7fffffffcdc8,
           L0x7fffffffcdd0r=L0x7fffffffcdd0, L0x7fffffffcdd8r=L0x7fffffffcdd8,
           L0x7fffffffcde0r=L0x7fffffffcde0, L0x7fffffffcde8r=L0x7fffffffcde8,
           L0x7fffffffcdf0r=L0x7fffffffcdf0, L0x7fffffffcdf8r=L0x7fffffffcdf8,
           L0x7fffffffce00r=L0x7fffffffce00, L0x7fffffffce08r=L0x7fffffffce08,
           L0x7fffffffce10r=L0x7fffffffce10, L0x7fffffffce18r=L0x7fffffffce18,
           L0x7fffffffce20r=L0x7fffffffce20, L0x7fffffffce28r=L0x7fffffffce28,
           L0x7fffffffce30r=L0x7fffffffce30, L0x7fffffffce38r=L0x7fffffffce38,
           L0x7fffffffce40r=L0x7fffffffce40, L0x7fffffffce48r=L0x7fffffffce48,
           L0x7fffffffce50r=L0x7fffffffce50, L0x7fffffffce58r=L0x7fffffffce58,
           L0x7fffffffce60r=L0x7fffffffce60, L0x7fffffffce68r=L0x7fffffffce68,
           L0x7fffffffce70r=L0x7fffffffce70, L0x7fffffffce78r=L0x7fffffffce78]
   && and [L0x7fffffffcdc0r=L0x7fffffffcdc0, L0x7fffffffcdc8r=L0x7fffffffcdc8,
           L0x7fffffffcdd0r=L0x7fffffffcdd0, L0x7fffffffcdd8r=L0x7fffffffcdd8,
           L0x7fffffffcde0r=L0x7fffffffcde0, L0x7fffffffcde8r=L0x7fffffffcde8,
           L0x7fffffffcdf0r=L0x7fffffffcdf0, L0x7fffffffcdf8r=L0x7fffffffcdf8,
           L0x7fffffffce00r=L0x7fffffffce00, L0x7fffffffce08r=L0x7fffffffce08,
           L0x7fffffffce10r=L0x7fffffffce10, L0x7fffffffce18r=L0x7fffffffce18,
           L0x7fffffffce20r=L0x7fffffffce20, L0x7fffffffce28r=L0x7fffffffce28,
           L0x7fffffffce30r=L0x7fffffffce30, L0x7fffffffce38r=L0x7fffffffce38,
           L0x7fffffffce40r=L0x7fffffffce40, L0x7fffffffce48r=L0x7fffffffce48,
           L0x7fffffffce50r=L0x7fffffffce50, L0x7fffffffce58r=L0x7fffffffce58,
           L0x7fffffffce60r=L0x7fffffffce60, L0x7fffffffce68r=L0x7fffffffce68,
           L0x7fffffffce70r=L0x7fffffffce70, L0x7fffffffce78r=L0x7fffffffce78];




(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f814 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f814 = 0x55555555f814;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcdc0; Value = 0xb324d62bc741c06b; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcdc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcdc8; Value = 0xf1131f711268a329; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcdc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcdd0; Value = 0x7e67b9fb1b083e8e; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcdd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcdd8; Value = 0xf490438ce5067197; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcdd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcde0; Value = 0xa68ecec4ada3098f; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcde0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcde8; Value = 0x651afe64dfc77229; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcde8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcdf0; Value = 0x1a3c4054c2a2ac73; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcdf0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcb30; Value = 0x50b04a5826191df8; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcb30;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcdf8; Value = 0xf1a3e9033c1b4622; PC = 0x555555567602 *)
mov r15 L0x7fffffffcdf8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb38; Value = 0xf4e77567c8c524c3; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcb38 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce00; Value = 0xb513fa450b077f08; PC = 0x55555556760a *)
mov rax L0x7fffffffce00;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcb40; Value = 0x589afa0eae8ebc2e; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcb40 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce08; Value = 0x59d90c5d95263c60; PC = 0x555555567612 *)
mov rbx L0x7fffffffce08;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcb48; Value = 0x2f2d8a98109a5dd0; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcb48 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce10; Value = 0xadcba5ae212e7d94; PC = 0x55555556761a *)
mov rbp L0x7fffffffce10;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcb50; Value = 0xb639ccfa60d7de8f; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcb50 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce18; Value = 0x1a0111ea397f7f1a; PC = 0x555555567622 *)
mov rsi L0x7fffffffce18;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcb58; Value = 0xa81c4661bc689d5b; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcb58 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcdc0; PC = 0x55555556762a *)
mov L0x7fffffffcdc0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb60; Value = 0x1c8c490add44d80e; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcb60 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcdc8; PC = 0x555555567634 *)
mov L0x7fffffffcdc8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb68; Value = 0xf098f8ec27e6c90c; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcb68 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcdd0; PC = 0x555555567640 *)
mov L0x7fffffffcdd0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb70; Value = 0x554944990485b977; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcb70 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcdd8; PC = 0x55555556764c *)
mov L0x7fffffffcdd8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb78; Value = 0x072c6a8e0fe1a262; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcb78 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcde0; PC = 0x555555567658 *)
mov L0x7fffffffcde0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb80; Value = 0x812916e48250ede3; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcb80 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcde8; PC = 0x555555567664 *)
mov L0x7fffffffcde8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb88; Value = 0x1a0111ea397fb2da; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcb88 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcdf0; PC = 0x55555556768b *)
mov L0x7fffffffcdf0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcdf8; PC = 0x555555567692 *)
mov L0x7fffffffcdf8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce00; PC = 0x555555567699 *)
mov L0x7fffffffce00 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce08; PC = 0x5555555676a0 *)
mov L0x7fffffffce08 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce10; PC = 0x5555555676a7 *)
mov L0x7fffffffce10 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce18; PC = 0x5555555676ab *)
mov L0x7fffffffce18 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f827 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f827 = 0x55555555f827;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce20; Value = 0x85e16ff6d3fa40e3; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffce20;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce28; Value = 0x4fb93539b9d43b80; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffce28;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce30; Value = 0x64f240c184a3adcf; PC = 0x5555555675eb *)
mov r10 L0x7fffffffce30;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce38; Value = 0x40b42b9a423238e4; PC = 0x5555555675ef *)
mov r11 L0x7fffffffce38;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce40; Value = 0x34de7827f78616f9; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffce40;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce48; Value = 0xfe94467b4d0bff51; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffce48;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffce50; Value = 0xf260eb444f964ef3; PC = 0x5555555675fb *)
mov r14 L0x7fffffffce50;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcb90; Value = 0x6462b9c7af536380; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcb90;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffce58; Value = 0x5ebae243075cb3a8; PC = 0x555555567602 *)
mov r15 L0x7fffffffce58;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb98; Value = 0x53ccac1900c6f361; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcb98 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce60; Value = 0xbb80bda5d253a310; PC = 0x55555556760a *)
mov rax L0x7fffffffce60;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcba0; Value = 0xa27b8148bec196fc; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcba0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce68; Value = 0x782db5c410accd88; PC = 0x555555567612 *)
mov rbx L0x7fffffffce68;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcba8; Value = 0xb4a998471dec8ae1; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcba8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce70; Value = 0xe6884a3aaaf60043; PC = 0x55555556761a *)
mov rbp L0x7fffffffce70;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcbb0; Value = 0xdc0e1b0368e6e51e; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcbb0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce78; Value = 0x000000008000577a; PC = 0x555555567622 *)
mov rsi L0x7fffffffce78;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcbb8; Value = 0xfc3b1a06d6e16c74; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcbb8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x55555556762a *)
mov L0x7fffffffce20 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcbc0; Value = 0xbf4d68814f0569e2; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcbc0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce28; PC = 0x555555567634 *)
mov L0x7fffffffce28 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcbc8; Value = 0x72b339d34847e375; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcbc8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555567640 *)
mov L0x7fffffffce30 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcbd0; Value = 0x32aa2f92438902b8; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcbd0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x55555556764c *)
mov L0x7fffffffce38 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcbd8; Value = 0x0f65ac5a3828339e; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcbd8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555567658 *)
mov L0x7fffffffce40 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcbe0; Value = 0xc9f28f21a9a34a20; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcbe0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555567664 *)
mov L0x7fffffffce48 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcbe8; Value = 0x00000000000033bf; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcbe8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffce50; PC = 0x55555556768b *)
mov L0x7fffffffce50 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffce58; PC = 0x555555567692 *)
mov L0x7fffffffce58 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x555555567699 *)
mov L0x7fffffffce60 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x5555555676a0 *)
mov L0x7fffffffce68 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x5555555676a7 *)
mov L0x7fffffffce70 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x5555555676ab *)
mov L0x7fffffffce78 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;


(* sub_fp2x2(ret[1], ret[1], t1 *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                              L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                              L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                              L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
	 	   (limbs 64 [L0x7fffffffcdc0r, L0x7fffffffcdc8r, L0x7fffffffcdd0r,
                              L0x7fffffffcdd8r, L0x7fffffffcde0r, L0x7fffffffcde8r,
                              L0x7fffffffcdf0r, L0x7fffffffcdf8r, L0x7fffffffce00r,
                              L0x7fffffffce08r, L0x7fffffffce10r, L0x7fffffffce18r])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
		   (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                              L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                              L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                              L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]))
	           (limbs 64 [L0x7fffffffce20r, L0x7fffffffce28r, L0x7fffffffce30r,
                              L0x7fffffffce38r, L0x7fffffffce40r, L0x7fffffffce48r,
                              L0x7fffffffce50r, L0x7fffffffce58r, L0x7fffffffce60r,
                              L0x7fffffffce68r, L0x7fffffffce70r, L0x7fffffffce78r])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];
		   
assume and [eqmod ((limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18]) +
		   (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                              L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                              L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                              L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
	 	   (limbs 64 [L0x7fffffffcdc0r, L0x7fffffffcdc8r, L0x7fffffffcdd0r,
                              L0x7fffffffcdd8r, L0x7fffffffcde0r, L0x7fffffffcde8r,
                              L0x7fffffffcdf0r, L0x7fffffffcdf8r, L0x7fffffffce00r,
                              L0x7fffffffce08r, L0x7fffffffce10r, L0x7fffffffce18r])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78]) +
		   (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                              L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                              L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                              L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]))
	           (limbs 64 [L0x7fffffffce20r, L0x7fffffffce28r, L0x7fffffffce30r,
                              L0x7fffffffce38r, L0x7fffffffce40r, L0x7fffffffce48r,
                              L0x7fffffffce50r, L0x7fffffffce58r, L0x7fffffffce60r,
                              L0x7fffffffce68r, L0x7fffffffce70r, L0x7fffffffce78r])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;
		   

rcut and [limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                    L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
	  limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;



(* #lea    0x180(%rbp),%r14                         #! PC = 0x55555555f82c *)
#lea    0x180(%%rbp),%%r14                         #! 0x55555555f82c = 0x55555555f82c;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f843 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f843 = 0x55555555f843;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcbf0; Value = 0x000000013b58c9fb; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcbf0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcbf8; Value = 0x731fa0a13ec97a9c; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcbf8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcc00; Value = 0xbc9009f40281ea12; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcc00;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcc08; Value = 0xa368010299f5bdf5; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcc08;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcc10; Value = 0x7796c22defa0bb30; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcc10;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcc18; Value = 0x91247049dd688209; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcc18;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcc20; Value = 0xfee1111b8a25234b; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcc20;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcc50; Value = 0xff27587ad6418eb0; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcc50;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcc28; Value = 0xe2ce02807f3744cd; PC = 0x555555567602 *)
mov r15 L0x7fffffffcc28;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcc58; Value = 0xbdcb81422f6412ee; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcc58 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcc30; Value = 0x3e96014420fa5cfb; PC = 0x55555556760a *)
mov rax L0x7fffffffcc30;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc60; Value = 0x8c6937d9d7595437; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcc60 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcc38; Value = 0xd8020000863f397e; PC = 0x555555567612 *)
mov rbx L0x7fffffffcc38;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc68; Value = 0x2fc92141ab212104; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcc68 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcc40; Value = 0x000000003fffffff; PC = 0x55555556761a *)
mov rbp L0x7fffffffcc40;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc70; Value = 0x409c3957ef365202; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcc70 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcc48; Value = 0x0000000000000000; PC = 0x555555567622 *)
mov rsi L0x7fffffffcc48;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc78; Value = 0xcd8563811cc5bbbb; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcc78 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce80; PC = 0x55555556762a *)
mov L0x7fffffffce80 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc80; Value = 0x1c0cf0f18fc83832; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcc80 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce88; PC = 0x555555567634 *)
mov L0x7fffffffce88 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc88; Value = 0x46bdb3d219b7d81e; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcc88 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce90; PC = 0x555555567640 *)
mov L0x7fffffffce90 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc90; Value = 0x13e421d37629f5fb; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcc90 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce98; PC = 0x55555556764c *)
mov L0x7fffffffce98 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc98; Value = 0x3302c9ad74e5c28b; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcc98 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcea0; PC = 0x555555567658 *)
mov L0x7fffffffcea0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcca0; Value = 0xcd2f6ffb1fbb3b5e; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcca0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcea8; PC = 0x555555567664 *)
mov L0x7fffffffcea8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcca8; Value = 0x00000000000033bf; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcca8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffceb0; PC = 0x55555556768b *)
mov L0x7fffffffceb0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffceb8; PC = 0x555555567692 *)
mov L0x7fffffffceb8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcec0; PC = 0x555555567699 *)
mov L0x7fffffffcec0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcec8; PC = 0x5555555676a0 *)
mov L0x7fffffffcec8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffced0; PC = 0x5555555676a7 *)
mov L0x7fffffffced0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffced8; PC = 0x5555555676ab *)
mov L0x7fffffffced8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f85f *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f85f = 0x55555555f85f;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcbf0; Value = 0x000000013b58c9fb; PC = 0x555555567504 *)
mov r8 L0x7fffffffcbf0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcbf8; Value = 0x731fa0a13ec97a9c; PC = 0x555555567507 *)
mov r9 L0x7fffffffcbf8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcc00; Value = 0xbc9009f40281ea12; PC = 0x55555556750b *)
mov r10 L0x7fffffffcc00;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcc08; Value = 0xa368010299f5bdf5; PC = 0x55555556750f *)
mov r11 L0x7fffffffcc08;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcc10; Value = 0x7796c22defa0bb30; PC = 0x555555567513 *)
mov r12 L0x7fffffffcc10;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcc18; Value = 0x91247049dd688209; PC = 0x555555567517 *)
mov r13 L0x7fffffffcc18;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcc20; Value = 0xfee1111b8a25234b; PC = 0x55555556751b *)
mov r14 L0x7fffffffcc20;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcc50; Value = 0xff27587ad6418eb0; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffcc50 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcc28; Value = 0xe2ce02807f3744cd; PC = 0x555555567522 *)
mov r15 L0x7fffffffcc28;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcc58; Value = 0xbdcb81422f6412ee; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffcc58 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcc30; Value = 0x3e96014420fa5cfb; PC = 0x55555556752a *)
mov rax L0x7fffffffcc30;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc60; Value = 0x8c6937d9d7595437; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffcc60 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcc38; Value = 0xd8020000863f397e; PC = 0x555555567532 *)
mov rbx L0x7fffffffcc38;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc68; Value = 0x2fc92141ab212104; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffcc68 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcc40; Value = 0x000000003fffffff; PC = 0x55555556753a *)
mov rbp L0x7fffffffcc40;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc70; Value = 0x409c3957ef365202; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcc70 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcc48; Value = 0x0000000000000000; PC = 0x555555567542 *)
mov rsi L0x7fffffffcc48;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc78; Value = 0xcd8563811cc5bbbb; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcc78 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x55555556754a *)
mov L0x7fffffffcee0 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc80; Value = 0x1c0cf0f18fc83832; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcc80 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcee8; PC = 0x555555567551 *)
mov L0x7fffffffcee8 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc88; Value = 0x46bdb3d219b7d81e; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcc88 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555567559 *)
mov L0x7fffffffcef0 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc90; Value = 0x13e421d37629f5fb; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcc90 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555567561 *)
mov L0x7fffffffcf00 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc98; Value = 0x3302c9ad74e5c28b; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcc98 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x55555556756c *)
mov L0x7fffffffcef8 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcca0; Value = 0xcd2f6ffb1fbb3b5e; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcca0 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555567577 *)
mov L0x7fffffffcf08 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcca8; Value = 0x00000000000033bf; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcca8 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcf10; PC = 0x5555555675b5 *)
mov L0x7fffffffcf10 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcf18; PC = 0x5555555675bd *)
mov L0x7fffffffcf18 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x5555555675c5 *)
mov L0x7fffffffcf20 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x5555555675cd *)
mov L0x7fffffffcf28 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x5555555675d1 *)
mov L0x7fffffffcf30 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x5555555675d5 *)
mov L0x7fffffffcf38 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;


(* mul_by_u_plus_1_fp2x2(ret[2], t2) *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
		   (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	 	   (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod  (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38])
		  ((limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]) +
	           (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
		   (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	 	   (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod  (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38])
		  ((limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]) +
	           (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	       	   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;

ghost L0x7fffffffcdc0s@uint64, L0x7fffffffcdc8s@uint64, L0x7fffffffcdd0s@uint64,
      L0x7fffffffcdd8s@uint64, L0x7fffffffcde0s@uint64, L0x7fffffffcde8s@uint64,
      L0x7fffffffcdf0s@uint64, L0x7fffffffcdf8s@uint64, L0x7fffffffce00s@uint64,
      L0x7fffffffce08s@uint64, L0x7fffffffce10s@uint64, L0x7fffffffce18s@uint64,
      L0x7fffffffce20s@uint64, L0x7fffffffce28s@uint64, L0x7fffffffce30s@uint64,
      L0x7fffffffce38s@uint64, L0x7fffffffce40s@uint64, L0x7fffffffce48s@uint64,
      L0x7fffffffce50s@uint64, L0x7fffffffce58s@uint64, L0x7fffffffce60s@uint64,
      L0x7fffffffce68s@uint64, L0x7fffffffce70s@uint64, L0x7fffffffce78s@uint64 :
      and [L0x7fffffffcdc0s=L0x7fffffffcdc0, L0x7fffffffcdc8s=L0x7fffffffcdc8,
           L0x7fffffffcdd0s=L0x7fffffffcdd0, L0x7fffffffcdd8s=L0x7fffffffcdd8,
           L0x7fffffffcde0s=L0x7fffffffcde0, L0x7fffffffcde8s=L0x7fffffffcde8,
           L0x7fffffffcdf0s=L0x7fffffffcdf0, L0x7fffffffcdf8s=L0x7fffffffcdf8,
           L0x7fffffffce00s=L0x7fffffffce00, L0x7fffffffce08s=L0x7fffffffce08,
           L0x7fffffffce10s=L0x7fffffffce10, L0x7fffffffce18s=L0x7fffffffce18,
           L0x7fffffffce20s=L0x7fffffffce20, L0x7fffffffce28s=L0x7fffffffce28,
           L0x7fffffffce30s=L0x7fffffffce30, L0x7fffffffce38s=L0x7fffffffce38,
           L0x7fffffffce40s=L0x7fffffffce40, L0x7fffffffce48s=L0x7fffffffce48,
           L0x7fffffffce50s=L0x7fffffffce50, L0x7fffffffce58s=L0x7fffffffce58,
           L0x7fffffffce60s=L0x7fffffffce60, L0x7fffffffce68s=L0x7fffffffce68,
           L0x7fffffffce70s=L0x7fffffffce70, L0x7fffffffce78s=L0x7fffffffce78]
   && and [L0x7fffffffcdc0s=L0x7fffffffcdc0, L0x7fffffffcdc8s=L0x7fffffffcdc8,
           L0x7fffffffcdd0s=L0x7fffffffcdd0, L0x7fffffffcdd8s=L0x7fffffffcdd8,
           L0x7fffffffcde0s=L0x7fffffffcde0, L0x7fffffffcde8s=L0x7fffffffcde8,
           L0x7fffffffcdf0s=L0x7fffffffcdf0, L0x7fffffffcdf8s=L0x7fffffffcdf8,
           L0x7fffffffce00s=L0x7fffffffce00, L0x7fffffffce08s=L0x7fffffffce08,
           L0x7fffffffce10s=L0x7fffffffce10, L0x7fffffffce18s=L0x7fffffffce18,
           L0x7fffffffce20s=L0x7fffffffce20, L0x7fffffffce28s=L0x7fffffffce28,
           L0x7fffffffce30s=L0x7fffffffce30, L0x7fffffffce38s=L0x7fffffffce38,
           L0x7fffffffce40s=L0x7fffffffce40, L0x7fffffffce48s=L0x7fffffffce48,
           L0x7fffffffce50s=L0x7fffffffce50, L0x7fffffffce58s=L0x7fffffffce58,
           L0x7fffffffce60s=L0x7fffffffce60, L0x7fffffffce68s=L0x7fffffffce68,
           L0x7fffffffce70s=L0x7fffffffce70, L0x7fffffffce78s=L0x7fffffffce78];




(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f870 *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f870 = 0x55555555f870;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcdc0; Value = 0x62748bd3a128a273; PC = 0x555555567504 *)
mov r8 L0x7fffffffcdc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcdc8; Value = 0xfc2baa0949a37e66; PC = 0x555555567507 *)
mov r9 L0x7fffffffcdc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcdd0; Value = 0x25ccbfec6c79825f; PC = 0x55555556750b *)
mov r10 L0x7fffffffcdd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcdd8; Value = 0xc562b8f4d46c13c7; PC = 0x55555556750f *)
mov r11 L0x7fffffffcdd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcde0; Value = 0xf05501ca4ccb2b00; PC = 0x555555567513 *)
mov r12 L0x7fffffffcde0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcde8; Value = 0xbcfeb803235ed4cd; PC = 0x555555567517 *)
mov r13 L0x7fffffffcde8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcdf0; Value = 0xb7aef749e55d7f0f; PC = 0x55555556751b *)
mov r14 L0x7fffffffcdf0;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffce80; Value = 0x00d8a78665173b4b; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffce80 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcdf8; Value = 0x1fb6f015c5887d15; PC = 0x555555567522 *)
mov r15 L0x7fffffffcdf8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffce88; Value = 0xb5541f5f0f6567ad; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffce88 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce00; Value = 0xc6fb884cfd32bbb5; PC = 0x55555556752a *)
mov rax L0x7fffffffce00;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffce90; Value = 0x3026d21a2b2895da; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffce90 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce08; Value = 0xb723ed5478c9acbd; PC = 0x555555567532 *)
mov rbx L0x7fffffffce08;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffce98; Value = 0x739edfc0eed49cf1; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffce98 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce10; Value = 0x77be367fe2293c88; PC = 0x55555556753a *)
mov rbp L0x7fffffffce10;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcea0; Value = 0x36fa88d6006a692e; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcea0 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce18; Value = 0x1a0111ea397fb2da; PC = 0x555555567542 *)
mov rsi L0x7fffffffce18;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcea8; Value = 0xc39f0cc8c0a2c64e; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcea8 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcdc0; PC = 0x55555556754a *)
mov L0x7fffffffcdc0 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffceb0; Value = 0x9cd32029fa5c95c3; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffceb0 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcdc8; PC = 0x555555567551 *)
mov L0x7fffffffcdc8 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffceb8; Value = 0xbabc4ead16d36caf; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffceb8 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcdd0; PC = 0x555555567559 *)
mov L0x7fffffffcdd0 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcec0; Value = 0x91e2b211a1815d24; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcec0 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcde0; PC = 0x555555567561 *)
mov L0x7fffffffcde0 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcec8; Value = 0x097681d804de89b2; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcec8 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcdd8; PC = 0x55555556756c *)
mov L0x7fffffffcdd8 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffced0; Value = 0x7dec37bb63907179; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffced0 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcde8; PC = 0x555555567577 *)
mov L0x7fffffffcde8 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffced8; Value = 0x1a0111ea397fb2da; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffced8 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcdf0; PC = 0x5555555675b5 *)
mov L0x7fffffffcdf0 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcdf8; PC = 0x5555555675bd *)
mov L0x7fffffffcdf8 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce00; PC = 0x5555555675c5 *)
mov L0x7fffffffce00 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce08; PC = 0x5555555675cd *)
mov L0x7fffffffce08 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce10; PC = 0x5555555675d1 *)
mov L0x7fffffffce10 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce18; PC = 0x5555555675d5 *)
mov L0x7fffffffce18 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f881 *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f881 = 0x55555555f881;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce20; Value = 0x217eb62f24a6dd63; PC = 0x555555567504 *)
mov r8 L0x7fffffffce20;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce28; Value = 0xfbec8920b90d481f; PC = 0x555555567507 *)
mov r9 L0x7fffffffce28;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce30; Value = 0xc276bf78c5e216d2; PC = 0x55555556750b *)
mov r10 L0x7fffffffce30;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce38; Value = 0x8c0a93532445ae02; PC = 0x55555556750f *)
mov r11 L0x7fffffffce38;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce40; Value = 0x58d05d248e9f31da; PC = 0x555555567513 *)
mov r12 L0x7fffffffce40;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce48; Value = 0x02592c74762a92dc; PC = 0x555555567517 *)
mov r13 L0x7fffffffce48;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffce50; Value = 0x331382c30090e511; PC = 0x55555556751b *)
mov r14 L0x7fffffffce50;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcee0; Value = 0xff27587c119a58ab; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffcee0 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffce58; Value = 0xec07a86fbf14d033; PC = 0x555555567522 *)
mov r15 L0x7fffffffce58;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcee8; Value = 0x30eb21e36e2d8d8a; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffcee8 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffce60; Value = 0x88d68e138ecaa057; PC = 0x55555556752a *)
mov rax L0x7fffffffce60;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffcef0; Value = 0x48f941cdd9db3e4a; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffcef0 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffce68; Value = 0x68c80969d88499ea; PC = 0x555555567532 *)
mov rbx L0x7fffffffce68;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffcef8; Value = 0xd33122444516defa; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffcef8 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffce70; Value = 0x1c95bb190152b623; PC = 0x55555556753a *)
mov rbp L0x7fffffffce70;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcf00; Value = 0xb832fb85ded70d32; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcf00 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffce78; Value = 0x00000000800023bb; PC = 0x555555567542 *)
mov rsi L0x7fffffffce78;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcf08; Value = 0x5ea9d3cafa2e3dc4; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcf08 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce20; PC = 0x55555556754a *)
mov L0x7fffffffce20 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcf10; Value = 0x1aee020d19ed5b7e; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcf10 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce28; PC = 0x555555567551 *)
mov L0x7fffffffce28 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcf18; Value = 0x298bb65298ef1cec; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcf18 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce30; PC = 0x555555567559 *)
mov L0x7fffffffce30 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcf20; Value = 0x527a2317972452f7; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcf20 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffce40; PC = 0x555555567561 *)
mov L0x7fffffffce40 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcf28; Value = 0x0b04c9adfb24fc09; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcf28 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce38; PC = 0x55555556756c *)
mov L0x7fffffffce38 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcf30; Value = 0xcd2f6ffb5fbb3b5e; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcf30 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffce48; PC = 0x555555567577 *)
mov L0x7fffffffce48 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcf38; Value = 0x00000000000033bf; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcf38 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffce50; PC = 0x5555555675b5 *)
mov L0x7fffffffce50 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffce58; PC = 0x5555555675bd *)
mov L0x7fffffffce58 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffce60; PC = 0x5555555675c5 *)
mov L0x7fffffffce60 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffce68; PC = 0x5555555675cd *)
mov L0x7fffffffce68 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffce70; PC = 0x5555555675d1 *)
mov L0x7fffffffce70 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffce78; PC = 0x5555555675d5 *)
mov L0x7fffffffce78 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;


(* add_fp2x2(ret[1], ret[1], ret[2]) *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffcdc0s, L0x7fffffffcdc8s, L0x7fffffffcdd0s,
                              L0x7fffffffcdd8s, L0x7fffffffcde0s, L0x7fffffffcde8s,
                              L0x7fffffffcdf0s, L0x7fffffffcdf8s, L0x7fffffffce00s,
                              L0x7fffffffce08s, L0x7fffffffce10s, L0x7fffffffce18s]) +
		   (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]))
	 	   (limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffce20s, L0x7fffffffce28s, L0x7fffffffce30s,
                              L0x7fffffffce38s, L0x7fffffffce40s, L0x7fffffffce48s,
                              L0x7fffffffce50s, L0x7fffffffce58s, L0x7fffffffce60s,
                              L0x7fffffffce68s, L0x7fffffffce70s, L0x7fffffffce78s]) +
		   (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]))
	           (limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];
		   
assume and [eqmod ((limbs 64 [L0x7fffffffcdc0s, L0x7fffffffcdc8s, L0x7fffffffcdd0s,
                              L0x7fffffffcdd8s, L0x7fffffffcde0s, L0x7fffffffcde8s,
                              L0x7fffffffcdf0s, L0x7fffffffcdf8s, L0x7fffffffce00s,
                              L0x7fffffffce08s, L0x7fffffffce10s, L0x7fffffffce18s]) +
		   (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]))
	 	   (limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                              L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                              L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                              L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffce20s, L0x7fffffffce28s, L0x7fffffffce30s,
                              L0x7fffffffce38s, L0x7fffffffce40s, L0x7fffffffce48s,
                              L0x7fffffffce50s, L0x7fffffffce58s, L0x7fffffffce60s,
                              L0x7fffffffce68s, L0x7fffffffce70s, L0x7fffffffce78s]) +
		   (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]))
	           (limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                              L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                              L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                              L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
	  limbs 64 [a00, a01, a02, a03, a04, a05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a10, a11, a12, a13, a14, a15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a40, a41, a42, a43, a44, a45] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [a50, a51, a52, a53, a54, a55] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b00, b01, b02, b03, b04, b05] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b10, b11, b12, b13, b14, b15] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b40, b41, b42, b43, b44, b45] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [b50, b51, b52, b53, b54, b55] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;


(* #callq  0x555555566920 <add_mod_384x>           #! PC = 0x55555555f896 *)
#callq  0x555555566920 <add_mod_384x>           #! 0x55555555f896 = 0x55555555f896;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555566920 *)
#endbr64                                         #! 0x555555566920 = 0x555555566920;
(* #lea    0x30(%rsi),%rsi                          #! PC = 0x55555556693b *)
#lea    %%EA,%%rsi                          #! 0x55555556693b = 0x55555556693b;
(* #lea    0x30(%rdx),%rdx                          #! PC = 0x55555556693f *)
#lea    %%EA,%%rdx                          #! 0x55555556693f = 0x55555556693f;
(* #lea    0x30(%rdi),%rdi                          #! PC = 0x555555566943 *)
#lea    %%EA,%%rdi                          #! 0x555555566943 = 0x555555566943;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566947 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566947 = 0x555555566947;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcfc0; Value = 0x0000ffffefd91330; PC = 0x555555566884 *)
mov r8 L0x7fffffffcfc0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcfc8; Value = 0x000080005f5d9ca5; PC = 0x555555566887 *)
mov r9 L0x7fffffffcfc8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfd0; Value = 0x0000ffffeffccf68; PC = 0x55555556688b *)
mov r10 L0x7fffffffcfd0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfd8; Value = 0x00007ffff7fb79b8; PC = 0x55555556688f *)
mov r11 L0x7fffffffcfd8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfe0; Value = 0x0000fffff7dc7928; PC = 0x555555566893 *)
mov r12 L0x7fffffffcfe0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfe8; Value = 0x00007ffff7fdac8a; PC = 0x555555566897 *)
mov r13 L0x7fffffffcfe8;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd080; Value = 0x0000000000000000; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd080 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd088; Value = 0x00007ffff7fb7520; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd088 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd090; Value = 0x0000000000000003; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd090 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd098; Value = 0x0000000000000000; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd098 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd0a0; Value = 0x0000000000000000; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd0a0 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd0a8; Value = 0x0000000000000000; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd0a8 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffc9e0; PC = 0x5555555668ee *)
mov L0x7fffffffc9e0 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffc9e8; PC = 0x5555555668f5 *)
mov L0x7fffffffc9e8 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffc9f0; PC = 0x5555555668fd *)
mov L0x7fffffffc9f0 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffc9f8; PC = 0x555555566905 *)
mov L0x7fffffffc9f8 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca00; PC = 0x555555566909 *)
mov L0x7fffffffca00 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca08; PC = 0x55555556690d *)
mov L0x7fffffffca08 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    -0x30(%rdi),%rdi                         #! PC = 0x555555566955 *)
#lea    -%%EA,%%rdi                         #! 0x555555566955 = 0x555555566955;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566959 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566959 = 0x555555566959;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcf90; Value = 0x0000000000000000; PC = 0x555555566884 *)
mov r8 L0x7fffffffcf90;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcf98; Value = 0x0000000000000000; PC = 0x555555566887 *)
mov r9 L0x7fffffffcf98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcfa0; Value = 0x0000000000000000; PC = 0x55555556688b *)
mov r10 L0x7fffffffcfa0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcfa8; Value = 0x0000000000000000; PC = 0x55555556688f *)
mov r11 L0x7fffffffcfa8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcfb0; Value = 0x00007ffff7fb7000; PC = 0x555555566893 *)
mov r12 L0x7fffffffcfb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcfb8; Value = 0x00007ffff7fda45c; PC = 0x555555566897 *)
mov r13 L0x7fffffffcfb8;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd050; Value = 0x00000000019dfe69; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd050 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd058; Value = 0x00007fffffffd7a4; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd058 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd060; Value = 0x0000000000000000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd060 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd068; Value = 0x00007fffffffd870; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd068 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd070; Value = 0x00007ffff7fcf580; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd070 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd078; Value = 0x00007fffffffd860; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd078 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffc9b0; PC = 0x5555555668ee *)
mov L0x7fffffffc9b0 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffc9b8; PC = 0x5555555668f5 *)
mov L0x7fffffffc9b8 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffc9c0; PC = 0x5555555668fd *)
mov L0x7fffffffc9c0 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffc9c8; PC = 0x555555566905 *)
mov L0x7fffffffc9c8 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffc9d0; PC = 0x555555566909 *)
mov L0x7fffffffc9d0 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffc9d8; PC = 0x55555556690d *)
mov L0x7fffffffc9d8 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;


(* add_fp2(aa, a[0], a[2]) *)

assert true
    && eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8])
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a40, a41, a42, a43, a44, a45])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8])
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a40, a41, a42, a43, a44, a45])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
             (limbs 64 [a10, a11, a12, a13, a14, a15] +
              limbs 64 [a50, a51, a52, a53, a54, a55])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
             (limbs 64 [a10, a11, a12, a13, a14, a15] +
              limbs 64 [a50, a51, a52, a53, a54, a55])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;




(* #lea    0x48(%rsp),%rsp                          #! PC = 0x55555556697c *)
#lea    %%EA,%rsp                          #! 0x55555556697c = 0x55555556697c;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x555555566981 *)
#repz retq                                      #! 0x555555566981 = 0x555555566981;
(* #callq  0x555555566920 <add_mod_384x>           #! PC = 0x55555555f8b0 *)
#callq  0x555555566920 <add_mod_384x>           #! 0x55555555f8b0 = 0x55555555f8b0;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555566920 *)
#endbr64                                         #! 0x555555566920 = 0x555555566920;
(* #lea    0x30(%rsi),%rsi                          #! PC = 0x55555556693b *)
#lea    %%EA,%%rsi                          #! 0x55555556693b = 0x55555556693b;
(* #lea    0x30(%rdx),%rdx                          #! PC = 0x55555556693f *)
#lea    %%EA,%%rdx                          #! 0x55555556693f = 0x55555556693f;
(* #lea    0x30(%rdi),%rdi                          #! PC = 0x555555566943 *)
#lea    %%EA,%%rdi                          #! 0x555555566943 = 0x555555566943;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566947 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566947 = 0x555555566947;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd0e0; Value = 0x00007ffff97ba199; PC = 0x555555566884 *)
mov r8 L0x7fffffffd0e0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd0e8; Value = 0x00017fffefd94f0a; PC = 0x555555566887 *)
mov r9 L0x7fffffffd0e8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd0f0; Value = 0x00007ffff7ffd9eb; PC = 0x55555556688b *)
mov r10 L0x7fffffffd0f0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd0f8; Value = 0x00007fffffffd870; PC = 0x55555556688f *)
mov r11 L0x7fffffffd0f8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd100; Value = 0x0000fffff7fccb50; PC = 0x555555566893 *)
mov r12 L0x7fffffffd100;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd108; Value = 0x00007fffffffdc60; PC = 0x555555566897 *)
mov r13 L0x7fffffffd108;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd1a0; Value = 0x00007ffff7dda330; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd1a0 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd1a8; Value = 0x0000000000000000; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd1a8 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd1b0; Value = 0x0000000000000000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd1b0 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd1b8; Value = 0x00007ffff7dcc548; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd1b8 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd1c0; Value = 0x00007ffff7fcf9c1; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd1c0 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd1c8; Value = 0x00000000677f9a5f; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd1c8 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca40; PC = 0x5555555668ee *)
mov L0x7fffffffca40 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca48; PC = 0x5555555668f5 *)
mov L0x7fffffffca48 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca50; PC = 0x5555555668fd *)
mov L0x7fffffffca50 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca58; PC = 0x555555566905 *)
mov L0x7fffffffca58 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca60; PC = 0x555555566909 *)
mov L0x7fffffffca60 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca68; PC = 0x55555556690d *)
mov L0x7fffffffca68 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;
(* #lea    -0x30(%rdi),%rdi                         #! PC = 0x555555566955 *)
#lea    -%%EA,%%rdi                         #! 0x555555566955 = 0x555555566955;
(* #callq  0x555555566880 <__add_mod_384>          #! PC = 0x555555566959 *)
#callq  0x555555566880 <__add_mod_384>          #! 0x555555566959 = 0x555555566959;
(* #! -> SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #endbr64                                         #! PC = 0x555555566880 *)
#endbr64                                         #! 0x555555566880 = 0x555555566880;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffd0b0; Value = 0x00000000019dfe69; PC = 0x555555566884 *)
mov r8 L0x7fffffffd0b0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffd0b8; Value = 0x0000000008046284; PC = 0x555555566887 *)
mov r9 L0x7fffffffd0b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffd0c0; Value = 0xfffffffffffffffd; PC = 0x55555556688b *)
mov r10 L0x7fffffffd0c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffd0c8; Value = 0x00007fffffffd86f; PC = 0x55555556688f *)
mov r11 L0x7fffffffd0c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffd0d0; Value = 0x0000ffffeff86580; PC = 0x555555566893 *)
mov r12 L0x7fffffffd0d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffd0d8; Value = 0x00007fffffffd860; PC = 0x555555566897 *)
mov r13 L0x7fffffffd0d8;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffd170; Value = 0x00000000000000c3; PC = 0x55555556689b *)
adds carry r8 L0x7fffffffd170 r8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffd178; Value = 0x00007ffff7dda330; PC = 0x55555556689e *)
adcs carry r9 L0x7fffffffd178 r9 carry;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffd180; Value = 0x00007ffff7fb7000; PC = 0x5555555668a2 *)
adcs carry r10 L0x7fffffffd180 r10 carry;
(* mov    %r8,%r14                                 #! PC = 0x5555555668a6 *)
mov r14 r8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffd188; Value = 0x00007fffffffd7a8; PC = 0x5555555668a9 *)
adcs carry r11 L0x7fffffffd188 r11 carry;
(* mov    %r9,%r15                                 #! PC = 0x5555555668ad *)
mov r15 r9;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffd190; Value = 0x00007fffffffd7a4; PC = 0x5555555668b0 *)
adcs carry r12 L0x7fffffffd190 r12 carry;
(* mov    %r10,%rax                                #! PC = 0x5555555668b4 *)
mov rax r10;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffd198; Value = 0x0000000000000000; PC = 0x5555555668b7 *)
adcs carry r13 L0x7fffffffd198 r13 carry;
(* mov    %r11,%rbx                                #! PC = 0x5555555668bb *)
mov rbx r11;
(* sbb    %rdx,%rdx                                #! PC = 0x5555555668be *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555668c1 *)
subb carry r8 r8 L0x55555556c740;
(* sbb    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x5555555668c4 *)
sbbs carry r9 r9 L0x55555556c748 carry;
(* mov    %r12,%rbp                                #! PC = 0x5555555668c8 *)
mov rbp r12;
(* sbb    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555668cb *)
sbbs carry r10 r10 L0x55555556c750 carry;
(* sbb    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555668cf *)
sbbs carry r11 r11 L0x55555556c758 carry;
(* sbb    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555668d3 *)
sbbs carry r12 r12 L0x55555556c760 carry;
(* mov    %r13,%rsi                                #! PC = 0x5555555668d7 *)
mov rsi r13;
(* sbb    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555668da *)
sbbs carry r13 r13 L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555668de *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r14,%r8                                 #! PC = 0x5555555668e2 *)
cmov r8 carry r14 r8;
(* cmovb  %r15,%r9                                 #! PC = 0x5555555668e6 *)
cmov r9 carry r15 r9;
(* cmovb  %rax,%r10                                #! PC = 0x5555555668ea *)
cmov r10 carry rax r10;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffca10; PC = 0x5555555668ee *)
mov L0x7fffffffca10 r8;
(* cmovb  %rbx,%r11                                #! PC = 0x5555555668f1 *)
cmov r11 carry rbx r11;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffca18; PC = 0x5555555668f5 *)
mov L0x7fffffffca18 r9;
(* cmovb  %rbp,%r12                                #! PC = 0x5555555668f9 *)
cmov r12 carry rbp r12;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffca20; PC = 0x5555555668fd *)
mov L0x7fffffffca20 r10;
(* cmovb  %rsi,%r13                                #! PC = 0x555555566901 *)
cmov r13 carry rsi r13;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffca28; PC = 0x555555566905 *)
mov L0x7fffffffca28 r11;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffca30; PC = 0x555555566909 *)
mov L0x7fffffffca30 r12;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffca38; PC = 0x55555556690d *)
mov L0x7fffffffca38 r13;
(* #! <- SP = 0x7fffffffc8e8 *)
#! 0x7fffffffc8e8 = 0x7fffffffc8e8;
(* #repz retq                                      #! PC = 0x555555566911 *)
#repz retq                                      #! 0x555555566911 = 0x555555566911;


(* add_fp2(bb, b[0], b[2]) *)

assert true
    && eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38])
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b40, b41, b42, b43, b44, b45])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38])
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b40, b41, b42, b43, b44, b45])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

assert true
    && eqmod (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
             (limbs 64 [b10, b11, b12, b13, b14, b15] +
              limbs 64 [b50, b51, b52, b53, b54, b55])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
             (limbs 64 [b10, b11, b12, b13, b14, b15] +
              limbs 64 [b50, b51, b52, b53, b54, b55])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;

(* add_fp2(aa, a[0], a[2]) *)

assert eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                        L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
              limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                        L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U)
             ((limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) +
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;

(* add_fp2(bb, b[0], b[2]) *)

assert eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                        L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
              limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                        L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U)
             ((limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U) +
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]
    && true;   

rcut and [limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                    L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                    L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                    L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                    L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;    

ghost L0x7fffffffc9b0r2@uint64, L0x7fffffffc9b8r2@uint64, L0x7fffffffc9c0r2@uint64,
      L0x7fffffffc9c8r2@uint64, L0x7fffffffc9d0r2@uint64, L0x7fffffffc9d8r2@uint64,  
      L0x7fffffffc9e0r2@uint64, L0x7fffffffc9e8r2@uint64, L0x7fffffffc9f0r2@uint64,
      L0x7fffffffc9f8r2@uint64, L0x7fffffffca00r2@uint64, L0x7fffffffca08r2@uint64,
      L0x7fffffffca10r2@uint64, L0x7fffffffca18r2@uint64, L0x7fffffffca20r2@uint64,
      L0x7fffffffca28r2@uint64, L0x7fffffffca30r2@uint64, L0x7fffffffca38r2@uint64,
      L0x7fffffffca40r2@uint64, L0x7fffffffca48r2@uint64, L0x7fffffffca50r2@uint64,
      L0x7fffffffca58r2@uint64, L0x7fffffffca60r2@uint64, L0x7fffffffca68r2@uint64 :
      and[L0x7fffffffc9b0r2=L0x7fffffffc9b0, L0x7fffffffc9b8r2=L0x7fffffffc9b8,
	  L0x7fffffffc9c0r2=L0x7fffffffc9c0, L0x7fffffffc9c8r2=L0x7fffffffc9c8,
	  L0x7fffffffc9d0r2=L0x7fffffffc9d0, L0x7fffffffc9d8r2=L0x7fffffffc9d8,
	  L0x7fffffffc9e0r2=L0x7fffffffc9e0, L0x7fffffffc9e8r2=L0x7fffffffc9e8,
	  L0x7fffffffc9f0r2=L0x7fffffffc9f0, L0x7fffffffc9f8r2=L0x7fffffffc9f8,
	  L0x7fffffffca00r2=L0x7fffffffca00, L0x7fffffffca08r2=L0x7fffffffca08,
	  L0x7fffffffca10r2=L0x7fffffffca10, L0x7fffffffca18r2=L0x7fffffffca18,
	  L0x7fffffffca20r2=L0x7fffffffca20, L0x7fffffffca28r2=L0x7fffffffca28,
	  L0x7fffffffca30r2=L0x7fffffffca30, L0x7fffffffca38r2=L0x7fffffffca38,
	  L0x7fffffffca40r2=L0x7fffffffca40, L0x7fffffffca48r2=L0x7fffffffca48,
	  L0x7fffffffca50r2=L0x7fffffffca50, L0x7fffffffca58r2=L0x7fffffffca58,
	  L0x7fffffffca60r2=L0x7fffffffca60, L0x7fffffffca68r2=L0x7fffffffca68]
   && and[L0x7fffffffc9b0r2=L0x7fffffffc9b0, L0x7fffffffc9b8r2=L0x7fffffffc9b8,
	  L0x7fffffffc9c0r2=L0x7fffffffc9c0, L0x7fffffffc9c8r2=L0x7fffffffc9c8,
	  L0x7fffffffc9d0r2=L0x7fffffffc9d0, L0x7fffffffc9d8r2=L0x7fffffffc9d8,
	  L0x7fffffffc9e0r2=L0x7fffffffc9e0, L0x7fffffffc9e8r2=L0x7fffffffc9e8,
	  L0x7fffffffc9f0r2=L0x7fffffffc9f0, L0x7fffffffc9f8r2=L0x7fffffffc9f8,
	  L0x7fffffffca00r2=L0x7fffffffca00, L0x7fffffffca08r2=L0x7fffffffca08,
	  L0x7fffffffca10r2=L0x7fffffffca10, L0x7fffffffca18r2=L0x7fffffffca18,
	  L0x7fffffffca20r2=L0x7fffffffca20, L0x7fffffffca28r2=L0x7fffffffca28,
	  L0x7fffffffca30r2=L0x7fffffffca30, L0x7fffffffca38r2=L0x7fffffffca38,
	  L0x7fffffffca40r2=L0x7fffffffca40, L0x7fffffffca48r2=L0x7fffffffca48,
	  L0x7fffffffca50r2=L0x7fffffffca50, L0x7fffffffca58r2=L0x7fffffffca58,
	  L0x7fffffffca60r2=L0x7fffffffca60, L0x7fffffffca68r2=L0x7fffffffca68];
	  


(* #lea    0x48(%rsp),%rsp                          #! PC = 0x55555556697c *)
#lea    %%EA,%rsp                          #! 0x55555556697c = 0x55555556697c;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x555555566981 *)
#repz retq                                      #! 0x555555566981 = 0x555555566981;
(* #callq  0x55555555d7b4 <mul_fp2x2>              #! PC = 0x55555555f8be *)
#callq  0x55555555d7b4 <mul_fp2x2>              #! 0x55555555f8be = 0x55555555f8be;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #lea    0xef81(%rip),%rcx        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555d7b8 *)
#lea    0xef81(%rip),%%rcx        # 0x55555556c740 <BLS12_381_P>#! 0x55555555d7b8 = 0x55555555d7b8;
(* #callq  0x555555568780 <mulx_382x>              #! PC = 0x55555555d7bf *)
#callq  0x555555568780 <mulx_382x>              #! 0x55555555d7bf = 0x55555555d7bf;
(* #! -> SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #endbr64                                         #! PC = 0x555555568780 *)
#endbr64                                         #! 0x555555568780 = 0x555555568780;
(* #lea    0x60(%rdi),%rdi                          #! PC = 0x555555568795 *)
#lea    %%EA,%%rdi                          #! 0x555555568795 = 0x555555568795;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffc9b0; Value = 0x00000000019dfe69; PC = 0x5555555687ac *)
mov r8 L0x7fffffffc9b0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffc9b8; Value = 0x00007fffffffd7a4; PC = 0x5555555687af *)
mov r9 L0x7fffffffc9b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x5555555687b3 *)
mov r10 L0x7fffffffc9c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x5555555687b7 *)
mov r11 L0x7fffffffc9c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x5555555687bb *)
mov r12 L0x7fffffffc9d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x5555555687bf *)
mov r13 L0x7fffffffc9d8;
(* add    0x30(%rsi),%r8                           #! EA = L0x7fffffffc9e0; Value = 0x0000ffffefd91330; PC = 0x5555555687c3 *)
adds carry r8 L0x7fffffffc9e0 r8;
(* adc    0x38(%rsi),%r9                           #! EA = L0x7fffffffc9e8; Value = 0x00010000575911c5; PC = 0x5555555687c7 *)
adcs carry r9 L0x7fffffffc9e8 r9 carry;
(* adc    0x40(%rsi),%r10                          #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x5555555687cb *)
adcs carry r10 L0x7fffffffc9f0 r10 carry;
(* adc    0x48(%rsi),%r11                          #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x5555555687cf *)
adcs carry r11 L0x7fffffffc9f8 r11 carry;
(* adc    0x50(%rsi),%r12                          #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x5555555687d3 *)
adcs carry r12 L0x7fffffffca00 r12 carry;
(* adc    0x58(%rsi),%r13                          #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x5555555687d7 *)
adcs carry r13 L0x7fffffffca08 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x20(%rsp)                           #! EA = L0x7fffffffc890; PC = 0x5555555687db *)
mov L0x7fffffffc890 r8;
(* mov    %r9,0x28(%rsp)                           #! EA = L0x7fffffffc898; PC = 0x5555555687e0 *)
mov L0x7fffffffc898 r9;
(* mov    %r10,0x30(%rsp)                          #! EA = L0x7fffffffc8a0; PC = 0x5555555687e5 *)
mov L0x7fffffffc8a0 r10;
(* mov    %r11,0x38(%rsp)                          #! EA = L0x7fffffffc8a8; PC = 0x5555555687ea *)
mov L0x7fffffffc8a8 r11;
(* mov    %r12,0x40(%rsp)                          #! EA = L0x7fffffffc8b0; PC = 0x5555555687ef *)
mov L0x7fffffffc8b0 r12;
(* mov    %r13,0x48(%rsp)                          #! EA = L0x7fffffffc8b8; PC = 0x5555555687f4 *)
mov L0x7fffffffc8b8 r13;
(* mov    (%rdx),%r8                               #! EA = L0x7fffffffca10; Value = 0x00000000019dff2c; PC = 0x5555555687f9 *)
mov r8 L0x7fffffffca10;
(* mov    0x8(%rdx),%r9                            #! EA = L0x7fffffffca18; Value = 0x00007fffffe205b4; PC = 0x5555555687fc *)
mov r9 L0x7fffffffca18;
(* mov    0x10(%rdx),%r10                          #! EA = L0x7fffffffca20; Value = 0x00007ffff7fb6ffd; PC = 0x555555568800 *)
mov r10 L0x7fffffffca20;
(* mov    0x18(%rdx),%r11                          #! EA = L0x7fffffffca28; Value = 0x0000ffffffffb018; PC = 0x555555568804 *)
mov r11 L0x7fffffffca28;
(* mov    0x20(%rdx),%r12                          #! EA = L0x7fffffffca30; Value = 0x00017fffeff83d24; PC = 0x555555568808 *)
mov r12 L0x7fffffffca30;
(* mov    0x28(%rdx),%r13                          #! EA = L0x7fffffffca38; Value = 0x00007fffffffd860; PC = 0x55555556880c *)
mov r13 L0x7fffffffca38;
(* add    0x30(%rdx),%r8                           #! EA = L0x7fffffffca40; Value = 0x0000fffff15944c9; PC = 0x555555568810 *)
adds carry r8 L0x7fffffffca40 r8;
(* adc    0x38(%rdx),%r9                           #! EA = L0x7fffffffca48; Value = 0x00017fffefd94f0a; PC = 0x555555568814 *)
adcs carry r9 L0x7fffffffca48 r9 carry;
(* adc    0x40(%rdx),%r10                          #! EA = L0x7fffffffca50; Value = 0x00007ffff7ffd9eb; PC = 0x555555568818 *)
adcs carry r10 L0x7fffffffca50 r10 carry;
(* adc    0x48(%rdx),%r11                          #! EA = L0x7fffffffca58; Value = 0x0000fffff7dc9db8; PC = 0x55555556881c *)
adcs carry r11 L0x7fffffffca58 r11 carry;
(* adc    0x50(%rdx),%r12                          #! EA = L0x7fffffffca60; Value = 0x00017fffeff9c511; PC = 0x555555568820 *)
adcs carry r12 L0x7fffffffca60 r12 carry;
(* adc    0x58(%rdx),%r13                          #! EA = L0x7fffffffca68; Value = 0x00008000677f76bf; PC = 0x555555568824 *)
adcs carry r13 L0x7fffffffca68 r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x50(%rsp)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568828 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x58(%rsp)                           #! EA = L0x7fffffffc8c8; PC = 0x55555556882d *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x60(%rsp)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568832 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x68(%rsp)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568837 *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x70(%rsp)                          #! EA = L0x7fffffffc8e0; PC = 0x55555556883c *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x78(%rsp)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568841 *)
mov L0x7fffffffc8e8 r13;
(* #lea    0x20(%rsp),%rsi                          #! PC = 0x555555568846 *)
#lea    %%EA,%%rsi                          #! 0x555555568846 = 0x555555568846;
(* #lea    0x50(%rsp),%rbx                          #! PC = 0x55555556884b *)
#lea    %%EA,%%rbx                          #! 0x55555556884b = 0x55555556884b;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568850 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568850 = 0x555555568850;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;



(* t0 = aa->re + aa->im *)
assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8] =
       (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                  L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
        limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                  L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08])
    && true;

(* t1 = bb->re + bb->im *)
assert limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                  L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
        limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                  L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68])
    && true;



(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffc8c0; Value = 0x0000fffff2f743f5; PC = 0x555555568a64 *)
mov rdx L0x7fffffffc8c0;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc890; Value = 0x0000fffff1771199; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc890;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc898; Value = 0x000180005758e969; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc898;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf6b; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc8a0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7fb5228; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc8a8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc8b0; Value = 0x0001ffffe7d4dea8; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc8b0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc8b8; Value = 0x00017fffeffb2946; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc8b8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x555555568a95 *)
mov L0x7fffffffcee0 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffc8c8; Value = 0x0001ffffefbb54be; PC = 0x555555568abe *)
mov rdx L0x7fffffffc8c8;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffcee8; PC = 0x555555568adf *)
mov L0x7fffffffcee8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf6b; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7fb5228; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0001ffffe7d4dea8; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00017fffeffb2946; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffc8d0; Value = 0x0000ffffeffb49e8; PC = 0x555555568b3c *)
mov rdx L0x7fffffffc8d0;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555568b63 *)
mov L0x7fffffffcef0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf6b; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7fb5228; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0001ffffe7d4dea8; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00017fffeffb2946; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffc8d8; Value = 0x0001fffff7dc4dd0; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffc8d8;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x555555568be7 *)
mov L0x7fffffffcef8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf6b; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7fb5228; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0001ffffe7d4dea8; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00017fffeffb2946; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffc8e0; Value = 0x0002ffffdff20235; PC = 0x555555568c44 *)
mov rdx L0x7fffffffc8e0;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555568c6b *)
mov L0x7fffffffcf00 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf6b; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7fb5228; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0001ffffe7d4dea8; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00017fffeffb2946; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffc8e8; Value = 0x00010000677f4f1f; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffc8e8;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555568cef *)
mov L0x7fffffffcf08 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc8a0; Value = 0x0000ffffeffccf6b; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc8a0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc8a8; Value = 0x0000fffff7fb5228; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc8a8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc8b0; Value = 0x0001ffffe7d4dea8; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc8b0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc8b8; Value = 0x00017fffeffb2946; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc8b8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffcf10; PC = 0x555555568d61 *)
mov L0x7fffffffcf10 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffcf18; PC = 0x555555568d65 *)
mov L0x7fffffffcf18 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x555555568d69 *)
mov L0x7fffffffcf20 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x555555568d6d *)
mov L0x7fffffffcf28 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x555555568d71 *)
mov L0x7fffffffcf30 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x555555568d75 *)
mov L0x7fffffffcf38 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->im, t0, t1) *)

assert limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                 L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                 L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                 L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] =
       ((limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                   L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8]) *
        (limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                   L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
    && limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                 L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x55555556885e *)
#lea    -%%EA,%%rdi                         #! 0x55555556885e = 0x55555556885e;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568862 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568862 = 0x555555568862;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffca10; Value = 0x00000000019dff2c; PC = 0x555555568a64 *)
mov rdx L0x7fffffffca10;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc9b0; Value = 0x00000000019dfe69; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc9b0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc9b8; Value = 0x00007fffffffd7a4; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc9b8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc9c0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc9c8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x555555568a76 *)
mov r12 L0x7fffffffc9d0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x555555568a7a *)
mov r13 L0x7fffffffc9d8;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffce80; PC = 0x555555568a95 *)
mov L0x7fffffffce80 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffca18; Value = 0x00007fffffe205b4; PC = 0x555555568abe *)
mov rdx L0x7fffffffca18;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffce88; PC = 0x555555568adf *)
mov L0x7fffffffce88 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffca20; Value = 0x00007ffff7fb6ffd; PC = 0x555555568b3c *)
mov rdx L0x7fffffffca20;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffce90; PC = 0x555555568b63 *)
mov L0x7fffffffce90 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffca28; Value = 0x0000ffffffffb018; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffca28;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffce98; PC = 0x555555568be7 *)
mov L0x7fffffffce98 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffca30; Value = 0x00017fffeff83d24; PC = 0x555555568c44 *)
mov rdx L0x7fffffffca30;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffcea0; PC = 0x555555568c6b *)
mov L0x7fffffffcea0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffca38; Value = 0x00007fffffffd860; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffca38;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffcea8; PC = 0x555555568cef *)
mov L0x7fffffffcea8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9c0; Value = 0x0000000000000000; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc9c0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9c8; Value = 0x00007fffffffd870; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc9c8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffc9d0; Value = 0x0000ffffeff86580; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffc9d0 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffc9d8; Value = 0x0000fffff7fd7cbc; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffc9d8 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffceb0; PC = 0x555555568d61 *)
mov L0x7fffffffceb0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffceb8; PC = 0x555555568d65 *)
mov L0x7fffffffceb8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffcec0; PC = 0x555555568d69 *)
mov L0x7fffffffcec0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffcec8; PC = 0x555555568d6d *)
mov L0x7fffffffcec8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffced0; PC = 0x555555568d71 *)
mov L0x7fffffffced0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffced8; PC = 0x555555568d75 *)
mov L0x7fffffffced8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(ret->re, aa->re, bb->re) *)

assert limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                 L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                 L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                 L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] =
       ((limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                   L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8]) *
        (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                   L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38]))
    && limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                 L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];



(* #lea    0xb0(%rsi),%rsi                          #! PC = 0x555555568867 *)
#lea    %%EA,%%rsi                          #! 0x555555568867 = 0x555555568867;
(* #lea    0x30(%rbx),%rbx                          #! PC = 0x55555556886e *)
#lea    %%EA,%%rbx                          #! 0x55555556886e = 0x55555556886e;
(* #lea    0x20(%rsp),%rdi                          #! PC = 0x555555568872 *)
#lea    %%EA,%%rdi                          #! 0x555555568872 = 0x555555568872;
(* #callq  0x555555568a60 <__mulx_384>             #! PC = 0x555555568877 *)
#callq  0x555555568a60 <__mulx_384>             #! 0x555555568877 = 0x555555568877;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x555555568a60 *)
#endbr64                                         #! 0x555555568a60 = 0x555555568a60;
(* mov    (%rbx),%rdx                              #! EA = L0x7fffffffca40; Value = 0x0000fffff15944c9; PC = 0x555555568a64 *)
mov rdx L0x7fffffffca40;
(* mov    (%rsi),%r14                              #! EA = L0x7fffffffc9e0; Value = 0x0000ffffefd91330; PC = 0x555555568a67 *)
mov r14 L0x7fffffffc9e0;
(* mov    0x8(%rsi),%r15                           #! EA = L0x7fffffffc9e8; Value = 0x00010000575911c5; PC = 0x555555568a6a *)
mov r15 L0x7fffffffc9e8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x555555568a6e *)
mov r10 L0x7fffffffc9f0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x555555568a72 *)
mov r11 L0x7fffffffc9f8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x555555568a76 *)
mov r12 L0x7fffffffca00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x555555568a7a *)
mov r13 L0x7fffffffca08;
(* #lea    -0x80(%rsi),%rsi                         #! PC = 0x555555568a7e *)
#lea    -%%EA,%%rsi                         #! 0x555555568a7e = 0x555555568a7e;
(* mulx   %r14,%r9,%rcx                            #! PC = 0x555555568a82 *)
umull rcx r9 r14 rdx;
(* xor    %rbp,%rbp                                #! PC = 0x555555568a87 *)
mov rbp 0@uint64;
(* mulx   %r15,%r8,%rax                            #! PC = 0x555555568a8a *)
umull rax r8 r15 rdx;
(* adcx   %rcx,%r8                                 #! PC = 0x555555568a8f *)
adcs carry r8 rcx r8 carry;
(* mov    %r9,(%rdi)                               #! EA = L0x7fffffffc890; PC = 0x555555568a95 *)
mov L0x7fffffffc890 r9;
(* mulx   %r10,%r9,%rcx                            #! PC = 0x555555568a98 *)
umull rcx r9 r10 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555568a9d *)
adcs carry r9 rax r9 carry;
(* mulx   %r11,%r10,%rax                           #! PC = 0x555555568aa3 *)
umull rax r10 r11 rdx;
(* adcx   %rcx,%r10                                #! PC = 0x555555568aa8 *)
adcs carry r10 rcx r10 carry;
(* mulx   %r12,%r11,%rcx                           #! PC = 0x555555568aae *)
umull rcx r11 r12 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555568ab3 *)
adcs carry r11 rax r11 carry;
(* mulx   %r13,%r12,%r13                           #! PC = 0x555555568ab9 *)
umull r13 r12 r13 rdx;
(* mov    0x8(%rbx),%rdx                           #! EA = L0x7fffffffca48; Value = 0x00017fffefd94f0a; PC = 0x555555568abe *)
mov rdx L0x7fffffffca48;
(* adcx   %rcx,%r12                                #! PC = 0x555555568ac2 *)
adcs carry r12 rcx r12 carry;
(* adcx   %rbp,%r13                                #! PC = 0x555555568ac8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568ace *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ad3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ad9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x8(%rdi)                           #! EA = L0x7fffffffc898; PC = 0x555555568adf *)
mov L0x7fffffffc898 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568ae3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568ae8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568aee *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x555555568af4 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568afd *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b03 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x555555568b09 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b12 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b18 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x555555568b1e *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568b27 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568b2d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x555555568b33 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x10(%rbx),%rdx                          #! EA = L0x7fffffffca50; Value = 0x00007ffff7ffd9eb; PC = 0x555555568b3c *)
mov rdx L0x7fffffffca50;
(* adcx   %rax,%r12                                #! PC = 0x555555568b40 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568b46 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568b4c *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568b52 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568b57 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568b5d *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x10(%rdi)                          #! EA = L0x7fffffffc8a0; PC = 0x555555568b63 *)
mov L0x7fffffffc8a0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568b67 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568b6c *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568b72 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x555555568b78 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568b81 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568b87 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x555555568b8d *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568b96 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568b9c *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x555555568ba2 *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568bab *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568bb1 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x555555568bb7 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x18(%rbx),%rdx                          #! EA = L0x7fffffffca58; Value = 0x0000fffff7dc9db8; PC = 0x555555568bc0 *)
mov rdx L0x7fffffffca58;
(* adcx   %rax,%r12                                #! PC = 0x555555568bc4 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568bca *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568bd0 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568bd6 *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568bdb *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568be1 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x18(%rdi)                          #! EA = L0x7fffffffc8a8; PC = 0x555555568be7 *)
mov L0x7fffffffc8a8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568beb *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568bf0 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568bf6 *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x555555568bfc *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c05 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c0b *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x555555568c11 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c1a *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568c20 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x555555568c26 *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568c2f *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568c35 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x555555568c3b *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x20(%rbx),%rdx                          #! EA = L0x7fffffffca60; Value = 0x00017fffeff9c511; PC = 0x555555568c44 *)
mov rdx L0x7fffffffca60;
(* adcx   %rax,%r12                                #! PC = 0x555555568c48 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568c4e *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568c54 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568c5a *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568c5f *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568c65 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x20(%rdi)                          #! EA = L0x7fffffffc8b0; PC = 0x555555568c6b *)
mov L0x7fffffffc8b0 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568c6f *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568c74 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568c7a *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x555555568c80 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568c89 *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568c8f *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x555555568c95 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568c9e *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568ca4 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x555555568caa *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568cb3 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568cb9 *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x555555568cbf *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    0x28(%rbx),%rdx                          #! EA = L0x7fffffffca68; Value = 0x00008000677f76bf; PC = 0x555555568cc8 *)
mov rdx L0x7fffffffca68;
(* adcx   %rax,%r12                                #! PC = 0x555555568ccc *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568cd2 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568cd8 *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mulx   %r14,%rax,%rcx                           #! PC = 0x555555568cde *)
umull rcx rax r14 rdx;
(* adcx   %r8,%rax                                 #! PC = 0x555555568ce3 *)
adcs carry rax r8 rax carry;
(* adox   %rcx,%r9                                 #! PC = 0x555555568ce9 *)
adcs OF r9 rcx r9 OF;
(* mov    %rax,0x28(%rdi)                          #! EA = L0x7fffffffc8b8; PC = 0x555555568cef *)
mov L0x7fffffffc8b8 rax;
(* mulx   %r15,%r8,%rcx                            #! PC = 0x555555568cf3 *)
umull rcx r8 r15 rdx;
(* adcx   %r9,%r8                                  #! PC = 0x555555568cf8 *)
adcs carry r8 r9 r8 carry;
(* adox   %rcx,%r10                                #! PC = 0x555555568cfe *)
adcs OF r10 rcx r10 OF;
(* mulx   0x90(%rsi),%r9,%rax                      #! EA = L0x7fffffffc9f0; Value = 0x0000ffffeffccf6b; PC = 0x555555568d04 *)
umull rax r9 L0x7fffffffc9f0 rdx;
(* adcx   %r10,%r9                                 #! PC = 0x555555568d0d *)
adcs carry r9 r10 r9 carry;
(* adox   %rax,%r11                                #! PC = 0x555555568d13 *)
adcs OF r11 rax r11 OF;
(* mulx   0x98(%rsi),%r10,%rcx                     #! EA = L0x7fffffffc9f8; Value = 0x00007ffff7fb79b8; PC = 0x555555568d19 *)
umull rcx r10 L0x7fffffffc9f8 rdx;
(* adcx   %r11,%r10                                #! PC = 0x555555568d22 *)
adcs carry r10 r11 r10 carry;
(* adox   %rcx,%r12                                #! PC = 0x555555568d28 *)
adcs OF r12 rcx r12 OF;
(* mulx   0xa0(%rsi),%r11,%rax                     #! EA = L0x7fffffffca00; Value = 0x0000fffff7dc7928; PC = 0x555555568d2e *)
umull rax r11 L0x7fffffffca00 rdx;
(* adcx   %r12,%r11                                #! PC = 0x555555568d37 *)
adcs carry r11 r12 r11 carry;
(* adox   %r13,%rax                                #! PC = 0x555555568d3d *)
adcs OF rax r13 rax OF;
(* mulx   0xa8(%rsi),%r12,%r13                     #! EA = L0x7fffffffca08; Value = 0x00007ffff7fdac8a; PC = 0x555555568d43 *)
umull r13 r12 L0x7fffffffca08 rdx;
(* mov    %rax,%rdx                                #! PC = 0x555555568d4c *)
mov rdx rax;
(* adcx   %rax,%r12                                #! PC = 0x555555568d4f *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555568d55 *)
adcs OF r13 rbp r13 OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r13                                #! PC = 0x555555568d5b *)
adcs carry r13 rbp r13 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* mov    %r8,0x30(%rdi)                           #! EA = L0x7fffffffc8c0; PC = 0x555555568d61 *)
mov L0x7fffffffc8c0 r8;
(* mov    %r9,0x38(%rdi)                           #! EA = L0x7fffffffc8c8; PC = 0x555555568d65 *)
mov L0x7fffffffc8c8 r9;
(* mov    %r10,0x40(%rdi)                          #! EA = L0x7fffffffc8d0; PC = 0x555555568d69 *)
mov L0x7fffffffc8d0 r10;
(* mov    %r11,0x48(%rdi)                          #! EA = L0x7fffffffc8d8; PC = 0x555555568d6d *)
mov L0x7fffffffc8d8 r11;
(* mov    %r12,0x50(%rdi)                          #! EA = L0x7fffffffc8e0; PC = 0x555555568d71 *)
mov L0x7fffffffc8e0 r12;
(* mov    %r13,0x58(%rdi)                          #! EA = L0x7fffffffc8e8; PC = 0x555555568d75 *)
mov L0x7fffffffc8e8 r13;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x555555568d79 *)
#repz retq                                      #! 0x555555568d79 = 0x555555568d79;


(* mul_384(tx, aa->im, bb->im) *)

assert limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                 L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                 L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] =
       ((limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                   L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08]) *
        (limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                   L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68]))
    && limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
		 L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
       limbs 64 [m0, m1, m2, m3, m4, m5];


rcut and [limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with precondition;

ghost L0x7fffffffcee0o@uint64, L0x7fffffffcee8o@uint64, L0x7fffffffcef0o@uint64,
      L0x7fffffffcef8o@uint64, L0x7fffffffcf00o@uint64, L0x7fffffffcf08o@uint64,
      L0x7fffffffcf10o@uint64, L0x7fffffffcf18o@uint64, L0x7fffffffcf20o@uint64,
      L0x7fffffffcf28o@uint64, L0x7fffffffcf30o@uint64, L0x7fffffffcf38o@uint64 :
      and [L0x7fffffffcee0o=L0x7fffffffcee0, L0x7fffffffcee8o=L0x7fffffffcee8,
           L0x7fffffffcef0o=L0x7fffffffcef0, L0x7fffffffcef8o=L0x7fffffffcef8,
           L0x7fffffffcf00o=L0x7fffffffcf00, L0x7fffffffcf08o=L0x7fffffffcf08,
           L0x7fffffffcf10o=L0x7fffffffcf10, L0x7fffffffcf18o=L0x7fffffffcf18,
           L0x7fffffffcf20o=L0x7fffffffcf20, L0x7fffffffcf28o=L0x7fffffffcf28,
           L0x7fffffffcf30o=L0x7fffffffcf30, L0x7fffffffcf38o=L0x7fffffffcf38]
   && and [L0x7fffffffcee0o=L0x7fffffffcee0, L0x7fffffffcee8o=L0x7fffffffcee8,
           L0x7fffffffcef0o=L0x7fffffffcef0, L0x7fffffffcef8o=L0x7fffffffcef8,
           L0x7fffffffcf00o=L0x7fffffffcf00, L0x7fffffffcf08o=L0x7fffffffcf08,
           L0x7fffffffcf10o=L0x7fffffffcf10, L0x7fffffffcf18o=L0x7fffffffcf18,
           L0x7fffffffcf20o=L0x7fffffffcf20, L0x7fffffffcf28o=L0x7fffffffcf28,
           L0x7fffffffcf30o=L0x7fffffffcf30, L0x7fffffffcf38o=L0x7fffffffcf38];


(* #lea    0x20(%rsp),%rdx                          #! PC = 0x555555568881 *)
#lea    %%EA,%%rdx                          #! 0x555555568881 = 0x555555568881;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556888e *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556888e = 0x55555556888e;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcee0; Value = 0x564b730fdd2de26d; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcee0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcee8; Value = 0x43c276354d650479; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcee8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcef0; Value = 0x3cfc8c1504aedc72; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcef0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcef8; Value = 0xcf6425a8cc1349db; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcef8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcf00; Value = 0xf945e7aee00f8a30; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcf00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcf08; Value = 0x118688afc4df2662; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcf08;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcf10; Value = 0x2ee8fd343e7cfed9; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcf10;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x58e5a600d638d0b0; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcf18; Value = 0x8496178916825cdb; PC = 0x555555568302 *)
mov r15 L0x7fffffffcf18;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x3e651d244f3ab8bf; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcf20; Value = 0x09383a21f4e40136; PC = 0x55555556830a *)
mov rax L0x7fffffffcf20;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x5d518f8967163116; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcf28; Value = 0xf4439bb974529074; PC = 0x555555568312 *)
mov rbx L0x7fffffffcf28;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0xb53d341aeb6d5c1e; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcf30; Value = 0x197a9647b4e0f029; PC = 0x55555556831a *)
mov rbp L0x7fffffffcf30;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0xeeb5510c571a0477; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcf38; Value = 0x0000000180008b3a; PC = 0x555555568322 *)
mov rsi L0x7fffffffcf38;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0xc0745b607cdfbfad; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x55555556832a *)
mov L0x7fffffffcee0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x2a8ea316056f7b02; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcee8; PC = 0x555555568334 *)
mov L0x7fffffffcee8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0xcc3508cc345df85d; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555568340 *)
mov L0x7fffffffcef0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0xebf4492765874c4b; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x55555556834c *)
mov L0x7fffffffcef8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x15e07e785607836f; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555568358 *)
mov L0x7fffffffcf00 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0x8e67938e5241a65d; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555568364 *)
mov L0x7fffffffcf08 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x0000000040002fbe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcf10; PC = 0x55555556838b *)
mov L0x7fffffffcf10 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcf18; PC = 0x555555568392 *)
mov L0x7fffffffcf18 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x555555568399 *)
mov L0x7fffffffcf20 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x5555555683a0 *)
mov L0x7fffffffcf28 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x5555555683a7 *)
mov L0x7fffffffcf30 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x5555555683ab *)
mov L0x7fffffffcf38 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                         L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                         L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                         L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38])+
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcee0o, L0x7fffffffcee8o, L0x7fffffffcef0o,
                        L0x7fffffffcef8o, L0x7fffffffcf00o, L0x7fffffffcf08o,
                        L0x7fffffffcf10o, L0x7fffffffcf18o, L0x7fffffffcf20o,
                        L0x7fffffffcf28o, L0x7fffffffcf30o, L0x7fffffffcf38o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                         L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                         L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                         L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38])+
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffcee0o, L0x7fffffffcee8o, L0x7fffffffcef0o,
                        L0x7fffffffcef8o, L0x7fffffffcf00o, L0x7fffffffcf08o,
                        L0x7fffffffcf10o, L0x7fffffffcf18o, L0x7fffffffcf20o,
                        L0x7fffffffcf28o, L0x7fffffffcf30o, L0x7fffffffcf38o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;


rcut and [limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ];

ghost L0x7fffffffcee0p@uint64, L0x7fffffffcee8p@uint64, L0x7fffffffcef0p@uint64,
      L0x7fffffffcef8p@uint64, L0x7fffffffcf00p@uint64, L0x7fffffffcf08p@uint64,
      L0x7fffffffcf10p@uint64, L0x7fffffffcf18p@uint64, L0x7fffffffcf20p@uint64,
      L0x7fffffffcf28p@uint64, L0x7fffffffcf30p@uint64, L0x7fffffffcf38p@uint64 :
      and [L0x7fffffffcee0p=L0x7fffffffcee0, L0x7fffffffcee8p=L0x7fffffffcee8,
           L0x7fffffffcef0p=L0x7fffffffcef0, L0x7fffffffcef8p=L0x7fffffffcef8,
           L0x7fffffffcf00p=L0x7fffffffcf00, L0x7fffffffcf08p=L0x7fffffffcf08,
           L0x7fffffffcf10p=L0x7fffffffcf10, L0x7fffffffcf18p=L0x7fffffffcf18,
           L0x7fffffffcf20p=L0x7fffffffcf20, L0x7fffffffcf28p=L0x7fffffffcf28,
           L0x7fffffffcf30p=L0x7fffffffcf30, L0x7fffffffcf38p=L0x7fffffffcf38]
   && and [L0x7fffffffcee0p=L0x7fffffffcee0, L0x7fffffffcee8p=L0x7fffffffcee8,
           L0x7fffffffcef0p=L0x7fffffffcef0, L0x7fffffffcef8p=L0x7fffffffcef8,
           L0x7fffffffcf00p=L0x7fffffffcf00, L0x7fffffffcf08p=L0x7fffffffcf08,
           L0x7fffffffcf10p=L0x7fffffffcf10, L0x7fffffffcf18p=L0x7fffffffcf18,
           L0x7fffffffcf20p=L0x7fffffffcf20, L0x7fffffffcf28p=L0x7fffffffcf28,
           L0x7fffffffcf30p=L0x7fffffffcf30, L0x7fffffffcf38p=L0x7fffffffcf38];




(* #lea    (%rdi),%rsi                              #! PC = 0x555555568893 *)
#lea    %%EA,%%rsi                              #! 0x555555568893 = 0x555555568893;
(* #lea    -0x60(%rdi),%rdx                         #! PC = 0x555555568896 *)
#lea    -%%EA,%%rdx                         #! 0x555555568896 = 0x555555568896;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x55555556889a *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x55555556889a = 0x55555556889a;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcee0; Value = 0xfd65cd0f06f511bd; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffcee0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcee8; Value = 0x055d5910fe2a4bb9; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffcee8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcef0; Value = 0xdfaafc8b9d98ab5c; PC = 0x5555555682eb *)
mov r10 L0x7fffffffcef0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcef8; Value = 0x1a26f18de0a5edbc; PC = 0x5555555682ef *)
mov r11 L0x7fffffffcef8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcf00; Value = 0x0a9096a288f585b9; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcf00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcf08; Value = 0x51122d4f47ff66b5; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcf08;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcf10; Value = 0x045a5a1e390d83d6; PC = 0x5555555682fb *)
mov r14 L0x7fffffffcf10;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffce80; Value = 0x00029d8016f7510c; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffce80;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcf18; Value = 0xb8610ebce224647e; PC = 0x555555568302 *)
mov r15 L0x7fffffffcf18;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffce88; Value = 0xfeca4f44241a5b04; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffce88 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcf20; Value = 0x1d43f0fa8f5cb4ea; PC = 0x55555556830a *)
mov rax L0x7fffffffcf20;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffce90; Value = 0xedd388b09448c9b2; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffce90 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcf28; Value = 0xde631d411e4b0d04; PC = 0x555555568312 *)
mov rbx L0x7fffffffcf28;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffce98; Value = 0xa1cf8082a4b406eb; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffce98 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcf30; Value = 0x8b1302b9629f49cc; PC = 0x55555556831a *)
mov rbp L0x7fffffffcf30;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcea0; Value = 0x9b57a752b672124e; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffcea0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcf38; Value = 0x0000000140005b7b; PC = 0x555555568322 *)
mov rsi L0x7fffffffcf38;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcea8; Value = 0xbd07f003e2fc736b; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffcea8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x55555556832a *)
mov L0x7fffffffcee0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffceb0; Value = 0xefce7616273aa5f4; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffceb0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcee8; PC = 0x555555568334 *)
mov L0x7fffffffcee8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffceb8; Value = 0x276d4022818c5963; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffceb8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555568340 *)
mov L0x7fffffffcef0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcec0; Value = 0xdba0f89312063d8e; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffcec0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x55555556834c *)
mov L0x7fffffffcef8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcec8; Value = 0x83de68dc8dc83659; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffcec8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555568358 *)
mov L0x7fffffffcf00 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffced0; Value = 0x96be013f63914270; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffced0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555568364 *)
mov L0x7fffffffcf08 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffced8; Value = 0x000000007ffffbfe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffced8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcf10; PC = 0x55555556838b *)
mov L0x7fffffffcf10 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcf18; PC = 0x555555568392 *)
mov L0x7fffffffcf18 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x555555568399 *)
mov L0x7fffffffcf20 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x5555555683a0 *)
mov L0x7fffffffcf28 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x5555555683a7 *)
mov L0x7fffffffcf30 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x5555555683ab *)
mov L0x7fffffffcf38 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->im -= ret->re *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                         L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                         L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                         L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) +
              (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                         L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                         L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                         L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]))
             (limbs 64 [L0x7fffffffcee0p, L0x7fffffffcee8p, L0x7fffffffcef0p,
                        L0x7fffffffcef8p, L0x7fffffffcf00p, L0x7fffffffcf08p,
                        L0x7fffffffcf10p, L0x7fffffffcf18p, L0x7fffffffcf20p,
                        L0x7fffffffcf28p, L0x7fffffffcf30p, L0x7fffffffcf38p])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                         L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                         L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                         L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) +
              (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                         L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                         L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                         L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]))
             (limbs 64 [L0x7fffffffcee0p, L0x7fffffffcee8p, L0x7fffffffcef0p,
                        L0x7fffffffcef8p, L0x7fffffffcf00p, L0x7fffffffcf08p,
                        L0x7fffffffcf10p, L0x7fffffffcf18p, L0x7fffffffcf20p,
                        L0x7fffffffcf28p, L0x7fffffffcf30p, L0x7fffffffcf38p])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;

rcut and [limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                    L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],

          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;

ghost L0x7fffffffce80o@uint64, L0x7fffffffce88o@uint64, L0x7fffffffce90o@uint64,
      L0x7fffffffce98o@uint64, L0x7fffffffcea0o@uint64, L0x7fffffffcea8o@uint64,
      L0x7fffffffceb0o@uint64, L0x7fffffffceb8o@uint64, L0x7fffffffcec0o@uint64,
      L0x7fffffffcec8o@uint64, L0x7fffffffced0o@uint64, L0x7fffffffced8o@uint64 :
      and [L0x7fffffffce80o=L0x7fffffffce80, L0x7fffffffce88o=L0x7fffffffce88,
           L0x7fffffffce90o=L0x7fffffffce90, L0x7fffffffce98o=L0x7fffffffce98,
           L0x7fffffffcea0o=L0x7fffffffcea0, L0x7fffffffcea8o=L0x7fffffffcea8,
           L0x7fffffffceb0o=L0x7fffffffceb0, L0x7fffffffceb8o=L0x7fffffffceb8,
           L0x7fffffffcec0o=L0x7fffffffcec0, L0x7fffffffcec8o=L0x7fffffffcec8,
           L0x7fffffffced0o=L0x7fffffffced0, L0x7fffffffced8o=L0x7fffffffced8]
   && and [L0x7fffffffce80o=L0x7fffffffce80, L0x7fffffffce88o=L0x7fffffffce88,
           L0x7fffffffce90o=L0x7fffffffce90, L0x7fffffffce98o=L0x7fffffffce98,
           L0x7fffffffcea0o=L0x7fffffffcea0, L0x7fffffffcea8o=L0x7fffffffcea8,
           L0x7fffffffceb0o=L0x7fffffffceb0, L0x7fffffffceb8o=L0x7fffffffceb8,
           L0x7fffffffcec0o=L0x7fffffffcec0, L0x7fffffffcec8o=L0x7fffffffcec8,
           L0x7fffffffced0o=L0x7fffffffced0, L0x7fffffffced8o=L0x7fffffffced8];


(* #lea    -0x60(%rdi),%rsi                         #! PC = 0x55555556889f *)
#lea    -%%EA,%%rsi                         #! 0x55555556889f = 0x55555556889f;
(* #lea    0x20(%rsp),%rdx                          #! PC = 0x5555555688a3 *)
#lea    %%EA,%%rdx                          #! 0x5555555688a3 = 0x5555555688a3;
(* #lea    -0x60(%rdi),%rdi                         #! PC = 0x5555555688a8 *)
#lea    -%%EA,%%rdi                         #! 0x5555555688a8 = 0x5555555688a8;
(* #callq  0x5555555682e0 <__sub_mod_384x384>      #! PC = 0x5555555688ac *)
#callq  0x5555555682e0 <__sub_mod_384x384>      #! 0x5555555688ac = 0x5555555688ac;
(* #! -> SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #endbr64                                         #! PC = 0x5555555682e0 *)
#endbr64                                         #! 0x5555555682e0 = 0x5555555682e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce80; Value = 0x00029d8016f7510c; PC = 0x5555555682e4 *)
mov r8 L0x7fffffffce80;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce88; Value = 0xfeca4f44241a5b04; PC = 0x5555555682e7 *)
mov r9 L0x7fffffffce88;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce90; Value = 0xedd388b09448c9b2; PC = 0x5555555682eb *)
mov r10 L0x7fffffffce90;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce98; Value = 0xa1cf8082a4b406eb; PC = 0x5555555682ef *)
mov r11 L0x7fffffffce98;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcea0; Value = 0x9b57a752b672124e; PC = 0x5555555682f3 *)
mov r12 L0x7fffffffcea0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcea8; Value = 0xbd07f003e2fc736b; PC = 0x5555555682f7 *)
mov r13 L0x7fffffffcea8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffceb0; Value = 0xefce7616273aa5f4; PC = 0x5555555682fb *)
mov r14 L0x7fffffffceb0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffc890; Value = 0x58e5a600d638d0b0; PC = 0x5555555682ff *)
subb carry r8 r8 L0x7fffffffc890;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffceb8; Value = 0x276d4022818c5963; PC = 0x555555568302 *)
mov r15 L0x7fffffffceb8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffc898; Value = 0x3e651d244f3ab8bf; PC = 0x555555568306 *)
sbbs carry r9 r9 L0x7fffffffc898 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcec0; Value = 0xdba0f89312063d8e; PC = 0x55555556830a *)
mov rax L0x7fffffffcec0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffc8a0; Value = 0x5d518f8967163116; PC = 0x55555556830e *)
sbbs carry r10 r10 L0x7fffffffc8a0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcec8; Value = 0x83de68dc8dc83659; PC = 0x555555568312 *)
mov rbx L0x7fffffffcec8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffc8a8; Value = 0xb53d341aeb6d5c1e; PC = 0x555555568316 *)
sbbs carry r11 r11 L0x7fffffffc8a8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffced0; Value = 0x96be013f63914270; PC = 0x55555556831a *)
mov rbp L0x7fffffffced0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffc8b0; Value = 0xeeb5510c571a0477; PC = 0x55555556831e *)
sbbs carry r12 r12 L0x7fffffffc8b0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffced8; Value = 0x000000007ffffbfe; PC = 0x555555568322 *)
mov rsi L0x7fffffffced8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffc8b8; Value = 0xc0745b607cdfbfad; PC = 0x555555568326 *)
sbbs carry r13 r13 L0x7fffffffc8b8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce80; PC = 0x55555556832a *)
mov L0x7fffffffce80 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffc8c0; Value = 0x2a8ea316056f7b02; PC = 0x55555556832d *)
sbbs carry r14 r14 L0x7fffffffc8c0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555568331 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce88; PC = 0x555555568334 *)
mov L0x7fffffffce88 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffc8c8; Value = 0xcc3508cc345df85d; PC = 0x555555568338 *)
sbbs carry r15 r15 L0x7fffffffc8c8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556833c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce90; PC = 0x555555568340 *)
mov L0x7fffffffce90 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffc8d0; Value = 0xebf4492765874c4b; PC = 0x555555568344 *)
sbbs carry rax rax L0x7fffffffc8d0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555568348 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce98; PC = 0x55555556834c *)
mov L0x7fffffffce98 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffc8d8; Value = 0x15e07e785607836f; PC = 0x555555568350 *)
sbbs carry rbx rbx L0x7fffffffc8d8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555568354 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcea0; PC = 0x555555568358 *)
mov L0x7fffffffcea0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffc8e0; Value = 0x8e67938e5241a65d; PC = 0x55555556835c *)
sbbs carry rbp rbp L0x7fffffffc8e0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555568360 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcea8; PC = 0x555555568364 *)
mov L0x7fffffffcea8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffc8e8; Value = 0x0000000040002fbe; PC = 0x555555568368 *)
sbbs carry rsi rsi L0x7fffffffc8e8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556836c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555568370 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555568373 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555568376 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555568379 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556837c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556837f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555568382 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555568385 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555568388 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffceb0; PC = 0x55555556838b *)
mov L0x7fffffffceb0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556838f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffceb8; PC = 0x555555568392 *)
mov L0x7fffffffceb8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555568396 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcec0; PC = 0x555555568399 *)
mov L0x7fffffffcec0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556839d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcec8; PC = 0x5555555683a0 *)
mov L0x7fffffffcec8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555683a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffced0; PC = 0x5555555683a7 *)
mov L0x7fffffffced0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffced8; PC = 0x5555555683ab *)
mov L0x7fffffffced8 rsi;
(* #! <- SP = 0x7fffffffc868 *)
#! 0x7fffffffc868 = 0x7fffffffc868;
(* #repz retq                                      #! PC = 0x5555555683af *)
#repz retq                                      #! 0x5555555683af = 0x5555555683af;


(* ret->re -= tx *)

assert true
    && eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                         L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                         L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                         L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffce80o, L0x7fffffffce88o, L0x7fffffffce90o,
                        L0x7fffffffce98o, L0x7fffffffcea0o, L0x7fffffffcea8o,
                        L0x7fffffffceb0o, L0x7fffffffceb8o, L0x7fffffffcec0o,
                        L0x7fffffffcec8o, L0x7fffffffced0o, L0x7fffffffced8o])
             (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                          m0,   m1,   m2,   m3,   m4,   m5]);

assume eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                         L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                         L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                         L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
              (limbs 64 [L0x7fffffffc890, L0x7fffffffc898, L0x7fffffffc8a0,
                         L0x7fffffffc8a8, L0x7fffffffc8b0, L0x7fffffffc8b8,
                         L0x7fffffffc8c0, L0x7fffffffc8c8, L0x7fffffffc8d0,
                         L0x7fffffffc8d8, L0x7fffffffc8e0, L0x7fffffffc8e8]))
             (limbs 64 [L0x7fffffffce80o, L0x7fffffffce88o, L0x7fffffffce90o,
                        L0x7fffffffce98o, L0x7fffffffcea0o, L0x7fffffffcea8o,
                        L0x7fffffffceb0o, L0x7fffffffceb8o, L0x7fffffffcec0o,
                        L0x7fffffffcec8o, L0x7fffffffced0o, L0x7fffffffced8o])
             (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]) && true;



(* mul_382x(ret[2], aa, bb) *)

assert and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
                   (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) * U)
                  ((limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                              L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
	            limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                              L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U) *
      	           (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                              L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
                    limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                              L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U))
                  [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5], U * U + 1],
            eqmod (limbs 64 [L0x7fffffffc9b0, L0x7fffffffc9b8, L0x7fffffffc9c0,
                             L0x7fffffffc9c8, L0x7fffffffc9d0, L0x7fffffffc9d8] +
                   limbs 64 [L0x7fffffffc9e0, L0x7fffffffc9e8, L0x7fffffffc9f0,
                             L0x7fffffffc9f8, L0x7fffffffca00, L0x7fffffffca08] * U)
	          (limbs 64 [a00, a01, a02, a03, a04, a05] +
                   limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                   limbs 64 [a40, a41, a42, a43, a44, a45] +
                   limbs 64 [a50, a51, a52, a53, a54, a55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
	    eqmod (limbs 64 [L0x7fffffffca10, L0x7fffffffca18, L0x7fffffffca20,
                             L0x7fffffffca28, L0x7fffffffca30, L0x7fffffffca38] +
                   limbs 64 [L0x7fffffffca40, L0x7fffffffca48, L0x7fffffffca50,
                             L0x7fffffffca58, L0x7fffffffca60, L0x7fffffffca68] * U)
	          (limbs 64 [b00, b01, b02, b03, b04, b05] +
                   limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                   limbs 64 [b40, b41, b42, b43, b44, b45] +
                   limbs 64 [b50, b51, b52, b53, b54, b55] * U)
                  [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1]]
    && true;


rcut and [limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                    L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                    L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;


ghost L0x7fffffffce80q@uint64, L0x7fffffffce88q@uint64, L0x7fffffffce90q@uint64,
      L0x7fffffffce98q@uint64, L0x7fffffffcea0q@uint64, L0x7fffffffcea8q@uint64,
      L0x7fffffffceb0q@uint64, L0x7fffffffceb8q@uint64, L0x7fffffffcec0q@uint64,
      L0x7fffffffcec8q@uint64, L0x7fffffffced0q@uint64, L0x7fffffffced8q@uint64,
      L0x7fffffffcee0q@uint64, L0x7fffffffcee8q@uint64, L0x7fffffffcef0q@uint64,
      L0x7fffffffcef8q@uint64, L0x7fffffffcf00q@uint64, L0x7fffffffcf08q@uint64,
      L0x7fffffffcf10q@uint64, L0x7fffffffcf18q@uint64, L0x7fffffffcf20q@uint64,
      L0x7fffffffcf28q@uint64, L0x7fffffffcf30q@uint64, L0x7fffffffcf38q@uint64 :
      and[L0x7fffffffce80q=L0x7fffffffce80, L0x7fffffffce88q=L0x7fffffffce88,
          L0x7fffffffce90q=L0x7fffffffce90, L0x7fffffffce98q=L0x7fffffffce98,
          L0x7fffffffcea0q=L0x7fffffffcea0, L0x7fffffffcea8q=L0x7fffffffcea8,
          L0x7fffffffceb0q=L0x7fffffffceb0, L0x7fffffffceb8q=L0x7fffffffceb8,
          L0x7fffffffcec0q=L0x7fffffffcec0, L0x7fffffffcec8q=L0x7fffffffcec8,
          L0x7fffffffced0q=L0x7fffffffced0, L0x7fffffffced8q=L0x7fffffffced8,
          L0x7fffffffcee0q=L0x7fffffffcee0, L0x7fffffffcee8q=L0x7fffffffcee8,
          L0x7fffffffcef0q=L0x7fffffffcef0, L0x7fffffffcef8q=L0x7fffffffcef8,
          L0x7fffffffcf00q=L0x7fffffffcf00, L0x7fffffffcf08q=L0x7fffffffcf08,
          L0x7fffffffcf10q=L0x7fffffffcf10, L0x7fffffffcf18q=L0x7fffffffcf18,
          L0x7fffffffcf20q=L0x7fffffffcf20, L0x7fffffffcf28q=L0x7fffffffcf28,
          L0x7fffffffcf30q=L0x7fffffffcf30, L0x7fffffffcf38q=L0x7fffffffcf38]
   && and[L0x7fffffffce80q=L0x7fffffffce80, L0x7fffffffce88q=L0x7fffffffce88,
          L0x7fffffffce90q=L0x7fffffffce90, L0x7fffffffce98q=L0x7fffffffce98,
          L0x7fffffffcea0q=L0x7fffffffcea0, L0x7fffffffcea8q=L0x7fffffffcea8,
          L0x7fffffffceb0q=L0x7fffffffceb0, L0x7fffffffceb8q=L0x7fffffffceb8,
          L0x7fffffffcec0q=L0x7fffffffcec0, L0x7fffffffcec8q=L0x7fffffffcec8,
          L0x7fffffffced0q=L0x7fffffffced0, L0x7fffffffced8q=L0x7fffffffced8,
          L0x7fffffffcee0q=L0x7fffffffcee0, L0x7fffffffcee8q=L0x7fffffffcee8,
          L0x7fffffffcef0q=L0x7fffffffcef0, L0x7fffffffcef8q=L0x7fffffffcef8,
          L0x7fffffffcf00q=L0x7fffffffcf00, L0x7fffffffcf08q=L0x7fffffffcf08,
          L0x7fffffffcf10q=L0x7fffffffcf10, L0x7fffffffcf18q=L0x7fffffffcf18,
          L0x7fffffffcf20q=L0x7fffffffcf20, L0x7fffffffcf28q=L0x7fffffffcf28,
          L0x7fffffffcf30q=L0x7fffffffcf30, L0x7fffffffcf38q=L0x7fffffffcf38];



(* #lea    0x88(%rsp),%r8                           #! PC = 0x5555555688b1 *)
#lea    %%EA,%%r8                           #! 0x5555555688b1 = 0x5555555688b1;
(* #lea    0x30(%r8),%rsp                           #! PC = 0x5555555688d0 *)
#lea    %%EA,%rsp                           #! 0x5555555688d0 = 0x5555555688d0;
(* #! <- SP = 0x7fffffffc928 *)
#! 0x7fffffffc928 = 0x7fffffffc928;
(* #repz retq                                      #! PC = 0x5555555688d4 *)
#repz retq                                      #! 0x5555555688d4 = 0x5555555688d4;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #retq                                           #! PC = 0x55555555d7c8 *)
#retq                                           #! 0x55555555d7c8 = 0x55555555d7c8;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f8d1 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f8d1 = 0x55555555f8d1;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce80; Value = 0xa71cf77f40be805c; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffce80;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce88; Value = 0xc065321fd4dfa244; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffce88;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce90; Value = 0x9081f9272d32989c; PC = 0x5555555675eb *)
mov r10 L0x7fffffffce90;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce98; Value = 0xec924c67b946aacd; PC = 0x5555555675ef *)
mov r11 L0x7fffffffce98;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcea0; Value = 0xaca256465f580dd6; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcea0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcea8; Value = 0xfc9394a3661cb3bd; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcea8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffceb0; Value = 0xc53fd30021cb2af1; PC = 0x5555555675fb *)
mov r14 L0x7fffffffceb0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffca70; Value = 0xd465bc6c3a225850; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffca70;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffceb8; Value = 0x5b3837564d2e6106; PC = 0x555555567602 *)
mov r15 L0x7fffffffceb8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffca78; Value = 0x7677a15c722c1b1a; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffca78 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcec0; Value = 0xefacaf6bac7ef142; PC = 0x55555556760a *)
mov rax L0x7fffffffcec0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffca80; Value = 0x85ce2f1bfa4b484a; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffca80 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcec8; Value = 0x6dfdea6437c0b2e9; PC = 0x555555567612 *)
mov rbx L0x7fffffffcec8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffca88; Value = 0xd0a5999000ab6121; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffca88 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffced0; Value = 0x08566db1114f9c13; PC = 0x55555556761a *)
mov rbp L0x7fffffffced0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffca90; Value = 0x6680073b4b768614; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffca90 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffced8; Value = 0x000000003fffcc40; PC = 0x555555567622 *)
mov rsi L0x7fffffffced8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffca98; Value = 0x341b93a3d8a01fb6; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffca98 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce80; PC = 0x55555556762a *)
mov L0x7fffffffce80 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcaa0; Value = 0xa89b10a97b35714b; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcaa0 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce88; PC = 0x555555567634 *)
mov L0x7fffffffce88 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcaa8; Value = 0xc6afac09dce2ecc2; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcaa8 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce90; PC = 0x555555567640 *)
mov L0x7fffffffce90 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcab0; Value = 0x1695212a6354549c; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcab0 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce98; PC = 0x55555556764c *)
mov L0x7fffffffce98 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcab8; Value = 0xb4dd81f77f8668c0; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcab8 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcea0; PC = 0x555555567658 *)
mov L0x7fffffffcea0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcac0; Value = 0x4504a7d60ddd9fa4; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcac0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcea8; PC = 0x555555567664 *)
mov L0x7fffffffcea8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcac8; Value = 0x1a0111ea397fe69a; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcac8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffceb0; PC = 0x55555556768b *)
mov L0x7fffffffceb0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffceb8; PC = 0x555555567692 *)
mov L0x7fffffffceb8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcec0; PC = 0x555555567699 *)
mov L0x7fffffffcec0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcec8; PC = 0x5555555676a0 *)
mov L0x7fffffffcec8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffced0; PC = 0x5555555676a7 *)
mov L0x7fffffffced0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffced8; PC = 0x5555555676ab *)
mov L0x7fffffffced8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f8e4 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f8e4 = 0x55555555f8e4;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcee0; Value = 0xfd632f8eeffdc0b1; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcee0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcee8; Value = 0x069309ccda0ff0b5; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcee8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcef0; Value = 0xf1d773db094fe1a9; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcef0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcef8; Value = 0x7857710b3bf1e6d0; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcef8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcf00; Value = 0x6f38ef4fd283736a; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcf00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcf08; Value = 0x940a3d4b6502f349; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcf08;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcf10; Value = 0x148be40811d2dde1; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcf10;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcad0; Value = 0xfe4ee126b5827eb0; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcad0;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcf18; Value = 0x90f3ce9a60980b1a; PC = 0x555555567602 *)
mov r15 L0x7fffffffcf18;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcad8; Value = 0x61d13a9247083c0a; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcad8 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcf20; Value = 0x41a2f8677d56775c; PC = 0x55555556760a *)
mov rax L0x7fffffffcf20;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcae0; Value = 0x328aa9ffac86ffff; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcae0 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcf28; Value = 0x5a84b4649082d6aa; PC = 0x555555567612 *)
mov rbx L0x7fffffffcf28;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcae8; Value = 0xc331ab7e800252c9; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcae8 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcf30; Value = 0xf4550179ff0e075c; PC = 0x55555556761a *)
mov rbp L0x7fffffffcf30;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcaf0; Value = 0xec98aace8f245eff; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcaf0 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcf38; Value = 0x00000000c0005f7c; PC = 0x555555567622 *)
mov rsi L0x7fffffffcf38;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcaf8; Value = 0x4026540007352be9; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcaf8 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x55555556762a *)
mov L0x7fffffffcee0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb00; Value = 0x8e43eadb2d666662; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcb00 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcee8; PC = 0x555555567634 *)
mov L0x7fffffffcee8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb08; Value = 0x65aa9e65514286e0; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcb08 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555567640 *)
mov L0x7fffffffcef0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb10; Value = 0xdf01b83d2dc48d80; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcb10 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x55555556764c *)
mov L0x7fffffffcef8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb18; Value = 0xa5329109a10a0689; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcb18 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555567658 *)
mov L0x7fffffffcf00 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb20; Value = 0x82d3025c702bb221; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcb20 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555567664 *)
mov L0x7fffffffcf08 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb28; Value = 0x000000007ffff7fd; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcb28 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcf10; PC = 0x55555556768b *)
mov L0x7fffffffcf10 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcf18; PC = 0x555555567692 *)
mov L0x7fffffffcf18 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x555555567699 *)
mov L0x7fffffffcf20 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x5555555676a0 *)
mov L0x7fffffffcf28 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x5555555676a7 *)
mov L0x7fffffffcf30 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x5555555676ab *)
mov L0x7fffffffcf38 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;


(* sub_fp2x2(ret[2], ret[2], t0 *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
		   (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                              L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                              L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                              L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
	 	   (limbs 64 [L0x7fffffffce80q, L0x7fffffffce88q, L0x7fffffffce90q,
                              L0x7fffffffce98q, L0x7fffffffcea0q, L0x7fffffffcea8q,
                              L0x7fffffffceb0q, L0x7fffffffceb8q, L0x7fffffffcec0q,
                              L0x7fffffffcec8q, L0x7fffffffced0q, L0x7fffffffced8q])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) +
		   (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                              L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                              L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                              L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]))
	           (limbs 64 [L0x7fffffffcee0q, L0x7fffffffcee8q, L0x7fffffffcef0q,
                              L0x7fffffffcef8q, L0x7fffffffcf00q, L0x7fffffffcf08q,
                              L0x7fffffffcf10q, L0x7fffffffcf18q, L0x7fffffffcf20q,
                              L0x7fffffffcf28q, L0x7fffffffcf30q, L0x7fffffffcf38q])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];
		   
assume and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
		   (limbs 64 [L0x7fffffffca70, L0x7fffffffca78, L0x7fffffffca80,
                              L0x7fffffffca88, L0x7fffffffca90, L0x7fffffffca98,
                              L0x7fffffffcaa0, L0x7fffffffcaa8, L0x7fffffffcab0,
                              L0x7fffffffcab8, L0x7fffffffcac0, L0x7fffffffcac8]))
	 	   (limbs 64 [L0x7fffffffce80q, L0x7fffffffce88q, L0x7fffffffce90q,
                              L0x7fffffffce98q, L0x7fffffffcea0q, L0x7fffffffcea8q,
                              L0x7fffffffceb0q, L0x7fffffffceb8q, L0x7fffffffcec0q,
                              L0x7fffffffcec8q, L0x7fffffffced0q, L0x7fffffffced8q])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) +
		   (limbs 64 [L0x7fffffffcad0, L0x7fffffffcad8, L0x7fffffffcae0,
                              L0x7fffffffcae8, L0x7fffffffcaf0, L0x7fffffffcaf8,
                              L0x7fffffffcb00, L0x7fffffffcb08, L0x7fffffffcb10,
                              L0x7fffffffcb18, L0x7fffffffcb20, L0x7fffffffcb28]))
	           (limbs 64 [L0x7fffffffcee0q, L0x7fffffffcee8q, L0x7fffffffcef0q,
                              L0x7fffffffcef8q, L0x7fffffffcf00q, L0x7fffffffcf08q,
                              L0x7fffffffcf10q, L0x7fffffffcf18q, L0x7fffffffcf20q,
                              L0x7fffffffcf28q, L0x7fffffffcf30q, L0x7fffffffcf38q])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;


rcut and [limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                    L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                    L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;


ghost L0x7fffffffce80r@uint64, L0x7fffffffce88r@uint64, L0x7fffffffce90r@uint64,
      L0x7fffffffce98r@uint64, L0x7fffffffcea0r@uint64, L0x7fffffffcea8r@uint64,
      L0x7fffffffceb0r@uint64, L0x7fffffffceb8r@uint64, L0x7fffffffcec0r@uint64,
      L0x7fffffffcec8r@uint64, L0x7fffffffced0r@uint64, L0x7fffffffced8r@uint64,
      L0x7fffffffcee0r@uint64, L0x7fffffffcee8r@uint64, L0x7fffffffcef0r@uint64,
      L0x7fffffffcef8r@uint64, L0x7fffffffcf00r@uint64, L0x7fffffffcf08r@uint64,
      L0x7fffffffcf10r@uint64, L0x7fffffffcf18r@uint64, L0x7fffffffcf20r@uint64,
      L0x7fffffffcf28r@uint64, L0x7fffffffcf30r@uint64, L0x7fffffffcf38r@uint64 :
      and[L0x7fffffffce80r=L0x7fffffffce80, L0x7fffffffce88r=L0x7fffffffce88,
          L0x7fffffffce90r=L0x7fffffffce90, L0x7fffffffce98r=L0x7fffffffce98,
          L0x7fffffffcea0r=L0x7fffffffcea0, L0x7fffffffcea8r=L0x7fffffffcea8,
          L0x7fffffffceb0r=L0x7fffffffceb0, L0x7fffffffceb8r=L0x7fffffffceb8,
          L0x7fffffffcec0r=L0x7fffffffcec0, L0x7fffffffcec8r=L0x7fffffffcec8,
          L0x7fffffffced0r=L0x7fffffffced0, L0x7fffffffced8r=L0x7fffffffced8,
          L0x7fffffffcee0r=L0x7fffffffcee0, L0x7fffffffcee8r=L0x7fffffffcee8,
          L0x7fffffffcef0r=L0x7fffffffcef0, L0x7fffffffcef8r=L0x7fffffffcef8,
          L0x7fffffffcf00r=L0x7fffffffcf00, L0x7fffffffcf08r=L0x7fffffffcf08,
          L0x7fffffffcf10r=L0x7fffffffcf10, L0x7fffffffcf18r=L0x7fffffffcf18,
          L0x7fffffffcf20r=L0x7fffffffcf20, L0x7fffffffcf28r=L0x7fffffffcf28,
          L0x7fffffffcf30r=L0x7fffffffcf30, L0x7fffffffcf38r=L0x7fffffffcf38]
   && and[L0x7fffffffce80r=L0x7fffffffce80, L0x7fffffffce88r=L0x7fffffffce88,
          L0x7fffffffce90r=L0x7fffffffce90, L0x7fffffffce98r=L0x7fffffffce98,
          L0x7fffffffcea0r=L0x7fffffffcea0, L0x7fffffffcea8r=L0x7fffffffcea8,
          L0x7fffffffceb0r=L0x7fffffffceb0, L0x7fffffffceb8r=L0x7fffffffceb8,
          L0x7fffffffcec0r=L0x7fffffffcec0, L0x7fffffffcec8r=L0x7fffffffcec8,
          L0x7fffffffced0r=L0x7fffffffced0, L0x7fffffffced8r=L0x7fffffffced8,
          L0x7fffffffcee0r=L0x7fffffffcee0, L0x7fffffffcee8r=L0x7fffffffcee8,
          L0x7fffffffcef0r=L0x7fffffffcef0, L0x7fffffffcef8r=L0x7fffffffcef8,
          L0x7fffffffcf00r=L0x7fffffffcf00, L0x7fffffffcf08r=L0x7fffffffcf08,
          L0x7fffffffcf10r=L0x7fffffffcf10, L0x7fffffffcf18r=L0x7fffffffcf18,
          L0x7fffffffcf20r=L0x7fffffffcf20, L0x7fffffffcf28r=L0x7fffffffcf28,
          L0x7fffffffcf30r=L0x7fffffffcf30, L0x7fffffffcf38r=L0x7fffffffcf38];


(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f8f7 *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f8f7 = 0x55555555f8f7;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce80; Value = 0xd2b73b13069c280c; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffce80;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce88; Value = 0x49ed90c362b38729; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffce88;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce90; Value = 0x0ab3ca0b32e75052; PC = 0x5555555675eb *)
mov r10 L0x7fffffffce90;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce98; Value = 0x1becb2d7b89b49ac; PC = 0x5555555675ef *)
mov r11 L0x7fffffffce98;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcea0; Value = 0x46224f0b13e187c2; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcea0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcea8; Value = 0xc87800ff8d7c9407; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcea8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffceb0; Value = 0xd6a3c256a6956451; PC = 0x5555555675fb *)
mov r14 L0x7fffffffceb0;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcbf0; Value = 0x000000013b58c9fb; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcbf0;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffceb8; Value = 0xb3348b4b219f7443; PC = 0x555555567602 *)
mov r15 L0x7fffffffceb8;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcbf8; Value = 0x731fa0a13ec97a9c; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcbf8 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcec0; Value = 0x404860e23fdb92c9; PC = 0x55555556760a *)
mov rax L0x7fffffffcec0;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc00; Value = 0xbc9009f40281ea12; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcc00 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcec8; Value = 0x1d97b3f1abbf5ce9; PC = 0x555555567612 *)
mov rbx L0x7fffffffcec8;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc08; Value = 0xa368010299f5bdf5; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcc08 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffced0; Value = 0x0e6d6d9146bda946; PC = 0x55555556761a *)
mov rbp L0x7fffffffced0;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc10; Value = 0x7796c22defa0bb30; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcc10 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffced8; Value = 0x000000003fffcc40; PC = 0x555555567622 *)
mov rsi L0x7fffffffced8;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc18; Value = 0x91247049dd688209; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcc18 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce80; PC = 0x55555556762a *)
mov L0x7fffffffce80 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc20; Value = 0xfee1111b8a25234b; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcc20 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce88; PC = 0x555555567634 *)
mov L0x7fffffffce88 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc28; Value = 0xe2ce02807f3744cd; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcc28 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce90; PC = 0x555555567640 *)
mov L0x7fffffffce90 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc30; Value = 0x3e96014420fa5cfb; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcc30 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce98; PC = 0x55555556764c *)
mov L0x7fffffffce98 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc38; Value = 0xd8020000863f397e; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcc38 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcea0; PC = 0x555555567658 *)
mov L0x7fffffffcea0 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcc40; Value = 0x000000003fffffff; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcc40 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcea8; PC = 0x555555567664 *)
mov L0x7fffffffcea8 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcc48; Value = 0x0000000000000000; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcc48 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffceb0; PC = 0x55555556768b *)
mov L0x7fffffffceb0 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffceb8; PC = 0x555555567692 *)
mov L0x7fffffffceb8 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcec0; PC = 0x555555567699 *)
mov L0x7fffffffcec0 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcec8; PC = 0x5555555676a0 *)
mov L0x7fffffffcec8 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffced0; PC = 0x5555555676a7 *)
mov L0x7fffffffced0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffced8; PC = 0x5555555676ab *)
mov L0x7fffffffced8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x555555567700 <sub_mod_384x384>        #! PC = 0x55555555f90a *)
#callq  0x555555567700 <sub_mod_384x384>        #! 0x55555555f90a = 0x55555555f90a;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x555555567700 *)
#endbr64                                         #! 0x555555567700 = 0x555555567700;
(* #callq  0x5555555675e0 <__sub_mod_384x384>      #! PC = 0x555555567712 *)
#callq  0x5555555675e0 <__sub_mod_384x384>      #! 0x555555567712 = 0x555555567712;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x5555555675e0 *)
#endbr64                                         #! 0x5555555675e0 = 0x5555555675e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcee0; Value = 0xff144e683a7b4201; PC = 0x5555555675e4 *)
mov r8 L0x7fffffffcee0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcee8; Value = 0xa4c1cf3a9307b4aa; PC = 0x5555555675e7 *)
mov r9 L0x7fffffffcee8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcef0; Value = 0xbf4cc9db5cc8e1a9; PC = 0x5555555675eb *)
mov r10 L0x7fffffffcef0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcef8; Value = 0xb525c58cbbef9407; PC = 0x5555555675ef *)
mov r11 L0x7fffffffcef8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcf00; Value = 0x82a04481435f146a; PC = 0x5555555675f3 *)
mov r12 L0x7fffffffcf00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcf08; Value = 0x53e3e94b5dcdc75f; PC = 0x5555555675f7 *)
mov r13 L0x7fffffffcf08;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcf10; Value = 0x8647f92ce46c777f; PC = 0x5555555675fb *)
mov r14 L0x7fffffffcf10;
(* sub    (%rdx),%r8                               #! EA = L0x7fffffffcc50; Value = 0xff27587ad6418eb0; PC = 0x5555555675ff *)
subb carry r8 r8 L0x7fffffffcc50;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcf18; Value = 0x2b4930350f558439; PC = 0x555555567602 *)
mov r15 L0x7fffffffcf18;
(* sbb    0x8(%rdx),%r9                            #! EA = L0x7fffffffcc58; Value = 0xbdcb81422f6412ee; PC = 0x555555567606 *)
sbbs carry r9 r9 L0x7fffffffcc58 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcf20; Value = 0x62a1402a4f91e9dc; PC = 0x55555556760a *)
mov rax L0x7fffffffcf20;
(* sbb    0x10(%rdx),%r10                          #! EA = L0x7fffffffcc60; Value = 0x8c6937d9d7595437; PC = 0x55555556760e *)
sbbs carry r10 r10 L0x7fffffffcc60 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcf28; Value = 0xb552235aef78d020; PC = 0x555555567612 *)
mov rbx L0x7fffffffcf28;
(* sbb    0x18(%rdx),%r11                          #! EA = L0x7fffffffcc68; Value = 0x2fc92141ab212104; PC = 0x555555567616 *)
sbbs carry r11 r11 L0x7fffffffcc68 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcf30; Value = 0x7181ff1d8ee2553a; PC = 0x55555556761a *)
mov rbp L0x7fffffffcf30;
(* sbb    0x20(%rdx),%r12                          #! EA = L0x7fffffffcc70; Value = 0x409c3957ef365202; PC = 0x55555556761e *)
sbbs carry r12 r12 L0x7fffffffcc70 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcf38; Value = 0x000000004000677f; PC = 0x555555567622 *)
mov rsi L0x7fffffffcf38;
(* sbb    0x28(%rdx),%r13                          #! EA = L0x7fffffffcc78; Value = 0xcd8563811cc5bbbb; PC = 0x555555567626 *)
sbbs carry r13 r13 L0x7fffffffcc78 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x55555556762a *)
mov L0x7fffffffcee0 r8;
(* sbb    0x30(%rdx),%r14                          #! EA = L0x7fffffffcc80; Value = 0x1c0cf0f18fc83832; PC = 0x55555556762d *)
sbbs carry r14 r14 L0x7fffffffcc80 carry;
(* mov    (%rcx),%r8                               #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567631 *)
mov r8 L0x55555556c740;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcee8; PC = 0x555555567634 *)
mov L0x7fffffffcee8 r9;
(* sbb    0x38(%rdx),%r15                          #! EA = L0x7fffffffcc88; Value = 0x46bdb3d219b7d81e; PC = 0x555555567638 *)
sbbs carry r15 r15 L0x7fffffffcc88 carry;
(* mov    0x8(%rcx),%r9                            #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556763c *)
mov r9 L0x55555556c748;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555567640 *)
mov L0x7fffffffcef0 r10;
(* sbb    0x40(%rdx),%rax                          #! EA = L0x7fffffffcc90; Value = 0x13e421d37629f5fb; PC = 0x555555567644 *)
sbbs carry rax rax L0x7fffffffcc90 carry;
(* mov    0x10(%rcx),%r10                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567648 *)
mov r10 L0x55555556c750;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x55555556764c *)
mov L0x7fffffffcef8 r11;
(* sbb    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcc98; Value = 0x3302c9ad74e5c28b; PC = 0x555555567650 *)
sbbs carry rbx rbx L0x7fffffffcc98 carry;
(* mov    0x18(%rcx),%r11                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567654 *)
mov r11 L0x55555556c758;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555567658 *)
mov L0x7fffffffcf00 r12;
(* sbb    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcca0; Value = 0xcd2f6ffb1fbb3b5e; PC = 0x55555556765c *)
sbbs carry rbp rbp L0x7fffffffcca0 carry;
(* mov    0x20(%rcx),%r12                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555567660 *)
mov r12 L0x55555556c760;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555567664 *)
mov L0x7fffffffcf08 r13;
(* sbb    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcca8; Value = 0x00000000000033bf; PC = 0x555555567668 *)
sbbs carry rsi rsi L0x7fffffffcca8 carry;
(* mov    0x28(%rcx),%r13                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556766c *)
mov r13 L0x55555556c768;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567670 *)
sbbs carry rdx rdx rdx carry;
(* and    %rdx,%r8                                 #! PC = 0x555555567673 *)
and r8@uint64 rdx r8;
(* and    %rdx,%r9                                 #! PC = 0x555555567676 *)
and r9@uint64 rdx r9;
(* and    %rdx,%r10                                #! PC = 0x555555567679 *)
and r10@uint64 rdx r10;
(* and    %rdx,%r11                                #! PC = 0x55555556767c *)
and r11@uint64 rdx r11;
(* and    %rdx,%r12                                #! PC = 0x55555556767f *)
and r12@uint64 rdx r12;
(* and    %rdx,%r13                                #! PC = 0x555555567682 *)
and r13@uint64 rdx r13;
(* add    %r8,%r14                                 #! PC = 0x555555567685 *)
adds carry r14 r8 r14;
(* adc    %r9,%r15                                 #! PC = 0x555555567688 *)
adcs carry r15 r9 r15 carry;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcf10; PC = 0x55555556768b *)
mov L0x7fffffffcf10 r14;
(* adc    %r10,%rax                                #! PC = 0x55555556768f *)
adcs carry rax r10 rax carry;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcf18; PC = 0x555555567692 *)
mov L0x7fffffffcf18 r15;
(* adc    %r11,%rbx                                #! PC = 0x555555567696 *)
adcs carry rbx r11 rbx carry;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x555555567699 *)
mov L0x7fffffffcf20 rax;
(* adc    %r12,%rbp                                #! PC = 0x55555556769d *)
adcs carry rbp r12 rbp carry;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x5555555676a0 *)
mov L0x7fffffffcf28 rbx;
(* adc    %r13,%rsi                                #! PC = 0x5555555676a4 *)
adcs carry rsi r13 rsi carry;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x5555555676a7 *)
mov L0x7fffffffcf30 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x5555555676ab *)
mov L0x7fffffffcf38 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555676af *)
#repz retq                                      #! 0x5555555676af = 0x5555555676af;


(* sub_fp2x2(ret[2], ret[2], t2 *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
		   (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]))
	 	   (limbs 64 [L0x7fffffffce80r, L0x7fffffffce88r, L0x7fffffffce90r,
                              L0x7fffffffce98r, L0x7fffffffcea0r, L0x7fffffffcea8r,
                              L0x7fffffffceb0r, L0x7fffffffceb8r, L0x7fffffffcec0r,
                              L0x7fffffffcec8r, L0x7fffffffced0r, L0x7fffffffced8r])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) +
		   (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	           (limbs 64 [L0x7fffffffcee0r, L0x7fffffffcee8r, L0x7fffffffcef0r,
                              L0x7fffffffcef8r, L0x7fffffffcf00r, L0x7fffffffcf08r,
                              L0x7fffffffcf10r, L0x7fffffffcf18r, L0x7fffffffcf20r,
                              L0x7fffffffcf28r, L0x7fffffffcf30r, L0x7fffffffcf38r])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];
		   
assume and [eqmod ((limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8]) +
		   (limbs 64 [L0x7fffffffcbf0, L0x7fffffffcbf8, L0x7fffffffcc00,
                              L0x7fffffffcc08, L0x7fffffffcc10, L0x7fffffffcc18,
                              L0x7fffffffcc20, L0x7fffffffcc28, L0x7fffffffcc30,
                              L0x7fffffffcc38, L0x7fffffffcc40, L0x7fffffffcc48]))
	 	   (limbs 64 [L0x7fffffffce80r, L0x7fffffffce88r, L0x7fffffffce90r,
                              L0x7fffffffce98r, L0x7fffffffcea0r, L0x7fffffffcea8r,
                              L0x7fffffffceb0r, L0x7fffffffceb8r, L0x7fffffffcec0r,
                              L0x7fffffffcec8r, L0x7fffffffced0r, L0x7fffffffced8r])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38]) +
		   (limbs 64 [L0x7fffffffcc50, L0x7fffffffcc58, L0x7fffffffcc60,
                              L0x7fffffffcc68, L0x7fffffffcc70, L0x7fffffffcc78,
                              L0x7fffffffcc80, L0x7fffffffcc88, L0x7fffffffcc90,
                              L0x7fffffffcc98, L0x7fffffffcca0, L0x7fffffffcca8]))
	           (limbs 64 [L0x7fffffffcee0r, L0x7fffffffcee8r, L0x7fffffffcef0r,
                              L0x7fffffffcef8r, L0x7fffffffcf00r, L0x7fffffffcf08r,
                              L0x7fffffffcf10r, L0x7fffffffcf18r, L0x7fffffffcf20r,
                              L0x7fffffffcf28r, L0x7fffffffcf30r, L0x7fffffffcf38r])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                    L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                    L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;


ghost L0x7fffffffce80s@uint64, L0x7fffffffce88s@uint64, L0x7fffffffce90s@uint64,
      L0x7fffffffce98s@uint64, L0x7fffffffcea0s@uint64, L0x7fffffffcea8s@uint64,
      L0x7fffffffceb0s@uint64, L0x7fffffffceb8s@uint64, L0x7fffffffcec0s@uint64,
      L0x7fffffffcec8s@uint64, L0x7fffffffced0s@uint64, L0x7fffffffced8s@uint64,
      L0x7fffffffcee0s@uint64, L0x7fffffffcee8s@uint64, L0x7fffffffcef0s@uint64,
      L0x7fffffffcef8s@uint64, L0x7fffffffcf00s@uint64, L0x7fffffffcf08s@uint64,
      L0x7fffffffcf10s@uint64, L0x7fffffffcf18s@uint64, L0x7fffffffcf20s@uint64,
      L0x7fffffffcf28s@uint64, L0x7fffffffcf30s@uint64, L0x7fffffffcf38s@uint64 :
      and[L0x7fffffffce80s=L0x7fffffffce80, L0x7fffffffce88s=L0x7fffffffce88,
          L0x7fffffffce90s=L0x7fffffffce90, L0x7fffffffce98s=L0x7fffffffce98,
          L0x7fffffffcea0s=L0x7fffffffcea0, L0x7fffffffcea8s=L0x7fffffffcea8,
          L0x7fffffffceb0s=L0x7fffffffceb0, L0x7fffffffceb8s=L0x7fffffffceb8,
          L0x7fffffffcec0s=L0x7fffffffcec0, L0x7fffffffcec8s=L0x7fffffffcec8,
          L0x7fffffffced0s=L0x7fffffffced0, L0x7fffffffced8s=L0x7fffffffced8,
          L0x7fffffffcee0s=L0x7fffffffcee0, L0x7fffffffcee8s=L0x7fffffffcee8,
          L0x7fffffffcef0s=L0x7fffffffcef0, L0x7fffffffcef8s=L0x7fffffffcef8,
          L0x7fffffffcf00s=L0x7fffffffcf00, L0x7fffffffcf08s=L0x7fffffffcf08,
          L0x7fffffffcf10s=L0x7fffffffcf10, L0x7fffffffcf18s=L0x7fffffffcf18,
          L0x7fffffffcf20s=L0x7fffffffcf20, L0x7fffffffcf28s=L0x7fffffffcf28,
          L0x7fffffffcf30s=L0x7fffffffcf30, L0x7fffffffcf38s=L0x7fffffffcf38]
   && and[L0x7fffffffce80s=L0x7fffffffce80, L0x7fffffffce88s=L0x7fffffffce88,
          L0x7fffffffce90s=L0x7fffffffce90, L0x7fffffffce98s=L0x7fffffffce98,
          L0x7fffffffcea0s=L0x7fffffffcea0, L0x7fffffffcea8s=L0x7fffffffcea8,
          L0x7fffffffceb0s=L0x7fffffffceb0, L0x7fffffffceb8s=L0x7fffffffceb8,
          L0x7fffffffcec0s=L0x7fffffffcec0, L0x7fffffffcec8s=L0x7fffffffcec8,
          L0x7fffffffced0s=L0x7fffffffced0, L0x7fffffffced8s=L0x7fffffffced8,
          L0x7fffffffcee0s=L0x7fffffffcee0, L0x7fffffffcee8s=L0x7fffffffcee8,
          L0x7fffffffcef0s=L0x7fffffffcef0, L0x7fffffffcef8s=L0x7fffffffcef8,
          L0x7fffffffcf00s=L0x7fffffffcf00, L0x7fffffffcf08s=L0x7fffffffcf08,
          L0x7fffffffcf10s=L0x7fffffffcf10, L0x7fffffffcf18s=L0x7fffffffcf18,
          L0x7fffffffcf20s=L0x7fffffffcf20, L0x7fffffffcf28s=L0x7fffffffcf28,
          L0x7fffffffcf30s=L0x7fffffffcf30, L0x7fffffffcf38s=L0x7fffffffcf38];



(* #lea    0x38(%rsp),%rsp                          #! PC = 0x555555567735 *)
#lea    %%EA,%rsp                          #! 0x555555567735 = 0x555555567735;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x55555556773a *)
#repz retq                                      #! 0x55555556773a = 0x55555556773a;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f91d *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f91d = 0x55555555f91d;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce80; Value = 0xd2b73b11cb435e11; PC = 0x555555567504 *)
mov r8 L0x7fffffffce80;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce88; Value = 0xd6cdf02223ea0c8d; PC = 0x555555567507 *)
mov r9 L0x7fffffffce88;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce90; Value = 0x4e23c0173065663f; PC = 0x55555556750b *)
mov r10 L0x7fffffffce90;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce98; Value = 0x7884b1d51ea58bb6; PC = 0x55555556750f *)
mov r11 L0x7fffffffce98;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcea0; Value = 0xce8b8cdd2440cc91; PC = 0x555555567513 *)
mov r12 L0x7fffffffcea0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcea8; Value = 0x375390b5b01411fd; PC = 0x555555567517 *)
mov r13 L0x7fffffffcea8;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffceb0; Value = 0xd7c2b13b1c704106; PC = 0x55555556751b *)
mov r14 L0x7fffffffceb0;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcb30; Value = 0x50b04a5826191df8; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffcb30 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffceb8; Value = 0xd06688caa2682f75; PC = 0x555555567522 *)
mov r15 L0x7fffffffceb8;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb38; Value = 0xf4e77567c8c524c3; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffcb38 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcec0; Value = 0x01b25f9e1ee135cd; PC = 0x55555556752a *)
mov rax L0x7fffffffcec0;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffcb40; Value = 0x589afa0eae8ebc2e; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffcb40 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcec8; Value = 0x4595b3f12580236b; PC = 0x555555567532 *)
mov rbx L0x7fffffffcec8;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffcb48; Value = 0x2f2d8a98109a5dd0; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffcb48 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffced0; Value = 0x0e6d6d9106bda946; PC = 0x55555556753a *)
mov rbp L0x7fffffffced0;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcb50; Value = 0xb639ccfa60d7de8f; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcb50 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffced8; Value = 0x000000003fffcc40; PC = 0x555555567542 *)
mov rsi L0x7fffffffced8;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcb58; Value = 0xa81c4661bc689d5b; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcb58 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffce80; PC = 0x55555556754a *)
mov L0x7fffffffce80 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcb60; Value = 0x1c8c490add44d80e; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcb60 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffce88; PC = 0x555555567551 *)
mov L0x7fffffffce88 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcb68; Value = 0xf098f8ec27e6c90c; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcb68 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffce90; PC = 0x555555567559 *)
mov L0x7fffffffce90 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcb70; Value = 0x554944990485b977; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcb70 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcea0; PC = 0x555555567561 *)
mov L0x7fffffffcea0 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcb78; Value = 0x072c6a8e0fe1a262; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcb78 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffce98; PC = 0x55555556756c *)
mov L0x7fffffffce98 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcb80; Value = 0x812916e48250ede3; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcb80 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcea8; PC = 0x555555567577 *)
mov L0x7fffffffcea8 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcb88; Value = 0x1a0111ea397fb2da; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcb88 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffceb0; PC = 0x5555555675b5 *)
mov L0x7fffffffceb0 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffceb8; PC = 0x5555555675bd *)
mov L0x7fffffffceb8 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcec0; PC = 0x5555555675c5 *)
mov L0x7fffffffcec0 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcec8; PC = 0x5555555675cd *)
mov L0x7fffffffcec8 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffced0; PC = 0x5555555675d1 *)
mov L0x7fffffffced0 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffced8; PC = 0x5555555675d5 *)
mov L0x7fffffffced8 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;
(* #callq  0x5555555676c0 <add_mod_384x384>        #! PC = 0x55555555f930 *)
#callq  0x5555555676c0 <add_mod_384x384>        #! 0x55555555f930 = 0x55555555f930;
(* #! -> SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #endbr64                                         #! PC = 0x5555555676c0 *)
#endbr64                                         #! 0x5555555676c0 = 0x5555555676c0;
(* #callq  0x555555567500 <__add_mod_384x384>      #! PC = 0x5555555676d2 *)
#callq  0x555555567500 <__add_mod_384x384>      #! 0x5555555676d2 = 0x5555555676d2;
(* #! -> SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #endbr64                                         #! PC = 0x555555567500 *)
#endbr64                                         #! 0x555555567500 = 0x555555567500;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcee0; Value = 0xffecf5ed6439b351; PC = 0x555555567504 *)
mov r8 L0x7fffffffcee0;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcee8; Value = 0xe6f64df863a3a1bb; PC = 0x555555567507 *)
mov r9 L0x7fffffffcee8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcef0; Value = 0x32e39201856f8d71; PC = 0x55555556750b *)
mov r10 L0x7fffffffcef0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcef8; Value = 0x855ca44b10ce7303; PC = 0x55555556750f *)
mov r11 L0x7fffffffcef8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcf00; Value = 0x42040b295428c268; PC = 0x555555567513 *)
mov r12 L0x7fffffffcf00;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcf08; Value = 0x865e85ca41080ba4; PC = 0x555555567517 *)
mov r13 L0x7fffffffcf08;
(* mov    0x30(%rsi),%r14                          #! EA = L0x7fffffffcf10; Value = 0x6a3b083b54a43f4c; PC = 0x55555556751b *)
mov r14 L0x7fffffffcf10;
(* add    (%rdx),%r8                               #! EA = L0x7fffffffcb90; Value = 0x6462b9c7af536380; PC = 0x55555556751f *)
adds carry r8 L0x7fffffffcb90 r8;
(* mov    0x38(%rsi),%r15                          #! EA = L0x7fffffffcf18; Value = 0xe48b7c62f59dac1b; PC = 0x555555567522 *)
mov r15 L0x7fffffffcf18;
(* adc    0x8(%rdx),%r9                            #! EA = L0x7fffffffcb98; Value = 0x53ccac1900c6f361; PC = 0x555555567526 *)
adcs carry r9 L0x7fffffffcb98 r9 carry;
(* mov    0x40(%rsi),%rax                          #! EA = L0x7fffffffcf20; Value = 0x4ebd1e56d967f3e0; PC = 0x55555556752a *)
mov rax L0x7fffffffcf20;
(* adc    0x10(%rdx),%r10                          #! EA = L0x7fffffffcba0; Value = 0xa27b8148bec196fc; PC = 0x55555556752e *)
adcs carry r10 L0x7fffffffcba0 r10 carry;
(* mov    0x48(%rsi),%rbx                          #! EA = L0x7fffffffcf28; Value = 0x824f59ad7a930d95; PC = 0x555555567532 *)
mov rbx L0x7fffffffcf28;
(* adc    0x18(%rdx),%r11                          #! EA = L0x7fffffffcba8; Value = 0xb4a998471dec8ae1; PC = 0x555555567536 *)
adcs carry r11 L0x7fffffffcba8 r11 carry;
(* mov    0x50(%rsi),%rbp                          #! EA = L0x7fffffffcf30; Value = 0xa4528f226f2719dc; PC = 0x55555556753a *)
mov rbp L0x7fffffffcf30;
(* adc    0x20(%rdx),%r12                          #! EA = L0x7fffffffcbb0; Value = 0xdc0e1b0368e6e51e; PC = 0x55555556753e *)
adcs carry r12 L0x7fffffffcbb0 r12 carry;
(* mov    0x58(%rsi),%rsi                          #! EA = L0x7fffffffcf38; Value = 0x00000000400033bf; PC = 0x555555567542 *)
mov rsi L0x7fffffffcf38;
(* adc    0x28(%rdx),%r13                          #! EA = L0x7fffffffcbb8; Value = 0xfc3b1a06d6e16c74; PC = 0x555555567546 *)
adcs carry r13 L0x7fffffffcbb8 r13 carry;
(* mov    %r8,(%rdi)                               #! EA = L0x7fffffffcee0; PC = 0x55555556754a *)
mov L0x7fffffffcee0 r8;
(* adc    0x30(%rdx),%r14                          #! EA = L0x7fffffffcbc0; Value = 0xbf4d68814f0569e2; PC = 0x55555556754d *)
adcs carry r14 L0x7fffffffcbc0 r14 carry;
(* mov    %r9,0x8(%rdi)                            #! EA = L0x7fffffffcee8; PC = 0x555555567551 *)
mov L0x7fffffffcee8 r9;
(* adc    0x38(%rdx),%r15                          #! EA = L0x7fffffffcbc8; Value = 0x72b339d34847e375; PC = 0x555555567555 *)
adcs carry r15 L0x7fffffffcbc8 r15 carry;
(* mov    %r10,0x10(%rdi)                          #! EA = L0x7fffffffcef0; PC = 0x555555567559 *)
mov L0x7fffffffcef0 r10;
(* adc    0x40(%rdx),%rax                          #! EA = L0x7fffffffcbd0; Value = 0x32aa2f92438902b8; PC = 0x55555556755d *)
adcs carry rax L0x7fffffffcbd0 rax carry;
(* mov    %r12,0x20(%rdi)                          #! EA = L0x7fffffffcf00; PC = 0x555555567561 *)
mov L0x7fffffffcf00 r12;
(* mov    %r14,%r8                                 #! PC = 0x555555567565 *)
mov r8 r14;
(* adc    0x48(%rdx),%rbx                          #! EA = L0x7fffffffcbd8; Value = 0x0f65ac5a3828339e; PC = 0x555555567568 *)
adcs carry rbx L0x7fffffffcbd8 rbx carry;
(* mov    %r11,0x18(%rdi)                          #! EA = L0x7fffffffcef8; PC = 0x55555556756c *)
mov L0x7fffffffcef8 r11;
(* mov    %r15,%r9                                 #! PC = 0x555555567570 *)
mov r9 r15;
(* adc    0x50(%rdx),%rbp                          #! EA = L0x7fffffffcbe0; Value = 0xc9f28f21a9a34a20; PC = 0x555555567573 *)
adcs carry rbp L0x7fffffffcbe0 rbp carry;
(* mov    %r13,0x28(%rdi)                          #! EA = L0x7fffffffcf08; PC = 0x555555567577 *)
mov L0x7fffffffcf08 r13;
(* mov    %rax,%r10                                #! PC = 0x55555556757b *)
mov r10 rax;
(* adc    0x58(%rdx),%rsi                          #! EA = L0x7fffffffcbe8; Value = 0x00000000000033bf; PC = 0x55555556757e *)
adcs carry rsi L0x7fffffffcbe8 rsi carry;
(* mov    %rbx,%r11                                #! PC = 0x555555567582 *)
mov r11 rbx;
(* sbb    %rdx,%rdx                                #! PC = 0x555555567585 *)
sbbs carry rdx rdx rdx carry;
(* sub    (%rcx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555567588 *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rcx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556758b *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %rbp,%r12                                #! PC = 0x55555556758f *)
mov r12 rbp;
(* sbb    0x10(%rcx),%rax                          #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555567592 *)
sbbs carry rax rax L0x55555556c750 carry;
(* sbb    0x18(%rcx),%rbx                          #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555567596 *)
sbbs carry rbx rbx L0x55555556c758 carry;
(* sbb    0x20(%rcx),%rbp                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556759a *)
sbbs carry rbp rbp L0x55555556c760 carry;
(* mov    %rsi,%r13                                #! PC = 0x55555556759e *)
mov r13 rsi;
(* sbb    0x28(%rcx),%rsi                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555675a1 *)
sbbs carry rsi rsi L0x55555556c768 carry;
(* sbb    $0x0,%rdx                                #! PC = 0x5555555675a5 *)
sbbs carry rdx rdx 0@uint64 carry;
(* cmovb  %r8,%r14                                 #! PC = 0x5555555675a9 *)
cmov r14 carry r8 r14;
(* cmovb  %r9,%r15                                 #! PC = 0x5555555675ad *)
cmov r15 carry r9 r15;
(* cmovb  %r10,%rax                                #! PC = 0x5555555675b1 *)
cmov rax carry r10 rax;
(* mov    %r14,0x30(%rdi)                          #! EA = L0x7fffffffcf10; PC = 0x5555555675b5 *)
mov L0x7fffffffcf10 r14;
(* cmovb  %r11,%rbx                                #! PC = 0x5555555675b9 *)
cmov rbx carry r11 rbx;
(* mov    %r15,0x38(%rdi)                          #! EA = L0x7fffffffcf18; PC = 0x5555555675bd *)
mov L0x7fffffffcf18 r15;
(* cmovb  %r12,%rbp                                #! PC = 0x5555555675c1 *)
cmov rbp carry r12 rbp;
(* mov    %rax,0x40(%rdi)                          #! EA = L0x7fffffffcf20; PC = 0x5555555675c5 *)
mov L0x7fffffffcf20 rax;
(* cmovb  %r13,%rsi                                #! PC = 0x5555555675c9 *)
cmov rsi carry r13 rsi;
(* mov    %rbx,0x48(%rdi)                          #! EA = L0x7fffffffcf28; PC = 0x5555555675cd *)
mov L0x7fffffffcf28 rbx;
(* mov    %rbp,0x50(%rdi)                          #! EA = L0x7fffffffcf30; PC = 0x5555555675d1 *)
mov L0x7fffffffcf30 rbp;
(* mov    %rsi,0x58(%rdi)                          #! EA = L0x7fffffffcf38; PC = 0x5555555675d5 *)
mov L0x7fffffffcf38 rsi;
(* #! <- SP = 0x7fffffffc8f8 *)
#! 0x7fffffffc8f8 = 0x7fffffffc8f8;
(* #repz retq                                      #! PC = 0x5555555675d9 *)
#repz retq                                      #! 0x5555555675d9 = 0x5555555675d9;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x5555555676f5 *)
#lea    %%EA,%rsp                          #! 0x5555555676f5 = 0x5555555676f5;
(* #! <- SP = 0x7fffffffc938 *)
#! 0x7fffffffc938 = 0x7fffffffc938;
(* #repz retq                                      #! PC = 0x5555555676fa *)
#repz retq                                      #! 0x5555555676fa = 0x5555555676fa;
(* #jne    0x55555555f95a <mul_fp6x2+899>          #! PC = 0x55555555f946 *)
#jne    0x55555555f95a <mul_fp6x2+899>          #! 0x55555555f946 = 0x55555555f946;
(* #! <- SP = 0x7fffffffccf8 *)
#! 0x7fffffffccf8 = 0x7fffffffccf8;
(* #retq                                           #! PC = 0x55555555f959 *)
#retq                                           #! 0x55555555f959 = 0x55555555f959;


(* add_fp2x2(ret[2], ret[2], t1) *)

assert true
    && and [eqmod ((limbs 64 [L0x7fffffffce80s, L0x7fffffffce88s, L0x7fffffffce90s,
                              L0x7fffffffce98s, L0x7fffffffcea0s, L0x7fffffffcea8s,
                              L0x7fffffffceb0s, L0x7fffffffceb8s, L0x7fffffffcec0s,
                              L0x7fffffffcec8s, L0x7fffffffced0s, L0x7fffffffced8s]) +
		   (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                              L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                              L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                              L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
	 	   (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8])
		   (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5]),
            eqmod ((limbs 64 [L0x7fffffffcee0s, L0x7fffffffcee8s, L0x7fffffffcef0s,
                              L0x7fffffffcef8s, L0x7fffffffcf00s, L0x7fffffffcf08s,
                              L0x7fffffffcf10s, L0x7fffffffcf18s, L0x7fffffffcf20s,
                              L0x7fffffffcf28s, L0x7fffffffcf30s, L0x7fffffffcf38s]) +
		   (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                              L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                              L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                              L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]))
	           (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38])
		    (limbs 64 [0@64, 0@64, 0@64, 0@64, 0@64, 0@64,
                                m0,   m1,   m2,   m3,   m4,   m5])
       ];

assume and [eqmod ((limbs 64 [L0x7fffffffce80s, L0x7fffffffce88s, L0x7fffffffce90s,
                              L0x7fffffffce98s, L0x7fffffffcea0s, L0x7fffffffcea8s,
                              L0x7fffffffceb0s, L0x7fffffffceb8s, L0x7fffffffcec0s,
                              L0x7fffffffcec8s, L0x7fffffffced0s, L0x7fffffffced8s]) +
		   (limbs 64 [L0x7fffffffcb30, L0x7fffffffcb38, L0x7fffffffcb40,
                              L0x7fffffffcb48, L0x7fffffffcb50, L0x7fffffffcb58,
                              L0x7fffffffcb60, L0x7fffffffcb68, L0x7fffffffcb70,
                              L0x7fffffffcb78, L0x7fffffffcb80, L0x7fffffffcb88]))
	 	   (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                              L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                              L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                              L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5]),
            eqmod ((limbs 64 [L0x7fffffffcee0s, L0x7fffffffcee8s, L0x7fffffffcef0s,
                              L0x7fffffffcef8s, L0x7fffffffcf00s, L0x7fffffffcf08s,
                              L0x7fffffffcf10s, L0x7fffffffcf18s, L0x7fffffffcf20s,
                              L0x7fffffffcf28s, L0x7fffffffcf30s, L0x7fffffffcf38s]) +
		   (limbs 64 [L0x7fffffffcb90, L0x7fffffffcb98, L0x7fffffffcba0,
                              L0x7fffffffcba8, L0x7fffffffcbb0, L0x7fffffffcbb8,
                              L0x7fffffffcbc0, L0x7fffffffcbc8, L0x7fffffffcbd0,
                              L0x7fffffffcbd8, L0x7fffffffcbe0, L0x7fffffffcbe8]))
	           (limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                              L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                              L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                              L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38])
		   (limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5])
       ]
    && true;

rcut and [limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                    L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                    L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                    L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                    L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                    L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                    L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
          limbs 64 [m0, m1, m2, m3, m4, m5],
          m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
          m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
          m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64
     ] prove with all cuts, precondition;


{
  true
  &&
  true
}




proc main (uint64 a00, uint64 a01, uint64 a02,
           uint64 a03, uint64 a04, uint64 a05,
           uint64 a10, uint64 a11, uint64 a12,
           uint64 a13, uint64 a14, uint64 a15,
           uint64 a20, uint64 a21, uint64 a22,
           uint64 a23, uint64 a24, uint64 a25,
           uint64 a30, uint64 a31, uint64 a32,
           uint64 a33, uint64 a34, uint64 a35,
           uint64 a40, uint64 a41, uint64 a42,
           uint64 a43, uint64 a44, uint64 a45,
           uint64 a50, uint64 a51, uint64 a52,
           uint64 a53, uint64 a54, uint64 a55,

           uint64 b00, uint64 b01, uint64 b02,
           uint64 b03, uint64 b04, uint64 b05,
           uint64 b10, uint64 b11, uint64 b12,
           uint64 b13, uint64 b14, uint64 b15,
           uint64 b20, uint64 b21, uint64 b22,
           uint64 b23, uint64 b24, uint64 b25,
           uint64 b30, uint64 b31, uint64 b32,
           uint64 b33, uint64 b34, uint64 b35,
           uint64 b40, uint64 b41, uint64 b42,
           uint64 b43, uint64 b44, uint64 b45,
           uint64 b50, uint64 b51, uint64 b52,
           uint64 b53, uint64 b54, uint64 b55,

           uint64  m0, uint64  m1, uint64  m2,
           uint64  m3, uint64  m4, uint64  m5,

           uint64   U, uint64   V, uint64  W) =
{
  and [
    m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
    m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
    m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a
  ]
&&
  and [
    m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
    m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
    m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,
    limbs 64 [a00, a01, a02, a03, a04, a05] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a10, a11, a12, a13, a14, a15] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a20, a21, a22, a23, a24, a25] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a30, a31, a32, a33, a34, a35] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a40, a41, a42, a43, a44, a45] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [a50, a51, a52, a53, a54, a55] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b00, b01, b02, b03, b04, b05] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b10, b11, b12, b13, b14, b15] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b20, b21, b22, b23, b24, b25] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b30, b31, b32, b33, b34, b35] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b40, b41, b42, b43, b44, b45] <u limbs 64 [m0, m1, m2, m3, m4, m5],
    limbs 64 [b50, b51, b52, b53, b54, b55] <u limbs 64 [m0, m1, m2, m3, m4, m5]
  ]
}


inline mul_fp6x2 (a00, a01, a02, a03, a04, a05, a10, a11, a12, a13, a14, a15,
                a20, a21, a22, a23, a24, a25, a30, a31, a32, a33, a34, a35,
                a40, a41, a42, a43, a44, a45, a50, a51, a52, a53, a54, a55,

                b00, b01, b02, b03, b04, b05, b10, b11, b12, b13, b14, b15,
                b20, b21, b22, b23, b24, b25, b30, b31, b32, b33, b34, b35,
                b40, b41, b42, b43, b44, b45, b50, b51, b52, b53, b54, b55,

                m0,  m1,  m2,  m3,  m4,  m5,

                U,   V,   W);


cut and [m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,

       (* ret[0] = ((a1 + a2)*(b1 + b2) - a1*b1 - a2*b2)*(u+1) + a0*b0
                 = (a1*b2 + a2*b1)*(u+1) + a0*b0 *)
       eqmod (limbs 64 [L0x7fffffffc9b0r0, L0x7fffffffc9b8r0, L0x7fffffffc9c0r0,
                        L0x7fffffffc9c8r0, L0x7fffffffc9d0r0, L0x7fffffffc9d8r0] +
              limbs 64 [L0x7fffffffc9e0r0, L0x7fffffffc9e8r0, L0x7fffffffc9f0r0,
                        L0x7fffffffc9f8r0, L0x7fffffffca00r0, L0x7fffffffca08r0] * U)
             ((limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
       eqmod (limbs 64 [L0x7fffffffca10r0, L0x7fffffffca18r0, L0x7fffffffca20r0,
                        L0x7fffffffca28r0, L0x7fffffffca30r0, L0x7fffffffca38r0] +
              limbs 64 [L0x7fffffffca40r0, L0x7fffffffca48r0, L0x7fffffffca50r0,
                        L0x7fffffffca58r0, L0x7fffffffca60r0, L0x7fffffffca68r0] * U)
             ((limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U))
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
       eqmod ((limbs 64 [L0x7fffffffcd00, L0x7fffffffcd08, L0x7fffffffcd10,
                         L0x7fffffffcd18, L0x7fffffffcd20, L0x7fffffffcd28,
                         L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                         L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58]) +
              (limbs 64 [L0x7fffffffcd60, L0x7fffffffcd68, L0x7fffffffcd70,
                         L0x7fffffffcd78, L0x7fffffffcd80, L0x7fffffffcd88,
                         L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                         L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8]) * U)
             (((limbs 64 [L0x7fffffffc9b0r0, L0x7fffffffc9b8r0, L0x7fffffffc9c0r0,
                          L0x7fffffffc9c8r0, L0x7fffffffc9d0r0, L0x7fffffffc9d8r0] +
                limbs 64 [L0x7fffffffc9e0r0, L0x7fffffffc9e8r0, L0x7fffffffc9f0r0,
                          L0x7fffffffc9f8r0, L0x7fffffffca00r0, L0x7fffffffca08r0] * U) *
               (limbs 64 [L0x7fffffffca10r0, L0x7fffffffca18r0, L0x7fffffffca20r0,
                          L0x7fffffffca28r0, L0x7fffffffca30r0, L0x7fffffffca38r0] +
                limbs 64 [L0x7fffffffca40r0, L0x7fffffffca48r0, L0x7fffffffca50r0,
                          L0x7fffffffca58r0, L0x7fffffffca60r0, L0x7fffffffca68r0] * U) -
	       (limbs 64 [a20, a21, a22, a23, a24, a25] +
                limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
               (limbs 64 [b20, b21, b22, b23, b24, b25] +
                limbs 64 [b30, b31, b32, b33, b34, b35] * U) -
               (limbs 64 [a40, a41, a42, a43, a44, a45] +
                limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
               (limbs 64 [b40, b41, b42, b43, b44, b45] +
                limbs 64 [b50, b51, b52, b53, b54, b55] * U)) *
              (U + 1) +
              (limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1],

       (* ret[1] = (a0 + a1)*(b0 + b1) - a0*b0 - a1*b1 + a2*b2*(u+1)
                 = a0*b1 + a1*b0 + a2*b2*(u+1) *)
       eqmod (limbs 64 [L0x7fffffffc9b0r1, L0x7fffffffc9b8r1, L0x7fffffffc9c0r1,
                        L0x7fffffffc9c8r1, L0x7fffffffc9d0r1, L0x7fffffffc9d8r1] +
              limbs 64 [L0x7fffffffc9e0r1, L0x7fffffffc9e8r1, L0x7fffffffc9f0r1,
                        L0x7fffffffc9f8r1, L0x7fffffffca00r1, L0x7fffffffca08r1] * U)
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a10, a11, a12, a13, a14, a15] * U +
              limbs 64 [a20, a21, a22, a23, a24, a25] +
              limbs 64 [a30, a31, a32, a33, a34, a35] * U)
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
       eqmod (limbs 64 [L0x7fffffffca10r1, L0x7fffffffca18r1, L0x7fffffffca20r1,
                        L0x7fffffffca28r1, L0x7fffffffca30r1, L0x7fffffffca38r1] +
              limbs 64 [L0x7fffffffca40r1, L0x7fffffffca48r1, L0x7fffffffca50r1,
                        L0x7fffffffca58r1, L0x7fffffffca60r1, L0x7fffffffca68r1] * U)
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b10, b11, b12, b13, b14, b15] * U +
              limbs 64 [b20, b21, b22, b23, b24, b25] +
              limbs 64 [b30, b31, b32, b33, b34, b35] * U)
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
       eqmod (limbs 64 [L0x7fffffffcdc0, L0x7fffffffcdc8, L0x7fffffffcdd0,
                        L0x7fffffffcdd8, L0x7fffffffcde0, L0x7fffffffcde8,
                        L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                        L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] +
              limbs 64 [L0x7fffffffce20, L0x7fffffffce28, L0x7fffffffce30,
                        L0x7fffffffce38, L0x7fffffffce40, L0x7fffffffce48,
                        L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                        L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] * U)
             ((limbs 64 [L0x7fffffffc9b0r1, L0x7fffffffc9b8r1, L0x7fffffffc9c0r1,
                         L0x7fffffffc9c8r1, L0x7fffffffc9d0r1, L0x7fffffffc9d8r1] +
               limbs 64 [L0x7fffffffc9e0r1, L0x7fffffffc9e8r1, L0x7fffffffc9f0r1,
                         L0x7fffffffc9f8r1, L0x7fffffffca00r1, L0x7fffffffca08r1] * U) *
              (limbs 64 [L0x7fffffffca10r1, L0x7fffffffca18r1, L0x7fffffffca20r1,
                         L0x7fffffffca28r1, L0x7fffffffca30r1, L0x7fffffffca38r1] +
               limbs 64 [L0x7fffffffca40r1, L0x7fffffffca48r1, L0x7fffffffca50r1,
                         L0x7fffffffca58r1, L0x7fffffffca60r1, L0x7fffffffca68r1] * U) -
	      (limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
              (limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
              (limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U) *
              (U + 1))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1],

       (* ret[2] = (a0 + a2)*(b0 + b2) - a0*b0 - a2*b2 + a1*b1
                 = a0*b2 + a2*b0 + a1*b1 *)
       eqmod (limbs 64 [L0x7fffffffc9b0r2, L0x7fffffffc9b8r2, L0x7fffffffc9c0r2,
                        L0x7fffffffc9c8r2, L0x7fffffffc9d0r2, L0x7fffffffc9d8r2] +
              limbs 64 [L0x7fffffffc9e0r2, L0x7fffffffc9e8r2, L0x7fffffffc9f0r2,
                        L0x7fffffffc9f8r2, L0x7fffffffca00r2, L0x7fffffffca08r2] * U)
             (limbs 64 [a00, a01, a02, a03, a04, a05] +
              limbs 64 [a10, a11, a12, a13, a14, a15] * U +
              limbs 64 [a40, a41, a42, a43, a44, a45] +
              limbs 64 [a50, a51, a52, a53, a54, a55] * U)
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
       eqmod (limbs 64 [L0x7fffffffca10r2, L0x7fffffffca18r2, L0x7fffffffca20r2,
                        L0x7fffffffca28r2, L0x7fffffffca30r2, L0x7fffffffca38r2] +
              limbs 64 [L0x7fffffffca40r2, L0x7fffffffca48r2, L0x7fffffffca50r2,
                        L0x7fffffffca58r2, L0x7fffffffca60r2, L0x7fffffffca68r2] * U)
             (limbs 64 [b00, b01, b02, b03, b04, b05] +
              limbs 64 [b10, b11, b12, b13, b14, b15] * U +
              limbs 64 [b40, b41, b42, b43, b44, b45] +
              limbs 64 [b50, b51, b52, b53, b54, b55] * U)
             [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
       eqmod (limbs 64 [L0x7fffffffce80, L0x7fffffffce88, L0x7fffffffce90,
                        L0x7fffffffce98, L0x7fffffffcea0, L0x7fffffffcea8,
                        L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                        L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] +
              limbs 64 [L0x7fffffffcee0, L0x7fffffffcee8, L0x7fffffffcef0,
                        L0x7fffffffcef8, L0x7fffffffcf00, L0x7fffffffcf08,
                        L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                        L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] * U)
             ((limbs 64 [L0x7fffffffc9b0r2, L0x7fffffffc9b8r2, L0x7fffffffc9c0r2,
                         L0x7fffffffc9c8r2, L0x7fffffffc9d0r2, L0x7fffffffc9d8r2] +
               limbs 64 [L0x7fffffffc9e0r2, L0x7fffffffc9e8r2, L0x7fffffffc9f0r2,
                         L0x7fffffffc9f8r2, L0x7fffffffca00r2, L0x7fffffffca08r2] * U) *
              (limbs 64 [L0x7fffffffca10r2, L0x7fffffffca18r2, L0x7fffffffca20r2,
                         L0x7fffffffca28r2, L0x7fffffffca30r2, L0x7fffffffca38r2] +
               limbs 64 [L0x7fffffffca40r2, L0x7fffffffca48r2, L0x7fffffffca50r2,
                         L0x7fffffffca58r2, L0x7fffffffca60r2, L0x7fffffffca68r2] * U) -
              (limbs 64 [a00, a01, a02, a03, a04, a05] +
               limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
              (limbs 64 [b00, b01, b02, b03, b04, b05] +
               limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
              (limbs 64 [a40, a41, a42, a43, a44, a45] +
               limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
              (limbs 64 [b40, b41, b42, b43, b44, b45] +
               limbs 64 [b50, b51, b52, b53, b54, b55] * U) +
              (limbs 64 [a20, a21, a22, a23, a24, a25] +
               limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
              (limbs 64 [b20, b21, b22, b23, b24, b25] +
               limbs 64 [b30, b31, b32, b33, b34, b35] * U))
             [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
              U * U + 1]
      ]
&& and [m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         limbs 64 [L0x7fffffffcd30, L0x7fffffffcd38, L0x7fffffffcd40,
                   L0x7fffffffcd48, L0x7fffffffcd50, L0x7fffffffcd58] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffcd90, L0x7fffffffcd98, L0x7fffffffcda0,
                   L0x7fffffffcda8, L0x7fffffffcdb0, L0x7fffffffcdb8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffcdf0, L0x7fffffffcdf8, L0x7fffffffce00,
                   L0x7fffffffce08, L0x7fffffffce10, L0x7fffffffce18] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffce50, L0x7fffffffce58, L0x7fffffffce60,
                   L0x7fffffffce68, L0x7fffffffce70, L0x7fffffffce78] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffceb0, L0x7fffffffceb8, L0x7fffffffcec0,
                   L0x7fffffffcec8, L0x7fffffffced0, L0x7fffffffced8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffcf10, L0x7fffffffcf18, L0x7fffffffcf20,
                   L0x7fffffffcf28, L0x7fffffffcf30, L0x7fffffffcf38] <u
         limbs 64 [m0, m1, m2, m3, m4, m5]
    ] prove with all cuts;


mov L0x7fffffffcf48 L0x7fffffffcf38; mov L0x7fffffffcf40 L0x7fffffffcf30;
mov L0x7fffffffcf38 L0x7fffffffcf28; mov L0x7fffffffcf30 L0x7fffffffcf20;
mov L0x7fffffffcf28 L0x7fffffffcf18; mov L0x7fffffffcf20 L0x7fffffffcf10;
mov L0x7fffffffcf18 L0x7fffffffcf08; mov L0x7fffffffcf10 L0x7fffffffcf00;
mov L0x7fffffffcf08 L0x7fffffffcef8; mov L0x7fffffffcf00 L0x7fffffffcef0;
mov L0x7fffffffcef8 L0x7fffffffcee8; mov L0x7fffffffcef0 L0x7fffffffcee0;
mov L0x7fffffffcee8 L0x7fffffffced8; mov L0x7fffffffcee0 L0x7fffffffced0;
mov L0x7fffffffced8 L0x7fffffffcec8; mov L0x7fffffffced0 L0x7fffffffcec0;
mov L0x7fffffffcec8 L0x7fffffffceb8; mov L0x7fffffffcec0 L0x7fffffffceb0;
mov L0x7fffffffceb8 L0x7fffffffcea8; mov L0x7fffffffceb0 L0x7fffffffcea0;
mov L0x7fffffffcea8 L0x7fffffffce98; mov L0x7fffffffcea0 L0x7fffffffce90;
mov L0x7fffffffce98 L0x7fffffffce88; mov L0x7fffffffce90 L0x7fffffffce80;
mov L0x7fffffffce88 L0x7fffffffce78; mov L0x7fffffffce80 L0x7fffffffce70;
mov L0x7fffffffce78 L0x7fffffffce68; mov L0x7fffffffce70 L0x7fffffffce60;
mov L0x7fffffffce68 L0x7fffffffce58; mov L0x7fffffffce60 L0x7fffffffce50;
mov L0x7fffffffce58 L0x7fffffffce48; mov L0x7fffffffce50 L0x7fffffffce40;
mov L0x7fffffffce48 L0x7fffffffce38; mov L0x7fffffffce40 L0x7fffffffce30;
mov L0x7fffffffce38 L0x7fffffffce28; mov L0x7fffffffce30 L0x7fffffffce20;
mov L0x7fffffffce28 L0x7fffffffce18; mov L0x7fffffffce20 L0x7fffffffce10;
mov L0x7fffffffce18 L0x7fffffffce08; mov L0x7fffffffce10 L0x7fffffffce00;
mov L0x7fffffffce08 L0x7fffffffcdf8; mov L0x7fffffffce00 L0x7fffffffcdf0;
mov L0x7fffffffcdf8 L0x7fffffffcde8; mov L0x7fffffffcdf0 L0x7fffffffcde0;
mov L0x7fffffffcde8 L0x7fffffffcdd8; mov L0x7fffffffcde0 L0x7fffffffcdd0;
mov L0x7fffffffcdd8 L0x7fffffffcdc8; mov L0x7fffffffcdd0 L0x7fffffffcdc0;
mov L0x7fffffffcdc8 L0x7fffffffcdb8; mov L0x7fffffffcdc0 L0x7fffffffcdb0;
mov L0x7fffffffcdb8 L0x7fffffffcda8; mov L0x7fffffffcdb0 L0x7fffffffcda0;
mov L0x7fffffffcda8 L0x7fffffffcd98; mov L0x7fffffffcda0 L0x7fffffffcd90;
mov L0x7fffffffcd98 L0x7fffffffcd88; mov L0x7fffffffcd90 L0x7fffffffcd80;
mov L0x7fffffffcd88 L0x7fffffffcd78; mov L0x7fffffffcd80 L0x7fffffffcd70;
mov L0x7fffffffcd78 L0x7fffffffcd68; mov L0x7fffffffcd70 L0x7fffffffcd60;
mov L0x7fffffffcd68 L0x7fffffffcd58; mov L0x7fffffffcd60 L0x7fffffffcd50;
mov L0x7fffffffcd58 L0x7fffffffcd48; mov L0x7fffffffcd50 L0x7fffffffcd40;
mov L0x7fffffffcd48 L0x7fffffffcd38; mov L0x7fffffffcd40 L0x7fffffffcd30;
mov L0x7fffffffcd38 L0x7fffffffcd28; mov L0x7fffffffcd30 L0x7fffffffcd20;
mov L0x7fffffffcd28 L0x7fffffffcd18; mov L0x7fffffffcd20 L0x7fffffffcd10;
mov L0x7fffffffcd18 L0x7fffffffcd08; mov L0x7fffffffcd10 L0x7fffffffcd00;


mov L0x55555556c740 m0; mov L0x55555556c748 m1; mov L0x55555556c750 m2; 
mov L0x55555556c758 m3; mov L0x55555556c760 m4; mov L0x55555556c768 m5; 

mov L0x7fffffffcfa0 a00; mov L0x7fffffffcfa8 a01; mov L0x7fffffffcfb0 a02;
mov L0x7fffffffcfb8 a03; mov L0x7fffffffcfc0 a04; mov L0x7fffffffcfc8 a05;
mov L0x7fffffffcfd0 a10; mov L0x7fffffffcfd8 a11; mov L0x7fffffffcfe0 a12;
mov L0x7fffffffcfe8 a13; mov L0x7fffffffcff0 a14; mov L0x7fffffffcff8 a15;
mov L0x7fffffffd000 a20; mov L0x7fffffffd008 a21; mov L0x7fffffffd010 a22;
mov L0x7fffffffd018 a23; mov L0x7fffffffd020 a24; mov L0x7fffffffd028 a25;
mov L0x7fffffffd030 a30; mov L0x7fffffffd038 a31; mov L0x7fffffffd040 a32; 
mov L0x7fffffffd048 a33; mov L0x7fffffffd050 a34; mov L0x7fffffffd058 a35; 
mov L0x7fffffffd060 a40; mov L0x7fffffffd068 a41; mov L0x7fffffffd070 a42;
mov L0x7fffffffd078 a43; mov L0x7fffffffd080 a44; mov L0x7fffffffd088 a45;
mov L0x7fffffffd090 a50; mov L0x7fffffffd098 a51; mov L0x7fffffffd0a0 a52;
mov L0x7fffffffd0a8 a53; mov L0x7fffffffd0b0 a54; mov L0x7fffffffd0b8 a55;

mov L0x7fffffffd0c0 b00; mov L0x7fffffffd0c8 b01; mov L0x7fffffffd0d0 b02; 
mov L0x7fffffffd0d8 b03; mov L0x7fffffffd0e0 b04; mov L0x7fffffffd0e8 b05; 
mov L0x7fffffffd0f0 b10; mov L0x7fffffffd0f8 b11; mov L0x7fffffffd100 b12; 
mov L0x7fffffffd108 b13; mov L0x7fffffffd110 b14; mov L0x7fffffffd118 b15; 
mov L0x7fffffffd120 b20; mov L0x7fffffffd128 b21; mov L0x7fffffffd130 b22;
mov L0x7fffffffd138 b23; mov L0x7fffffffd140 b24; mov L0x7fffffffd148 b25;
mov L0x7fffffffd150 b30; mov L0x7fffffffd158 b31; mov L0x7fffffffd160 b32;
mov L0x7fffffffd168 b33; mov L0x7fffffffd170 b34; mov L0x7fffffffd178 b35;
mov L0x7fffffffd180 b40; mov L0x7fffffffd188 b41; mov L0x7fffffffd190 b42;
mov L0x7fffffffd198 b43; mov L0x7fffffffd1a0 b44; mov L0x7fffffffd1a8 b45;
mov L0x7fffffffd1b0 b50; mov L0x7fffffffd1b8 b51; mov L0x7fffffffd1c0 b52; 
mov L0x7fffffffd1c8 b53; mov L0x7fffffffd1d0 b54; mov L0x7fffffffd1d8 b55;









(* #jne    0x55555555f95a <mul_fp6x2+899>          #! PC = 0x55555555f946 *)
#jne    0x55555555f95a <mul_fp6x2+899>          #! 0x55555555f946 = 0x55555555f946;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #retq                                           #! PC = 0x55555555f959 *)
#retq                                           #! 0x55555555f959 = 0x55555555f959;
(* movabs $0x89f3fffcfffcfffd,%rcx                 #! PC = 0x55555555f98f *)
mov rcx 0x89f3fffcfffcfffd@uint64;
(* #lea    0xcda0(%rip),%rbp        # 0x55555556c740 <BLS12_381_P>#! PC = 0x55555555f999 *)
#lea    0xcda0(%rip),%%rbp        # 0x55555556c740 <BLS12_381_P>#! 0x55555555f999 = 0x55555555f999;
(* #callq  0x555555568fe0 <redcx_mont_384>         #! PC = 0x55555555f9a9 *)
#callq  0x555555568fe0 <redcx_mont_384>         #! 0x55555555f9a9 = 0x55555555f9a9;
(* #! -> SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #endbr64                                         #! PC = 0x555555568fe0 *)
#endbr64                                         #! 0x555555568fe0 = 0x555555568fe0;
(* #callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! PC = 0x555555568ff5 *)
#callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! 0x555555568ff5 = 0x555555568ff5;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x5555555690e0 *)
#endbr64                                         #! 0x5555555690e0 = 0x5555555690e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd10; Value = 0x71c5050f9ea53119; PC = 0x5555555690e4 *)
mov r8 L0x7fffffffcd10;
(* mov    %rcx,%rdx                                #! PC = 0x5555555690e7 *)
mov rdx rcx;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd18; Value = 0x08cb926d692d4c17; PC = 0x5555555690ea *)
mov r9 L0x7fffffffcd18;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd20; Value = 0x2531673d87db4553; PC = 0x5555555690ee *)
mov r10 L0x7fffffffcd20;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd28; Value = 0x22ecc3a56480c5e0; PC = 0x5555555690f2 *)
mov r11 L0x7fffffffcd28;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd30; Value = 0x871f4a25712e3352; PC = 0x5555555690f6 *)
mov r12 L0x7fffffffcd30;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd38; Value = 0x7f7007221037df70; PC = 0x5555555690fa *)
mov r13 L0x7fffffffcd38;
(* imul   %r8,%rdx                                 #! PC = 0x5555555690fe *)
umull dontcare rdx r8 rdx;
(* xor    %r14,%r14                                #! PC = 0x555555569102 *)
mov r14 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569105 *)
umull rbp rax L0x55555556c740 rdx;

mov carry 0@uint1;
mov OF 0@uint1;

(* adcx   %rax,%r8                                 #! PC = 0x55555556910a *)
adcs carry r8 rax r8 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r8 0 (2**64) && true;
assume r8 = 0 && r8 = 0@64;

(* adox   %rbp,%r9                                 #! PC = 0x555555569110 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569116 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x55555556911c *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x555555569122 *)
adcs OF r10 rbp r10 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569128 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r10                                #! PC = 0x55555556912e *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x555555569134 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x55555556913a *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569140 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569146 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556914c *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569152 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569158 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556915e *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569164 *)
mov rdx rcx;
(* adcx   %rax,%r13                                #! PC = 0x555555569167 *)
adcs carry r13 rax r13 carry;
(* adox   %r14,%rbp                                #! PC = 0x55555556916d *)
adcs OF rbp r14 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r14                                #! PC = 0x555555569173 *)
adcs carry r14 rbp r14 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r9,%rdx                                 #! PC = 0x555555569179 *)
umull dontcare rdx r9 rdx;
(* xor    %r15,%r15                                #! PC = 0x55555556917d *)
mov r15 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569180 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569185 *)
adcs carry r9 rax r9 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r9 0 (2**64) && true;
assume r9 = 0 && r9 = 0@64;

(* adox   %rbp,%r10                                #! PC = 0x55555556918b *)
adcs OF r10 rbp r10 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569191 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569197 *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x55555556919d *)
adcs OF r11 rbp r11 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555691a3 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r11                                #! PC = 0x5555555691a9 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x5555555691af *)
adcs OF r12 rbp r12 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555691b5 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555691bb *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x5555555691c1 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555691c7 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r13                                #! PC = 0x5555555691cd *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555691d3 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555691d9 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555691df *)
mov rdx rcx;
(* adcx   %rax,%r14                                #! PC = 0x5555555691e2 *)
adcs carry r14 rax r14 carry;
(* adox   %r15,%rbp                                #! PC = 0x5555555691e8 *)
adcs OF rbp r15 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r15                                #! PC = 0x5555555691ee *)
adcs carry r15 rbp r15 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r10,%rdx                                #! PC = 0x5555555691f4 *)
umull dontcare rdx r10 rdx;
(* xor    %r8,%r8                                  #! PC = 0x5555555691f8 *)
mov r8 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555691fb *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569200 *)
adcs carry r10 rax r10 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r10 0 (2**64) && true;
assume r10 = 0 && r10 = 0@64;

(* adox   %rbp,%r11                                #! PC = 0x555555569206 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556920c *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569212 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569218 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556921e *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569224 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x55555556922a *)
adcs OF r13 rbp r13 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569230 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569236 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556923c *)
adcs OF r14 rbp r14 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569242 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569248 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x55555556924e *)
adcs OF r15 rbp r15 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569254 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x55555556925a *)
mov rdx rcx;
(* adcx   %rax,%r15                                #! PC = 0x55555556925d *)
adcs carry r15 rax r15 carry;
(* adox   %r8,%rbp                                 #! PC = 0x555555569263 *)
adcs OF rbp r8 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r8                                 #! PC = 0x555555569269 *)
adcs carry r8 rbp r8 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r11,%rdx                                #! PC = 0x55555556926f *)
umull dontcare rdx r11 rdx;
(* xor    %r9,%r9                                  #! PC = 0x555555569273 *)
mov r9 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569276 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r11                                #! PC = 0x55555556927b *)
adcs carry r11 rax r11 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r11 0 (2**64) && true;
assume r11 = 0 && r11 = 0@64;

(* adox   %rbp,%r12                                #! PC = 0x555555569281 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569287 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r12                                #! PC = 0x55555556928d *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569293 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569299 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r13                                #! PC = 0x55555556929f *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555692a5 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555692ab *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r14                                #! PC = 0x5555555692b1 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x5555555692b7 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555692bd *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r15                                #! PC = 0x5555555692c3 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x5555555692c9 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555692cf *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555692d5 *)
mov rdx rcx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555692d8 *)
adcs carry r8 rax r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x5555555692de *)
adcs OF rbp r9 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r9                                 #! PC = 0x5555555692e4 *)
adcs carry r9 rbp r9 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r12,%rdx                                #! PC = 0x5555555692ea *)
umull dontcare rdx r12 rdx;
(* xor    %r10,%r10                                #! PC = 0x5555555692ee *)
mov r10 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555692f1 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555692f6 *)
adcs carry r12 rax r12 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r12 0 (2**64) && true;
assume r12 = 0 && r12 = 0@64;

(* adox   %rbp,%r13                                #! PC = 0x5555555692fc *)
adcs OF r13 rbp r13 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569302 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569308 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556930e *)
adcs OF r14 rbp r14 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569314 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r14                                #! PC = 0x55555556931a *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569320 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569326 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r15                                #! PC = 0x55555556932c *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x555555569332 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569338 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x55555556933e *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x555555569344 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556934a *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569350 *)
mov rdx rcx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569353 *)
adcs carry r9 rax r9 carry;
(* adox   %r10,%rbp                                #! PC = 0x555555569359 *)
adcs OF rbp r10 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r10                                #! PC = 0x55555556935f *)
adcs carry r10 rbp r10 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r13,%rdx                                #! PC = 0x555555569365 *)
umull dontcare rdx r13 rdx;
(* xor    %r11,%r11                                #! PC = 0x555555569369 *)
mov r11 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556936c *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569371 *)
adcs carry r13 rax r13 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r13 0 (2**64) && true;
assume r13 = 0 && r13 = 0@64;

(* adox   %rbp,%r14                                #! PC = 0x555555569377 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556937d *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569383 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569389 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556938f *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r15                                #! PC = 0x555555569395 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x55555556939b *)
adcs OF r8 rbp r8 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555693a1 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555693a7 *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x5555555693ad *)
adcs OF r9 rbp r9 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555693b3 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x5555555693b9 *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x5555555693bf *)
adcs OF r10 rbp r10 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555693c5 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555693cb *)
mov rdx rcx;
(* adcx   %rax,%r10                                #! PC = 0x5555555693ce *)
adcs carry r10 rax r10 carry;
(* adox   %r11,%rbp                                #! PC = 0x5555555693d4 *)
adcs OF rbp r11 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r11                                #! PC = 0x5555555693da *)
adcs carry r11 rbp r11 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x5555555693e0 *)
#repz retq                                      #! 0x5555555693e0 = 0x5555555693e0;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0, r14, r15, r8, r9, r10, r11])
               (limbs 64 [L0x7fffffffcd10, L0x7fffffffcd18, L0x7fffffffcd20,
                          L0x7fffffffcd28, L0x7fffffffcd30, L0x7fffffffcd38])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         rcx = 0x89f3fffcfffcfffd]
 && and [m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         1@64 + m0 * rcx = 0@64,

         limbs 64 [L0x7fffffffcd40, L0x7fffffffcd48, L0x7fffffffcd50,
                   L0x7fffffffcd58, L0x7fffffffcd60, L0x7fffffffcd68] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         limbs 64 [r14, r15, r8, r9, r10, r11] <=u
         limbs 64 [m0, m1, m2, m3, m4, m5]] prove with all cuts;

ghost r14o@uint64, r15o@uint64, r8o@uint64,
      r9o@uint64, r10o@uint64, r11o@uint64 :
      and [r14o=r14, r15o=r15, r8o=r8, r9o=r9, r10o=r10, r11o=r11]
   && and [r14o=r14, r15o=r15, r8o=r8, r9o=r9, r10o=r10, r11o=r11];


(* #callq  0x555555569400 <__redc_tail_mont_384>   #! PC = 0x555555568ffa *)
#callq  0x555555569400 <__redc_tail_mont_384>   #! 0x555555568ffa = 0x555555568ffa;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x555555569400 *)
#endbr64                                         #! 0x555555569400 = 0x555555569400;
(* add    0x30(%rsi),%r14                          #! EA = L0x7fffffffcd40; Value = 0xdd1090e2bea4eaeb; PC = 0x555555569404 *)
adds carry r14 L0x7fffffffcd40 r14;
(* mov    %r14,%rax                                #! PC = 0x555555569408 *)
mov rax r14;
(* adc    0x38(%rsi),%r15                          #! EA = L0x7fffffffcd48; Value = 0xd74cad1029e6de26; PC = 0x55555556940b *)
adcs carry r15 L0x7fffffffcd48 r15 carry;
(* adc    0x40(%rsi),%r8                           #! EA = L0x7fffffffcd50; Value = 0x7ca94fec3ebe52c7; PC = 0x55555556940f *)
adcs carry r8 L0x7fffffffcd50 r8 carry;
(* adc    0x48(%rsi),%r9                           #! EA = L0x7fffffffcd58; Value = 0x46870d1c55968766; PC = 0x555555569413 *)
adcs carry r9 L0x7fffffffcd58 r9 carry;
(* mov    %r15,%rcx                                #! PC = 0x555555569417 *)
mov rcx r15;
(* adc    0x50(%rsi),%r10                          #! EA = L0x7fffffffcd60; Value = 0x1915ba02d5293e76; PC = 0x55555556941a *)
adcs carry r10 L0x7fffffffcd60 r10 carry;
(* adc    0x58(%rsi),%r11                          #! EA = L0x7fffffffcd68; Value = 0x1a0111ea397fe69a; PC = 0x55555556941e *)
adcs carry r11 L0x7fffffffcd68 r11 carry;
(* sbb    %r12,%r12                                #! PC = 0x555555569422 *)
sbbs carry r12 r12 r12 carry;
(* mov    %r8,%rdx                                 #! PC = 0x555555569425 *)
mov rdx r8;
(* mov    %r9,%rbp                                 #! PC = 0x555555569428 *)
mov rbp r9;
(* sub    (%rbx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556942b *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rbx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556942e *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %r10,%r13                                #! PC = 0x555555569432 *)
mov r13 r10;
(* sbb    0x10(%rbx),%r8                           #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569435 *)
sbbs carry r8 r8 L0x55555556c750 carry;
(* sbb    0x18(%rbx),%r9                           #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569439 *)
sbbs carry r9 r9 L0x55555556c758 carry;
(* sbb    0x20(%rbx),%r10                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556943d *)
sbbs carry r10 r10 L0x55555556c760 carry;
(* mov    %r11,%rsi                                #! PC = 0x555555569441 *)
mov rsi r11;
(* sbb    0x28(%rbx),%r11                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569444 *)
sbbs carry r11 r11 L0x55555556c768 carry;
(* sbb    $0x0,%r12                                #! PC = 0x555555569448 *)
sbbs carry r12 r12 0@uint64 carry;
(* cmovb  %rax,%r14                                #! PC = 0x55555556944c *)
cmov r14 carry rax r14;
(* cmovb  %rcx,%r15                                #! PC = 0x555555569450 *)
cmov r15 carry rcx r15;
(* cmovb  %rdx,%r8                                 #! PC = 0x555555569454 *)
cmov r8 carry rdx r8;
(* mov    %r14,(%rdi)                              #! EA = L0x7fffffffcfa0; PC = 0x555555569458 *)
mov L0x7fffffffcfa0 r14;
(* cmovb  %rbp,%r9                                 #! PC = 0x55555556945b *)
cmov r9 carry rbp r9;
(* mov    %r15,0x8(%rdi)                           #! EA = L0x7fffffffcfa8; PC = 0x55555556945f *)
mov L0x7fffffffcfa8 r15;
(* cmovb  %r13,%r10                                #! PC = 0x555555569463 *)
cmov r10 carry r13 r10;
(* mov    %r8,0x10(%rdi)                           #! EA = L0x7fffffffcfb0; PC = 0x555555569467 *)
mov L0x7fffffffcfb0 r8;
(* cmovb  %rsi,%r11                                #! PC = 0x55555556946b *)
cmov r11 carry rsi r11;
(* mov    %r9,0x18(%rdi)                           #! EA = L0x7fffffffcfb8; PC = 0x55555556946f *)
mov L0x7fffffffcfb8 r9;
(* mov    %r10,0x20(%rdi)                          #! EA = L0x7fffffffcfc0; PC = 0x555555569473 *)
mov L0x7fffffffcfc0 r10;
(* mov    %r11,0x28(%rdi)                          #! EA = L0x7fffffffcfc8; PC = 0x555555569477 *)
mov L0x7fffffffcfc8 r11;
(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x55555556947b *)
#repz retq                                      #! 0x55555556947b = 0x55555556947b;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x55555556901d *)
#lea    %%EA,%rsp                          #! 0x55555556901d = 0x55555556901d;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #repz retq                                      #! PC = 0x555555569022 *)
#repz retq                                      #! 0x555555569022 = 0x555555569022;



assert true
    && eqmod (limbs 64 [L0x7fffffffcfa0, L0x7fffffffcfa8, L0x7fffffffcfb0,
                        L0x7fffffffcfb8, L0x7fffffffcfc0, L0x7fffffffcfc8])
             (limbs 64 [L0x7fffffffcd40, L0x7fffffffcd48, L0x7fffffffcd50,
                        L0x7fffffffcd58, L0x7fffffffcd60, L0x7fffffffcd68] +
              limbs 64 [r14o, r15o, r8o, r9o, r10o, r11o])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffcfa0, L0x7fffffffcfa8, L0x7fffffffcfb0,
                        L0x7fffffffcfb8, L0x7fffffffcfc0, L0x7fffffffcfc8])
             (limbs 64 [L0x7fffffffcd40, L0x7fffffffcd48, L0x7fffffffcd50,
                        L0x7fffffffcd58, L0x7fffffffcd60, L0x7fffffffcd68] +
              limbs 64 [r14o, r15o, r8o, r9o, r10o, r11o])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;


(* #lea    0x60(%rsp),%rsi                          #! PC = 0x55555555f9ae *)
#lea    %%EA,%%rsi                          #! 0x55555555f9ae = 0x55555555f9ae;
(* #lea    0x30(%rbx),%rdi                          #! PC = 0x55555555f9b3 *)
#lea    %%EA,%%rdi                          #! 0x55555555f9b3 = 0x55555555f9b3;
(* movabs $0x89f3fffcfffcfffd,%rcx                 #! PC = 0x55555555f9b7 *)
mov rcx 0x89f3fffcfffcfffd@uint64;
(* #callq  0x555555568fe0 <redcx_mont_384>         #! PC = 0x55555555f9c4 *)
#callq  0x555555568fe0 <redcx_mont_384>         #! 0x55555555f9c4 = 0x55555555f9c4;
(* #! -> SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #endbr64                                         #! PC = 0x555555568fe0 *)
#endbr64                                         #! 0x555555568fe0 = 0x555555568fe0;
(* #callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! PC = 0x555555568ff5 *)
#callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! 0x555555568ff5 = 0x555555568ff5;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x5555555690e0 *)
#endbr64                                         #! 0x5555555690e0 = 0x5555555690e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcd70; Value = 0x191d6341c9d394b9; PC = 0x5555555690e4 *)
mov r8 L0x7fffffffcd70;
(* mov    %rcx,%rdx                                #! PC = 0x5555555690e7 *)
mov rdx rcx;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcd78; Value = 0x1a98e24e1a159871; PC = 0x5555555690ea *)
mov r9 L0x7fffffffcd78;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcd80; Value = 0x9213b7ea43477f1d; PC = 0x5555555690ee *)
mov r10 L0x7fffffffcd80;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcd88; Value = 0xc0c427247afaac27; PC = 0x5555555690f2 *)
mov r11 L0x7fffffffcd88;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcd90; Value = 0xfaf9f580e4b9c8f6; PC = 0x5555555690f6 *)
mov r12 L0x7fffffffcd90;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcd98; Value = 0xea0d0b0e96d4bb69; PC = 0x5555555690fa *)
mov r13 L0x7fffffffcd98;
(* imul   %r8,%rdx                                 #! PC = 0x5555555690fe *)
umull dontcare rdx r8 rdx;
(* xor    %r14,%r14                                #! PC = 0x555555569102 *)
mov r14 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569105 *)
umull rbp rax L0x55555556c740 rdx;

mov carry 0@uint1;
mov OF 0@uint1;

(* adcx   %rax,%r8                                 #! PC = 0x55555556910a *)
adcs carry r8 rax r8 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r8 0 (2**64) && true;
assume r8 = 0 && r8 = 0@64;

(* adox   %rbp,%r9                                 #! PC = 0x555555569110 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569116 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x55555556911c *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x555555569122 *)
adcs OF r10 rbp r10 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569128 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r10                                #! PC = 0x55555556912e *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x555555569134 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x55555556913a *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569140 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569146 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556914c *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569152 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569158 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556915e *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569164 *)
mov rdx rcx;
(* adcx   %rax,%r13                                #! PC = 0x555555569167 *)
adcs carry r13 rax r13 carry;
(* adox   %r14,%rbp                                #! PC = 0x55555556916d *)
adcs OF rbp r14 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r14                                #! PC = 0x555555569173 *)
adcs carry r14 rbp r14 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r9,%rdx                                 #! PC = 0x555555569179 *)
umull dontcare rdx r9 rdx;
(* xor    %r15,%r15                                #! PC = 0x55555556917d *)
mov r15 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569180 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569185 *)
adcs carry r9 rax r9 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r9 0 (2**64) && true;
assume r9 = 0 && r9 = 0@64;

(* adox   %rbp,%r10                                #! PC = 0x55555556918b *)
adcs OF r10 rbp r10 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569191 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569197 *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x55555556919d *)
adcs OF r11 rbp r11 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555691a3 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r11                                #! PC = 0x5555555691a9 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x5555555691af *)
adcs OF r12 rbp r12 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555691b5 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555691bb *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x5555555691c1 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555691c7 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r13                                #! PC = 0x5555555691cd *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555691d3 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555691d9 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555691df *)
mov rdx rcx;
(* adcx   %rax,%r14                                #! PC = 0x5555555691e2 *)
adcs carry r14 rax r14 carry;
(* adox   %r15,%rbp                                #! PC = 0x5555555691e8 *)
adcs OF rbp r15 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r15                                #! PC = 0x5555555691ee *)
adcs carry r15 rbp r15 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r10,%rdx                                #! PC = 0x5555555691f4 *)
umull dontcare rdx r10 rdx;
(* xor    %r8,%r8                                  #! PC = 0x5555555691f8 *)
mov r8 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555691fb *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569200 *)
adcs carry r10 rax r10 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r10 0 (2**64) && true;
assume r10 = 0 && r10 = 0@64;

(* adox   %rbp,%r11                                #! PC = 0x555555569206 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556920c *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569212 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569218 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556921e *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569224 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x55555556922a *)
adcs OF r13 rbp r13 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569230 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569236 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556923c *)
adcs OF r14 rbp r14 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569242 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569248 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x55555556924e *)
adcs OF r15 rbp r15 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569254 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x55555556925a *)
mov rdx rcx;
(* adcx   %rax,%r15                                #! PC = 0x55555556925d *)
adcs carry r15 rax r15 carry;
(* adox   %r8,%rbp                                 #! PC = 0x555555569263 *)
adcs OF rbp r8 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r8                                 #! PC = 0x555555569269 *)
adcs carry r8 rbp r8 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r11,%rdx                                #! PC = 0x55555556926f *)
umull dontcare rdx r11 rdx;
(* xor    %r9,%r9                                  #! PC = 0x555555569273 *)
mov r9 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569276 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r11                                #! PC = 0x55555556927b *)
adcs carry r11 rax r11 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r11 0 (2**64) && true;
assume r11 = 0 && r11 = 0@64;

(* adox   %rbp,%r12                                #! PC = 0x555555569281 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569287 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r12                                #! PC = 0x55555556928d *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569293 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569299 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r13                                #! PC = 0x55555556929f *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555692a5 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555692ab *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r14                                #! PC = 0x5555555692b1 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x5555555692b7 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555692bd *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r15                                #! PC = 0x5555555692c3 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x5555555692c9 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555692cf *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555692d5 *)
mov rdx rcx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555692d8 *)
adcs carry r8 rax r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x5555555692de *)
adcs OF rbp r9 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r9                                 #! PC = 0x5555555692e4 *)
adcs carry r9 rbp r9 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r12,%rdx                                #! PC = 0x5555555692ea *)
umull dontcare rdx r12 rdx;
(* xor    %r10,%r10                                #! PC = 0x5555555692ee *)
mov r10 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555692f1 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555692f6 *)
adcs carry r12 rax r12 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r12 0 (2**64) && true;
assume r12 = 0 && r12 = 0@64;

(* adox   %rbp,%r13                                #! PC = 0x5555555692fc *)
adcs OF r13 rbp r13 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569302 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569308 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556930e *)
adcs OF r14 rbp r14 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569314 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r14                                #! PC = 0x55555556931a *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569320 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569326 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r15                                #! PC = 0x55555556932c *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x555555569332 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569338 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x55555556933e *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x555555569344 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556934a *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569350 *)
mov rdx rcx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569353 *)
adcs carry r9 rax r9 carry;
(* adox   %r10,%rbp                                #! PC = 0x555555569359 *)
adcs OF rbp r10 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r10                                #! PC = 0x55555556935f *)
adcs carry r10 rbp r10 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r13,%rdx                                #! PC = 0x555555569365 *)
umull dontcare rdx r13 rdx;
(* xor    %r11,%r11                                #! PC = 0x555555569369 *)
mov r11 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556936c *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569371 *)
adcs carry r13 rax r13 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r13 0 (2**64) && true;
assume r13 = 0 && r13 = 0@64;

(* adox   %rbp,%r14                                #! PC = 0x555555569377 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556937d *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569383 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569389 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556938f *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r15                                #! PC = 0x555555569395 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x55555556939b *)
adcs OF r8 rbp r8 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555693a1 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555693a7 *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x5555555693ad *)
adcs OF r9 rbp r9 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555693b3 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x5555555693b9 *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x5555555693bf *)
adcs OF r10 rbp r10 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555693c5 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555693cb *)
mov rdx rcx;
(* adcx   %rax,%r10                                #! PC = 0x5555555693ce *)
adcs carry r10 rax r10 carry;
(* adox   %r11,%rbp                                #! PC = 0x5555555693d4 *)
adcs OF rbp r11 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r11                                #! PC = 0x5555555693da *)
adcs carry r11 rbp r11 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x5555555693e0 *)
#repz retq                                      #! 0x5555555693e0 = 0x5555555693e0;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffcfa0, L0x7fffffffcfa8, L0x7fffffffcfb0,
                          L0x7fffffffcfb8, L0x7fffffffcfc0, L0x7fffffffcfc8])
               (limbs 64 [L0x7fffffffcd10, L0x7fffffffcd18, L0x7fffffffcd20,
                          L0x7fffffffcd28, L0x7fffffffcd30, L0x7fffffffcd38,
                          L0x7fffffffcd40, L0x7fffffffcd48, L0x7fffffffcd50,
                          L0x7fffffffcd58, L0x7fffffffcd60, L0x7fffffffcd68])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	 eqmod (limbs 64 [0, 0, 0, 0, 0, 0, r14, r15, r8, r9, r10, r11])
               (limbs 64 [L0x7fffffffcd70, L0x7fffffffcd78, L0x7fffffffcd80,
                          L0x7fffffffcd88, L0x7fffffffcd90, L0x7fffffffcd98])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         rcx = 0x89f3fffcfffcfffd]
 && and [limbs 64 [L0x7fffffffcfa0, L0x7fffffffcfa8, L0x7fffffffcfb0,
                   L0x7fffffffcfb8, L0x7fffffffcfc0, L0x7fffffffcfc8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
	 m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         1@64 + m0 * rcx = 0@64,

         limbs 64 [L0x7fffffffcda0, L0x7fffffffcda8, L0x7fffffffcdb0,
                   L0x7fffffffcdb8, L0x7fffffffcdc0, L0x7fffffffcdc8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         limbs 64 [r14, r15, r8, r9, r10, r11] <=u
         limbs 64 [m0, m1, m2, m3, m4, m5]] prove with all cuts;

ghost r14p@uint64, r15p@uint64, r8p@uint64,
      r9p@uint64, r10p@uint64, r11p@uint64 :
      and [r14p=r14, r15p=r15, r8p=r8, r9p=r9, r10p=r10, r11p=r11]
   && and [r14p=r14, r15p=r15, r8p=r8, r9p=r9, r10p=r10, r11p=r11];



(* #callq  0x555555569400 <__redc_tail_mont_384>   #! PC = 0x555555568ffa *)
#callq  0x555555569400 <__redc_tail_mont_384>   #! 0x555555568ffa = 0x555555568ffa;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x555555569400 *)
#endbr64                                         #! 0x555555569400 = 0x555555569400;
(* add    0x30(%rsi),%r14                          #! EA = L0x7fffffffcda0; Value = 0x6b6c92f2a731ec29; PC = 0x555555569404 *)
adds carry r14 L0x7fffffffcda0 r14;
(* mov    %r14,%rax                                #! PC = 0x555555569408 *)
mov rax r14;
(* adc    0x38(%rsi),%r15                          #! EA = L0x7fffffffcda8; Value = 0x34d3d396bc90d761; PC = 0x55555556940b *)
adcs carry r15 L0x7fffffffcda8 r15 carry;
(* adc    0x40(%rsi),%r8                           #! EA = L0x7fffffffcdb0; Value = 0x89a21721ee2375df; PC = 0x55555556940f *)
adcs carry r8 L0x7fffffffcdb0 r8 carry;
(* adc    0x48(%rsi),%r9                           #! EA = L0x7fffffffcdb8; Value = 0x862c33b5d64baf8b; PC = 0x555555569413 *)
adcs carry r9 L0x7fffffffcdb8 r9 carry;
(* mov    %r15,%rcx                                #! PC = 0x555555569417 *)
mov rcx r15;
(* adc    0x50(%rsi),%r10                          #! EA = L0x7fffffffcdc0; Value = 0xd7ee1702f075f1c9; PC = 0x55555556941a *)
adcs carry r10 L0x7fffffffcdc0 r10 carry;
(* adc    0x58(%rsi),%r11                          #! EA = L0x7fffffffcdc8; Value = 0x00000000ffffeffa; PC = 0x55555556941e *)
adcs carry r11 L0x7fffffffcdc8 r11 carry;
(* sbb    %r12,%r12                                #! PC = 0x555555569422 *)
sbbs carry r12 r12 r12 carry;
(* mov    %r8,%rdx                                 #! PC = 0x555555569425 *)
mov rdx r8;
(* mov    %r9,%rbp                                 #! PC = 0x555555569428 *)
mov rbp r9;
(* sub    (%rbx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556942b *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rbx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556942e *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %r10,%r13                                #! PC = 0x555555569432 *)
mov r13 r10;
(* sbb    0x10(%rbx),%r8                           #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569435 *)
sbbs carry r8 r8 L0x55555556c750 carry;
(* sbb    0x18(%rbx),%r9                           #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569439 *)
sbbs carry r9 r9 L0x55555556c758 carry;
(* sbb    0x20(%rbx),%r10                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556943d *)
sbbs carry r10 r10 L0x55555556c760 carry;
(* mov    %r11,%rsi                                #! PC = 0x555555569441 *)
mov rsi r11;
(* sbb    0x28(%rbx),%r11                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569444 *)
sbbs carry r11 r11 L0x55555556c768 carry;
(* sbb    $0x0,%r12                                #! PC = 0x555555569448 *)
sbbs carry r12 r12 0@uint64 carry;
(* cmovb  %rax,%r14                                #! PC = 0x55555556944c *)
cmov r14 carry rax r14;
(* cmovb  %rcx,%r15                                #! PC = 0x555555569450 *)
cmov r15 carry rcx r15;
(* cmovb  %rdx,%r8                                 #! PC = 0x555555569454 *)
cmov r8 carry rdx r8;
(* mov    %r14,(%rdi)                              #! EA = L0x7fffffffcfd0; PC = 0x555555569458 *)
mov L0x7fffffffcfd0 r14;
(* cmovb  %rbp,%r9                                 #! PC = 0x55555556945b *)
cmov r9 carry rbp r9;
(* mov    %r15,0x8(%rdi)                           #! EA = L0x7fffffffcfd8; PC = 0x55555556945f *)
mov L0x7fffffffcfd8 r15;
(* cmovb  %r13,%r10                                #! PC = 0x555555569463 *)
cmov r10 carry r13 r10;
(* mov    %r8,0x10(%rdi)                           #! EA = L0x7fffffffcfe0; PC = 0x555555569467 *)
mov L0x7fffffffcfe0 r8;
(* cmovb  %rsi,%r11                                #! PC = 0x55555556946b *)
cmov r11 carry rsi r11;
(* mov    %r9,0x18(%rdi)                           #! EA = L0x7fffffffcfe8; PC = 0x55555556946f *)
mov L0x7fffffffcfe8 r9;
(* mov    %r10,0x20(%rdi)                          #! EA = L0x7fffffffcff0; PC = 0x555555569473 *)
mov L0x7fffffffcff0 r10;
(* mov    %r11,0x28(%rdi)                          #! EA = L0x7fffffffcff8; PC = 0x555555569477 *)
mov L0x7fffffffcff8 r11;
(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x55555556947b *)
#repz retq                                      #! 0x55555556947b = 0x55555556947b;
(* #lea    0x38(%rsp),%rsp                          #! PC = 0x55555556901d *)
#lea    %%EA,%rsp                          #! 0x55555556901d = 0x55555556901d;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #repz retq                                      #! PC = 0x555555569022 *)
#repz retq                                      #! 0x555555569022 = 0x555555569022;


assert true
    && eqmod (limbs 64 [L0x7fffffffcfd0, L0x7fffffffcfd8, L0x7fffffffcfe0,
                        L0x7fffffffcfe8, L0x7fffffffcff0, L0x7fffffffcff8])
             (limbs 64 [L0x7fffffffcda0, L0x7fffffffcda8, L0x7fffffffcdb0,
                        L0x7fffffffcdb8, L0x7fffffffcdc0, L0x7fffffffcdc8] +
              limbs 64 [r14p, r15p, r8p, r9p, r10p, r11p])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffcfd0, L0x7fffffffcfd8, L0x7fffffffcfe0,
                        L0x7fffffffcfe8, L0x7fffffffcff0, L0x7fffffffcff8])
             (limbs 64 [L0x7fffffffcda0, L0x7fffffffcda8, L0x7fffffffcdb0,
                        L0x7fffffffcdb8, L0x7fffffffcdc0, L0x7fffffffcdc8] +
              limbs 64 [r14p, r15p, r8p, r9p, r10p, r11p])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;




(* #lea    0xc0(%rsp),%rsi                          #! PC = 0x55555555f9c9 *)
#lea    %%EA,%%rsi                          #! 0x55555555f9c9 = 0x55555555f9c9;
(* #lea    0x60(%rbx),%rdi                          #! PC = 0x55555555f9d1 *)
#lea    %%EA,%%rdi                          #! 0x55555555f9d1 = 0x55555555f9d1;
(* movabs $0x89f3fffcfffcfffd,%rcx                 #! PC = 0x55555555f9d5 *)
mov rcx 0x89f3fffcfffcfffd@uint64;
(* #callq  0x555555568fe0 <redcx_mont_384>         #! PC = 0x55555555f9e2 *)
#callq  0x555555568fe0 <redcx_mont_384>         #! 0x55555555f9e2 = 0x55555555f9e2;
(* #! -> SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #endbr64                                         #! PC = 0x555555568fe0 *)
#endbr64                                         #! 0x555555568fe0 = 0x555555568fe0;
(* #callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! PC = 0x555555568ff5 *)
#callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! 0x555555568ff5 = 0x555555568ff5;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x5555555690e0 *)
#endbr64                                         #! 0x5555555690e0 = 0x5555555690e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcdd0; Value = 0x634d335a063fddbe; PC = 0x5555555690e4 *)
mov r8 L0x7fffffffcdd0;
(* mov    %rcx,%rdx                                #! PC = 0x5555555690e7 *)
mov rdx rcx;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcdd8; Value = 0xb177c968dd5236f3; PC = 0x5555555690ea *)
mov r9 L0x7fffffffcdd8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcde0; Value = 0x5603920593567e3a; PC = 0x5555555690ee *)
mov r10 L0x7fffffffcde0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcde8; Value = 0x390998b57ab7ceb8; PC = 0x5555555690f2 *)
mov r11 L0x7fffffffcde8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcdf0; Value = 0x274f8aa2840732cf; PC = 0x5555555690f6 *)
mov r12 L0x7fffffffcdf0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcdf8; Value = 0x80a5c4c6f0a7548c; PC = 0x5555555690fa *)
mov r13 L0x7fffffffcdf8;
(* imul   %r8,%rdx                                 #! PC = 0x5555555690fe *)
umull dontcare rdx r8 rdx;
(* xor    %r14,%r14                                #! PC = 0x555555569102 *)
mov r14 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569105 *)
umull rbp rax L0x55555556c740 rdx;

mov carry 0@uint1;
mov OF 0@uint1;

(* adcx   %rax,%r8                                 #! PC = 0x55555556910a *)
adcs carry r8 rax r8 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r8 0 (2**64) && true;
assume r8 = 0 && r8 = 0@64;

(* adox   %rbp,%r9                                 #! PC = 0x555555569110 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569116 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x55555556911c *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x555555569122 *)
adcs OF r10 rbp r10 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569128 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r10                                #! PC = 0x55555556912e *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x555555569134 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x55555556913a *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569140 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569146 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556914c *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569152 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569158 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556915e *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569164 *)
mov rdx rcx;
(* adcx   %rax,%r13                                #! PC = 0x555555569167 *)
adcs carry r13 rax r13 carry;
(* adox   %r14,%rbp                                #! PC = 0x55555556916d *)
adcs OF rbp r14 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r14                                #! PC = 0x555555569173 *)
adcs carry r14 rbp r14 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r9,%rdx                                 #! PC = 0x555555569179 *)
umull dontcare rdx r9 rdx;
(* xor    %r15,%r15                                #! PC = 0x55555556917d *)
mov r15 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569180 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569185 *)
adcs carry r9 rax r9 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r9 0 (2**64) && true;
assume r9 = 0 && r9 = 0@64;

(* adox   %rbp,%r10                                #! PC = 0x55555556918b *)
adcs OF r10 rbp r10 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569191 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569197 *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x55555556919d *)
adcs OF r11 rbp r11 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555691a3 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r11                                #! PC = 0x5555555691a9 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x5555555691af *)
adcs OF r12 rbp r12 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555691b5 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555691bb *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x5555555691c1 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555691c7 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r13                                #! PC = 0x5555555691cd *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555691d3 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555691d9 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555691df *)
mov rdx rcx;
(* adcx   %rax,%r14                                #! PC = 0x5555555691e2 *)
adcs carry r14 rax r14 carry;
(* adox   %r15,%rbp                                #! PC = 0x5555555691e8 *)
adcs OF rbp r15 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r15                                #! PC = 0x5555555691ee *)
adcs carry r15 rbp r15 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r10,%rdx                                #! PC = 0x5555555691f4 *)
umull dontcare rdx r10 rdx;
(* xor    %r8,%r8                                  #! PC = 0x5555555691f8 *)
mov r8 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555691fb *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569200 *)
adcs carry r10 rax r10 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r10 0 (2**64) && true;
assume r10 = 0 && r10 = 0@64;

(* adox   %rbp,%r11                                #! PC = 0x555555569206 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556920c *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569212 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569218 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556921e *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569224 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x55555556922a *)
adcs OF r13 rbp r13 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569230 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569236 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556923c *)
adcs OF r14 rbp r14 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569242 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569248 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x55555556924e *)
adcs OF r15 rbp r15 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569254 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x55555556925a *)
mov rdx rcx;
(* adcx   %rax,%r15                                #! PC = 0x55555556925d *)
adcs carry r15 rax r15 carry;
(* adox   %r8,%rbp                                 #! PC = 0x555555569263 *)
adcs OF rbp r8 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r8                                 #! PC = 0x555555569269 *)
adcs carry r8 rbp r8 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r11,%rdx                                #! PC = 0x55555556926f *)
umull dontcare rdx r11 rdx;
(* xor    %r9,%r9                                  #! PC = 0x555555569273 *)
mov r9 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569276 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r11                                #! PC = 0x55555556927b *)
adcs carry r11 rax r11 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r11 0 (2**64) && true;
assume r11 = 0 && r11 = 0@64;

(* adox   %rbp,%r12                                #! PC = 0x555555569281 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569287 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r12                                #! PC = 0x55555556928d *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569293 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569299 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r13                                #! PC = 0x55555556929f *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555692a5 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555692ab *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r14                                #! PC = 0x5555555692b1 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x5555555692b7 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555692bd *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r15                                #! PC = 0x5555555692c3 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x5555555692c9 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555692cf *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555692d5 *)
mov rdx rcx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555692d8 *)
adcs carry r8 rax r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x5555555692de *)
adcs OF rbp r9 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r9                                 #! PC = 0x5555555692e4 *)
adcs carry r9 rbp r9 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r12,%rdx                                #! PC = 0x5555555692ea *)
umull dontcare rdx r12 rdx;
(* xor    %r10,%r10                                #! PC = 0x5555555692ee *)
mov r10 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555692f1 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555692f6 *)
adcs carry r12 rax r12 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r12 0 (2**64) && true;
assume r12 = 0 && r12 = 0@64;

(* adox   %rbp,%r13                                #! PC = 0x5555555692fc *)
adcs OF r13 rbp r13 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569302 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569308 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556930e *)
adcs OF r14 rbp r14 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569314 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r14                                #! PC = 0x55555556931a *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569320 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569326 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r15                                #! PC = 0x55555556932c *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x555555569332 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569338 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x55555556933e *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x555555569344 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556934a *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569350 *)
mov rdx rcx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569353 *)
adcs carry r9 rax r9 carry;
(* adox   %r10,%rbp                                #! PC = 0x555555569359 *)
adcs OF rbp r10 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r10                                #! PC = 0x55555556935f *)
adcs carry r10 rbp r10 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r13,%rdx                                #! PC = 0x555555569365 *)
umull dontcare rdx r13 rdx;
(* xor    %r11,%r11                                #! PC = 0x555555569369 *)
mov r11 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556936c *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569371 *)
adcs carry r13 rax r13 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r13 0 (2**64) && true;
assume r13 = 0 && r13 = 0@64;

(* adox   %rbp,%r14                                #! PC = 0x555555569377 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556937d *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569383 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569389 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556938f *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r15                                #! PC = 0x555555569395 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x55555556939b *)
adcs OF r8 rbp r8 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555693a1 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555693a7 *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x5555555693ad *)
adcs OF r9 rbp r9 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555693b3 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x5555555693b9 *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x5555555693bf *)
adcs OF r10 rbp r10 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555693c5 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555693cb *)
mov rdx rcx;
(* adcx   %rax,%r10                                #! PC = 0x5555555693ce *)
adcs carry r10 rax r10 carry;
(* adox   %r11,%rbp                                #! PC = 0x5555555693d4 *)
adcs OF rbp r11 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r11                                #! PC = 0x5555555693da *)
adcs carry r11 rbp r11 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x5555555693e0 *)
#repz retq                                      #! 0x5555555693e0 = 0x5555555693e0;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffcfd0, L0x7fffffffcfd8, L0x7fffffffcfe0,
                          L0x7fffffffcfe8, L0x7fffffffcff0, L0x7fffffffcff8])
               (limbs 64 [L0x7fffffffcd70, L0x7fffffffcd78, L0x7fffffffcd80,
                          L0x7fffffffcd88, L0x7fffffffcd90, L0x7fffffffcd98,
                          L0x7fffffffcda0, L0x7fffffffcda8, L0x7fffffffcdb0,
                          L0x7fffffffcdb8, L0x7fffffffcdc0, L0x7fffffffcdc8])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	 eqmod (limbs 64 [0, 0, 0, 0, 0, 0, r14, r15, r8, r9, r10, r11])
               (limbs 64 [L0x7fffffffcdd0, L0x7fffffffcdd8, L0x7fffffffcde0,
                          L0x7fffffffcde8, L0x7fffffffcdf0, L0x7fffffffcdf8])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         rcx = 0x89f3fffcfffcfffd]
 && and [limbs 64 [L0x7fffffffcfd0, L0x7fffffffcfd8, L0x7fffffffcfe0,
                   L0x7fffffffcfe8, L0x7fffffffcff0, L0x7fffffffcff8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
	 m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         1@64 + m0 * rcx = 0@64,

         limbs 64 [L0x7fffffffce00, L0x7fffffffce08, L0x7fffffffce10,
                   L0x7fffffffce18, L0x7fffffffce20, L0x7fffffffce28] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         limbs 64 [r14, r15, r8, r9, r10, r11] <=u
         limbs 64 [m0, m1, m2, m3, m4, m5]] prove with all cuts;

ghost r14q@uint64, r15q@uint64, r8q@uint64,
      r9q@uint64, r10q@uint64, r11q@uint64 :
      and [r14q=r14, r15q=r15, r8q=r8, r9q=r9, r10q=r10, r11q=r11]
   && and [r14q=r14, r15q=r15, r8q=r8, r9q=r9, r10q=r10, r11q=r11];



(* #callq  0x555555569400 <__redc_tail_mont_384>   #! PC = 0x555555568ffa *)
#callq  0x555555569400 <__redc_tail_mont_384>   #! 0x555555568ffa = 0x555555568ffa;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x555555569400 *)
#endbr64                                         #! 0x555555569400 = 0x555555569400;
(* add    0x30(%rsi),%r14                          #! EA = L0x7fffffffce00; Value = 0x9a9b1767700987e8; PC = 0x555555569404 *)
adds carry r14 L0x7fffffffce00 r14;
(* mov    %r14,%rax                                #! PC = 0x555555569408 *)
mov rax r14;
(* adc    0x38(%rsi),%r15                          #! EA = L0x7fffffffce08; Value = 0xbbef3ec3ac9e7625; PC = 0x55555556940b *)
adcs carry r15 L0x7fffffffce08 r15 carry;
(* adc    0x40(%rsi),%r8                           #! EA = L0x7fffffffce10; Value = 0xf1c567b13e290f45; PC = 0x55555556940f *)
adcs carry r8 L0x7fffffffce10 r8 carry;
(* adc    0x48(%rsi),%r9                           #! EA = L0x7fffffffce18; Value = 0x5c2b23a292a5bf80; PC = 0x555555569413 *)
adcs carry r9 L0x7fffffffce18 r9 carry;
(* mov    %r15,%rcx                                #! PC = 0x555555569417 *)
mov rcx r15;
(* adc    0x50(%rsi),%r10                          #! EA = L0x7fffffffce20; Value = 0xaa8ec678127ab54a; PC = 0x55555556941a *)
adcs carry r10 L0x7fffffffce20 r10 carry;
(* adc    0x58(%rsi),%r11                          #! EA = L0x7fffffffce28; Value = 0x1a0111ea397f7f1a; PC = 0x55555556941e *)
adcs carry r11 L0x7fffffffce28 r11 carry;
(* sbb    %r12,%r12                                #! PC = 0x555555569422 *)
sbbs carry r12 r12 r12 carry;
(* mov    %r8,%rdx                                 #! PC = 0x555555569425 *)
mov rdx r8;
(* mov    %r9,%rbp                                 #! PC = 0x555555569428 *)
mov rbp r9;
(* sub    (%rbx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556942b *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rbx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556942e *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %r10,%r13                                #! PC = 0x555555569432 *)
mov r13 r10;
(* sbb    0x10(%rbx),%r8                           #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569435 *)
sbbs carry r8 r8 L0x55555556c750 carry;
(* sbb    0x18(%rbx),%r9                           #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569439 *)
sbbs carry r9 r9 L0x55555556c758 carry;
(* sbb    0x20(%rbx),%r10                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556943d *)
sbbs carry r10 r10 L0x55555556c760 carry;
(* mov    %r11,%rsi                                #! PC = 0x555555569441 *)
mov rsi r11;
(* sbb    0x28(%rbx),%r11                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569444 *)
sbbs carry r11 r11 L0x55555556c768 carry;
(* sbb    $0x0,%r12                                #! PC = 0x555555569448 *)
sbbs carry r12 r12 0@uint64 carry;
(* cmovb  %rax,%r14                                #! PC = 0x55555556944c *)
cmov r14 carry rax r14;
(* cmovb  %rcx,%r15                                #! PC = 0x555555569450 *)
cmov r15 carry rcx r15;
(* cmovb  %rdx,%r8                                 #! PC = 0x555555569454 *)
cmov r8 carry rdx r8;
(* mov    %r14,(%rdi)                              #! EA = L0x7fffffffd000; PC = 0x555555569458 *)
mov L0x7fffffffd000 r14;
(* cmovb  %rbp,%r9                                 #! PC = 0x55555556945b *)
cmov r9 carry rbp r9;
(* mov    %r15,0x8(%rdi)                           #! EA = L0x7fffffffd008; PC = 0x55555556945f *)
mov L0x7fffffffd008 r15;
(* cmovb  %r13,%r10                                #! PC = 0x555555569463 *)
cmov r10 carry r13 r10;
(* mov    %r8,0x10(%rdi)                           #! EA = L0x7fffffffd010; PC = 0x555555569467 *)
mov L0x7fffffffd010 r8;
(* cmovb  %rsi,%r11                                #! PC = 0x55555556946b *)
cmov r11 carry rsi r11;
(* mov    %r9,0x18(%rdi)                           #! EA = L0x7fffffffd018; PC = 0x55555556946f *)
mov L0x7fffffffd018 r9;
(* mov    %r10,0x20(%rdi)                          #! EA = L0x7fffffffd020; PC = 0x555555569473 *)
mov L0x7fffffffd020 r10;
(* mov    %r11,0x28(%rdi)                          #! EA = L0x7fffffffd028; PC = 0x555555569477 *)
mov L0x7fffffffd028 r11;
(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x55555556947b *)
#repz retq                                      #! 0x55555556947b = 0x55555556947b;


assert true
    && eqmod (limbs 64 [L0x7fffffffd000, L0x7fffffffd008, L0x7fffffffd010,
                        L0x7fffffffd018, L0x7fffffffd020, L0x7fffffffd028])
             (limbs 64 [L0x7fffffffce00, L0x7fffffffce08, L0x7fffffffce10,
                        L0x7fffffffce18, L0x7fffffffce20, L0x7fffffffce28] +
              limbs 64 [r14q, r15q, r8q, r9q, r10q, r11q])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffd000, L0x7fffffffd008, L0x7fffffffd010,
                        L0x7fffffffd018, L0x7fffffffd020, L0x7fffffffd028])
             (limbs 64 [L0x7fffffffce00, L0x7fffffffce08, L0x7fffffffce10,
                        L0x7fffffffce18, L0x7fffffffce20, L0x7fffffffce28] +
              limbs 64 [r14q, r15q, r8q, r9q, r10q, r11q])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;



(* #lea    0x38(%rsp),%rsp                          #! PC = 0x55555556901d *)
#lea    %%EA,%rsp                          #! 0x55555556901d = 0x55555556901d;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #repz retq                                      #! PC = 0x555555569022 *)
#repz retq                                      #! 0x555555569022 = 0x555555569022;
(* #lea    0x120(%rsp),%rsi                         #! PC = 0x55555555f9e7 *)
#lea    %%EA,%%rsi                         #! 0x55555555f9e7 = 0x55555555f9e7;
(* #lea    0x90(%rbx),%rdi                          #! PC = 0x55555555f9ef *)
#lea    %%EA,%%rdi                          #! 0x55555555f9ef = 0x55555555f9ef;
(* movabs $0x89f3fffcfffcfffd,%rcx                 #! PC = 0x55555555f9f6 *)
mov rcx 0x89f3fffcfffcfffd@uint64;
(* #callq  0x555555568fe0 <redcx_mont_384>         #! PC = 0x55555555fa03 *)
#callq  0x555555568fe0 <redcx_mont_384>         #! 0x55555555fa03 = 0x55555555fa03;
(* #! -> SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #endbr64                                         #! PC = 0x555555568fe0 *)
#endbr64                                         #! 0x555555568fe0 = 0x555555568fe0;
(* #callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! PC = 0x555555568ff5 *)
#callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! 0x555555568ff5 = 0x555555568ff5;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x5555555690e0 *)
#endbr64                                         #! 0x5555555690e0 = 0x5555555690e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce30; Value = 0x20a60eab3641360e; PC = 0x5555555690e4 *)
mov r8 L0x7fffffffce30;
(* mov    %rcx,%rdx                                #! PC = 0x5555555690e7 *)
mov rdx rcx;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce38; Value = 0x2cefab02a2ecf28a; PC = 0x5555555690ea *)
mov r9 L0x7fffffffce38;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffce40; Value = 0x0b8001459b71bb1d; PC = 0x5555555690ee *)
mov r10 L0x7fffffffce40;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffce48; Value = 0x5f6bb5949616a9fd; PC = 0x5555555690f2 *)
mov r11 L0x7fffffffce48;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffce50; Value = 0x117358a5939d4b3d; PC = 0x5555555690f6 *)
mov r12 L0x7fffffffce50;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffce58; Value = 0x618300396634aae1; PC = 0x5555555690fa *)
mov r13 L0x7fffffffce58;
(* imul   %r8,%rdx                                 #! PC = 0x5555555690fe *)
umull dontcare rdx r8 rdx;
(* xor    %r14,%r14                                #! PC = 0x555555569102 *)
mov r14 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569105 *)
umull rbp rax L0x55555556c740 rdx;

mov carry 0@uint1;
mov OF 0@uint1;

(* adcx   %rax,%r8                                 #! PC = 0x55555556910a *)
adcs carry r8 rax r8 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r8 0 (2**64) && true;
assume r8 = 0 && r8 = 0@64;

(* adox   %rbp,%r9                                 #! PC = 0x555555569110 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569116 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x55555556911c *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x555555569122 *)
adcs OF r10 rbp r10 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569128 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r10                                #! PC = 0x55555556912e *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x555555569134 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x55555556913a *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569140 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569146 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556914c *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569152 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569158 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556915e *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569164 *)
mov rdx rcx;
(* adcx   %rax,%r13                                #! PC = 0x555555569167 *)
adcs carry r13 rax r13 carry;
(* adox   %r14,%rbp                                #! PC = 0x55555556916d *)
adcs OF rbp r14 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r14                                #! PC = 0x555555569173 *)
adcs carry r14 rbp r14 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r9,%rdx                                 #! PC = 0x555555569179 *)
umull dontcare rdx r9 rdx;
(* xor    %r15,%r15                                #! PC = 0x55555556917d *)
mov r15 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569180 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569185 *)
adcs carry r9 rax r9 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r9 0 (2**64) && true;
assume r9 = 0 && r9 = 0@64;

(* adox   %rbp,%r10                                #! PC = 0x55555556918b *)
adcs OF r10 rbp r10 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569191 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569197 *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x55555556919d *)
adcs OF r11 rbp r11 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555691a3 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r11                                #! PC = 0x5555555691a9 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x5555555691af *)
adcs OF r12 rbp r12 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555691b5 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555691bb *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x5555555691c1 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555691c7 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r13                                #! PC = 0x5555555691cd *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555691d3 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555691d9 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555691df *)
mov rdx rcx;
(* adcx   %rax,%r14                                #! PC = 0x5555555691e2 *)
adcs carry r14 rax r14 carry;
(* adox   %r15,%rbp                                #! PC = 0x5555555691e8 *)
adcs OF rbp r15 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r15                                #! PC = 0x5555555691ee *)
adcs carry r15 rbp r15 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r10,%rdx                                #! PC = 0x5555555691f4 *)
umull dontcare rdx r10 rdx;
(* xor    %r8,%r8                                  #! PC = 0x5555555691f8 *)
mov r8 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555691fb *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569200 *)
adcs carry r10 rax r10 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r10 0 (2**64) && true;
assume r10 = 0 && r10 = 0@64;

(* adox   %rbp,%r11                                #! PC = 0x555555569206 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556920c *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569212 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569218 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556921e *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569224 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x55555556922a *)
adcs OF r13 rbp r13 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569230 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569236 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556923c *)
adcs OF r14 rbp r14 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569242 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569248 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x55555556924e *)
adcs OF r15 rbp r15 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569254 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x55555556925a *)
mov rdx rcx;
(* adcx   %rax,%r15                                #! PC = 0x55555556925d *)
adcs carry r15 rax r15 carry;
(* adox   %r8,%rbp                                 #! PC = 0x555555569263 *)
adcs OF rbp r8 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r8                                 #! PC = 0x555555569269 *)
adcs carry r8 rbp r8 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r11,%rdx                                #! PC = 0x55555556926f *)
umull dontcare rdx r11 rdx;
(* xor    %r9,%r9                                  #! PC = 0x555555569273 *)
mov r9 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569276 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r11                                #! PC = 0x55555556927b *)
adcs carry r11 rax r11 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r11 0 (2**64) && true;
assume r11 = 0 && r11 = 0@64;

(* adox   %rbp,%r12                                #! PC = 0x555555569281 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569287 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r12                                #! PC = 0x55555556928d *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569293 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569299 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r13                                #! PC = 0x55555556929f *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555692a5 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555692ab *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r14                                #! PC = 0x5555555692b1 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x5555555692b7 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555692bd *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r15                                #! PC = 0x5555555692c3 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x5555555692c9 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555692cf *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555692d5 *)
mov rdx rcx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555692d8 *)
adcs carry r8 rax r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x5555555692de *)
adcs OF rbp r9 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r9                                 #! PC = 0x5555555692e4 *)
adcs carry r9 rbp r9 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r12,%rdx                                #! PC = 0x5555555692ea *)
umull dontcare rdx r12 rdx;
(* xor    %r10,%r10                                #! PC = 0x5555555692ee *)
mov r10 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555692f1 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555692f6 *)
adcs carry r12 rax r12 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r12 0 (2**64) && true;
assume r12 = 0 && r12 = 0@64;

(* adox   %rbp,%r13                                #! PC = 0x5555555692fc *)
adcs OF r13 rbp r13 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569302 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569308 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556930e *)
adcs OF r14 rbp r14 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569314 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r14                                #! PC = 0x55555556931a *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569320 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569326 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r15                                #! PC = 0x55555556932c *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x555555569332 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569338 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x55555556933e *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x555555569344 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556934a *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569350 *)
mov rdx rcx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569353 *)
adcs carry r9 rax r9 carry;
(* adox   %r10,%rbp                                #! PC = 0x555555569359 *)
adcs OF rbp r10 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r10                                #! PC = 0x55555556935f *)
adcs carry r10 rbp r10 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r13,%rdx                                #! PC = 0x555555569365 *)
umull dontcare rdx r13 rdx;
(* xor    %r11,%r11                                #! PC = 0x555555569369 *)
mov r11 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556936c *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569371 *)
adcs carry r13 rax r13 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r13 0 (2**64) && true;
assume r13 = 0 && r13 = 0@64;

(* adox   %rbp,%r14                                #! PC = 0x555555569377 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556937d *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569383 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569389 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556938f *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r15                                #! PC = 0x555555569395 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x55555556939b *)
adcs OF r8 rbp r8 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555693a1 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555693a7 *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x5555555693ad *)
adcs OF r9 rbp r9 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555693b3 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x5555555693b9 *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x5555555693bf *)
adcs OF r10 rbp r10 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555693c5 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555693cb *)
mov rdx rcx;
(* adcx   %rax,%r10                                #! PC = 0x5555555693ce *)
adcs carry r10 rax r10 carry;
(* adox   %r11,%rbp                                #! PC = 0x5555555693d4 *)
adcs OF rbp r11 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r11                                #! PC = 0x5555555693da *)
adcs carry r11 rbp r11 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x5555555693e0 *)
#repz retq                                      #! 0x5555555693e0 = 0x5555555693e0;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd000, L0x7fffffffd008, L0x7fffffffd010,
                          L0x7fffffffd018, L0x7fffffffd020, L0x7fffffffd028])
               (limbs 64 [L0x7fffffffcdd0, L0x7fffffffcdd8, L0x7fffffffcde0,
                          L0x7fffffffcde8, L0x7fffffffcdf0, L0x7fffffffcdf8,
                          L0x7fffffffce00, L0x7fffffffce08, L0x7fffffffce10,
                          L0x7fffffffce18, L0x7fffffffce20, L0x7fffffffce28])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	 eqmod (limbs 64 [0, 0, 0, 0, 0, 0, r14, r15, r8, r9, r10, r11])
               (limbs 64 [L0x7fffffffce30, L0x7fffffffce38, L0x7fffffffce40,
                          L0x7fffffffce48, L0x7fffffffce50, L0x7fffffffce58])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         rcx = 0x89f3fffcfffcfffd]
 && and [limbs 64 [L0x7fffffffd000, L0x7fffffffd008, L0x7fffffffd010,
                   L0x7fffffffd018, L0x7fffffffd020, L0x7fffffffd028] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
	 m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         1@64 + m0 * rcx = 0@64,

         limbs 64 [L0x7fffffffce60, L0x7fffffffce68, L0x7fffffffce70,
                   L0x7fffffffce78, L0x7fffffffce80, L0x7fffffffce88] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         limbs 64 [r14, r15, r8, r9, r10, r11] <=u
         limbs 64 [m0, m1, m2, m3, m4, m5]] prove with all cuts;

ghost r14r@uint64, r15r@uint64, r8r@uint64,
      r9r@uint64, r10r@uint64, r11r@uint64 :
      and [r14r=r14, r15r=r15, r8r=r8, r9r=r9, r10r=r10, r11r=r11]
   && and [r14r=r14, r15r=r15, r8r=r8, r9r=r9, r10r=r10, r11r=r11];



(* #callq  0x555555569400 <__redc_tail_mont_384>   #! PC = 0x555555568ffa *)
#callq  0x555555569400 <__redc_tail_mont_384>   #! 0x555555568ffa = 0x555555568ffa;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x555555569400 *)
#endbr64                                         #! 0x555555569400 = 0x555555569400;
(* add    0x30(%rsi),%r14                          #! EA = L0x7fffffffce60; Value = 0x4e5184da01693f4f; PC = 0x555555569404 *)
adds carry r14 L0x7fffffffce60 r14;
(* mov    %r14,%rax                                #! PC = 0x555555569408 *)
mov rax r14;
(* adc    0x38(%rsi),%r15                          #! EA = L0x7fffffffce68; Value = 0x15f35ebf56a0b23f; PC = 0x55555556940b *)
adcs carry r15 L0x7fffffffce68 r15 carry;
(* adc    0x40(%rsi),%r8                           #! EA = L0x7fffffffce70; Value = 0xdba0b136110ab36f; PC = 0x55555556940f *)
adcs carry r8 L0x7fffffffce70 r8 carry;
(* adc    0x48(%rsi),%r9                           #! EA = L0x7fffffffce78; Value = 0x7404d31653195653; PC = 0x555555569413 *)
adcs carry r9 L0x7fffffffce78 r9 carry;
(* mov    %r15,%rcx                                #! PC = 0x555555569417 *)
mov rcx r15;
(* adc    0x50(%rsi),%r10                          #! EA = L0x7fffffffce80; Value = 0xe9c52b2151013d61; PC = 0x55555556941a *)
adcs carry r10 L0x7fffffffce80 r10 carry;
(* adc    0x58(%rsi),%r11                          #! EA = L0x7fffffffce88; Value = 0x000000008000577a; PC = 0x55555556941e *)
adcs carry r11 L0x7fffffffce88 r11 carry;
(* sbb    %r12,%r12                                #! PC = 0x555555569422 *)
sbbs carry r12 r12 r12 carry;
(* mov    %r8,%rdx                                 #! PC = 0x555555569425 *)
mov rdx r8;
(* mov    %r9,%rbp                                 #! PC = 0x555555569428 *)
mov rbp r9;
(* sub    (%rbx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556942b *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rbx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556942e *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %r10,%r13                                #! PC = 0x555555569432 *)
mov r13 r10;
(* sbb    0x10(%rbx),%r8                           #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569435 *)
sbbs carry r8 r8 L0x55555556c750 carry;
(* sbb    0x18(%rbx),%r9                           #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569439 *)
sbbs carry r9 r9 L0x55555556c758 carry;
(* sbb    0x20(%rbx),%r10                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556943d *)
sbbs carry r10 r10 L0x55555556c760 carry;
(* mov    %r11,%rsi                                #! PC = 0x555555569441 *)
mov rsi r11;
(* sbb    0x28(%rbx),%r11                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569444 *)
sbbs carry r11 r11 L0x55555556c768 carry;
(* sbb    $0x0,%r12                                #! PC = 0x555555569448 *)
sbbs carry r12 r12 0@uint64 carry;
(* cmovb  %rax,%r14                                #! PC = 0x55555556944c *)
cmov r14 carry rax r14;
(* cmovb  %rcx,%r15                                #! PC = 0x555555569450 *)
cmov r15 carry rcx r15;
(* cmovb  %rdx,%r8                                 #! PC = 0x555555569454 *)
cmov r8 carry rdx r8;
(* mov    %r14,(%rdi)                              #! EA = L0x7fffffffd030; PC = 0x555555569458 *)
mov L0x7fffffffd030 r14;
(* cmovb  %rbp,%r9                                 #! PC = 0x55555556945b *)
cmov r9 carry rbp r9;
(* mov    %r15,0x8(%rdi)                           #! EA = L0x7fffffffd038; PC = 0x55555556945f *)
mov L0x7fffffffd038 r15;
(* cmovb  %r13,%r10                                #! PC = 0x555555569463 *)
cmov r10 carry r13 r10;
(* mov    %r8,0x10(%rdi)                           #! EA = L0x7fffffffd040; PC = 0x555555569467 *)
mov L0x7fffffffd040 r8;
(* cmovb  %rsi,%r11                                #! PC = 0x55555556946b *)
cmov r11 carry rsi r11;
(* mov    %r9,0x18(%rdi)                           #! EA = L0x7fffffffd048; PC = 0x55555556946f *)
mov L0x7fffffffd048 r9;
(* mov    %r10,0x20(%rdi)                          #! EA = L0x7fffffffd050; PC = 0x555555569473 *)
mov L0x7fffffffd050 r10;
(* mov    %r11,0x28(%rdi)                          #! EA = L0x7fffffffd058; PC = 0x555555569477 *)
mov L0x7fffffffd058 r11;
(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x55555556947b *)
#repz retq                                      #! 0x55555556947b = 0x55555556947b;


assert true
    && eqmod (limbs 64 [L0x7fffffffd030, L0x7fffffffd038, L0x7fffffffd040,
                        L0x7fffffffd048, L0x7fffffffd050, L0x7fffffffd058])
             (limbs 64 [L0x7fffffffce60, L0x7fffffffce68, L0x7fffffffce70,
                        L0x7fffffffce78, L0x7fffffffce80, L0x7fffffffce88] +
              limbs 64 [r14r, r15r, r8r, r9r, r10r, r11r])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffd030, L0x7fffffffd038, L0x7fffffffd040,
                        L0x7fffffffd048, L0x7fffffffd050, L0x7fffffffd058])
             (limbs 64 [L0x7fffffffce60, L0x7fffffffce68, L0x7fffffffce70,
                        L0x7fffffffce78, L0x7fffffffce80, L0x7fffffffce88] +
              limbs 64 [r14r, r15r, r8r, r9r, r10r, r11r])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;


(* #lea    0x38(%rsp),%rsp                          #! PC = 0x55555556901d *)
#lea    %%EA,%rsp                          #! 0x55555556901d = 0x55555556901d;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #repz retq                                      #! PC = 0x555555569022 *)
#repz retq                                      #! 0x555555569022 = 0x555555569022;
(* #lea    0x180(%rsp),%rsi                         #! PC = 0x55555555fa08 *)
#lea    %%EA,%%rsi                         #! 0x55555555fa08 = 0x55555555fa08;
(* #lea    0xc0(%rbx),%rdi                          #! PC = 0x55555555fa10 *)
#lea    %%EA,%%rdi                          #! 0x55555555fa10 = 0x55555555fa10;
(* movabs $0x89f3fffcfffcfffd,%rcx                 #! PC = 0x55555555fa17 *)
mov rcx 0x89f3fffcfffcfffd@uint64;
(* #callq  0x555555568fe0 <redcx_mont_384>         #! PC = 0x55555555fa24 *)
#callq  0x555555568fe0 <redcx_mont_384>         #! 0x55555555fa24 = 0x55555555fa24;
(* #! -> SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #endbr64                                         #! PC = 0x555555568fe0 *)
#endbr64                                         #! 0x555555568fe0 = 0x555555568fe0;
(* #callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! PC = 0x555555568ff5 *)
#callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! 0x555555568ff5 = 0x555555568ff5;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x5555555690e0 *)
#endbr64                                         #! 0x5555555690e0 = 0x5555555690e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffce90; Value = 0x23678569f15c7c09; PC = 0x5555555690e4 *)
mov r8 L0x7fffffffce90;
(* mov    %rcx,%rdx                                #! PC = 0x5555555690e7 *)
mov rdx rcx;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffce98; Value = 0xcbb5658a206efe71; PC = 0x5555555690ea *)
mov r9 L0x7fffffffce98;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcea0; Value = 0xa6beba26df8073ee; PC = 0x5555555690ee *)
mov r10 L0x7fffffffcea0;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcea8; Value = 0xa7ba3c6ce2fd54c6; PC = 0x5555555690f2 *)
mov r11 L0x7fffffffcea8;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffceb0; Value = 0x84d559d887c37720; PC = 0x5555555690f6 *)
mov r12 L0x7fffffffceb0;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffceb8; Value = 0xdf7fd7169fdada19; PC = 0x5555555690fa *)
mov r13 L0x7fffffffceb8;
(* imul   %r8,%rdx                                 #! PC = 0x5555555690fe *)
umull dontcare rdx r8 rdx;
(* xor    %r14,%r14                                #! PC = 0x555555569102 *)
mov r14 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569105 *)
umull rbp rax L0x55555556c740 rdx;

mov carry 0@uint1;
mov OF 0@uint1;

(* adcx   %rax,%r8                                 #! PC = 0x55555556910a *)
adcs carry r8 rax r8 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r8 0 (2**64) && true;
assume r8 = 0 && r8 = 0@64;

(* adox   %rbp,%r9                                 #! PC = 0x555555569110 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569116 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x55555556911c *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x555555569122 *)
adcs OF r10 rbp r10 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569128 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r10                                #! PC = 0x55555556912e *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x555555569134 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x55555556913a *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569140 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569146 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556914c *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569152 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569158 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556915e *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569164 *)
mov rdx rcx;
(* adcx   %rax,%r13                                #! PC = 0x555555569167 *)
adcs carry r13 rax r13 carry;
(* adox   %r14,%rbp                                #! PC = 0x55555556916d *)
adcs OF rbp r14 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r14                                #! PC = 0x555555569173 *)
adcs carry r14 rbp r14 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r9,%rdx                                 #! PC = 0x555555569179 *)
umull dontcare rdx r9 rdx;
(* xor    %r15,%r15                                #! PC = 0x55555556917d *)
mov r15 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569180 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569185 *)
adcs carry r9 rax r9 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r9 0 (2**64) && true;
assume r9 = 0 && r9 = 0@64;

(* adox   %rbp,%r10                                #! PC = 0x55555556918b *)
adcs OF r10 rbp r10 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569191 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569197 *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x55555556919d *)
adcs OF r11 rbp r11 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555691a3 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r11                                #! PC = 0x5555555691a9 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x5555555691af *)
adcs OF r12 rbp r12 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555691b5 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555691bb *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x5555555691c1 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555691c7 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r13                                #! PC = 0x5555555691cd *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555691d3 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555691d9 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555691df *)
mov rdx rcx;
(* adcx   %rax,%r14                                #! PC = 0x5555555691e2 *)
adcs carry r14 rax r14 carry;
(* adox   %r15,%rbp                                #! PC = 0x5555555691e8 *)
adcs OF rbp r15 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r15                                #! PC = 0x5555555691ee *)
adcs carry r15 rbp r15 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r10,%rdx                                #! PC = 0x5555555691f4 *)
umull dontcare rdx r10 rdx;
(* xor    %r8,%r8                                  #! PC = 0x5555555691f8 *)
mov r8 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555691fb *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569200 *)
adcs carry r10 rax r10 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r10 0 (2**64) && true;
assume r10 = 0 && r10 = 0@64;

(* adox   %rbp,%r11                                #! PC = 0x555555569206 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556920c *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569212 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569218 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556921e *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569224 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x55555556922a *)
adcs OF r13 rbp r13 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569230 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569236 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556923c *)
adcs OF r14 rbp r14 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569242 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569248 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x55555556924e *)
adcs OF r15 rbp r15 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569254 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x55555556925a *)
mov rdx rcx;
(* adcx   %rax,%r15                                #! PC = 0x55555556925d *)
adcs carry r15 rax r15 carry;
(* adox   %r8,%rbp                                 #! PC = 0x555555569263 *)
adcs OF rbp r8 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r8                                 #! PC = 0x555555569269 *)
adcs carry r8 rbp r8 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r11,%rdx                                #! PC = 0x55555556926f *)
umull dontcare rdx r11 rdx;
(* xor    %r9,%r9                                  #! PC = 0x555555569273 *)
mov r9 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569276 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r11                                #! PC = 0x55555556927b *)
adcs carry r11 rax r11 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r11 0 (2**64) && true;
assume r11 = 0 && r11 = 0@64;

(* adox   %rbp,%r12                                #! PC = 0x555555569281 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569287 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r12                                #! PC = 0x55555556928d *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569293 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569299 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r13                                #! PC = 0x55555556929f *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555692a5 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555692ab *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r14                                #! PC = 0x5555555692b1 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x5555555692b7 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555692bd *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r15                                #! PC = 0x5555555692c3 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x5555555692c9 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555692cf *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555692d5 *)
mov rdx rcx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555692d8 *)
adcs carry r8 rax r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x5555555692de *)
adcs OF rbp r9 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r9                                 #! PC = 0x5555555692e4 *)
adcs carry r9 rbp r9 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r12,%rdx                                #! PC = 0x5555555692ea *)
umull dontcare rdx r12 rdx;
(* xor    %r10,%r10                                #! PC = 0x5555555692ee *)
mov r10 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555692f1 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555692f6 *)
adcs carry r12 rax r12 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r12 0 (2**64) && true;
assume r12 = 0 && r12 = 0@64;

(* adox   %rbp,%r13                                #! PC = 0x5555555692fc *)
adcs OF r13 rbp r13 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569302 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569308 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556930e *)
adcs OF r14 rbp r14 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569314 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r14                                #! PC = 0x55555556931a *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569320 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569326 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r15                                #! PC = 0x55555556932c *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x555555569332 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569338 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x55555556933e *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x555555569344 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556934a *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569350 *)
mov rdx rcx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569353 *)
adcs carry r9 rax r9 carry;
(* adox   %r10,%rbp                                #! PC = 0x555555569359 *)
adcs OF rbp r10 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r10                                #! PC = 0x55555556935f *)
adcs carry r10 rbp r10 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r13,%rdx                                #! PC = 0x555555569365 *)
umull dontcare rdx r13 rdx;
(* xor    %r11,%r11                                #! PC = 0x555555569369 *)
mov r11 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556936c *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569371 *)
adcs carry r13 rax r13 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r13 0 (2**64) && true;
assume r13 = 0 && r13 = 0@64;

(* adox   %rbp,%r14                                #! PC = 0x555555569377 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556937d *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569383 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569389 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556938f *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r15                                #! PC = 0x555555569395 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x55555556939b *)
adcs OF r8 rbp r8 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555693a1 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555693a7 *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x5555555693ad *)
adcs OF r9 rbp r9 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555693b3 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x5555555693b9 *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x5555555693bf *)
adcs OF r10 rbp r10 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555693c5 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555693cb *)
mov rdx rcx;
(* adcx   %rax,%r10                                #! PC = 0x5555555693ce *)
adcs carry r10 rax r10 carry;
(* adox   %r11,%rbp                                #! PC = 0x5555555693d4 *)
adcs OF rbp r11 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r11                                #! PC = 0x5555555693da *)
adcs carry r11 rbp r11 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x5555555693e0 *)
#repz retq                                      #! 0x5555555693e0 = 0x5555555693e0;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd030, L0x7fffffffd038, L0x7fffffffd040,
                          L0x7fffffffd048, L0x7fffffffd050, L0x7fffffffd058])
               (limbs 64 [L0x7fffffffce30, L0x7fffffffce38, L0x7fffffffce40,
                          L0x7fffffffce48, L0x7fffffffce50, L0x7fffffffce58,
                          L0x7fffffffce60, L0x7fffffffce68, L0x7fffffffce70,
                          L0x7fffffffce78, L0x7fffffffce80, L0x7fffffffce88])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	 eqmod (limbs 64 [0, 0, 0, 0, 0, 0, r14, r15, r8, r9, r10, r11])
               (limbs 64 [L0x7fffffffce90, L0x7fffffffce98, L0x7fffffffcea0,
                          L0x7fffffffcea8, L0x7fffffffceb0, L0x7fffffffceb8])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         rcx = 0x89f3fffcfffcfffd]
 && and [limbs 64 [L0x7fffffffd030, L0x7fffffffd038, L0x7fffffffd040,
                   L0x7fffffffd048, L0x7fffffffd050, L0x7fffffffd058] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
	 m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         1@64 + m0 * rcx = 0@64,

         limbs 64 [L0x7fffffffcec0, L0x7fffffffcec8, L0x7fffffffced0,
                   L0x7fffffffced8, L0x7fffffffcee0, L0x7fffffffcee8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         limbs 64 [r14, r15, r8, r9, r10, r11] <=u
         limbs 64 [m0, m1, m2, m3, m4, m5]] prove with all cuts;

ghost r14s@uint64, r15s@uint64, r8s@uint64,
      r9s@uint64, r10s@uint64, r11s@uint64 :
      and [r14s=r14, r15s=r15, r8s=r8, r9s=r9, r10s=r10, r11s=r11]
   && and [r14s=r14, r15s=r15, r8s=r8, r9s=r9, r10s=r10, r11s=r11];



(* #callq  0x555555569400 <__redc_tail_mont_384>   #! PC = 0x555555568ffa *)
#callq  0x555555569400 <__redc_tail_mont_384>   #! 0x555555568ffa = 0x555555568ffa;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x555555569400 *)
#endbr64                                         #! 0x555555569400 = 0x555555569400;
(* add    0x30(%rsi),%r14                          #! EA = L0x7fffffffcec0; Value = 0x3a6ffa46fa37dbb9; PC = 0x555555569404 *)
adds carry r14 L0x7fffffffcec0 r14;
(* mov    %r14,%rax                                #! PC = 0x555555569408 *)
mov rax r14;
(* adc    0x38(%rsi),%r15                          #! EA = L0x7fffffffcec8; Value = 0xa26b81b69a3b53a2; PC = 0x55555556940b *)
adcs carry r15 L0x7fffffffcec8 r15 carry;
(* adc    0x40(%rsi),%r8                           #! EA = L0x7fffffffced0; Value = 0xeffad1952c480491; PC = 0x55555556940f *)
adcs carry r8 L0x7fffffffced0 r8 carry;
(* adc    0x48(%rsi),%r9                           #! EA = L0x7fffffffced8; Value = 0xe872d2f148ed489d; PC = 0x555555569413 *)
adcs carry r9 L0x7fffffffced8 r9 carry;
(* mov    %r15,%rcx                                #! PC = 0x555555569417 *)
mov rcx r15;
(* adc    0x50(%rsi),%r10                          #! EA = L0x7fffffffcee0; Value = 0x448adcbf45bdf751; PC = 0x55555556941a *)
adcs carry r10 L0x7fffffffcee0 r10 carry;
(* adc    0x58(%rsi),%r11                          #! EA = L0x7fffffffcee8; Value = 0x000000003fff9880; PC = 0x55555556941e *)
adcs carry r11 L0x7fffffffcee8 r11 carry;
(* sbb    %r12,%r12                                #! PC = 0x555555569422 *)
sbbs carry r12 r12 r12 carry;
(* mov    %r8,%rdx                                 #! PC = 0x555555569425 *)
mov rdx r8;
(* mov    %r9,%rbp                                 #! PC = 0x555555569428 *)
mov rbp r9;
(* sub    (%rbx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556942b *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rbx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556942e *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %r10,%r13                                #! PC = 0x555555569432 *)
mov r13 r10;
(* sbb    0x10(%rbx),%r8                           #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569435 *)
sbbs carry r8 r8 L0x55555556c750 carry;
(* sbb    0x18(%rbx),%r9                           #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569439 *)
sbbs carry r9 r9 L0x55555556c758 carry;
(* sbb    0x20(%rbx),%r10                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556943d *)
sbbs carry r10 r10 L0x55555556c760 carry;
(* mov    %r11,%rsi                                #! PC = 0x555555569441 *)
mov rsi r11;
(* sbb    0x28(%rbx),%r11                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569444 *)
sbbs carry r11 r11 L0x55555556c768 carry;
(* sbb    $0x0,%r12                                #! PC = 0x555555569448 *)
sbbs carry r12 r12 0@uint64 carry;
(* cmovb  %rax,%r14                                #! PC = 0x55555556944c *)
cmov r14 carry rax r14;
(* cmovb  %rcx,%r15                                #! PC = 0x555555569450 *)
cmov r15 carry rcx r15;
(* cmovb  %rdx,%r8                                 #! PC = 0x555555569454 *)
cmov r8 carry rdx r8;
(* mov    %r14,(%rdi)                              #! EA = L0x7fffffffd060; PC = 0x555555569458 *)
mov L0x7fffffffd060 r14;
(* cmovb  %rbp,%r9                                 #! PC = 0x55555556945b *)
cmov r9 carry rbp r9;
(* mov    %r15,0x8(%rdi)                           #! EA = L0x7fffffffd068; PC = 0x55555556945f *)
mov L0x7fffffffd068 r15;
(* cmovb  %r13,%r10                                #! PC = 0x555555569463 *)
cmov r10 carry r13 r10;
(* mov    %r8,0x10(%rdi)                           #! EA = L0x7fffffffd070; PC = 0x555555569467 *)
mov L0x7fffffffd070 r8;
(* cmovb  %rsi,%r11                                #! PC = 0x55555556946b *)
cmov r11 carry rsi r11;
(* mov    %r9,0x18(%rdi)                           #! EA = L0x7fffffffd078; PC = 0x55555556946f *)
mov L0x7fffffffd078 r9;
(* mov    %r10,0x20(%rdi)                          #! EA = L0x7fffffffd080; PC = 0x555555569473 *)
mov L0x7fffffffd080 r10;
(* mov    %r11,0x28(%rdi)                          #! EA = L0x7fffffffd088; PC = 0x555555569477 *)
mov L0x7fffffffd088 r11;
(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x55555556947b *)
#repz retq                                      #! 0x55555556947b = 0x55555556947b;


assert true
    && eqmod (limbs 64 [L0x7fffffffd060, L0x7fffffffd068, L0x7fffffffd070,
                        L0x7fffffffd078, L0x7fffffffd080, L0x7fffffffd088])
             (limbs 64 [L0x7fffffffcec0, L0x7fffffffcec8, L0x7fffffffced0,
                        L0x7fffffffced8, L0x7fffffffcee0, L0x7fffffffcee8] +
              limbs 64 [r14s, r15s, r8s, r9s, r10s, r11s])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffd060, L0x7fffffffd068, L0x7fffffffd070,
                        L0x7fffffffd078, L0x7fffffffd080, L0x7fffffffd088])
             (limbs 64 [L0x7fffffffcec0, L0x7fffffffcec8, L0x7fffffffced0,
                        L0x7fffffffced8, L0x7fffffffcee0, L0x7fffffffcee8] +
              limbs 64 [r14s, r15s, r8s, r9s, r10s, r11s])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;


(* #lea    0x38(%rsp),%rsp                          #! PC = 0x55555556901d *)
#lea    %%EA,%rsp                          #! 0x55555556901d = 0x55555556901d;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #repz retq                                      #! PC = 0x555555569022 *)
#repz retq                                      #! 0x555555569022 = 0x555555569022;
(* #lea    0x1e0(%rsp),%rsi                         #! PC = 0x55555555fa29 *)
#lea    %%EA,%%rsi                         #! 0x55555555fa29 = 0x55555555fa29;
(* #lea    0xf0(%rbx),%rdi                          #! PC = 0x55555555fa31 *)
#lea    %%EA,%%rdi                          #! 0x55555555fa31 = 0x55555555fa31;
(* movabs $0x89f3fffcfffcfffd,%rcx                 #! PC = 0x55555555fa38 *)
mov rcx 0x89f3fffcfffcfffd@uint64;
(* #callq  0x555555568fe0 <redcx_mont_384>         #! PC = 0x55555555fa45 *)
#callq  0x555555568fe0 <redcx_mont_384>         #! 0x55555555fa45 = 0x55555555fa45;
(* #! -> SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #endbr64                                         #! PC = 0x555555568fe0 *)
#endbr64                                         #! 0x555555568fe0 = 0x555555568fe0;
(* #callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! PC = 0x555555568ff5 *)
#callq  0x5555555690e0 <__mulx_by_1_mont_384>   #! 0x555555568ff5 = 0x555555568ff5;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x5555555690e0 *)
#endbr64                                         #! 0x5555555690e0 = 0x5555555690e0;
(* mov    (%rsi),%r8                               #! EA = L0x7fffffffcef0; Value = 0x644fafb5138d16d1; PC = 0x5555555690e4 *)
mov r8 L0x7fffffffcef0;
(* mov    %rcx,%rdx                                #! PC = 0x5555555690e7 *)
mov rdx rcx;
(* mov    0x8(%rsi),%r9                            #! EA = L0x7fffffffcef8; Value = 0x3acafa111604953d; PC = 0x5555555690ea *)
mov r9 L0x7fffffffcef8;
(* mov    0x10(%rsi),%r10                          #! EA = L0x7fffffffcf00; Value = 0xd5871348c17ae24e; PC = 0x5555555690ee *)
mov r10 L0x7fffffffcf00;
(* mov    0x18(%rsi),%r11                          #! EA = L0x7fffffffcf08; Value = 0x3a2e3c8fdd9acfe4; PC = 0x5555555690f2 *)
mov r11 L0x7fffffffcf08;
(* mov    0x20(%rsi),%r12                          #! EA = L0x7fffffffcf10; Value = 0x1e6a26363f500a67; PC = 0x5555555690f6 *)
mov r12 L0x7fffffffcf10;
(* mov    0x28(%rsi),%r13                          #! EA = L0x7fffffffcf18; Value = 0x82f19fd9b4649119; PC = 0x5555555690fa *)
mov r13 L0x7fffffffcf18;
(* imul   %r8,%rdx                                 #! PC = 0x5555555690fe *)
umull dontcare rdx r8 rdx;
(* xor    %r14,%r14                                #! PC = 0x555555569102 *)
mov r14 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569105 *)
umull rbp rax L0x55555556c740 rdx;

mov carry 0@uint1;
mov OF 0@uint1;

(* adcx   %rax,%r8                                 #! PC = 0x55555556910a *)
adcs carry r8 rax r8 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r8 0 (2**64) && true;
assume r8 = 0 && r8 = 0@64;

(* adox   %rbp,%r9                                 #! PC = 0x555555569110 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569116 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x55555556911c *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x555555569122 *)
adcs OF r10 rbp r10 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569128 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r10                                #! PC = 0x55555556912e *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x555555569134 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x55555556913a *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569140 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569146 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556914c *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569152 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569158 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556915e *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569164 *)
mov rdx rcx;
(* adcx   %rax,%r13                                #! PC = 0x555555569167 *)
adcs carry r13 rax r13 carry;
(* adox   %r14,%rbp                                #! PC = 0x55555556916d *)
adcs OF rbp r14 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r14                                #! PC = 0x555555569173 *)
adcs carry r14 rbp r14 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r9,%rdx                                 #! PC = 0x555555569179 *)
umull dontcare rdx r9 rdx;
(* xor    %r15,%r15                                #! PC = 0x55555556917d *)
mov r15 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569180 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569185 *)
adcs carry r9 rax r9 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r9 0 (2**64) && true;
assume r9 = 0 && r9 = 0@64;

(* adox   %rbp,%r10                                #! PC = 0x55555556918b *)
adcs OF r10 rbp r10 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569191 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569197 *)
adcs carry r10 rax r10 carry;
(* adox   %rbp,%r11                                #! PC = 0x55555556919d *)
adcs OF r11 rbp r11 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x5555555691a3 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r11                                #! PC = 0x5555555691a9 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x5555555691af *)
adcs OF r12 rbp r12 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555691b5 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555691bb *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x5555555691c1 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555691c7 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r13                                #! PC = 0x5555555691cd *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555691d3 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555691d9 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555691df *)
mov rdx rcx;
(* adcx   %rax,%r14                                #! PC = 0x5555555691e2 *)
adcs carry r14 rax r14 carry;
(* adox   %r15,%rbp                                #! PC = 0x5555555691e8 *)
adcs OF rbp r15 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r15                                #! PC = 0x5555555691ee *)
adcs carry r15 rbp r15 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r10,%rdx                                #! PC = 0x5555555691f4 *)
umull dontcare rdx r10 rdx;
(* xor    %r8,%r8                                  #! PC = 0x5555555691f8 *)
mov r8 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555691fb *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r10                                #! PC = 0x555555569200 *)
adcs carry r10 rax r10 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r10 0 (2**64) && true;
assume r10 = 0 && r10 = 0@64;

(* adox   %rbp,%r11                                #! PC = 0x555555569206 *)
adcs OF r11 rbp r11 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556920c *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r11                                #! PC = 0x555555569212 *)
adcs carry r11 rax r11 carry;
(* adox   %rbp,%r12                                #! PC = 0x555555569218 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556921e *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r12                                #! PC = 0x555555569224 *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x55555556922a *)
adcs OF r13 rbp r13 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569230 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569236 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556923c *)
adcs OF r14 rbp r14 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569242 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569248 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x55555556924e *)
adcs OF r15 rbp r15 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569254 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x55555556925a *)
mov rdx rcx;
(* adcx   %rax,%r15                                #! PC = 0x55555556925d *)
adcs carry r15 rax r15 carry;
(* adox   %r8,%rbp                                 #! PC = 0x555555569263 *)
adcs OF rbp r8 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r8                                 #! PC = 0x555555569269 *)
adcs carry r8 rbp r8 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r11,%rdx                                #! PC = 0x55555556926f *)
umull dontcare rdx r11 rdx;
(* xor    %r9,%r9                                  #! PC = 0x555555569273 *)
mov r9 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x555555569276 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r11                                #! PC = 0x55555556927b *)
adcs carry r11 rax r11 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r11 0 (2**64) && true;
assume r11 = 0 && r11 = 0@64;

(* adox   %rbp,%r12                                #! PC = 0x555555569281 *)
adcs OF r12 rbp r12 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569287 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r12                                #! PC = 0x55555556928d *)
adcs carry r12 rax r12 carry;
(* adox   %rbp,%r13                                #! PC = 0x555555569293 *)
adcs OF r13 rbp r13 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569299 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r13                                #! PC = 0x55555556929f *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x5555555692a5 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555692ab *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r14                                #! PC = 0x5555555692b1 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x5555555692b7 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555692bd *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r15                                #! PC = 0x5555555692c3 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x5555555692c9 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555692cf *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555692d5 *)
mov rdx rcx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555692d8 *)
adcs carry r8 rax r8 carry;
(* adox   %r9,%rbp                                 #! PC = 0x5555555692de *)
adcs OF rbp r9 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r9                                 #! PC = 0x5555555692e4 *)
adcs carry r9 rbp r9 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r12,%rdx                                #! PC = 0x5555555692ea *)
umull dontcare rdx r12 rdx;
(* xor    %r10,%r10                                #! PC = 0x5555555692ee *)
mov r10 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x5555555692f1 *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r12                                #! PC = 0x5555555692f6 *)
adcs carry r12 rax r12 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r12 0 (2**64) && true;
assume r12 = 0 && r12 = 0@64;

(* adox   %rbp,%r13                                #! PC = 0x5555555692fc *)
adcs OF r13 rbp r13 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x555555569302 *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569308 *)
adcs carry r13 rax r13 carry;
(* adox   %rbp,%r14                                #! PC = 0x55555556930e *)
adcs OF r14 rbp r14 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569314 *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r14                                #! PC = 0x55555556931a *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569320 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569326 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r15                                #! PC = 0x55555556932c *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x555555569332 *)
adcs OF r8 rbp r8 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x555555569338 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x55555556933e *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x555555569344 *)
adcs OF r9 rbp r9 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x55555556934a *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x555555569350 *)
mov rdx rcx;
(* adcx   %rax,%r9                                 #! PC = 0x555555569353 *)
adcs carry r9 rax r9 carry;
(* adox   %r10,%rbp                                #! PC = 0x555555569359 *)
adcs OF rbp r10 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r10                                #! PC = 0x55555556935f *)
adcs carry r10 rbp r10 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* imul   %r13,%rdx                                #! PC = 0x555555569365 *)
umull dontcare rdx r13 rdx;
(* xor    %r11,%r11                                #! PC = 0x555555569369 *)
mov r11 0@uint64;
(* mulx   (%rbx),%rax,%rbp                         #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556936c *)
umull rbp rax L0x55555556c740 rdx;
(* adcx   %rax,%r13                                #! PC = 0x555555569371 *)
adcs carry r13 rax r13 carry;

(* NOTE: Montgomery reduction *)
assert eqmod r13 0 (2**64) && true;
assume r13 = 0 && r13 = 0@64;

(* adox   %rbp,%r14                                #! PC = 0x555555569377 *)
adcs OF r14 rbp r14 OF;
(* mulx   0x8(%rbx),%rax,%rbp                      #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556937d *)
umull rbp rax L0x55555556c748 rdx;
(* adcx   %rax,%r14                                #! PC = 0x555555569383 *)
adcs carry r14 rax r14 carry;
(* adox   %rbp,%r15                                #! PC = 0x555555569389 *)
adcs OF r15 rbp r15 OF;
(* mulx   0x10(%rbx),%rax,%rbp                     #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x55555556938f *)
umull rbp rax L0x55555556c750 rdx;
(* adcx   %rax,%r15                                #! PC = 0x555555569395 *)
adcs carry r15 rax r15 carry;
(* adox   %rbp,%r8                                 #! PC = 0x55555556939b *)
adcs OF r8 rbp r8 OF;
(* mulx   0x18(%rbx),%rax,%rbp                     #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x5555555693a1 *)
umull rbp rax L0x55555556c758 rdx;
(* adcx   %rax,%r8                                 #! PC = 0x5555555693a7 *)
adcs carry r8 rax r8 carry;
(* adox   %rbp,%r9                                 #! PC = 0x5555555693ad *)
adcs OF r9 rbp r9 OF;
(* mulx   0x20(%rbx),%rax,%rbp                     #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x5555555693b3 *)
umull rbp rax L0x55555556c760 rdx;
(* adcx   %rax,%r9                                 #! PC = 0x5555555693b9 *)
adcs carry r9 rax r9 carry;
(* adox   %rbp,%r10                                #! PC = 0x5555555693bf *)
adcs OF r10 rbp r10 OF;
(* mulx   0x28(%rbx),%rax,%rbp                     #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x5555555693c5 *)
umull rbp rax L0x55555556c768 rdx;
(* mov    %rcx,%rdx                                #! PC = 0x5555555693cb *)
mov rdx rcx;
(* adcx   %rax,%r10                                #! PC = 0x5555555693ce *)
adcs carry r10 rax r10 carry;
(* adox   %r11,%rbp                                #! PC = 0x5555555693d4 *)
adcs OF rbp r11 rbp OF;

assert true && OF = 0@1;
assume OF = 0 && true;

(* adcx   %rbp,%r11                                #! PC = 0x5555555693da *)
adcs carry r11 rbp r11 carry;

assert true && carry = 0@1;
assume carry = 0 && true;

(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x5555555693e0 *)
#repz retq                                      #! 0x5555555693e0 = 0x5555555693e0;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd060, L0x7fffffffd068, L0x7fffffffd070,
                          L0x7fffffffd078, L0x7fffffffd080, L0x7fffffffd088])
               (limbs 64 [L0x7fffffffce90, L0x7fffffffce98, L0x7fffffffcea0,
                          L0x7fffffffcea8, L0x7fffffffceb0, L0x7fffffffceb8,
                          L0x7fffffffcec0, L0x7fffffffcec8, L0x7fffffffced0,
                          L0x7fffffffced8, L0x7fffffffcee0, L0x7fffffffcee8])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	 eqmod (limbs 64 [0, 0, 0, 0, 0, 0, r14, r15, r8, r9, r10, r11])
               (limbs 64 [L0x7fffffffcef0, L0x7fffffffcef8, L0x7fffffffcf00,
                          L0x7fffffffcf08, L0x7fffffffcf10, L0x7fffffffcf18])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),

         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         rcx = 0x89f3fffcfffcfffd]
 && and [limbs 64 [L0x7fffffffd060, L0x7fffffffd068, L0x7fffffffd070,
                   L0x7fffffffd078, L0x7fffffffd080, L0x7fffffffd088] <
         limbs 64 [m0, m1, m2, m3, m4, m5],
	 m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64,

         1@64 + m0 * rcx = 0@64,

         limbs 64 [L0x7fffffffcf20, L0x7fffffffcf28, L0x7fffffffcf30,
                   L0x7fffffffcf38, L0x7fffffffcf40, L0x7fffffffcf48] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         
         m0 = L0x55555556c740, m1 = L0x55555556c748, m2 = L0x55555556c750,
         m3 = L0x55555556c758, m4 = L0x55555556c760, m5 = L0x55555556c768,
         limbs 64 [r14, r15, r8, r9, r10, r11] <=u
         limbs 64 [m0, m1, m2, m3, m4, m5]] prove with all cuts;

ghost r14t@uint64, r15t@uint64, r8t@uint64,
      r9t@uint64, r10t@uint64, r11t@uint64 :
      and [r14t=r14, r15t=r15, r8t=r8, r9t=r9, r10t=r10, r11t=r11]
   && and [r14t=r14, r15t=r15, r8t=r8, r9t=r9, r10t=r10, r11t=r11];



(* #callq  0x555555569400 <__redc_tail_mont_384>   #! PC = 0x555555568ffa *)
#callq  0x555555569400 <__redc_tail_mont_384>   #! 0x555555568ffa = 0x555555568ffa;
(* #! -> SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #endbr64                                         #! PC = 0x555555569400 *)
#endbr64                                         #! 0x555555569400 = 0x555555569400;
(* add    0x30(%rsi),%r14                          #! EA = L0x7fffffffcf20; Value = 0x2a0070b81fac488f; PC = 0x555555569404 *)
adds carry r14 L0x7fffffffcf20 r14;
(* mov    %r14,%rax                                #! PC = 0x555555569408 *)
mov rax r14;
(* adc    0x38(%rsi),%r15                          #! EA = L0x7fffffffcf28; Value = 0x5796b632b87b3df1; PC = 0x55555556940b *)
adcs carry r15 L0x7fffffffcf28 r15 carry;
(* adc    0x40(%rsi),%r8                           #! EA = L0x7fffffffcf30; Value = 0x81bf4de697fb3f19; PC = 0x55555556940f *)
adcs carry r8 L0x7fffffffcf30 r8 carry;
(* adc    0x48(%rsi),%r9                           #! EA = L0x7fffffffcf38; Value = 0x91e50605b20a2673; PC = 0x555555569413 *)
adcs carry r9 L0x7fffffffcf38 r9 carry;
(* mov    %r15,%rcx                                #! PC = 0x555555569417 *)
mov rcx r15;
(* adc    0x50(%rsi),%r10                          #! EA = L0x7fffffffcf40; Value = 0x6e551e4418c5b0fc; PC = 0x55555556941a *)
adcs carry r10 L0x7fffffffcf40 r10 carry;
(* adc    0x58(%rsi),%r11                          #! EA = L0x7fffffffcf48; Value = 0x000000004000677f; PC = 0x55555556941e *)
adcs carry r11 L0x7fffffffcf48 r11 carry;
(* sbb    %r12,%r12                                #! PC = 0x555555569422 *)
sbbs carry r12 r12 r12 carry;
(* mov    %r8,%rdx                                 #! PC = 0x555555569425 *)
mov rdx r8;
(* mov    %r9,%rbp                                 #! PC = 0x555555569428 *)
mov rbp r9;
(* sub    (%rbx),%r14                              #! EA = L0x55555556c740; Value = 0xb9feffffffffaaab; PC = 0x55555556942b *)
subb carry r14 r14 L0x55555556c740;
(* sbb    0x8(%rbx),%r15                           #! EA = L0x55555556c748; Value = 0x1eabfffeb153ffff; PC = 0x55555556942e *)
sbbs carry r15 r15 L0x55555556c748 carry;
(* mov    %r10,%r13                                #! PC = 0x555555569432 *)
mov r13 r10;
(* sbb    0x10(%rbx),%r8                           #! EA = L0x55555556c750; Value = 0x6730d2a0f6b0f624; PC = 0x555555569435 *)
sbbs carry r8 r8 L0x55555556c750 carry;
(* sbb    0x18(%rbx),%r9                           #! EA = L0x55555556c758; Value = 0x64774b84f38512bf; PC = 0x555555569439 *)
sbbs carry r9 r9 L0x55555556c758 carry;
(* sbb    0x20(%rbx),%r10                          #! EA = L0x55555556c760; Value = 0x4b1ba7b6434bacd7; PC = 0x55555556943d *)
sbbs carry r10 r10 L0x55555556c760 carry;
(* mov    %r11,%rsi                                #! PC = 0x555555569441 *)
mov rsi r11;
(* sbb    0x28(%rbx),%r11                          #! EA = L0x55555556c768; Value = 0x1a0111ea397fe69a; PC = 0x555555569444 *)
sbbs carry r11 r11 L0x55555556c768 carry;
(* sbb    $0x0,%r12                                #! PC = 0x555555569448 *)
sbbs carry r12 r12 0@uint64 carry;
(* cmovb  %rax,%r14                                #! PC = 0x55555556944c *)
cmov r14 carry rax r14;
(* cmovb  %rcx,%r15                                #! PC = 0x555555569450 *)
cmov r15 carry rcx r15;
(* cmovb  %rdx,%r8                                 #! PC = 0x555555569454 *)
cmov r8 carry rdx r8;
(* mov    %r14,(%rdi)                              #! EA = L0x7fffffffd090; PC = 0x555555569458 *)
mov L0x7fffffffd090 r14;
(* cmovb  %rbp,%r9                                 #! PC = 0x55555556945b *)
cmov r9 carry rbp r9;
(* mov    %r15,0x8(%rdi)                           #! EA = L0x7fffffffd098; PC = 0x55555556945f *)
mov L0x7fffffffd098 r15;
(* cmovb  %r13,%r10                                #! PC = 0x555555569463 *)
cmov r10 carry r13 r10;
(* mov    %r8,0x10(%rdi)                           #! EA = L0x7fffffffd0a0; PC = 0x555555569467 *)
mov L0x7fffffffd0a0 r8;
(* cmovb  %rsi,%r11                                #! PC = 0x55555556946b *)
cmov r11 carry rsi r11;
(* mov    %r9,0x18(%rdi)                           #! EA = L0x7fffffffd0a8; PC = 0x55555556946f *)
mov L0x7fffffffd0a8 r9;
(* mov    %r10,0x20(%rdi)                          #! EA = L0x7fffffffd0b0; PC = 0x555555569473 *)
mov L0x7fffffffd0b0 r10;
(* mov    %r11,0x28(%rdi)                          #! EA = L0x7fffffffd0b8; PC = 0x555555569477 *)
mov L0x7fffffffd0b8 r11;
(* #! <- SP = 0x7fffffffccc8 *)
#! 0x7fffffffccc8 = 0x7fffffffccc8;
(* #repz retq                                      #! PC = 0x55555556947b *)
#repz retq                                      #! 0x55555556947b = 0x55555556947b;


assert true
    && eqmod (limbs 64 [L0x7fffffffd090, L0x7fffffffd098, L0x7fffffffd0a0,
                        L0x7fffffffd0a8, L0x7fffffffd0b0, L0x7fffffffd0b8])
             (limbs 64 [L0x7fffffffcf20, L0x7fffffffcf28, L0x7fffffffcf30,
                        L0x7fffffffcf38, L0x7fffffffcf40, L0x7fffffffcf48] +
              limbs 64 [r14t, r15t, r8t, r9t, r10t, r11t])
             (limbs 64 [m0, m1, m2, m3, m4, m5]);

assume eqmod (limbs 64 [L0x7fffffffd090, L0x7fffffffd098, L0x7fffffffd0a0,
                        L0x7fffffffd0a8, L0x7fffffffd0b0, L0x7fffffffd0b8])
             (limbs 64 [L0x7fffffffcf20, L0x7fffffffcf28, L0x7fffffffcf30,
                        L0x7fffffffcf38, L0x7fffffffcf40, L0x7fffffffcf48] +
              limbs 64 [r14t, r15t, r8t, r9t, r10t, r11t])
             (limbs 64 [m0, m1, m2, m3, m4, m5])
    && true;


(* #lea    0x38(%rsp),%rsp                          #! PC = 0x55555556901d *)
#lea    %%EA,%rsp                          #! 0x55555556901d = 0x55555556901d;
(* #! <- SP = 0x7fffffffcd08 *)
#! 0x7fffffffcd08 = 0x7fffffffcd08;
(* #repz retq                                      #! PC = 0x555555569022 *)
#repz retq                                      #! 0x555555569022 = 0x555555569022;
(* #! <- SP = 0x7fffffffcf88 *)
#! 0x7fffffffcf88 = 0x7fffffffcf88;
(* #retq                                           #! PC = 0x55555555fa66 *)
#retq                                           #! 0x55555555fa66 = 0x55555555fa66;


cut and [eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd090, L0x7fffffffd098, L0x7fffffffd0a0,
                          L0x7fffffffd0a8, L0x7fffffffd0b0, L0x7fffffffd0b8])
               (limbs 64 [L0x7fffffffcef0, L0x7fffffffcef8, L0x7fffffffcf00,
                          L0x7fffffffcf08, L0x7fffffffcf10, L0x7fffffffcf18,
                          L0x7fffffffcf20, L0x7fffffffcf28, L0x7fffffffcf30,
                          L0x7fffffffcf38, L0x7fffffffcf40, L0x7fffffffcf48])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
         m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
         m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a]
 && and [limbs 64 [L0x7fffffffcfa0, L0x7fffffffcfa8, L0x7fffffffcfb0,
                   L0x7fffffffcfb8, L0x7fffffffcfc0, L0x7fffffffcfc8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffcfd0, L0x7fffffffcfd8, L0x7fffffffcfe0,
                   L0x7fffffffcfe8, L0x7fffffffcff0, L0x7fffffffcff8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffd000, L0x7fffffffd008, L0x7fffffffd010,
                   L0x7fffffffd018, L0x7fffffffd020, L0x7fffffffd028] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffd030, L0x7fffffffd038, L0x7fffffffd040,
                   L0x7fffffffd048, L0x7fffffffd050, L0x7fffffffd058] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffd060, L0x7fffffffd068, L0x7fffffffd070,
                   L0x7fffffffd078, L0x7fffffffd080, L0x7fffffffd088] <
         limbs 64 [m0, m1, m2, m3, m4, m5],
         limbs 64 [L0x7fffffffd090, L0x7fffffffd098, L0x7fffffffd0a0,
                   L0x7fffffffd0a8, L0x7fffffffd0b0, L0x7fffffffd0b8] <u
         limbs 64 [m0, m1, m2, m3, m4, m5],
         m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
         m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
         m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
    prove with all cuts;

ecut and [m0 = 0xb9feffffffffaaab, m1 = 0x1eabfffeb153ffff,
          m2 = 0x6730d2a0f6b0f624, m3 = 0x64774b84f38512bf,
          m4 = 0x4b1ba7b6434bacd7, m5 = 0x1a0111ea397fe69a,
  	  eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffcfa0, L0x7fffffffcfa8, L0x7fffffffcfb0,
                          L0x7fffffffcfb8, L0x7fffffffcfc0, L0x7fffffffcfc8])
               (limbs 64 [L0x7fffffffcd10, L0x7fffffffcd18, L0x7fffffffcd20,
                          L0x7fffffffcd28, L0x7fffffffcd30, L0x7fffffffcd38,
                          L0x7fffffffcd40, L0x7fffffffcd48, L0x7fffffffcd50,
                          L0x7fffffffcd58, L0x7fffffffcd60, L0x7fffffffcd68])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	  eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffcfd0, L0x7fffffffcfd8, L0x7fffffffcfe0,
                          L0x7fffffffcfe8, L0x7fffffffcff0, L0x7fffffffcff8])
               (limbs 64 [L0x7fffffffcd70, L0x7fffffffcd78, L0x7fffffffcd80,
                          L0x7fffffffcd88, L0x7fffffffcd90, L0x7fffffffcd98,
                          L0x7fffffffcda0, L0x7fffffffcda8, L0x7fffffffcdb0,
                          L0x7fffffffcdb8, L0x7fffffffcdc0, L0x7fffffffcdc8])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	  eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd000, L0x7fffffffd008, L0x7fffffffd010,
                          L0x7fffffffd018, L0x7fffffffd020, L0x7fffffffd028])
               (limbs 64 [L0x7fffffffcdd0, L0x7fffffffcdd8, L0x7fffffffcde0,
                          L0x7fffffffcde8, L0x7fffffffcdf0, L0x7fffffffcdf8,
                          L0x7fffffffce00, L0x7fffffffce08, L0x7fffffffce10,
                          L0x7fffffffce18, L0x7fffffffce20, L0x7fffffffce28])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	  eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd030, L0x7fffffffd038, L0x7fffffffd040,
                          L0x7fffffffd048, L0x7fffffffd050, L0x7fffffffd058])
               (limbs 64 [L0x7fffffffce30, L0x7fffffffce38, L0x7fffffffce40,
                          L0x7fffffffce48, L0x7fffffffce50, L0x7fffffffce58,
                          L0x7fffffffce60, L0x7fffffffce68, L0x7fffffffce70,
                          L0x7fffffffce78, L0x7fffffffce80, L0x7fffffffce88])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	  eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd060, L0x7fffffffd068, L0x7fffffffd070,
                          L0x7fffffffd078, L0x7fffffffd080, L0x7fffffffd088])
               (limbs 64 [L0x7fffffffce90, L0x7fffffffce98, L0x7fffffffcea0,
                          L0x7fffffffcea8, L0x7fffffffceb0, L0x7fffffffceb8,
                          L0x7fffffffcec0, L0x7fffffffcec8, L0x7fffffffced0,
                          L0x7fffffffced8, L0x7fffffffcee0, L0x7fffffffcee8])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
	  eqmod (limbs 64 [0, 0, 0, 0, 0, 0,
                          L0x7fffffffd090, L0x7fffffffd098, L0x7fffffffd0a0,
                          L0x7fffffffd0a8, L0x7fffffffd0b0, L0x7fffffffd0b8])
               (limbs 64 [L0x7fffffffcef0, L0x7fffffffcef8, L0x7fffffffcf00,
                          L0x7fffffffcf08, L0x7fffffffcf10, L0x7fffffffcf18,
                          L0x7fffffffcf20, L0x7fffffffcf28, L0x7fffffffcf30,
                          L0x7fffffffcf38, L0x7fffffffcf40, L0x7fffffffcf48])
               (limbs 64 [m0, m1, m2, m3, m4, m5]),
         (* ret[0] = ((a1 + a2)*(b1 + b2) - a1*b1 - a2*b2)*(u+1) + a0*b0
                   = (a1*b2 + a2*b1)*(u+1) + a0*b0 *)
         eqmod (limbs 64 [L0x7fffffffc9b0r0, L0x7fffffffc9b8r0, L0x7fffffffc9c0r0,
                          L0x7fffffffc9c8r0, L0x7fffffffc9d0r0, L0x7fffffffc9d8r0] +
                limbs 64 [L0x7fffffffc9e0r0, L0x7fffffffc9e8r0, L0x7fffffffc9f0r0,
                          L0x7fffffffc9f8r0, L0x7fffffffca00r0, L0x7fffffffca08r0] * U)
               ((limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) +
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x7fffffffca10r0, L0x7fffffffca18r0, L0x7fffffffca20r0,
                          L0x7fffffffca28r0, L0x7fffffffca30r0, L0x7fffffffca38r0] +
                limbs 64 [L0x7fffffffca40r0, L0x7fffffffca48r0, L0x7fffffffca50r0,
                          L0x7fffffffca58r0, L0x7fffffffca60r0, L0x7fffffffca68r0] * U)
               ((limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U))
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod ((limbs 64 [L0x7fffffffcd10, L0x7fffffffcd18, L0x7fffffffcd20,
                           L0x7fffffffcd28, L0x7fffffffcd30, L0x7fffffffcd38,
                           L0x7fffffffcd40, L0x7fffffffcd48, L0x7fffffffcd50,
                           L0x7fffffffcd58, L0x7fffffffcd60, L0x7fffffffcd68]) +
                (limbs 64 [L0x7fffffffcd70, L0x7fffffffcd78, L0x7fffffffcd80,
                           L0x7fffffffcd88, L0x7fffffffcd90, L0x7fffffffcd98,
                           L0x7fffffffcda0, L0x7fffffffcda8, L0x7fffffffcdb0,
                           L0x7fffffffcdb8, L0x7fffffffcdc0, L0x7fffffffcdc8]) * U)
               (((limbs 64 [L0x7fffffffc9b0r0, L0x7fffffffc9b8r0, L0x7fffffffc9c0r0,
                            L0x7fffffffc9c8r0, L0x7fffffffc9d0r0, L0x7fffffffc9d8r0] +
                  limbs 64 [L0x7fffffffc9e0r0, L0x7fffffffc9e8r0, L0x7fffffffc9f0r0,
                            L0x7fffffffc9f8r0, L0x7fffffffca00r0, L0x7fffffffca08r0] * U) *
                 (limbs 64 [L0x7fffffffca10r0, L0x7fffffffca18r0, L0x7fffffffca20r0,
                            L0x7fffffffca28r0, L0x7fffffffca30r0, L0x7fffffffca38r0] +
                  limbs 64 [L0x7fffffffca40r0, L0x7fffffffca48r0, L0x7fffffffca50r0,
                            L0x7fffffffca58r0, L0x7fffffffca60r0, L0x7fffffffca68r0] * U) -
    	         (limbs 64 [a20, a21, a22, a23, a24, a25] +
                  limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                 (limbs 64 [b20, b21, b22, b23, b24, b25] +
                  limbs 64 [b30, b31, b32, b33, b34, b35] * U) -
                 (limbs 64 [a40, a41, a42, a43, a44, a45] +
                  limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                 (limbs 64 [b40, b41, b42, b43, b44, b45] +
                  limbs 64 [b50, b51, b52, b53, b54, b55] * U)) *
                (U + 1) +
                (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],

         (* ret[1] = (a0 + a1)*(b0 + b1) - a0*b0 - a1*b1 + a2*b2*(u+1)
                   = a0*b1 + a1*b0 + a2*b2*(u+1) *)
         eqmod (limbs 64 [L0x7fffffffc9b0r1, L0x7fffffffc9b8r1, L0x7fffffffc9c0r1,
                          L0x7fffffffc9c8r1, L0x7fffffffc9d0r1, L0x7fffffffc9d8r1] +
                limbs 64 [L0x7fffffffc9e0r1, L0x7fffffffc9e8r1, L0x7fffffffc9f0r1,
                          L0x7fffffffc9f8r1, L0x7fffffffca00r1, L0x7fffffffca08r1] * U)
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                limbs 64 [a20, a21, a22, a23, a24, a25] +
                limbs 64 [a30, a31, a32, a33, a34, a35] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x7fffffffca10r1, L0x7fffffffca18r1, L0x7fffffffca20r1,
                          L0x7fffffffca28r1, L0x7fffffffca30r1, L0x7fffffffca38r1] +
                limbs 64 [L0x7fffffffca40r1, L0x7fffffffca48r1, L0x7fffffffca50r1,
                          L0x7fffffffca58r1, L0x7fffffffca60r1, L0x7fffffffca68r1] * U)
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                limbs 64 [b20, b21, b22, b23, b24, b25] +
                limbs 64 [b30, b31, b32, b33, b34, b35] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x7fffffffcdd0, L0x7fffffffcdd8, L0x7fffffffcde0,
                          L0x7fffffffcde8, L0x7fffffffcdf0, L0x7fffffffcdf8,
                          L0x7fffffffce00, L0x7fffffffce08, L0x7fffffffce10,
                          L0x7fffffffce18, L0x7fffffffce20, L0x7fffffffce28] +
                limbs 64 [L0x7fffffffce30, L0x7fffffffce38, L0x7fffffffce40,
                          L0x7fffffffce48, L0x7fffffffce50, L0x7fffffffce58,
                          L0x7fffffffce60, L0x7fffffffce68, L0x7fffffffce70,
                          L0x7fffffffce78, L0x7fffffffce80, L0x7fffffffce88] * U)
               ((limbs 64 [L0x7fffffffc9b0r1, L0x7fffffffc9b8r1, L0x7fffffffc9c0r1,
                           L0x7fffffffc9c8r1, L0x7fffffffc9d0r1, L0x7fffffffc9d8r1] +
                 limbs 64 [L0x7fffffffc9e0r1, L0x7fffffffc9e8r1, L0x7fffffffc9f0r1,
                           L0x7fffffffc9f8r1, L0x7fffffffca00r1, L0x7fffffffca08r1] * U) *
                (limbs 64 [L0x7fffffffca10r1, L0x7fffffffca18r1, L0x7fffffffca20r1,
                           L0x7fffffffca28r1, L0x7fffffffca30r1, L0x7fffffffca38r1] +
                 limbs 64 [L0x7fffffffca40r1, L0x7fffffffca48r1, L0x7fffffffca50r1,
                           L0x7fffffffca58r1, L0x7fffffffca60r1, L0x7fffffffca68r1] * U) -
	        (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
                (limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                (limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U) +
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U) *
                (U + 1))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1],

         (* ret[2] = (a0 + a2)*(b0 + b2) - a0*b0 - a2*b2 + a1*b1
                   = a0*b2 + a2*b0 + a1*b1 *)
         eqmod (limbs 64 [L0x7fffffffc9b0r2, L0x7fffffffc9b8r2, L0x7fffffffc9c0r2,
                          L0x7fffffffc9c8r2, L0x7fffffffc9d0r2, L0x7fffffffc9d8r2] +
                limbs 64 [L0x7fffffffc9e0r2, L0x7fffffffc9e8r2, L0x7fffffffc9f0r2,
                          L0x7fffffffc9f8r2, L0x7fffffffca00r2, L0x7fffffffca08r2] * U)
               (limbs 64 [a00, a01, a02, a03, a04, a05] +
                limbs 64 [a10, a11, a12, a13, a14, a15] * U +
                limbs 64 [a40, a41, a42, a43, a44, a45] +
                limbs 64 [a50, a51, a52, a53, a54, a55] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x7fffffffca10r2, L0x7fffffffca18r2, L0x7fffffffca20r2,
                          L0x7fffffffca28r2, L0x7fffffffca30r2, L0x7fffffffca38r2] +
                limbs 64 [L0x7fffffffca40r2, L0x7fffffffca48r2, L0x7fffffffca50r2,
                          L0x7fffffffca58r2, L0x7fffffffca60r2, L0x7fffffffca68r2] * U)
               (limbs 64 [b00, b01, b02, b03, b04, b05] +
                limbs 64 [b10, b11, b12, b13, b14, b15] * U +
                limbs 64 [b40, b41, b42, b43, b44, b45] +
                limbs 64 [b50, b51, b52, b53, b54, b55] * U)
               [limbs 64 [m0, m1, m2, m3, m4, m5], U * U + 1],
         eqmod (limbs 64 [L0x7fffffffce90, L0x7fffffffce98, L0x7fffffffcea0,
                          L0x7fffffffcea8, L0x7fffffffceb0, L0x7fffffffceb8,
                          L0x7fffffffcec0, L0x7fffffffcec8, L0x7fffffffced0,
                          L0x7fffffffced8, L0x7fffffffcee0, L0x7fffffffcee8] +
                limbs 64 [L0x7fffffffcef0, L0x7fffffffcef8, L0x7fffffffcf00,
                          L0x7fffffffcf08, L0x7fffffffcf10, L0x7fffffffcf18,
                          L0x7fffffffcf20, L0x7fffffffcf28, L0x7fffffffcf30,
                          L0x7fffffffcf38, L0x7fffffffcf40, L0x7fffffffcf48] * U)
               ((limbs 64 [L0x7fffffffc9b0r2, L0x7fffffffc9b8r2, L0x7fffffffc9c0r2,
                           L0x7fffffffc9c8r2, L0x7fffffffc9d0r2, L0x7fffffffc9d8r2] +
                 limbs 64 [L0x7fffffffc9e0r2, L0x7fffffffc9e8r2, L0x7fffffffc9f0r2,
                           L0x7fffffffc9f8r2, L0x7fffffffca00r2, L0x7fffffffca08r2] * U) *
                (limbs 64 [L0x7fffffffca10r2, L0x7fffffffca18r2, L0x7fffffffca20r2,
                           L0x7fffffffca28r2, L0x7fffffffca30r2, L0x7fffffffca38r2] +
                 limbs 64 [L0x7fffffffca40r2, L0x7fffffffca48r2, L0x7fffffffca50r2,
                           L0x7fffffffca58r2, L0x7fffffffca60r2, L0x7fffffffca68r2] * U) -
                (limbs 64 [a00, a01, a02, a03, a04, a05] +
                 limbs 64 [a10, a11, a12, a13, a14, a15] * U) *
                (limbs 64 [b00, b01, b02, b03, b04, b05] +
                 limbs 64 [b10, b11, b12, b13, b14, b15] * U) -
                (limbs 64 [a40, a41, a42, a43, a44, a45] +
                 limbs 64 [a50, a51, a52, a53, a54, a55] * U) *
                (limbs 64 [b40, b41, b42, b43, b44, b45] +
                 limbs 64 [b50, b51, b52, b53, b54, b55] * U) +
                (limbs 64 [a20, a21, a22, a23, a24, a25] +
                 limbs 64 [a30, a31, a32, a33, a34, a35] * U) *
                (limbs 64 [b20, b21, b22, b23, b24, b25] +
                 limbs 64 [b30, b31, b32, b33, b34, b35] * U))
               [limbs 64 [0, 0, 0, 0, 0, 0, m0, m1, m2, m3, m4, m5],
                U * U + 1]
        ] prove with all cuts;


mov c00 L0x7fffffffcfa0; mov c01 L0x7fffffffcfa8; mov c02 L0x7fffffffcfb0;
mov c03 L0x7fffffffcfb8; mov c04 L0x7fffffffcfc0; mov c05 L0x7fffffffcfc8;
mov c10 L0x7fffffffcfd0; mov c11 L0x7fffffffcfd8; mov c12 L0x7fffffffcfe0;
mov c13 L0x7fffffffcfe8; mov c14 L0x7fffffffcff0; mov c15 L0x7fffffffcff8;
mov c20 L0x7fffffffd000; mov c21 L0x7fffffffd008; mov c22 L0x7fffffffd010;
mov c23 L0x7fffffffd018; mov c24 L0x7fffffffd020; mov c25 L0x7fffffffd028;
mov c30 L0x7fffffffd030; mov c31 L0x7fffffffd038; mov c32 L0x7fffffffd040;
mov c33 L0x7fffffffd048; mov c34 L0x7fffffffd050; mov c35 L0x7fffffffd058;
mov c40 L0x7fffffffd060; mov c41 L0x7fffffffd068; mov c42 L0x7fffffffd070;
mov c43 L0x7fffffffd078; mov c44 L0x7fffffffd080; mov c45 L0x7fffffffd088;
mov c50 L0x7fffffffd090; mov c51 L0x7fffffffd098; mov c52 L0x7fffffffd0a0;
mov c53 L0x7fffffffd0a8; mov c54 L0x7fffffffd0b0; mov c55 L0x7fffffffd0b8;


{
  eqmod ((limbs 64 [0, 0, 0, 0, 0, 0, c00, c01, c02, c03, c04, c05] +
          limbs 64 [0, 0, 0, 0, 0, 0, c10, c11, c12, c13, c14, c15] * U) +
         (limbs 64 [0, 0, 0, 0, 0, 0, c20, c21, c22, c23, c24, c25] +
          limbs 64 [0, 0, 0, 0, 0, 0, c30, c31, c32, c33, c34, c35] * U) * V +
         (limbs 64 [0, 0, 0, 0, 0, 0, c40, c41, c42, c43, c44, c45] +
          limbs 64 [0, 0, 0, 0, 0, 0, c50, c51, c52, c53, c54, c55] * U) * V * V)
        (((limbs 64 [a00, a01, a02, a03, a04, a05] +
           limbs 64 [a10, a11, a12, a13, a14, a15] * U) +
          (limbs 64 [a20, a21, a22, a23, a24, a25] +
           limbs 64 [a30, a31, a32, a33, a34, a35] * U) * V +
          (limbs 64 [a40, a41, a42, a43, a44, a45] +
           limbs 64 [a50, a51, a52, a53, a54, a55] * U) * V * V) *
         ((limbs 64 [b00, b01, b02, b03, b04, b05] +
           limbs 64 [b10, b11, b12, b13, b14, b15] * U) +
          (limbs 64 [b20, b21, b22, b23, b24, b25] +
           limbs 64 [b30, b31, b32, b33, b34, b35] * U) * V +
          (limbs 64 [b40, b41, b42, b43, b44, b45] +
           limbs 64 [b50, b51, b52, b53, b54, b55] * U) * V * V))
        [limbs 64 [m0, m1, m2, m3, m4, m5],
         U * U + 1, V * V * V - U - 1]
&& and [limbs 64 [c00, c01, c02, c03, c04, c05] <u
        limbs 64 [m0, m1, m2, m3, m4, m5],
        limbs 64 [c10, c11, c12, c13, c14, c15] <u
        limbs 64 [m0, m1, m2, m3, m4, m5],
        limbs 64 [c20, c21, c22, c23, c24, c25] <u
        limbs 64 [m0, m1, m2, m3, m4, m5],
        limbs 64 [c30, c31, c32, c33, c34, c35] <u
        limbs 64 [m0, m1, m2, m3, m4, m5],
        limbs 64 [c40, c41, c42, c43, c44, c45] <u
        limbs 64 [m0, m1, m2, m3, m4, m5],
        limbs 64 [c50, c51, c52, c53, c54, c55] <u
        limbs 64 [m0, m1, m2, m3, m4, m5],
        m0 = 0xb9feffffffffaaab@64, m1 = 0x1eabfffeb153ffff@64,
        m2 = 0x6730d2a0f6b0f624@64, m3 = 0x64774b84f38512bf@64,
        m4 = 0x4b1ba7b6434bacd7@64, m5 = 0x1a0111ea397fe69a@64]
}
